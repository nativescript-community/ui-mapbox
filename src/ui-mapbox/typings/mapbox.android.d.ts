/* eslint-disable @typescript-eslint/unified-signatures */
/* eslint-disable @typescript-eslint/adjacent-overload-signatures */
/* eslint-disable no-redeclare */

/// <reference path="android-declarations.d.ts"/>

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace core {
				export namespace permissions {
					export class PermissionsListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.core.permissions.PermissionsListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.core.permissions.PermissionsListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onExplanationNeeded(param0: java.util.List<string>): void;
							onPermissionResult(param0: boolean): void;
						});
						public constructor();
						public onExplanationNeeded(param0: java.util.List<string>): void;
						public onPermissionResult(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace core {
				export namespace permissions {
					export class PermissionsManager extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.core.permissions.PermissionsManager>;
						public static isBackgroundLocationPermissionGranted(context: globalAndroid.content.Context): boolean;
						public static areLocationPermissionsGranted(context: globalAndroid.content.Context): boolean;
						public constructor(listener: com.mapbox.android.core.permissions.PermissionsListener);
						public requestLocationPermissions(reques_101: globalAndroid.app.Activity): void;
						public static accuracyAuthorization(context: globalAndroid.content.Context): com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization;
						public onRequestPermissionsResult(permission: number, granted: androidNative.Array<string>, this_: androidNative.Array<number>): void;
					}
					export namespace PermissionsManager {
						export class AccuracyAuthorization {
							public static class: java.lang.Class<com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization>;
							public static NONE: com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization;
							public static PRECISE: com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization;
							public static APPROXIMATE: com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization;
							public static values(): androidNative.Array<com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(value: string): com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization;
						}
						export namespace PermissionsManager {
							export namespace Companion {
								function isBackgroundLocationPermissionGranted(context: globalAndroid.content.Context): boolean;
								function areLocationPermissionsGranted(context: globalAndroid.content.Context): boolean;
								function accuracyAuthorization(context: globalAndroid.content.Context): com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization;
								function isBackgroundLocationPermissionGranted(context: globalAndroid.content.Context): boolean;
								function areLocationPermissionsGranted(context: globalAndroid.content.Context): boolean;
								function accuracyAuthorization(context: globalAndroid.content.Context): com.mapbox.android.core.permissions.PermissionsManager.AccuracyAuthorization;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class AndroidGesturesManager extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.AndroidGesturesManager>;
					public static GESTURE_TYPE_SCROLL: number; // 0
					public static GESTURE_TYPE_SCALE: number; // 1
					public static GESTURE_TYPE_ROTATE: number; // 2
					public static GESTURE_TYPE_SHOVE: number; // 3
					public static GESTURE_TYPE_MULTI_FINGER_TAP: number; // 4
					public static GESTURE_TYPE_SINGLE_TAP_UP: number; // 5
					public static GESTURE_TYPE_LONG_PRESS: number; // 6
					public static GESTURE_TYPE_FLING: number; // 7
					public static GESTURE_TYPE_SHOW_PRESS: number; // 8
					public static GESTURE_TYPE_DOWN: number; // 9
					public static GESTURE_TYPE_DOUBLE_TAP: number; // 10
					public static GESTURE_TYPE_DOUBLE_TAP_EVENT: number; // 11
					public static GESTURE_TYPE_SINGLE_TAP_CONFIRMED: number; // 12
					public static GESTURE_TYPE_MOVE: number; // 13
					public static GESTURE_TYPE_SIDEWAYS_SHOVE: number; // 14
					public static GESTURE_TYPE_QUICK_SCALE: number; // 15
					public onTouchEvent(this_: globalAndroid.view.MotionEvent): boolean;
					public getSidewaysShoveGestureDetector(): com.mapbox.android.gestures.SidewaysShoveGestureDetector;
					public getRotateGestureDetector(): com.mapbox.android.gestures.RotateGestureDetector;
					public constructor(context: globalAndroid.content.Context, exclus_a3b: androidNative.Array<java.util.Set<java.lang.Integer>>);
					public removeStandardScaleGestureListener(): void;
					public setMutuallyExclusiveGestures(exclus_a3b: androidNative.Array<java.util.Set<java.lang.Integer>>): void;
					public constructor(context: globalAndroid.content.Context, applyD_e74: boolean);
					public removeRotateGestureListener(): void;
					public getMultiFingerTapGestureDetector(): com.mapbox.android.gestures.MultiFingerTapGestureDetector;
					public removeMultiFingerTapGestureListener(): void;
					public removeStandardGestureListener(): void;
					public setSidewaysShoveGestureListener(listener: com.mapbox.android.gestures.SidewaysShoveGestureDetector.OnSidewaysShoveGestureListener): void;
					public getStandardGestureDetector(): com.mapbox.android.gestures.StandardGestureDetector;
					public removeShoveGestureListener(): void;
					public constructor(context: globalAndroid.content.Context, exclus_a3b: java.util.List<java.util.Set<java.lang.Integer>>, applyD_e74: boolean);
					public removeMoveGestureListener(): void;
					public setMultiFingerTapGestureListener(listener: com.mapbox.android.gestures.MultiFingerTapGestureDetector.OnMultiFingerTapGestureListener): void;
					public setShoveGestureListener(listener: com.mapbox.android.gestures.ShoveGestureDetector.OnShoveGestureListener): void;
					public setMoveGestureListener(listener: com.mapbox.android.gestures.MoveGestureDetector.OnMoveGestureListener): void;
					public getMutuallyExclusiveGestures(): java.util.List<java.util.Set<java.lang.Integer>>;
					public setRotateGestureListener(listener: com.mapbox.android.gestures.RotateGestureDetector.OnRotateGestureListener): void;
					public removeSidewaysShoveGestureListener(): void;
					public setMutuallyExclusiveGestures(exclus_a3b: java.util.List<java.util.Set<java.lang.Integer>>): void;
					public getMoveGestureDetector(): com.mapbox.android.gestures.MoveGestureDetector;
					public setStandardGestureListener(listener: com.mapbox.android.gestures.StandardGestureDetector.StandardOnGestureListener): void;
					public constructor(context: globalAndroid.content.Context);
					public getDetectors(): java.util.List<com.mapbox.android.gestures.BaseGesture<any>>;
					public getStandardScaleGestureDetector(): com.mapbox.android.gestures.StandardScaleGestureDetector;
					public setStandardScaleGestureListener(listener: com.mapbox.android.gestures.StandardScaleGestureDetector.StandardOnScaleGestureListener): void;
					public getShoveGestureDetector(): com.mapbox.android.gestures.ShoveGestureDetector;
				}
				export namespace AndroidGesturesManager {
					export class GestureType extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.mapbox.android.gestures.AndroidGesturesManager.GestureType>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.AndroidGesturesManager$GestureType interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							annotationType(): java.lang.Class<any>;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
						});
						public constructor();
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export abstract class BaseGesture<L>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.BaseGesture<any>>;
					public context: globalAndroid.content.Context;
					public windowManager: globalAndroid.view.WindowManager;
					public listener: L;
					public setListener(listener: L): void;
					public getCurrentEvent(): globalAndroid.view.MotionEvent;
					public getGestureDuration(): number;
					public removeListener(): void;
					public getPreviousEvent(): globalAndroid.view.MotionEvent;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public canExecute(detector: number): boolean;
					public analyzeEvent(param0: globalAndroid.view.MotionEvent): boolean;
					public onTouchEvent(motion_1e5: globalAndroid.view.MotionEvent): boolean;
					public isEnabled(): boolean;
					public setEnabled(enabled: boolean): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class BuildConfig extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.BuildConfig>;
					public static DEBUG: boolean; // 0
					public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.android.gestures"
					public static BUILD_TYPE: string; // "release"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class Constants extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.Constants>;
					public static DEFAULT_ROTATE_ANGLE_THRESHOLD: number; // 15.3
					public static DEFAULT_SHOVE_MAX_ANGLE: number; // 20.0
					public static DEFAULT_MULTI_TAP_TIME_THRESHOLD: number; // 150
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class MoveDistancesObject extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.MoveDistancesObject>;
					public getDistanceXSinceLast(): number;
					public getCurrentX(): number;
					public addNewPosition(x: number, y: number): void;
					public getInitialY(): number;
					public getDistanceYSinceLast(): number;
					public getInitialX(): number;
					public getPreviousY(): number;
					public getPreviousX(): number;
					public getCurrentY(): number;
					public constructor(initialX: number, initialY: number);
					public getDistanceXSinceStart(): number;
					public getDistanceYSinceStart(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class MoveGestureDetector extends com.mapbox.android.gestures.ProgressiveGesture<com.mapbox.android.gestures.MoveGestureDetector.OnMoveGestureListener> {
					public static class: java.lang.Class<com.mapbox.android.gestures.MoveGestureDetector>;
					public reset(): void;
					public getMoveThreshold(): number;
					public getLastDistanceY(): number;
					public gestureStopped(): void;
					public setMoveThresholdResource(moveTh_f58: number): void;
					public getMoveObject(pointe_e3e: number): com.mapbox.android.gestures.MoveDistancesObject;
					public setMoveThreshold(moveTh_d07: number): void;
					public analyzeEvent(y: globalAndroid.view.MotionEvent): boolean;
					public getMoveThresholdRect(): globalAndroid.graphics.RectF;
					public getRequiredPointersCount(): number;
					public analyzeMovement(): boolean;
					public canExecute(invoke_dfa: number): boolean;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public setMoveThresholdRect(moveTh_149: globalAndroid.graphics.RectF): void;
					public getLastDistanceX(): number;
					public provideHandledTypes(): java.util.Set<java.lang.Integer>;
				}
				export namespace MoveGestureDetector {
					export class OnMoveGestureListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.gestures.MoveGestureDetector.OnMoveGestureListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onMoveBegin(param0: com.mapbox.android.gestures.MoveGestureDetector): boolean;
							onMove(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): boolean;
							onMoveEnd(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): void;
						});
						public constructor();
						public onMoveEnd(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): void;
						public onMove(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): boolean;
						public onMoveBegin(param0: com.mapbox.android.gestures.MoveGestureDetector): boolean;
					}
					export class SimpleOnMoveGestureListener extends java.lang.Object implements com.mapbox.android.gestures.MoveGestureDetector.OnMoveGestureListener {
						public static class: java.lang.Class<com.mapbox.android.gestures.MoveGestureDetector.SimpleOnMoveGestureListener>;
						public onMoveEnd(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): void;
						public onMoveEnd(detector: com.mapbox.android.gestures.MoveGestureDetector, velocityX: number, velocityY: number): void;
						public onMove(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): boolean;
						public constructor();
						public onMoveBegin(detector: com.mapbox.android.gestures.MoveGestureDetector): boolean;
						public onMove(detector: com.mapbox.android.gestures.MoveGestureDetector, distanceX: number, distanceY: number): boolean;
						public onMoveBegin(param0: com.mapbox.android.gestures.MoveGestureDetector): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class MultiFingerDistancesObject extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.MultiFingerDistancesObject>;
					public getCurrFingersDiffX(): number;
					public constructor(prevFi_cbf: number, prevFi_b2c: number, currFi_f0e: number, currFi_0a1: number);
					public getPrevFingersDiffXY(): number;
					public getPrevFingersDiffY(): number;
					public getPrevFingersDiffX(): number;
					public getCurrFingersDiffXY(): number;
					public getCurrFingersDiffY(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export abstract class MultiFingerGesture<L>  extends com.mapbox.android.gestures.BaseGesture<any> {
					public static class: java.lang.Class<com.mapbox.android.gestures.MultiFingerGesture<any>>;
					public isSloppyGesture(): boolean;
					public reset(): void;
					public setSpanThresholdResource(spanTh_891: number): void;
					public analyzeEvent(motion_1e5: globalAndroid.view.MotionEvent): boolean;
					public getPointersCount(): number;
					public getPreviousSpanY(firstP_372: number, second_756: number): number;
					public getSpanThreshold(): number;
					public setSpanThreshold(spanTh_f14: number): void;
					public getRequiredPointersCount(): number;
					public getPreviousSpanX(firstP_372: number, second_756: number): number;
					public analyzeMovement(): boolean;
					public canExecute(invoke_dfa: number): boolean;
					public getCurrentSpan(firstP_372: number, second_756: number): number;
					public getPreviousSpan(firstP_372: number, second_756: number): number;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public getCurrentSpanY(firstP_372: number, second_756: number): number;
					public getFocalPoint(): globalAndroid.graphics.PointF;
					public getCurrentSpanX(firstP_372: number, second_756: number): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class MultiFingerTapGestureDetector extends com.mapbox.android.gestures.MultiFingerGesture<com.mapbox.android.gestures.MultiFingerTapGestureDetector.OnMultiFingerTapGestureListener> {
					public static class: java.lang.Class<com.mapbox.android.gestures.MultiFingerTapGestureDetector>;
					public canExecute(invoke_dfa: number): boolean;
					public reset(): void;
					public setMultiFingerTapMovementThresholdResource(multiF_ae1: number): void;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public getMultiFingerTapMovementThreshold(): number;
					public getMultiFingerTapTimeThreshold(): number;
					public setMultiFingerTapTimeThreshold(multiF_a40: number): void;
					public analyzeEvent(handled: globalAndroid.view.MotionEvent): boolean;
					public setMultiFingerTapMovementThreshold(multiF_784: number): void;
				}
				export namespace MultiFingerTapGestureDetector {
					export class OnMultiFingerTapGestureListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.gestures.MultiFingerTapGestureDetector.OnMultiFingerTapGestureListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.MultiFingerTapGestureDetector$OnMultiFingerTapGestureListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onMultiFingerTap(param0: com.mapbox.android.gestures.MultiFingerTapGestureDetector, param1: number): boolean;
						});
						public constructor();
						public onMultiFingerTap(param0: com.mapbox.android.gestures.MultiFingerTapGestureDetector, param1: number): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class PermittedActionsGuard extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.PermittedActionsGuard>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class PointerDistancePair extends globalAndroid.util.Pair<java.lang.Integer,java.lang.Integer> {
					public static class: java.lang.Class<com.mapbox.android.gestures.PointerDistancePair>;
					public constructor(first: any, second: any);
					public constructor(first: java.lang.Integer, second: java.lang.Integer);
					public equals(this_: any): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export abstract class ProgressiveGesture<L>  extends com.mapbox.android.gestures.MultiFingerGesture<any> {
					public static class: java.lang.Class<com.mapbox.android.gestures.ProgressiveGesture<any>>;
					public isInProgress(): boolean;
					public interrupt(): void;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public gestureStopped(): void;
					public provideHandledTypes(): java.util.Set<java.lang.Integer>;
					public analyzeEvent(motion_1e5: globalAndroid.view.MotionEvent): boolean;
					public gestureStarted(): void;
					public setEnabled(enabled: boolean): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class RotateGestureDetector extends com.mapbox.android.gestures.ProgressiveGesture<com.mapbox.android.gestures.RotateGestureDetector.OnRotateGestureListener> {
					public static class: java.lang.Class<com.mapbox.android.gestures.RotateGestureDetector>;
					public analyzeMovement(): boolean;
					public canExecute(invoke_dfa: number): boolean;
					public reset(): void;
					public setAngleThreshold(angleT_ffb: number): void;
					public getAngleThreshold(): number;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public gestureStopped(): void;
					public provideHandledTypes(): java.util.Set<java.lang.Integer>;
					public getDeltaSinceStart(): number;
					public getDeltaSinceLast(): number;
				}
				export namespace RotateGestureDetector {
					export class OnRotateGestureListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.gestures.RotateGestureDetector.OnRotateGestureListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.RotateGestureDetector$OnRotateGestureListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onRotateBegin(param0: com.mapbox.android.gestures.RotateGestureDetector): boolean;
							onRotate(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number): boolean;
							onRotateEnd(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number, param3: number): void;
						});
						public constructor();
						public onRotateBegin(param0: com.mapbox.android.gestures.RotateGestureDetector): boolean;
						public onRotate(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number): boolean;
						public onRotateEnd(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number, param3: number): void;
					}
					export class SimpleOnRotateGestureListener extends java.lang.Object implements com.mapbox.android.gestures.RotateGestureDetector.OnRotateGestureListener {
						public static class: java.lang.Class<com.mapbox.android.gestures.RotateGestureDetector.SimpleOnRotateGestureListener>;
						public constructor();
						public onRotateBegin(param0: com.mapbox.android.gestures.RotateGestureDetector): boolean;
						public onRotateEnd(detector: com.mapbox.android.gestures.RotateGestureDetector, velocityX: number, velocityY: number, angula_13e: number): void;
						public onRotate(detector: com.mapbox.android.gestures.RotateGestureDetector, rotati_17e: number, rotati_1a0: number): boolean;
						public onRotateBegin(detector: com.mapbox.android.gestures.RotateGestureDetector): boolean;
						public onRotate(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number): boolean;
						public onRotateEnd(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number, param3: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class ShoveGestureDetector extends com.mapbox.android.gestures.ProgressiveGesture<com.mapbox.android.gestures.ShoveGestureDetector.OnShoveGestureListener> {
					public static class: java.lang.Class<com.mapbox.android.gestures.ShoveGestureDetector>;
					public isSloppyGesture(): boolean;
					public reset(): void;
					public setMaxShoveAngle(maxSho_7f1: number): void;
					public getDeltaPixelSinceLast(): number;
					public gestureStopped(): void;
					public setPixelDeltaThresholdResource(pixelD_1bf: number): void;
					public getMaxShoveAngle(): number;
					public getDeltaPixelsSinceStart(): number;
					public getPixelDeltaThreshold(): number;
					public analyzeMovement(): boolean;
					public canExecute(invoke_dfa: number): boolean;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public setPixelDeltaThreshold(pixelD_95a: number): void;
					public provideHandledTypes(): java.util.Set<java.lang.Integer>;
				}
				export namespace ShoveGestureDetector {
					export class OnShoveGestureListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.gestures.ShoveGestureDetector.OnShoveGestureListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.ShoveGestureDetector$OnShoveGestureListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onShoveBegin(param0: com.mapbox.android.gestures.ShoveGestureDetector): boolean;
							onShove(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): boolean;
							onShoveEnd(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): void;
						});
						public constructor();
						public onShove(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): boolean;
						public onShoveBegin(param0: com.mapbox.android.gestures.ShoveGestureDetector): boolean;
						public onShoveEnd(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): void;
					}
					export class SimpleOnShoveGestureListener extends java.lang.Object implements com.mapbox.android.gestures.ShoveGestureDetector.OnShoveGestureListener {
						public static class: java.lang.Class<com.mapbox.android.gestures.ShoveGestureDetector.SimpleOnShoveGestureListener>;
						public constructor();
						public onShove(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): boolean;
						public onShoveBegin(detector: com.mapbox.android.gestures.ShoveGestureDetector): boolean;
						public onShoveEnd(detector: com.mapbox.android.gestures.ShoveGestureDetector, velocityX: number, velocityY: number): void;
						public onShove(detector: com.mapbox.android.gestures.ShoveGestureDetector, deltaP_a46: number, deltaP_e4a: number): boolean;
						public onShoveBegin(param0: com.mapbox.android.gestures.ShoveGestureDetector): boolean;
						public onShoveEnd(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class SidewaysShoveGestureDetector extends com.mapbox.android.gestures.ProgressiveGesture<com.mapbox.android.gestures.SidewaysShoveGestureDetector.OnSidewaysShoveGestureListener> {
					public static class: java.lang.Class<com.mapbox.android.gestures.SidewaysShoveGestureDetector>;
					public isSloppyGesture(): boolean;
					public reset(): void;
					public setMaxShoveAngle(maxSho_7f1: number): void;
					public getDeltaPixelSinceLast(): number;
					public gestureStopped(): void;
					public setPixelDeltaThresholdResource(pixelD_1bf: number): void;
					public getMaxShoveAngle(): number;
					public getDeltaPixelsSinceStart(): number;
					public getPixelDeltaThreshold(): number;
					public analyzeMovement(): boolean;
					public canExecute(invoke_dfa: number): boolean;
					public constructor(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
					public setPixelDeltaThreshold(pixelD_95a: number): void;
					public provideHandledTypes(): java.util.Set<java.lang.Integer>;
				}
				export namespace SidewaysShoveGestureDetector {
					export class OnSidewaysShoveGestureListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.gestures.SidewaysShoveGestureDetector.OnSidewaysShoveGestureListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.SidewaysShoveGestureDetector$OnSidewaysShoveGestureListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onSidewaysShoveBegin(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector): boolean;
							onSidewaysShove(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector, param1: number, param2: number): boolean;
							onSidewaysShoveEnd(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector, param1: number, param2: number): void;
						});
						public constructor();
						public onSidewaysShoveEnd(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector, param1: number, param2: number): void;
						public onSidewaysShove(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector, param1: number, param2: number): boolean;
						public onSidewaysShoveBegin(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector): boolean;
					}
					export class SimpleOnSidewaysShoveGestureListener extends java.lang.Object implements com.mapbox.android.gestures.SidewaysShoveGestureDetector.OnSidewaysShoveGestureListener {
						public static class: java.lang.Class<com.mapbox.android.gestures.SidewaysShoveGestureDetector.SimpleOnSidewaysShoveGestureListener>;
						public onSidewaysShove(detector: com.mapbox.android.gestures.SidewaysShoveGestureDetector, deltaP_a46: number, deltaP_e4a: number): boolean;
						public constructor();
						public onSidewaysShoveEnd(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector, param1: number, param2: number): void;
						public onSidewaysShove(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector, param1: number, param2: number): boolean;
						public onSidewaysShoveBegin(detector: com.mapbox.android.gestures.SidewaysShoveGestureDetector): boolean;
						public onSidewaysShoveEnd(detector: com.mapbox.android.gestures.SidewaysShoveGestureDetector, velocityX: number, velocityY: number): void;
						public onSidewaysShoveBegin(param0: com.mapbox.android.gestures.SidewaysShoveGestureDetector): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class StandardGestureDetector extends com.mapbox.android.gestures.BaseGesture<com.mapbox.android.gestures.StandardGestureDetector.StandardOnGestureListener> {
					public static class: java.lang.Class<com.mapbox.android.gestures.StandardGestureDetector>;
					public isLongpressEnabled(): boolean;
					public setIsLongpressEnabled(enabled: boolean): void;
					public constructor(context: globalAndroid.content.Context, androi_8c3: com.mapbox.android.gestures.AndroidGesturesManager);
					public analyzeEvent(motion_1e5: globalAndroid.view.MotionEvent): boolean;
				}
				export namespace StandardGestureDetector {
					export class SimpleStandardOnGestureListener extends java.lang.Object implements com.mapbox.android.gestures.StandardGestureDetector.StandardOnGestureListener {
						public static class: java.lang.Class<com.mapbox.android.gestures.StandardGestureDetector.SimpleStandardOnGestureListener>;
						public constructor();
						public onDoubleTapEvent(e: globalAndroid.view.MotionEvent): boolean;
						public onFling(e1: globalAndroid.view.MotionEvent, e2: globalAndroid.view.MotionEvent, velocityX: number, velocityY: number): boolean;
						public onSingleTapUp(e: globalAndroid.view.MotionEvent): boolean;
						public onDown(param0: globalAndroid.view.MotionEvent): boolean;
						public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
						public onSingleTapConfirmed(e: globalAndroid.view.MotionEvent): boolean;
						public onLongPress(e: globalAndroid.view.MotionEvent): void;
						public onDoubleTap(e: globalAndroid.view.MotionEvent): boolean;
						public onScroll(e1: globalAndroid.view.MotionEvent, e2: globalAndroid.view.MotionEvent, distanceX: number, distanceY: number): boolean;
						public onSingleTapConfirmed(param0: globalAndroid.view.MotionEvent): boolean;
						public onShowPress(param0: globalAndroid.view.MotionEvent): void;
						public onScroll(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
						public onSingleTapUp(param0: globalAndroid.view.MotionEvent): boolean;
						public onDoubleTapEvent(param0: globalAndroid.view.MotionEvent): boolean;
						public onDown(e: globalAndroid.view.MotionEvent): boolean;
						public onFling(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
						public onLongPress(param0: globalAndroid.view.MotionEvent): void;
						public onShowPress(e: globalAndroid.view.MotionEvent): void;
					}
					export class StandardOnGestureListener extends java.lang.Object implements globalAndroid.view.GestureDetector.OnGestureListener, globalAndroid.view.GestureDetector.OnDoubleTapListener {
						public static class: java.lang.Class<com.mapbox.android.gestures.StandardGestureDetector.StandardOnGestureListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.StandardGestureDetector$StandardOnGestureListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onDown(param0: globalAndroid.view.MotionEvent): boolean;
							onFling(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							onLongPress(param0: globalAndroid.view.MotionEvent): void;
							onScroll(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							onShowPress(param0: globalAndroid.view.MotionEvent): void;
							onSingleTapUp(param0: globalAndroid.view.MotionEvent): boolean;
							onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
							onDoubleTapEvent(param0: globalAndroid.view.MotionEvent): boolean;
							onSingleTapConfirmed(param0: globalAndroid.view.MotionEvent): boolean;
						});
						public constructor();
						public onDown(param0: globalAndroid.view.MotionEvent): boolean;
						public onSingleTapConfirmed(param0: globalAndroid.view.MotionEvent): boolean;
						public onShowPress(param0: globalAndroid.view.MotionEvent): void;
						public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
						public onScroll(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
						public onSingleTapUp(param0: globalAndroid.view.MotionEvent): boolean;
						public onDoubleTapEvent(param0: globalAndroid.view.MotionEvent): boolean;
						public onFling(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
						public onLongPress(param0: globalAndroid.view.MotionEvent): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class StandardScaleGestureDetector extends com.mapbox.android.gestures.ProgressiveGesture<com.mapbox.android.gestures.StandardScaleGestureDetector.StandardOnScaleGestureListener> {
					public static class: java.lang.Class<com.mapbox.android.gestures.StandardScaleGestureDetector>;
					public getCurrentSpan(): number;
					public getPreviousSpanX(): number;
					public getStartSpan(): number;
					public gestureStopped(): void;
					public getStartSpanY(): number;
					public getStartSpanX(): number;
					public getRequiredPointersCount(): number;
					public getSpanSinceStartThreshold(): number;
					public getPreviousSpanX(firstP_372: number, second_756: number): number;
					public getPreviousSpan(firstP_372: number, second_756: number): number;
					public getScaleFactor(): number;
					public getCurrentSpanY(firstP_372: number, second_756: number): number;
					public getCurrentSpanX(): number;
					public provideHandledTypes(): java.util.Set<java.lang.Integer>;
					public constructor(context: globalAndroid.content.Context, androi_8c3: com.mapbox.android.gestures.AndroidGesturesManager);
					public getCurrentSpanX(firstP_372: number, second_756: number): number;
					public reset(): void;
					public isSloppyGesture(): boolean;
					public setSpanSinceStartThreshold(spanSi_52e: number): void;
					public getCurrentSpanY(): number;
					public analyzeEvent(motion_1e5: globalAndroid.view.MotionEvent): boolean;
					public isScalingOut(): boolean;
					public getPreviousSpanY(firstP_372: number, second_756: number): number;
					public analyzeMovement(): boolean;
					public getCurrentSpan(firstP_372: number, second_756: number): number;
					public getPreviousSpan(): number;
					public getPreviousSpanY(): number;
					public setSpanSinceStartThresholdResource(spanSi_8db: number): void;
				}
				export namespace StandardScaleGestureDetector {
					export class SimpleStandardOnScaleGestureListener extends java.lang.Object implements com.mapbox.android.gestures.StandardScaleGestureDetector.StandardOnScaleGestureListener {
						public static class: java.lang.Class<com.mapbox.android.gestures.StandardScaleGestureDetector.SimpleStandardOnScaleGestureListener>;
						public onScaleEnd(param0: com.mapbox.android.gestures.StandardScaleGestureDetector, param1: number, param2: number): void;
						public constructor();
						public onScaleEnd(detector: com.mapbox.android.gestures.StandardScaleGestureDetector, velocityX: number, velocityY: number): void;
						public onScaleBegin(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
						public onScale(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
						public onScale(detector: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
						public onScaleBegin(detector: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
					}
					export class StandardOnScaleGestureListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.android.gestures.StandardScaleGestureDetector.StandardOnScaleGestureListener>;
						/**
						 * Constructs a new instance of the com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onScaleBegin(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
							onScale(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
							onScaleEnd(param0: com.mapbox.android.gestures.StandardScaleGestureDetector, param1: number, param2: number): void;
						});
						public constructor();
						public onScaleEnd(param0: com.mapbox.android.gestures.StandardScaleGestureDetector, param1: number, param2: number): void;
						public onScaleBegin(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
						public onScale(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace android {
			export namespace gestures {
				export class Utils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.android.gestures.Utils>;
					public static pxToDp(px: number): number;
					public static dpToPx(dp: number): number;
					public static getRawX(event: globalAndroid.view.MotionEvent, pointe_e3e: number): number;
					public constructor();
					public static determineFocalPoint(i: globalAndroid.view.MotionEvent): globalAndroid.graphics.PointF;
					public static getRawY(event: globalAndroid.view.MotionEvent, pointe_e3e: number): number;
					public static pxToMm(px: number, context: globalAndroid.content.Context): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace annotation {
			export class MapboxAnnotationConstants extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.annotation.MapboxAnnotationConstants>;
				public static MODULE_PROVIDER_PACKAGE: string; // "com.mapbox.module"
				public static MODULE_CONFIGURATION_CLASS_NAME_FORMAT: string; // "Mapbox_%sModuleConfiguration"
				public static MODULE_CONFIGURATION_ENABLE_CONFIGURATION: string; // "enableConfiguration"
				public static MODULE_CONFIGURATION_DISABLED_CLASS: string; // "implClass"
				public static MODULE_CONFIGURATION_PROVIDER_CLASS_NAME: string; // "ModuleProvider"
				public static MODULE_CONFIGURATION_PROVIDER_VARIABLE_NAME: string; // "moduleProvider"
				public static MODULE_CONFIGURATION_PROVIDER_METHOD_FORMAT: string; // "create%s"
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace annotation {
			export class MapboxDelicateApi extends java.lang.Object implements java.lang.annotation.Annotation {
				public static class: java.lang.Class<com.mapbox.annotation.MapboxDelicateApi>;
				/**
				 * Constructs a new instance of the com.mapbox.annotation.MapboxDelicateApi interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					annotationType(): java.lang.Class<any>;
					equals(param0: any): boolean;
					hashCode(): number;
					toString(): string;
				});
				public constructor();
				public hashCode(): number;
				public equals(param0: any): boolean;
				public annotationType(): java.lang.Class<any>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace annotation {
			export class MapboxExperimental extends java.lang.Object implements java.lang.annotation.Annotation {
				public static class: java.lang.Class<com.mapbox.annotation.MapboxExperimental>;
				/**
				 * Constructs a new instance of the com.mapbox.annotation.MapboxExperimental interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					annotationType(): java.lang.Class<any>;
					equals(param0: any): boolean;
					hashCode(): number;
					toString(): string;
				});
				public constructor();
				public hashCode(): number;
				public equals(param0: any): boolean;
				public annotationType(): java.lang.Class<any>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace annotation {
			export namespace module {
				export class MapboxModule extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.mapbox.annotation.module.MapboxModule>;
					/**
					 * Constructs a new instance of the com.mapbox.annotation.module.MapboxModule interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						type(): com.mapbox.annotation.module.MapboxModuleType;
						enableConfiguration(): boolean;
						annotationType(): java.lang.Class<any>;
						equals(param0: any): boolean;
						hashCode(): number;
						toString(): string;
					});
					public constructor();
					public equals(param0: any): boolean;
					public toString(): string;
					public type(): com.mapbox.annotation.module.MapboxModuleType;
					public enableConfiguration(): boolean;
					public annotationType(): java.lang.Class<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace annotation {
			export namespace module {
				export class MapboxModuleType {
					public static class: java.lang.Class<com.mapbox.annotation.module.MapboxModuleType>;
					public static CommonLibraryLoader: com.mapbox.annotation.module.MapboxModuleType;
					public static CommonLogger: com.mapbox.annotation.module.MapboxModuleType;
					public static MapTelemetry: com.mapbox.annotation.module.MapboxModuleType;
					public static NavigationTripNotification: com.mapbox.annotation.module.MapboxModuleType;
					public getInterfaceClassName(): string;
					public getInterfacePackage(): string;
					public getSimplifiedName(): string;
					public static valueOf(value: string): com.mapbox.annotation.module.MapboxModuleType;
					public static values(): androidNative.Array<com.mapbox.annotation.module.MapboxModuleType>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace base {
			export namespace common {
				export namespace logger {
					export class Logger extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.base.common.logger.Logger>;
						/**
						 * Constructs a new instance of the com.mapbox.base.common.logger.Logger interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							v(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
							d(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
							i(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
							w(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
							e(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
						});
						public constructor();
						public v(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
						public i(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
						public e(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
						public w(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
						public d(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
					}
					export namespace Logger {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.base.common.logger.Logger.DefaultImpls>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace base {
			export namespace common {
				export namespace logger {
					export namespace model {
						export class Message extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.base.common.logger.model.Message>;
							public constructor(message: string);
							public hashCode(): number;
							public equals(other: any): boolean;
							public toString(): string;
							public copy(message: string): com.mapbox.base.common.logger.model.Message;
							public getMessage(): string;
							public component1(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace base {
			export namespace common {
				export namespace logger {
					export namespace model {
						export class Tag extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.base.common.logger.model.Tag>;
							public hashCode(): number;
							public equals(other: any): boolean;
							public copy(tag: string): com.mapbox.base.common.logger.model.Tag;
							public toString(): string;
							public constructor(tag: string);
							public getTag(): string;
							public component1(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class ArrayUtils extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.ArrayUtils>;
				public static convert(i: androidNative.Array<number>): java.util.List<java.lang.Short>;
				public static convert(arr: androidNative.Array<any>): java.util.List<any>;
				public static convert(i: androidNative.Array<boolean>): java.util.List<java.lang.Boolean>;
				public static convert(i: androidNative.Array<number>): java.util.List<java.lang.Long>;
				public static convert(i: androidNative.Array<number>): java.util.List<java.lang.Double>;
				public static convert(i: androidNative.Array<number>): java.util.List<java.lang.Byte>;
				public static convert(i: androidNative.Array<number>): java.util.List<java.lang.Integer>;
				public static convert(i: androidNative.Array<number>): java.util.List<java.lang.Float>;
				public static convertListToArray(ls: java.util.List<any>): androidNative.Array<any>;
				public static convert(i: androidNative.Array<string>): java.util.List<java.lang.Character>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class Cleaner extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.Cleaner>;
				public static create(): com.mapbox.bindgen.Cleaner;
				public register(obj: any, action: java.lang.Runnable): void;
			}
			export namespace Cleaner {
				export class CleanerImpl extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.bindgen.Cleaner.CleanerImpl>;
					public constructor();
					public run(): void;
					public register(obj: any, cleanA_e74: java.lang.Runnable): void;
					public start(): void;
				}
				export class Finalizer extends java.lang.ref.PhantomReference<any> {
					public static class: java.lang.Class<com.mapbox.bindgen.Cleaner.Finalizer>;
					public finalizeResources(): void;
					public constructor(referent: any, queue: java.lang.ref.ReferenceQueue<any>, cleanable: java.lang.Runnable);
					public constructor(referent: any, q: java.lang.ref.ReferenceQueue<any>);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class CleanerService extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.CleanerService>;
				public static register(obj: any, native_95c: java.lang.Runnable): void;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class DataRef extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.DataRef>;
				public static allocateNative(size: number): com.mapbox.bindgen.DataRef;
				public constructor(buffer: java.nio.ByteBuffer);
				public getBuffer(): java.nio.ByteBuffer;
			}
			export namespace DataRef {
				export class DataRefPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.bindgen.DataRef.DataRefPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class Expected<E, V>  extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.Expected<any,any>>;
				public mapValue(valueFun: com.mapbox.bindgen.Expected.Transformer<any,any>): com.mapbox.bindgen.Expected<any,any>;
				public onValue(action: com.mapbox.bindgen.Expected.Action<V>): com.mapbox.bindgen.Expected<E,V>;
				public fold(errorFun: com.mapbox.bindgen.Expected.Transformer<any,any>, valueFun: com.mapbox.bindgen.Expected.Transformer<any,any>): any;
				public onError(action: com.mapbox.bindgen.Expected.Action<E>): com.mapbox.bindgen.Expected<E,V>;
				public isError(): boolean;
				public getValue(): V;
				public getError(): E;
				public isValue(): boolean;
				public map(errorFun: com.mapbox.bindgen.Expected.Transformer<any,any>, valueFun: com.mapbox.bindgen.Expected.Transformer<any,any>): com.mapbox.bindgen.Expected<any,any>;
				public mapError(errorFun: com.mapbox.bindgen.Expected.Transformer<any,any>): com.mapbox.bindgen.Expected<any,any>;
				public getValueOrElse(defaultFun: com.mapbox.bindgen.Expected.Transformer<E,V>): V;
			}
			export namespace Expected {
				export class Action<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.bindgen.Expected.Action<any>>;
					/**
					 * Constructs a new instance of the com.mapbox.bindgen.Expected$Action interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: T): void;
					});
					public constructor();
					public run(param0: T): void;
				}
				export class Transformer<T, R>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.bindgen.Expected.Transformer<any,any>>;
					/**
					 * Constructs a new instance of the com.mapbox.bindgen.Expected$Transformer interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						invoke(param0: T): R;
					});
					public constructor();
					public invoke(param0: T): R;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class ExpectedFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.ExpectedFactory>;
				public static createValue(value: any): com.mapbox.bindgen.Expected<any,any>;
				public static createNone(): com.mapbox.bindgen.Expected<any,any>;
				public static createError(error: any): com.mapbox.bindgen.Expected<any,any>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class HashMapKeyValueExtractor extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.HashMapKeyValueExtractor>;
				public getKeys(): androidNative.Array<any>;
				public getValues(): androidNative.Array<any>;
				public constructor(this_: java.util.HashMap<any,any>);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class None extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.None>;
				public static getInstance(): com.mapbox.bindgen.None;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class PartialEq extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.PartialEq>;
				public static compare(f1: number, f2: number): boolean;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class RecordUtils extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.RecordUtils>;
				public static fieldToString(bytes: any): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class Size extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.Size>;
				public getWidth(): number;
				public getHeight(): number;
				public equals(this_: any): boolean;
				public hashCode(): number;
				public constructor(width: number, height: number);
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class Value extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.Value>;
				public static valueOf(str: string): com.mapbox.bindgen.Value;
				public constructor(str: string);
				public static valueOf(map: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Value;
				public constructor(map: java.util.HashMap<string,com.mapbox.bindgen.Value>);
				public getContents(): any;
				public toString(): string;
				public equals(otherClass: any): boolean;
				public toJson(): string;
				public static valueOf(array: java.util.List<com.mapbox.bindgen.Value>): com.mapbox.bindgen.Value;
				public static fromJson(e: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public constructor(l: number);
				public static valueOf(l: number): com.mapbox.bindgen.Value;
				public constructor(d: number);
				public static nullValue(): com.mapbox.bindgen.Value;
				public constructor(b: boolean);
				public constructor(array: java.util.List<com.mapbox.bindgen.Value>);
				public static valueOf(b: boolean): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public static valueOf(d: number): com.mapbox.bindgen.Value;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace bindgen {
			export class VariantOptionalTypeWrapper extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.bindgen.VariantOptionalTypeWrapper>;
				public constructor(value: any);
				public getValue(): any;
				public static valueOf(value: any): com.mapbox.bindgen.VariantOptionalTypeWrapper;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class AccessTokenInitializer extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.AccessTokenInitializer>;
				public static INSTANCE: com.mapbox.common.AccessTokenInitializer;
				public static setAllowInitialization(i_a_wi_af2: boolean): void;
				public static getAccessTokenFromEnv(): string;
				/** @deprecated */
				public static readEnvAndSetAccessToken(): void;
				public static isAccessTokenInitializationAllowed(): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class AmbientCacheClearingCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.AmbientCacheClearingCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.AmbientCacheClearingCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.CacheClearingError,java.lang.Long>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.CacheClearingError,java.lang.Long>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class AmbientCacheClearingCallbackNative extends java.lang.Object implements com.mapbox.common.AmbientCacheClearingCallback {
				public static class: java.lang.Class<com.mapbox.common.AmbientCacheClearingCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.CacheClearingError,java.lang.Long>): void;
			}
			export namespace AmbientCacheClearingCallbackNative {
				export class AmbientCacheClearingCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.AmbientCacheClearingCallbackNative.AmbientCacheClearingCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BaseLogger extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BaseLogger>;
				public static INSTANCE: com.mapbox.common.BaseLogger;
				public static debug(tag: string, message: string): void;
				public static warning(tag: string, message: string): void;
				public static info(tag: string, message: string): void;
				public static error(tag: string, message: string): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export abstract class BaseMapboxInitializer<T>  extends androidx.startup.Initializer<java.lang.Boolean> {
				public static class: java.lang.Class<com.mapbox.common.BaseMapboxInitializer<any>>;
				public create(initia_703: globalAndroid.content.Context): java.lang.Boolean;
				public static init(initia_a8d: java.lang.Class<any>): void;
				public static getInitializersMap(): java.util.HashMap<java.lang.Class<any>,com.mapbox.common.InitializerData>;
				public dependencies(): java.util.List<java.lang.Class<any>>;
				public constructor();
				public getInitializerClass(): java.lang.Class<any>;
			}
			export namespace BaseMapboxInitializer {
				export namespace BaseMapboxInitializer {
					export namespace Companion {
						function getInitializersMap(): java.util.HashMap<java.lang.Class<any>,com.mapbox.common.InitializerData>;
						function init(initia_a8d: java.lang.Class<any>): void;
						function getInitializersMap(): java.util.HashMap<java.lang.Class<any>,com.mapbox.common.InitializerData>;
						function init(initia_a8d: java.lang.Class<any>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BatteryChargingStatusCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BatteryChargingStatusCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.BatteryChargingStatusCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,java.lang.Boolean>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,java.lang.Boolean>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BatteryChargingStatusCallbackNative extends java.lang.Object implements com.mapbox.common.BatteryChargingStatusCallback {
				public static class: java.lang.Class<com.mapbox.common.BatteryChargingStatusCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,java.lang.Boolean>): void;
			}
			export namespace BatteryChargingStatusCallbackNative {
				export class BatteryChargingStatusCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.BatteryChargingStatusCallbackNative.BatteryChargingStatusCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BatteryMonitorFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BatteryMonitorFactory>;
				public peer: number;
				public static setUserDefined(param0: com.mapbox.common.BatteryMonitorInterface): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static reset(): void;
				public static getOrCreate(): com.mapbox.common.BatteryMonitorInterface;
			}
			export namespace BatteryMonitorFactory {
				export class BatteryMonitorFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.BatteryMonitorFactory.BatteryMonitorFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BatteryMonitorInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BatteryMonitorInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.BatteryMonitorInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getBatteryChargingStatus(param0: com.mapbox.common.BatteryChargingStatusCallback): void;
					registerObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
					unregisterObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
				});
				public constructor();
				public registerObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
				public unregisterObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
				public getBatteryChargingStatus(param0: com.mapbox.common.BatteryChargingStatusCallback): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BatteryMonitorInterfaceNative extends java.lang.Object implements com.mapbox.common.BatteryMonitorInterface {
				public static class: java.lang.Class<com.mapbox.common.BatteryMonitorInterfaceNative>;
				public peer: number;
				public registerObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
				public static cleanNativePeer(param0: number): void;
				public unregisterObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
				public getBatteryChargingStatus(param0: com.mapbox.common.BatteryChargingStatusCallback): void;
				public constructor(peer: number);
			}
			export namespace BatteryMonitorInterfaceNative {
				export class BatteryMonitorInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.BatteryMonitorInterfaceNative.BatteryMonitorInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BatteryMonitorObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BatteryMonitorObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.BatteryMonitorObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onBatteryChargingStatusChanged(param0: boolean): void;
					onBatteryStatusError(param0: string): void;
				});
				public constructor();
				public onBatteryStatusError(param0: string): void;
				public onBatteryChargingStatusChanged(param0: boolean): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BatteryMonitorObserverNative extends java.lang.Object implements com.mapbox.common.BatteryMonitorObserver {
				public static class: java.lang.Class<com.mapbox.common.BatteryMonitorObserverNative>;
				public peer: number;
				public onBatteryStatusError(param0: string): void;
				public static cleanNativePeer(param0: number): void;
				public onBatteryChargingStatusChanged(param0: boolean): void;
				public constructor(peer: number);
			}
			export namespace BatteryMonitorObserverNative {
				export class BatteryMonitorObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.BatteryMonitorObserverNative.BatteryMonitorObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BillingService extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BillingService>;
				public peer: number;
				public stopBillingSession(param0: com.mapbox.common.SessionSKUIdentifier): void;
				public triggerUserBillingEvent(param0: com.mapbox.common.SdkInformation, param1: com.mapbox.common.UserSKUIdentifier, param2: com.mapbox.common.OnBillingServiceError): void;
				public triggerMaploadBillingEvent(param0: com.mapbox.common.MaploadSKUIdentifier, param1: com.mapbox.common.OnBillingServiceError): void;
				public getSessionSKUTokenIfValid(param0: com.mapbox.common.SessionSKUIdentifier): string;
				public static cleanNativePeer(param0: number): void;
				public resumeBillingSession(param0: com.mapbox.common.SessionSKUIdentifier, param1: com.mapbox.common.OnBillingServiceError): void;
				public getUserSKUToken(param0: com.mapbox.common.UserSKUIdentifier): string;
				public beginBillingSession(param0: com.mapbox.common.SdkInformation, param1: com.mapbox.common.SessionSKUIdentifier, param2: com.mapbox.common.OnBillingServiceError, param3: number): void;
				public constructor(peer: number);
				public pauseBillingSession(param0: com.mapbox.common.SessionSKUIdentifier): void;
				public getSessionStatus(param0: com.mapbox.common.SessionSKUIdentifier): com.mapbox.common.BillingSessionStatus;
			}
			export namespace BillingService {
				export class BillingServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.BillingService.BillingServicePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BillingServiceError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.BillingServiceError>;
				public constructor(code: com.mapbox.common.BillingServiceErrorCode, message: string);
				public hashCode(): number;
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
				public getCode(): com.mapbox.common.BillingServiceErrorCode;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BillingServiceErrorCode {
				public static class: java.lang.Class<com.mapbox.common.BillingServiceErrorCode>;
				public static TOKEN_VALIDATION_FAILED: com.mapbox.common.BillingServiceErrorCode;
				public static RESUME_FAILED: com.mapbox.common.BillingServiceErrorCode;
				public static valueOf(name: string): com.mapbox.common.BillingServiceErrorCode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.BillingServiceErrorCode>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BillingServiceFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BillingServiceFactory>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static reset(): void;
				public static getInstance(): com.mapbox.common.BillingService;
			}
			export namespace BillingServiceFactory {
				export class BillingServiceFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.BillingServiceFactory.BillingServiceFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BillingSessionStatus {
				public static class: java.lang.Class<com.mapbox.common.BillingSessionStatus>;
				public static SESSION_ACTIVE: com.mapbox.common.BillingSessionStatus;
				public static SESSION_PAUSED: com.mapbox.common.BillingSessionStatus;
				public static NO_SESSION: com.mapbox.common.BillingSessionStatus;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.BillingSessionStatus>;
				public static valueOf(name: string): com.mapbox.common.BillingSessionStatus;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Buffer extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.Buffer>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public getData(): com.mapbox.bindgen.DataRef;
				public constructor(peer: number);
				public constructor(data: com.mapbox.bindgen.DataRef);
			}
			export namespace Buffer {
				export class BufferPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.Buffer.BufferPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class BuildConfig extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.BuildConfig>;
				public static DEBUG: boolean; // 0
				public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.common"
				public static BUILD_TYPE: string; // "release"
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class CacheClearingError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.CacheClearingError>;
				public constructor(type: com.mapbox.common.CacheClearingErrorType, message: string);
				public getType(): com.mapbox.common.CacheClearingErrorType;
				public hashCode(): number;
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class CacheClearingErrorType {
				public static class: java.lang.Class<com.mapbox.common.CacheClearingErrorType>;
				public static DATABASE_ERROR: com.mapbox.common.CacheClearingErrorType;
				public static OTHER_ERROR: com.mapbox.common.CacheClearingErrorType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.CacheClearingErrorType>;
				public static valueOf(name: string): com.mapbox.common.CacheClearingErrorType;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Cancelable extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.Cancelable>;
				/**
				 * Constructs a new instance of the com.mapbox.common.Cancelable interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					cancel(): void;
				});
				public constructor();
				public cancel(): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class CancelableNative extends java.lang.Object implements com.mapbox.common.Cancelable {
				public static class: java.lang.Class<com.mapbox.common.CancelableNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public cancel(): void;
				public constructor(peer: number);
			}
			export namespace CancelableNative {
				export class CancelablePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.CancelableNative.CancelablePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class CleanupManager extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.CleanupManager>;
				public peer: number;
				public static cleanup(): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace CleanupManager {
				export class CleanupManagerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.CleanupManager.CleanupManagerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationOptions>;
				public constructor(data: com.mapbox.bindgen.Value, digest: string, source: com.mapbox.common.ConfigurationOptionsSource);
				public getData(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public getDigest(): string;
				public toString(): string;
				public getSource(): com.mapbox.common.ConfigurationOptionsSource;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationOptionsSource {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationOptionsSource>;
				public static LOCAL: com.mapbox.common.ConfigurationOptionsSource;
				public static SERVER: com.mapbox.common.ConfigurationOptionsSource;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.ConfigurationOptionsSource;
				public static values(): androidNative.Array<com.mapbox.common.ConfigurationOptionsSource>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationService extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationService>;
				public peer: number;
				public getConfig(param0: com.mapbox.common.ConfigurationServiceGetConfigCallback): void;
				public registerObserver(param0: com.mapbox.common.ConfigurationServiceObserver): void;
				public static cleanNativePeer(param0: number): void;
				public static getOrCreate(param0: com.mapbox.common.EventsServerOptions): com.mapbox.common.ConfigurationService;
				public unregisterObserver(param0: com.mapbox.common.ConfigurationServiceObserver): void;
				public constructor(peer: number);
			}
			export namespace ConfigurationService {
				export class ConfigurationServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ConfigurationService.ConfigurationServicePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationServiceError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceError>;
				public constructor(code: com.mapbox.common.ConfigurationServiceErrorCode, message: string);
				public getCode(): com.mapbox.common.ConfigurationServiceErrorCode;
				public hashCode(): number;
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationServiceErrorCode {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceErrorCode>;
				public static NO_TOKEN: com.mapbox.common.ConfigurationServiceErrorCode;
				public static NO_CONFIGURATION: com.mapbox.common.ConfigurationServiceErrorCode;
				public static HTTP_ERROR: com.mapbox.common.ConfigurationServiceErrorCode;
				public static MALFORMED_CONFIGURATION: com.mapbox.common.ConfigurationServiceErrorCode;
				public static IOERROR: com.mapbox.common.ConfigurationServiceErrorCode;
				public static UPDATE_IN_PROGRESS: com.mapbox.common.ConfigurationServiceErrorCode;
				public static UNEXPECTED_HTTPRESPONSE_CODE: com.mapbox.common.ConfigurationServiceErrorCode;
				public static EXPIRED_CONFIGURATION: com.mapbox.common.ConfigurationServiceErrorCode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.ConfigurationServiceErrorCode>;
				public static valueOf(name: string): com.mapbox.common.ConfigurationServiceErrorCode;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationServiceGetConfigCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceGetConfigCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ConfigurationServiceGetConfigCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.ConfigurationServiceError,com.mapbox.common.ConfigurationOptions>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.ConfigurationServiceError,com.mapbox.common.ConfigurationOptions>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationServiceGetConfigCallbackNative extends java.lang.Object implements com.mapbox.common.ConfigurationServiceGetConfigCallback {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceGetConfigCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.ConfigurationServiceError,com.mapbox.common.ConfigurationOptions>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace ConfigurationServiceGetConfigCallbackNative {
				export class ConfigurationServiceGetConfigCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceGetConfigCallbackNative.ConfigurationServiceGetConfigCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationServiceObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ConfigurationServiceObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					didStartUpdate(): void;
					didUpdate(param0: com.mapbox.common.ConfigurationOptions): void;
					didEncounterError(param0: com.mapbox.common.ConfigurationServiceError): void;
				});
				public constructor();
				public didStartUpdate(): void;
				public didEncounterError(param0: com.mapbox.common.ConfigurationServiceError): void;
				public didUpdate(param0: com.mapbox.common.ConfigurationOptions): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConfigurationServiceObserverNative extends java.lang.Object implements com.mapbox.common.ConfigurationServiceObserver {
				public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceObserverNative>;
				public peer: number;
				public didStartUpdate(): void;
				public didEncounterError(param0: com.mapbox.common.ConfigurationServiceError): void;
				public static cleanNativePeer(param0: number): void;
				public didUpdate(param0: com.mapbox.common.ConfigurationOptions): void;
				public constructor(peer: number);
			}
			export namespace ConfigurationServiceObserverNative {
				export class ConfigurationServiceObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ConfigurationServiceObserverNative.ConfigurationServiceObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ConnectionChangeCallback extends globalAndroid.net.ConnectivityManager.NetworkCallback {
				public static class: java.lang.Class<com.mapbox.common.ConnectionChangeCallback>;
				public onCapabilitiesChanged(network: globalAndroid.net.Network, networ_4df: globalAndroid.net.NetworkCapabilities): void;
				public onAvailable(network: globalAndroid.net.Network): void;
				public constructor(flags: number);
				public constructor(reacha_50e: com.mapbox.common.Reachability);
				public onUnavailable(): void;
				public constructor();
				public onLost(network: globalAndroid.net.Network): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class CoreInitializer extends androidx.startup.Initializer<com.mapbox.common.MapboxSDKCommon> {
				public static class: java.lang.Class<com.mapbox.common.CoreInitializer>;
				public create(token: globalAndroid.content.Context): com.mapbox.common.MapboxSDKCommon;
				public dependencies(): java.util.List<java.lang.Class<any>>;
				public constructor();
				public static createSystemInformation(): com.mapbox.common.SystemInformation;
			}
			export namespace CoreInitializer {
				export namespace CoreInitializer {
					export namespace Companion {
						function createSystemInformation(): com.mapbox.common.SystemInformation;
						function createSystemInformation(): com.mapbox.common.SystemInformation;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class CrashEvent extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.CrashEvent>;
				public getCustomData(): java.util.HashMap<string,string>;
				public getIsSilent(): boolean;
				public hashCode(): number;
				public getThreadDetails(): string;
				public getAppStartDate(): string;
				public toString(): string;
				public constructor(isSilent: boolean, thread_749: string, appSta_3f4: string, customData: java.util.HashMap<string,string>);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class DeferredDeliveryOverflowPolicy {
				public static class: java.lang.Class<com.mapbox.common.DeferredDeliveryOverflowPolicy>;
				public static DISCARD_INCOMING: com.mapbox.common.DeferredDeliveryOverflowPolicy;
				public static RETIRE_OLDEST: com.mapbox.common.DeferredDeliveryOverflowPolicy;
				public static values(): androidNative.Array<com.mapbox.common.DeferredDeliveryOverflowPolicy>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.DeferredDeliveryOverflowPolicy;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class DeferredDeliveryRequestOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.DeferredDeliveryRequestOptions>;
				public getTtl(): number;
				public constructor(ttl: number);
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class DeferredDeliveryServiceOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.DeferredDeliveryServiceOptions>;
				public getStorageOverflowPolicy(): com.mapbox.common.DeferredDeliveryOverflowPolicy;
				public getPersistentQueueOverflowPolicy(): com.mapbox.common.DeferredDeliveryOverflowPolicy;
				public getMemoryQueueOverflowPolicy(): com.mapbox.common.DeferredDeliveryOverflowPolicy;
				public getMemoryQueueFlushTimeout(): number;
				public getPersistentQueueMaxLength(): java.lang.Long;
				public getBatchFlushTimeout(): number;
				public getMaxStorageUsage(): java.lang.Long;
				public toString(): string;
				public equals(object: any): boolean;
				public getMemoryQueueMaxLength(): java.lang.Long;
				public getBatchLengthToFlush(): number;
				public constructor(batchL_c90: number, batchF_df2: number, memory_d2d: java.lang.Long, memory_006: number, memory_21c: number, memory_e99: com.mapbox.common.DeferredDeliveryOverflowPolicy, persis_807: java.lang.Long, persis_e3c: number, persis_c6e: number, persis_dbf: com.mapbox.common.DeferredDeliveryOverflowPolicy, dataSt_ced: string, maxSto_63d: java.lang.Long, storag_dae: com.mapbox.common.DeferredDeliveryOverflowPolicy);
				public hashCode(): number;
				public constructor(memory_d2d: java.lang.Long, persis_807: java.lang.Long, dataSt_ced: string, maxSto_63d: java.lang.Long);
				public getPersistentQueueFlushTimeout(): number;
				public getMemoryQueueLengthToFlush(): number;
				public getPersistentQueueLengthToFlush(): number;
				public getDataStoragePath(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class DownloadOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.DownloadOptions>;
				public getLocalPath(): string;
				public hashCode(): number;
				public constructor(request: com.mapbox.common.HttpRequest, localPath: string, resume: boolean, memory_879: number);
				public setResume(resume: boolean): void;
				public getRequest(): com.mapbox.common.HttpRequest;
				public getResume(): boolean;
				public getMemoryThreshold(): number;
				public setRequest(request: com.mapbox.common.HttpRequest): void;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor(request: com.mapbox.common.HttpRequest, localPath: string);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class DownloadStatus extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.DownloadStatus>;
				public setTransferredBytes(transf_2ac: number): void;
				public setDownloadId(downloadId: number): void;
				public constructor(error: com.mapbox.common.TransferError, totalBytes: java.lang.Long, downlo_721: com.mapbox.common.DownloadOptions, httpResult: com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>);
				public setReceivedBytes(receiv_271: number): void;
				public setState(state: com.mapbox.common.TransferState): void;
				public toString(): string;
				public equals(object: any): boolean;
				public getTransferredBytes(): number;
				public getDownloadOptions(): com.mapbox.common.DownloadOptions;
				public constructor(downloadId: number, state: com.mapbox.common.TransferState, error: com.mapbox.common.TransferError, totalBytes: java.lang.Long, receiv_271: number, transf_2ac: number, downlo_721: com.mapbox.common.DownloadOptions, httpResult: com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>);
				public getReceivedBytes(): number;
				public setError(error: com.mapbox.common.TransferError): void;
				public setTotalBytes(totalBytes: java.lang.Long): void;
				public setHttpResult(httpResult: com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>): void;
				public hashCode(): number;
				public getHttpResult(): com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>;
				public getTotalBytes(): java.lang.Long;
				public setDownloadOptions(downlo_721: com.mapbox.common.DownloadOptions): void;
				public getDownloadId(): number;
				public getError(): com.mapbox.common.TransferError;
				public getState(): com.mapbox.common.TransferState;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class DownloadStatusCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.DownloadStatusCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.DownloadStatusCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.DownloadStatus): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.DownloadStatus): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class DownloadStatusCallbackNative extends java.lang.Object implements com.mapbox.common.DownloadStatusCallback {
				public static class: java.lang.Class<com.mapbox.common.DownloadStatusCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.DownloadStatus): void;
			}
			export namespace DownloadStatusCallbackNative {
				export class DownloadStatusCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.DownloadStatusCallbackNative.DownloadStatusCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Event extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.Event>;
				public getDeferredOptions(): com.mapbox.common.DeferredDeliveryRequestOptions;
				public constructor(priority: com.mapbox.common.EventPriority, attributes: com.mapbox.bindgen.Value, deferr_ca4: com.mapbox.common.DeferredDeliveryRequestOptions);
				public getPriority(): com.mapbox.common.EventPriority;
				public setPriority(priority: com.mapbox.common.EventPriority): void;
				public hashCode(): number;
				public getAttributes(): com.mapbox.bindgen.Value;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor(attributes: com.mapbox.bindgen.Value, deferr_ca4: com.mapbox.common.DeferredDeliveryRequestOptions);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventPriority {
				public static class: java.lang.Class<com.mapbox.common.EventPriority>;
				public static DEFERRED: com.mapbox.common.EventPriority;
				public static QUEUED: com.mapbox.common.EventPriority;
				public static IMMEDIATE: com.mapbox.common.EventPriority;
				public static values(): androidNative.Array<com.mapbox.common.EventPriority>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.EventPriority;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServerOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.EventsServerOptions>;
				public getSdkInformation(): com.mapbox.common.SdkInformation;
				public hashCode(): number;
				public constructor(sdkInf_f5f: com.mapbox.common.SdkInformation, deferr_a71: com.mapbox.common.DeferredDeliveryServiceOptions);
				public getDeferredDeliveryServiceOptions(): com.mapbox.common.DeferredDeliveryServiceOptions;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsService extends java.lang.Object implements com.mapbox.common.EventsServiceInterface {
				public static class: java.lang.Class<com.mapbox.common.EventsService>;
				public peer: number;
				public unregisterObserver(param0: com.mapbox.common.EventsServiceObserver): void;
				public sendEvent(param0: com.mapbox.common.Event, param1: com.mapbox.common.EventsServiceResponseCallback): void;
				public flush(param0: com.mapbox.common.FlushOperationResultCallback): void;
				public sendCrashEvent(param0: com.mapbox.common.CrashEvent, param1: com.mapbox.common.EventsServiceResponseCallback): void;
				public sendTurnstileEvent(param0: com.mapbox.common.TurnstileEvent, param1: com.mapbox.common.EventsServiceResponseCallback): void;
				public static cleanNativePeer(param0: number): void;
				public static getOrCreate(param0: com.mapbox.common.EventsServerOptions): com.mapbox.common.EventsService;
				public registerObserver(param0: com.mapbox.common.EventsServiceObserver): void;
				public constructor(peer: number);
			}
			export namespace EventsService {
				export class EventsServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.EventsService.EventsServicePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServiceError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.EventsServiceError>;
				public hashCode(): number;
				public getCode(): com.mapbox.common.EventsServiceErrorCode;
				public getMessage(): string;
				public toString(): string;
				public constructor(code: com.mapbox.common.EventsServiceErrorCode, message: string);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServiceErrorCode {
				public static class: java.lang.Class<com.mapbox.common.EventsServiceErrorCode>;
				public static NO_TOKEN: com.mapbox.common.EventsServiceErrorCode;
				public static NO_USER_AGENT: com.mapbox.common.EventsServiceErrorCode;
				public static NOT_FOUND: com.mapbox.common.EventsServiceErrorCode;
				public static UNAUTHORIZED: com.mapbox.common.EventsServiceErrorCode;
				public static INVALID_PAYLOAD: com.mapbox.common.EventsServiceErrorCode;
				public static LARGE_PAYLOAD: com.mapbox.common.EventsServiceErrorCode;
				public static MULTI_STATUS: com.mapbox.common.EventsServiceErrorCode;
				public static BAD_REQUEST: com.mapbox.common.EventsServiceErrorCode;
				public static TIMEOUT: com.mapbox.common.EventsServiceErrorCode;
				public static INVALID_ENDPOINT: com.mapbox.common.EventsServiceErrorCode;
				public static MALFORMED_EVENT: com.mapbox.common.EventsServiceErrorCode;
				public static HTTP_ERROR: com.mapbox.common.EventsServiceErrorCode;
				public static EVENTS_DISABLED: com.mapbox.common.EventsServiceErrorCode;
				public static IOERROR: com.mapbox.common.EventsServiceErrorCode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.EventsServiceErrorCode>;
				public toString(): string;
				public static valueOf(name: string): com.mapbox.common.EventsServiceErrorCode;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServiceInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.EventsServiceInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.EventsServiceInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					registerObserver(param0: com.mapbox.common.EventsServiceObserver): void;
					unregisterObserver(param0: com.mapbox.common.EventsServiceObserver): void;
					sendTurnstileEvent(param0: com.mapbox.common.TurnstileEvent, param1: com.mapbox.common.EventsServiceResponseCallback): void;
					sendCrashEvent(param0: com.mapbox.common.CrashEvent, param1: com.mapbox.common.EventsServiceResponseCallback): void;
					sendEvent(param0: com.mapbox.common.Event, param1: com.mapbox.common.EventsServiceResponseCallback): void;
					flush(param0: com.mapbox.common.FlushOperationResultCallback): void;
				});
				public constructor();
				public unregisterObserver(param0: com.mapbox.common.EventsServiceObserver): void;
				public sendEvent(param0: com.mapbox.common.Event, param1: com.mapbox.common.EventsServiceResponseCallback): void;
				public flush(param0: com.mapbox.common.FlushOperationResultCallback): void;
				public sendCrashEvent(param0: com.mapbox.common.CrashEvent, param1: com.mapbox.common.EventsServiceResponseCallback): void;
				public sendTurnstileEvent(param0: com.mapbox.common.TurnstileEvent, param1: com.mapbox.common.EventsServiceResponseCallback): void;
				public registerObserver(param0: com.mapbox.common.EventsServiceObserver): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServiceObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.EventsServiceObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.EventsServiceObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					didEncounterError(param0: com.mapbox.common.EventsServiceError, param1: com.mapbox.bindgen.Value): void;
					didSendEvents(param0: com.mapbox.bindgen.Value): void;
				});
				public constructor();
				public didSendEvents(param0: com.mapbox.bindgen.Value): void;
				public didEncounterError(param0: com.mapbox.common.EventsServiceError, param1: com.mapbox.bindgen.Value): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServiceObserverNative extends java.lang.Object implements com.mapbox.common.EventsServiceObserver {
				public static class: java.lang.Class<com.mapbox.common.EventsServiceObserverNative>;
				public peer: number;
				public didSendEvents(param0: com.mapbox.bindgen.Value): void;
				public static cleanNativePeer(param0: number): void;
				public didEncounterError(param0: com.mapbox.common.EventsServiceError, param1: com.mapbox.bindgen.Value): void;
				public constructor(peer: number);
			}
			export namespace EventsServiceObserverNative {
				export class EventsServiceObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.EventsServiceObserverNative.EventsServiceObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServiceResponseCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.EventsServiceResponseCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.EventsServiceResponseCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.EventsServiceError,com.mapbox.bindgen.None>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.EventsServiceError,com.mapbox.bindgen.None>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class EventsServiceResponseCallbackNative extends java.lang.Object implements com.mapbox.common.EventsServiceResponseCallback {
				public static class: java.lang.Class<com.mapbox.common.EventsServiceResponseCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.EventsServiceError,com.mapbox.bindgen.None>): void;
			}
			export namespace EventsServiceResponseCallbackNative {
				export class EventsServiceResponseCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.EventsServiceResponseCallbackNative.EventsServiceResponseCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class FeatureTelemetryCounter extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.FeatureTelemetryCounter>;
				public peer: number;
				public reset(): void;
				public increment(): void;
				public static cleanNativePeer(param0: number): void;
				public getName(): string;
				public static create(param0: string): com.mapbox.common.FeatureTelemetryCounter;
				public getValue(): number;
				public constructor(peer: number);
			}
			export namespace FeatureTelemetryCounter {
				export class FeatureTelemetryCounterPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.FeatureTelemetryCounter.FeatureTelemetryCounterPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class FlushOperationResultCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.FlushOperationResultCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.FlushOperationResultCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class FlushOperationResultCallbackNative extends java.lang.Object implements com.mapbox.common.FlushOperationResultCallback {
				public static class: java.lang.Class<com.mapbox.common.FlushOperationResultCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
			}
			export namespace FlushOperationResultCallbackNative {
				export class FlushOperationResultCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.FlushOperationResultCallbackNative.FlushOperationResultCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class GetLifecycleMonitoringStateCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.GetLifecycleMonitoringStateCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.GetLifecycleMonitoringStateCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.LifecycleMonitoringState>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.LifecycleMonitoringState>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class GetLifecycleMonitoringStateCallbackNative extends java.lang.Object implements com.mapbox.common.GetLifecycleMonitoringStateCallback {
				public static class: java.lang.Class<com.mapbox.common.GetLifecycleMonitoringStateCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.LifecycleMonitoringState>): void;
			}
			export namespace GetLifecycleMonitoringStateCallbackNative {
				export class GetLifecycleMonitoringStateCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.GetLifecycleMonitoringStateCallbackNative.GetLifecycleMonitoringStateCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class GetLifecycleStateCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.GetLifecycleStateCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.GetLifecycleStateCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.LifecycleState>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.LifecycleState>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class GetLifecycleStateCallbackNative extends java.lang.Object implements com.mapbox.common.GetLifecycleStateCallback {
				public static class: java.lang.Class<com.mapbox.common.GetLifecycleStateCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.LifecycleState>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace GetLifecycleStateCallbackNative {
				export class GetLifecycleStateCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.GetLifecycleStateCallbackNative.GetLifecycleStateCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpHeaders extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpHeaders>;
				public static ACCEPT: string; // "accept"
				public static AGE: string; // "age"
				public static CACHE_CONTROL: string; // "cache-control"
				public static CONTENT_ENCODING: string; // "content-encoding"
				public static CONTENT_LENGTH: string; // "content-length"
				public static CONTENT_TYPE: string; // "content-type"
				public static DATE: string; // "date"
				public static DIGEST: string; // "digest"
				public static ETAG: string; // "etag"
				public static IF_NONE_MATCH: string; // "if-none-match"
				public static LAST_MODIFIED: string; // "last-modified"
				public static USER_AGENT: string; // "user-agent"
				public static RETRY_AFTER: string; // "retry-after"
				public static XACCEPT_ENCODING: string; // "x-accept-encoding"
				public static XCONTENT_ENCODING: string; // "x-content-encoding"
				public static XACCEPT_DELTA: string; // "x-accept-delta"
				public static XCANONICAL_ETAG: string; // "x-canonical-etag"
				public static XDELTA_BASE: string; // "x-delta-base"
				public static XRATE_LIMIT_RESET: string; // "x-rate-limit-reset"
				public static XAPP_INFO: string; // "x-mapbox-app-info"
				public static XMAPBOX_SDKS: string; // "x-mapbox-sdks"
				public static XTMP_CUSTOM_USER_AGENT_FRAGMENT: string; // "x-tmp-custom-user-agent-fragment"
				public static WANT_REPR_DIGEST: string; // "want-repr-digest"
				public static XREPR_DIGEST: string; // "x-repr-digest"
				public static XCANONICAL_DIGEST: string; // "x-canonical-digest"
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpMethod {
				public static class: java.lang.Class<com.mapbox.common.HttpMethod>;
				public static GET: com.mapbox.common.HttpMethod;
				public static HEAD: com.mapbox.common.HttpMethod;
				public static POST: com.mapbox.common.HttpMethod;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.common.HttpMethod>;
				public static valueOf(name: string): com.mapbox.common.HttpMethod;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpRequest extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.HttpRequest>;
				public getTimeout(): number;
				public getUrl(): string;
				public getBody(): androidNative.Array<number>;
				public setMethod(method: com.mapbox.common.HttpMethod): void;
				public toString(): string;
				public equals(object: any): boolean;
				public toBuilder(): com.mapbox.common.HttpRequest.Builder;
				public setHeaders(headers: java.util.HashMap<string,string>): void;
				public getSdkInformation(): com.mapbox.common.SdkInformation;
				public getMethod(): com.mapbox.common.HttpMethod;
				public getHeaders(): java.util.HashMap<string,string>;
				public hashCode(): number;
				public getFlags(): number;
				public getNetworkRestriction(): com.mapbox.common.NetworkRestriction;
			}
			export namespace HttpRequest {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.HttpRequest.Builder>;
					public body(body: androidNative.Array<number>): com.mapbox.common.HttpRequest.Builder;
					public build(): com.mapbox.common.HttpRequest;
					public constructor();
					public sdkInformation(sdkInf_f5f: com.mapbox.common.SdkInformation): com.mapbox.common.HttpRequest.Builder;
					public url(url: string): com.mapbox.common.HttpRequest.Builder;
					public headers(headers: java.util.HashMap<string,string>): com.mapbox.common.HttpRequest.Builder;
					public networkRestriction(networ_fcd: com.mapbox.common.NetworkRestriction): com.mapbox.common.HttpRequest.Builder;
					public flags(flags: number): com.mapbox.common.HttpRequest.Builder;
					public method(method: com.mapbox.common.HttpMethod): com.mapbox.common.HttpRequest.Builder;
					public timeout(timeout: number): com.mapbox.common.HttpRequest.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpRequestError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.HttpRequestError>;
				public getType(): com.mapbox.common.HttpRequestErrorType;
				public hashCode(): number;
				public constructor(type: com.mapbox.common.HttpRequestErrorType, message: string);
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpRequestErrorType {
				public static class: java.lang.Class<com.mapbox.common.HttpRequestErrorType>;
				public static CONNECTION_ERROR: com.mapbox.common.HttpRequestErrorType;
				public static SSLERROR: com.mapbox.common.HttpRequestErrorType;
				public static REQUEST_CANCELLED: com.mapbox.common.HttpRequestErrorType;
				public static REQUEST_TIMED_OUT: com.mapbox.common.HttpRequestErrorType;
				public static RANGE_ERROR: com.mapbox.common.HttpRequestErrorType;
				public static OTHER_ERROR: com.mapbox.common.HttpRequestErrorType;
				public static valueOf(name: string): com.mapbox.common.HttpRequestErrorType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.HttpRequestErrorType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpRequestFlags extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpRequestFlags>;
				public static NONE: number; // 0
				public static KEEP_COMPRESSION: number; // 1
				public static PAUSE_IN_BACKGROUND: number; // 2
				public static PREVENT_COALESCING: number; // 4
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpRequestOrResponse extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpRequestOrResponse>;
				public isHttpRequest(): boolean;
				public constructor(value: com.mapbox.common.HttpRequest);
				public static valueOf(value: com.mapbox.common.HttpResponse): com.mapbox.common.HttpRequestOrResponse;
				public getHttpResponse(): com.mapbox.common.HttpResponse;
				public constructor(value: com.mapbox.common.HttpResponse);
				public getHttpRequest(): com.mapbox.common.HttpRequest;
				public toString(): string;
				public static valueOf(value: com.mapbox.common.HttpRequest): com.mapbox.common.HttpRequestOrResponse;
				public isHttpResponse(): boolean;
				public getTypeInfo(): com.mapbox.common.HttpRequestOrResponse.Type;
			}
			export namespace HttpRequestOrResponse {
				export class Type {
					public static class: java.lang.Class<com.mapbox.common.HttpRequestOrResponse.Type>;
					public static HTTP_REQUEST: com.mapbox.common.HttpRequestOrResponse.Type;
					public static HTTP_RESPONSE: com.mapbox.common.HttpRequestOrResponse.Type;
					public static values(): androidNative.Array<com.mapbox.common.HttpRequestOrResponse.Type>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static valueOf(name: string): com.mapbox.common.HttpRequestOrResponse.Type;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpResponse extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.HttpResponse>;
				public getRequestId(): number;
				public getResult(): com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>;
				public hashCode(): number;
				public getRequest(): com.mapbox.common.HttpRequest;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor(requestId: number, request: com.mapbox.common.HttpRequest, result: com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpResponseCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpResponseCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.HttpResponseCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.HttpResponse): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.HttpResponse): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpResponseCallbackNative extends java.lang.Object implements com.mapbox.common.HttpResponseCallback {
				public static class: java.lang.Class<com.mapbox.common.HttpResponseCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.HttpResponse): void;
			}
			export namespace HttpResponseCallbackNative {
				export class HttpResponseCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.HttpResponseCallbackNative.HttpResponseCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpResponseData extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.HttpResponseData>;
				public constructor(headers: java.util.HashMap<string,string>, code: number, data: androidNative.Array<number>);
				public getHeaders(): java.util.HashMap<string,string>;
				public hashCode(): number;
				public getCode(): number;
				public getData(): androidNative.Array<number>;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceCancellationCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceCancellationCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.HttpServiceCancellationCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: number, param1: com.mapbox.common.HttpRequest): void;
				});
				public constructor();
				public run(param0: number, param1: com.mapbox.common.HttpRequest): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceCancellationCallbackNative extends java.lang.Object implements com.mapbox.common.HttpServiceCancellationCallback {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceCancellationCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: number, param1: com.mapbox.common.HttpRequest): void;
			}
			export namespace HttpServiceCancellationCallbackNative {
				export class HttpServiceCancellationCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.HttpServiceCancellationCallbackNative.HttpServiceCancellationCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceFactory>;
				public peer: number;
				public static getInstance(): com.mapbox.common.HttpServiceInterface;
				public static setUserDefined(param0: com.mapbox.common.HttpServiceInterface): void;
				public static setHttpServiceInterceptor(param0: com.mapbox.common.HttpServiceInterceptorInterface): void;
				public static cleanNativePeer(param0: number): void;
				public static setMaxRequestsPerHost(param0: number): void;
				public static setCancellationCallback(param0: com.mapbox.common.HttpServiceCancellationCallback): com.mapbox.common.Cancelable;
				public constructor(peer: number);
				public static reset(): void;
			}
			export namespace HttpServiceFactory {
				export class HttpServiceFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.HttpServiceFactory.HttpServiceFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterceptorInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.HttpServiceInterceptorInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onRequest(param0: com.mapbox.common.HttpRequest, param1: com.mapbox.common.HttpServiceInterceptorRequestContinuation): void;
					onResponse(param0: com.mapbox.common.HttpResponse, param1: com.mapbox.common.HttpServiceInterceptorResponseContinuation): void;
				});
				public constructor();
				public onRequest(param0: com.mapbox.common.HttpRequest, param1: com.mapbox.common.HttpServiceInterceptorRequestContinuation): void;
				public onResponse(param0: com.mapbox.common.HttpResponse, param1: com.mapbox.common.HttpServiceInterceptorResponseContinuation): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterceptorInterfaceNative extends java.lang.Object implements com.mapbox.common.HttpServiceInterceptorInterface {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorInterfaceNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public onRequest(param0: com.mapbox.common.HttpRequest, param1: com.mapbox.common.HttpServiceInterceptorRequestContinuation): void;
				public onResponse(param0: com.mapbox.common.HttpResponse, param1: com.mapbox.common.HttpServiceInterceptorResponseContinuation): void;
			}
			export namespace HttpServiceInterceptorInterfaceNative {
				export class HttpServiceInterceptorInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorInterfaceNative.HttpServiceInterceptorInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterceptorRequestContinuation extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorRequestContinuation>;
				/**
				 * Constructs a new instance of the com.mapbox.common.HttpServiceInterceptorRequestContinuation interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.HttpRequestOrResponse): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.HttpRequestOrResponse): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterceptorRequestContinuationNative extends java.lang.Object implements com.mapbox.common.HttpServiceInterceptorRequestContinuation {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorRequestContinuationNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.HttpRequestOrResponse): void;
			}
			export namespace HttpServiceInterceptorRequestContinuationNative {
				export class HttpServiceInterceptorRequestContinuationPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorRequestContinuationNative.HttpServiceInterceptorRequestContinuationPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterceptorResponseContinuation extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorResponseContinuation>;
				/**
				 * Constructs a new instance of the com.mapbox.common.HttpServiceInterceptorResponseContinuation interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.HttpResponse): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.HttpResponse): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterceptorResponseContinuationNative extends java.lang.Object implements com.mapbox.common.HttpServiceInterceptorResponseContinuation {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorResponseContinuationNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.HttpResponse): void;
			}
			export namespace HttpServiceInterceptorResponseContinuationNative {
				export class HttpServiceInterceptorResponseContinuationPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.HttpServiceInterceptorResponseContinuationNative.HttpServiceInterceptorResponseContinuationPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.HttpServiceInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					setInterceptor(param0: com.mapbox.common.HttpServiceInterceptorInterface): void;
					setMaxRequestsPerHost(param0: number): void;
					request(param0: com.mapbox.common.HttpRequest, param1: com.mapbox.common.HttpResponseCallback): number;
					cancelRequest(param0: number, param1: com.mapbox.common.ResultCallback): void;
					supportsKeepCompression(): boolean;
					download(param0: com.mapbox.common.DownloadOptions, param1: com.mapbox.common.DownloadStatusCallback): number;
					upload(param0: com.mapbox.common.UploadOptions, param1: com.mapbox.common.UploadStatusCallback): number;
					cancelUpload(param0: number, param1: com.mapbox.common.ResultCallback): void;
				});
				public constructor();
				public cancelRequest(param0: number, param1: com.mapbox.common.ResultCallback): void;
				public request(param0: com.mapbox.common.HttpRequest, param1: com.mapbox.common.HttpResponseCallback): number;
				public setInterceptor(param0: com.mapbox.common.HttpServiceInterceptorInterface): void;
				public upload(param0: com.mapbox.common.UploadOptions, param1: com.mapbox.common.UploadStatusCallback): number;
				/** @deprecated */
				public supportsKeepCompression(): boolean;
				public setMaxRequestsPerHost(param0: number): void;
				public cancelUpload(param0: number, param1: com.mapbox.common.ResultCallback): void;
				public download(param0: com.mapbox.common.DownloadOptions, param1: com.mapbox.common.DownloadStatusCallback): number;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class HttpServiceInterfaceNative extends java.lang.Object implements com.mapbox.common.HttpServiceInterface {
				public static class: java.lang.Class<com.mapbox.common.HttpServiceInterfaceNative>;
				public peer: number;
				public cancelRequest(param0: number, param1: com.mapbox.common.ResultCallback): void;
				public request(param0: com.mapbox.common.HttpRequest, param1: com.mapbox.common.HttpResponseCallback): number;
				public setInterceptor(param0: com.mapbox.common.HttpServiceInterceptorInterface): void;
				public upload(param0: com.mapbox.common.UploadOptions, param1: com.mapbox.common.UploadStatusCallback): number;
				public static cleanNativePeer(param0: number): void;
				/** @deprecated */
				public supportsKeepCompression(): boolean;
				public setMaxRequestsPerHost(param0: number): void;
				public cancelUpload(param0: number, param1: com.mapbox.common.ResultCallback): void;
				public constructor(peer: number);
				public download(param0: com.mapbox.common.DownloadOptions, param1: com.mapbox.common.DownloadStatusCallback): number;
			}
			export namespace HttpServiceInterfaceNative {
				export class HttpServiceInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.HttpServiceInterfaceNative.HttpServiceInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class IdGenerator extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.IdGenerator>;
				public static getNewId(): number;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class InitializerData extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.InitializerData>;
				public component3(): number;
				public copy(firstI_fc8: number, state: com.mapbox.common.InitializerState, curren_459: number): com.mapbox.common.InitializerData;
				public equals(other: any): boolean;
				public hashCode(): number;
				public getState(): com.mapbox.common.InitializerState;
				public component1(): number;
				public component2(): com.mapbox.common.InitializerState;
				public constructor(firstI_fc8: number, state: com.mapbox.common.InitializerState, curren_459: number);
				public getCurrentInitAttempt(): number;
				public toString(): string;
				public getFirstInitElapsedTimeMs(): number;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class InitializerState {
				public static class: java.lang.Class<com.mapbox.common.InitializerState>;
				public static IN_PROGRESS: com.mapbox.common.InitializerState;
				public static SUCCESS: com.mapbox.common.InitializerState;
				public static FAILURE: com.mapbox.common.InitializerState;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.InitializerState>;
				public static valueOf(value: string): com.mapbox.common.InitializerState;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleMonitorAndroid extends java.lang.Object implements com.mapbox.common.LifecycleMonitorInterface {
				public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorAndroid>;
				public static TAG: string; // "LifecycleMonitor"
				public registerObserver(this_: com.mapbox.common.LifecycleObserver): void;
				public stop(): void;
				public getLifecycleState(param0: com.mapbox.common.GetLifecycleStateCallback): void;
				public getMonitoringState(param0: com.mapbox.common.GetLifecycleMonitoringStateCallback): void;
				public getLifecycleState(this_: com.mapbox.common.GetLifecycleStateCallback): void;
				public unregisterObserver(observer: com.mapbox.common.LifecycleObserver): void;
				public unregisterObserver(param0: com.mapbox.common.LifecycleObserver): void;
				public start(): void;
				public registerObserver(param0: com.mapbox.common.LifecycleObserver): void;
				public getMonitoringState(this_: com.mapbox.common.GetLifecycleMonitoringStateCallback): void;
				public static create(): com.mapbox.common.LifecycleMonitorInterface;
			}
			export namespace LifecycleMonitorAndroid {
				export namespace LifecycleMonitorAndroid {
					export namespace Companion {
						function create(): com.mapbox.common.LifecycleMonitorInterface;
						function create(): com.mapbox.common.LifecycleMonitorInterface;
					}
				}
				export class MonitorState {
					public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorAndroid.MonitorState>;
					public static STARTING: com.mapbox.common.LifecycleMonitorAndroid.MonitorState;
					public static STARTED: com.mapbox.common.LifecycleMonitorAndroid.MonitorState;
					public static STOPPING: com.mapbox.common.LifecycleMonitorAndroid.MonitorState;
					public static STOPPED: com.mapbox.common.LifecycleMonitorAndroid.MonitorState;
					public static valueOf(value: string): com.mapbox.common.LifecycleMonitorAndroid.MonitorState;
					public static values(): androidNative.Array<com.mapbox.common.LifecycleMonitorAndroid.MonitorState>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
				export class WhenMappings extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorAndroid.WhenMappings>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleMonitorFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorFactory>;
				public peer: number;
				public static getOrCreate(): com.mapbox.common.LifecycleMonitorInterface;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace LifecycleMonitorFactory {
				export class LifecycleMonitorFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorFactory.LifecycleMonitorFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleMonitorInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.LifecycleMonitorInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getLifecycleState(param0: com.mapbox.common.GetLifecycleStateCallback): void;
					getMonitoringState(param0: com.mapbox.common.GetLifecycleMonitoringStateCallback): void;
					registerObserver(param0: com.mapbox.common.LifecycleObserver): void;
					unregisterObserver(param0: com.mapbox.common.LifecycleObserver): void;
				});
				public constructor();
				public getLifecycleState(param0: com.mapbox.common.GetLifecycleStateCallback): void;
				public getMonitoringState(param0: com.mapbox.common.GetLifecycleMonitoringStateCallback): void;
				public unregisterObserver(param0: com.mapbox.common.LifecycleObserver): void;
				public registerObserver(param0: com.mapbox.common.LifecycleObserver): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleMonitorInterfaceNative extends java.lang.Object implements com.mapbox.common.LifecycleMonitorInterface {
				public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorInterfaceNative>;
				public peer: number;
				public getLifecycleState(param0: com.mapbox.common.GetLifecycleStateCallback): void;
				public getMonitoringState(param0: com.mapbox.common.GetLifecycleMonitoringStateCallback): void;
				public unregisterObserver(param0: com.mapbox.common.LifecycleObserver): void;
				public static cleanNativePeer(param0: number): void;
				public registerObserver(param0: com.mapbox.common.LifecycleObserver): void;
				public constructor(peer: number);
			}
			export namespace LifecycleMonitorInterfaceNative {
				export class LifecycleMonitorInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.LifecycleMonitorInterfaceNative.LifecycleMonitorInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleMonitoringState {
				public static class: java.lang.Class<com.mapbox.common.LifecycleMonitoringState>;
				public static STOPPED: com.mapbox.common.LifecycleMonitoringState;
				public static STARTED: com.mapbox.common.LifecycleMonitoringState;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.LifecycleMonitoringState;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.common.LifecycleMonitoringState>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.LifecycleObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.LifecycleObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onMonitoringStateChanged(param0: com.mapbox.common.LifecycleMonitoringState, param1: string): void;
					onLifecycleStateChanged(param0: com.mapbox.common.LifecycleState): void;
				});
				public constructor();
				public onMonitoringStateChanged(param0: com.mapbox.common.LifecycleMonitoringState, param1: string): void;
				public onLifecycleStateChanged(param0: com.mapbox.common.LifecycleState): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleObserverNative extends java.lang.Object implements com.mapbox.common.LifecycleObserver {
				public static class: java.lang.Class<com.mapbox.common.LifecycleObserverNative>;
				public peer: number;
				public onMonitoringStateChanged(param0: com.mapbox.common.LifecycleMonitoringState, param1: string): void;
				public onLifecycleStateChanged(param0: com.mapbox.common.LifecycleState): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace LifecycleObserverNative {
				export class LifecycleObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.LifecycleObserverNative.LifecycleObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleService extends globalAndroid.app.Service {
				public static class: java.lang.Class<com.mapbox.common.LifecycleService>;
				public static TAG: string; // "LifecycleService"
				public onTrimMemory(level: number): void;
				public constructor(base: globalAndroid.content.Context);
				public getLifecycleState(it: globalAndroid.os.Looper, item_iv_iv: any): void;
				public onCreate(): void;
				public setCallback(observer: com.mapbox.common.LifecycleService.Callback): void;
				/** @deprecated */
				public getLifecycleState(): com.mapbox.common.LifecycleState;
				public onDestroy(): void;
				public onTrimMemory(param0: number): void;
				public constructor();
				public onBind(intent: globalAndroid.content.Intent): globalAndroid.os.IBinder;
			}
			export namespace LifecycleService {
				export class ActivityState {
					public static class: java.lang.Class<com.mapbox.common.LifecycleService.ActivityState>;
					public static Unknown: com.mapbox.common.LifecycleService.ActivityState;
					public static Created: com.mapbox.common.LifecycleService.ActivityState;
					public static Started: com.mapbox.common.LifecycleService.ActivityState;
					public static Resumed: com.mapbox.common.LifecycleService.ActivityState;
					public static Paused: com.mapbox.common.LifecycleService.ActivityState;
					public static Stopped: com.mapbox.common.LifecycleService.ActivityState;
					public static SaveInstanceState: com.mapbox.common.LifecycleService.ActivityState;
					public static Destroyed: com.mapbox.common.LifecycleService.ActivityState;
					public static values(): androidNative.Array<com.mapbox.common.LifecycleService.ActivityState>;
					public static valueOf(value: string): com.mapbox.common.LifecycleService.ActivityState;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
				export class Binder extends globalAndroid.os.Binder {
					public static class: java.lang.Class<com.mapbox.common.LifecycleService.Binder>;
					public isBinderAlive(): boolean;
					public constructor(descriptor: string);
					public dump(fd: java.io.FileDescriptor, fout: java.io.PrintWriter, args: androidNative.Array<string>): void;
					public static getSuggestedMaxIpcSizeBytes(): number;
					public queryLocalInterface(param0: string): globalAndroid.os.IInterface;
					public getService(): com.mapbox.common.LifecycleService;
					public transact(param0: number, param1: globalAndroid.os.Parcel, param2: globalAndroid.os.Parcel, param3: number): boolean;
					public unlinkToDeath(param0: globalAndroid.os.IBinder.DeathRecipient, param1: number): boolean;
					public addFrozenStateChangeCallback(executor: java.util.concurrent.Executor, callback: globalAndroid.os.IBinder.FrozenStateChangeCallback): void;
					public constructor();
					public getInterfaceDescriptor(): string;
					public linkToDeath(param0: globalAndroid.os.IBinder.DeathRecipient, param1: number): void;
					public constructor(this_0: com.mapbox.common.LifecycleService);
					public pingBinder(): boolean;
					public dumpAsync(param0: java.io.FileDescriptor, param1: androidNative.Array<string>): void;
					public dump(param0: java.io.FileDescriptor, param1: androidNative.Array<string>): void;
					public removeFrozenStateChangeCallback(callback: globalAndroid.os.IBinder.FrozenStateChangeCallback): boolean;
				}
				export class Callback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.LifecycleService.Callback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.LifecycleService$Callback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onLifecycleStateChanged(param0: com.mapbox.common.LifecycleState): void;
					});
					public constructor();
					public onLifecycleStateChanged(param0: com.mapbox.common.LifecycleState): void;
				}
				export namespace LifecycleService {
					export namespace Companion {
					}
				}
				export class WhenMappings extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.LifecycleService.WhenMappings>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleState {
				public static class: java.lang.Class<com.mapbox.common.LifecycleState>;
				public static UNKNOWN: com.mapbox.common.LifecycleState;
				public static MOVING_FOREGROUND: com.mapbox.common.LifecycleState;
				public static FOREGROUND: com.mapbox.common.LifecycleState;
				public static MOVING_BACKGROUND: com.mapbox.common.LifecycleState;
				public static BACKGROUND: com.mapbox.common.LifecycleState;
				public static INACTIVE: com.mapbox.common.LifecycleState;
				public static values(): androidNative.Array<com.mapbox.common.LifecycleState>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.LifecycleState;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LifecycleUtils extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.LifecycleUtils>;
				public static INSTANCE: com.mapbox.common.LifecycleUtils;
				/** @deprecated */
				public getLifecycleState(this_g_817: globalAndroid.content.Context): com.mapbox.common.LifecycleState;
				public getAppLifecycleStateFromActivityManager(buildV_79d: number, context: globalAndroid.content.Context): com.mapbox.common.LifecycleState;
				public getLifecycleState(context: globalAndroid.content.Context, looper: globalAndroid.os.Looper, callback: any): void;
				/** @deprecated */
				public hasServiceRunningInForeground(it: globalAndroid.content.Context): boolean;
				public hasServiceRunningInForeground(context: globalAndroid.content.Context, looper: globalAndroid.os.Looper, callback: any): void;
				public getAppLifecycleStateFromActivityManager(context: globalAndroid.content.Context): com.mapbox.common.LifecycleState;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Log extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.Log>;
				public peer: number;
				public static warning(param0: string, param1: string): void;
				public static cleanNativePeer(param0: number): void;
				public static debug(param0: string, param1: string): void;
				public static info(param0: string, param1: string): void;
				public constructor(peer: number);
				public static error(param0: string, param1: string): void;
			}
			export namespace Log {
				export class LogPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.Log.LogPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LogConfiguration extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.LogConfiguration>;
				public peer: number;
				public static setLoggingLevel(param0: com.mapbox.common.LoggingLevel): void;
				public static getLoggingLevel(): com.mapbox.common.LoggingLevel;
				public static setLoggingLevel(param0: string, param1: com.mapbox.common.LoggingLevel): void;
				public static resetLoggingLevel(param0: string): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static registerLogWriterBackend(param0: com.mapbox.common.LogWriterBackend): void;
				public static getLoggingLevel(param0: string): com.mapbox.common.LoggingLevel;
			}
			export namespace LogConfiguration {
				export class LogConfigurationPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.LogConfiguration.LogConfigurationPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LogWriterBackend extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.LogWriterBackend>;
				/**
				 * Constructs a new instance of the com.mapbox.common.LogWriterBackend interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					writeLog(param0: com.mapbox.common.LoggingLevel, param1: string): void;
				});
				public constructor();
				public writeLog(param0: com.mapbox.common.LoggingLevel, param1: string): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LogWriterBackendNative extends java.lang.Object implements com.mapbox.common.LogWriterBackend {
				public static class: java.lang.Class<com.mapbox.common.LogWriterBackendNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public writeLog(param0: com.mapbox.common.LoggingLevel, param1: string): void;
				public constructor(peer: number);
			}
			export namespace LogWriterBackendNative {
				export class LogWriterBackendPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.LogWriterBackendNative.LogWriterBackendPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class LoggingLevel {
				public static class: java.lang.Class<com.mapbox.common.LoggingLevel>;
				public static DEBUG: com.mapbox.common.LoggingLevel;
				public static INFO: com.mapbox.common.LoggingLevel;
				public static WARNING: com.mapbox.common.LoggingLevel;
				public static ERROR: com.mapbox.common.LoggingLevel;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.LoggingLevel;
				public static values(): androidNative.Array<com.mapbox.common.LoggingLevel>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxCommonLogger extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MapboxCommonLogger>;
				public static INSTANCE: com.mapbox.common.MapboxCommonLogger;
				public logW$common_release(tag: string, message: string): void;
				public logI$common_release(tag: string, message: string): void;
				public logE$common_release(tag: string, message: string): void;
				public logD$common_release(tag: string, message: string): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxCommonSettings extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MapboxCommonSettings>;
				public static LANGUAGE: string; // "com.mapbox.common.i18n.language"
				public static WORLDVIEW: string; // "com.mapbox.common.i18n.worldview"
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxInitializerException extends java.lang.Throwable {
				public static class: java.lang.Class<com.mapbox.common.MapboxInitializerException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor(initia_703: com.mapbox.common.InitializerData, context: globalAndroid.content.Context, t: java.lang.Throwable);
				public constructor(message: string);
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxMapsAndroidLogger extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MapboxMapsAndroidLogger>;
				public static INSTANCE: com.mapbox.common.MapboxMapsAndroidLogger;
				public static SDK_IDENTIFIER: string; // "maps-android"
				public internalLogE$sdk_base_release(this_: string, tag: string): void;
				public internalLogD$sdk_base_release(this_: string, tag: string): void;
				public internalLogW$sdk_base_release(this_: string, tag: string): void;
				public internalLogI$sdk_base_release(this_: string, tag: string): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MapboxOptions>;
				public static INSTANCE: com.mapbox.common.MapboxOptions;
				public static getAccessToken(): string;
				public static setAccessToken(value: string): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxOptionsImpl extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MapboxOptionsImpl>;
				public peer: number;
				public static setUseStaging(param0: string, param1: boolean): void;
				public static getUseStaging(param0: string): boolean;
				public static getAccessToken(): string;
				public static getTokenForService(param0: string): string;
				public static cleanNativePeer(param0: number): void;
				public static setAccessToken(param0: string): void;
				public constructor(peer: number);
				public static setStagingAccessToken(param0: string): void;
				public static setTokenForService(param0: string, param1: string): void;
			}
			export namespace MapboxOptionsImpl {
				export class MapboxOptionsImplPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MapboxOptionsImpl.MapboxOptionsImplPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxSDKCommon extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MapboxSDKCommon>;
				public static INSTANCE: com.mapbox.common.MapboxSDKCommon;
				public getContext(): globalAndroid.content.Context;
				public invoke(context: globalAndroid.content.Context): com.mapbox.common.MapboxSDKCommon;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxSDKCommonInitializer extends com.mapbox.common.BaseMapboxInitializer<com.mapbox.common.MapboxSDKCommon> {
				public static class: java.lang.Class<com.mapbox.common.MapboxSDKCommonInitializer>;
				public getInitializerClass(): java.lang.Class<com.mapbox.common.MapboxSDKCommonInitializerImpl>;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxSDKCommonInitializerImpl extends androidx.startup.Initializer<com.mapbox.common.MapboxSDKCommon> {
				public static class: java.lang.Class<com.mapbox.common.MapboxSDKCommonInitializerImpl>;
				public create(this_: globalAndroid.content.Context): com.mapbox.common.MapboxSDKCommon;
				public dependencies(): java.util.List<java.lang.Class<any>>;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MapboxServices extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MapboxServices>;
				public static DIRECTIONS: string; // "directions"
				public static MAPS: string; // "maps"
				public static SEARCH: string; // "search"
				public static MAP_GPT: string; // "mapgpt"
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MaploadSKUIdentifier {
				public static class: java.lang.Class<com.mapbox.common.MaploadSKUIdentifier>;
				public static PREMIUM_SDK: com.mapbox.common.MaploadSKUIdentifier;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.common.MaploadSKUIdentifier>;
				public static valueOf(name: string): com.mapbox.common.MaploadSKUIdentifier;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMetricsSource extends java.lang.Object implements com.mapbox.common.MetricsSource {
				public static class: java.lang.Class<com.mapbox.common.MemoryMetricsSource>;
				public getMetrics(): java.util.List<com.mapbox.common.Metrics>;
			}
			export namespace MemoryMetricsSource {
				export namespace MemoryMetricsSource {
					export namespace Companion {
						function getInstance(): com.mapbox.common.MemoryMetricsSource;
						function getInstance(): com.mapbox.common.MemoryMetricsSource;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorFactory>;
				public peer: number;
				public static setUserDefined(param0: com.mapbox.common.MemoryMonitorInterface): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getOrCreate(): com.mapbox.common.MemoryMonitorInterface;
				public static reset(): void;
			}
			export namespace MemoryMonitorFactory {
				export class MemoryMonitorFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MemoryMonitorFactory.MemoryMonitorFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MemoryMonitorInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getMemoryMonitorStatus(param0: com.mapbox.common.MemoryMonitorObserverConfig, param1: com.mapbox.common.MemoryMonitorStatusCallback): void;
					registerObserver(param0: com.mapbox.common.MemoryMonitorObserver): void;
					registerObserverWithConfig(param0: com.mapbox.common.MemoryMonitorObserverConfig, param1: com.mapbox.common.MemoryMonitorObserver): void;
					unregisterObserver(param0: com.mapbox.common.MemoryMonitorObserver): void;
					notifySystemMemoryWarningReceived(): void;
				});
				public constructor();
				public notifySystemMemoryWarningReceived(): void;
				public registerObserver(param0: com.mapbox.common.MemoryMonitorObserver): void;
				public unregisterObserver(param0: com.mapbox.common.MemoryMonitorObserver): void;
				public getMemoryMonitorStatus(param0: com.mapbox.common.MemoryMonitorObserverConfig, param1: com.mapbox.common.MemoryMonitorStatusCallback): void;
				public registerObserverWithConfig(param0: com.mapbox.common.MemoryMonitorObserverConfig, param1: com.mapbox.common.MemoryMonitorObserver): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorInterfaceNative extends java.lang.Object implements com.mapbox.common.MemoryMonitorInterface {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorInterfaceNative>;
				public peer: number;
				public notifySystemMemoryWarningReceived(): void;
				public registerObserver(param0: com.mapbox.common.MemoryMonitorObserver): void;
				public static cleanNativePeer(param0: number): void;
				public unregisterObserver(param0: com.mapbox.common.MemoryMonitorObserver): void;
				public getMemoryMonitorStatus(param0: com.mapbox.common.MemoryMonitorObserverConfig, param1: com.mapbox.common.MemoryMonitorStatusCallback): void;
				public constructor(peer: number);
				public registerObserverWithConfig(param0: com.mapbox.common.MemoryMonitorObserverConfig, param1: com.mapbox.common.MemoryMonitorObserver): void;
			}
			export namespace MemoryMonitorInterfaceNative {
				export class MemoryMonitorInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MemoryMonitorInterfaceNative.MemoryMonitorInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MemoryMonitorObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onMemoryMonitorAlert(param0: com.mapbox.common.MemoryMonitorStatus): void;
				});
				public constructor();
				public onMemoryMonitorAlert(param0: com.mapbox.common.MemoryMonitorStatus): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorObserverConfig extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorObserverConfig>;
				public getThresholdReachedNotificationTimeout(): number;
				public hashCode(): number;
				public toBuilder(): com.mapbox.common.MemoryMonitorObserverConfig.Builder;
				public getSendAppRunningInBackgroundNotification(): boolean;
				public getMaxUsedMemoryPercentThreshold(): number;
				public getMaxUsedMemoryThreshold(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace MemoryMonitorObserverConfig {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.MemoryMonitorObserverConfig.Builder>;
					public maxUsedMemoryThreshold(maxUse_c5a: number): com.mapbox.common.MemoryMonitorObserverConfig.Builder;
					public constructor();
					public thresholdReachedNotificationTimeout(thresh_61c: number): com.mapbox.common.MemoryMonitorObserverConfig.Builder;
					public maxUsedMemoryPercentThreshold(maxUse_667: number): com.mapbox.common.MemoryMonitorObserverConfig.Builder;
					public sendAppRunningInBackgroundNotification(sendAp_699: boolean): com.mapbox.common.MemoryMonitorObserverConfig.Builder;
					public build(): com.mapbox.common.MemoryMonitorObserverConfig;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorObserverNative extends java.lang.Object implements com.mapbox.common.MemoryMonitorObserver {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorObserverNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public onMemoryMonitorAlert(param0: com.mapbox.common.MemoryMonitorStatus): void;
				public constructor(peer: number);
			}
			export namespace MemoryMonitorObserverNative {
				export class MemoryMonitorObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MemoryMonitorObserverNative.MemoryMonitorObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorState {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorState>;
				public static OK: com.mapbox.common.MemoryMonitorState;
				public static APP_RUNNING_IN_BACKGROUND: com.mapbox.common.MemoryMonitorState;
				public static MEMORY_THRESHOLD_REACHED: com.mapbox.common.MemoryMonitorState;
				public static SYSTEM_MEMORY_WARNING_RECEIVED: com.mapbox.common.MemoryMonitorState;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.MemoryMonitorState;
				public static values(): androidNative.Array<com.mapbox.common.MemoryMonitorState>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorStatus extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorStatus>;
				public getState(): com.mapbox.common.MemoryMonitorState;
				public getTotalMemory(): number;
				public getUsedMemory(): number;
				public hashCode(): number;
				public constructor(state: com.mapbox.common.MemoryMonitorState, totalM_7c6: number, usedMemory: number);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorStatusCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorStatusCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MemoryMonitorStatusCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.MemoryMonitorStatus>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.MemoryMonitorStatus>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MemoryMonitorStatusCallbackNative extends java.lang.Object implements com.mapbox.common.MemoryMonitorStatusCallback {
				public static class: java.lang.Class<com.mapbox.common.MemoryMonitorStatusCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.MemoryMonitorStatus>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace MemoryMonitorStatusCallbackNative {
				export class MemoryMonitorStatusCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MemoryMonitorStatusCallbackNative.MemoryMonitorStatusCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Metrics extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.Metrics>;
				public getValue(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public getName(): string;
				public toString(): string;
				public constructor(name: string, value: com.mapbox.bindgen.Value);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsService extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MetricsService>;
				public peer: number;
				public serializePretty(param0: com.mapbox.common.MetricsServiceSerializeCallback): void;
				public flush(param0: com.mapbox.common.FlushOperationResultCallback): void;
				public serialize(param0: com.mapbox.common.MetricsServiceSerializeCallback): void;
				public stop(): void;
				public removeMetricsSource(param0: com.mapbox.common.MetricsSource): void;
				public subscribeToConfigUpdates(): void;
				public start(param0: java.lang.Long): void;
				public static cleanNativePeer(param0: number): void;
				public setTag(param0: string): void;
				public addMetricsSource(param0: com.mapbox.common.MetricsSource): void;
				public constructor(peer: number);
			}
			export namespace MetricsService {
				export class MetricsServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MetricsService.MetricsServicePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsServiceFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MetricsServiceFactory>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getInstance(): com.mapbox.common.MetricsService;
				public static reset(): void;
				public static getInstanceForLogging(): com.mapbox.common.MetricsService;
			}
			export namespace MetricsServiceFactory {
				export class MetricsServiceFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MetricsServiceFactory.MetricsServiceFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsServiceForLoggingOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MetricsServiceForLoggingOptions>;
				public static DUMP_PERIOD: string; // "MetricsServiceForLoggingOptions.DumpPeriod"
				public static INCLUDED_METRICS: string; // "MetricsServiceForLoggingOptions.IncludedMetrics"
				public static MAX_LOG_LINE_LENGTH: string; // "MetricsServiceForLoggingOptions.MaxLogLineLength"
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsServiceSerializeCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MetricsServiceSerializeCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MetricsServiceSerializeCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Value): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Value): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsServiceSerializeCallbackNative extends java.lang.Object implements com.mapbox.common.MetricsServiceSerializeCallback {
				public static class: java.lang.Class<com.mapbox.common.MetricsServiceSerializeCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Value): void;
			}
			export namespace MetricsServiceSerializeCallbackNative {
				export class MetricsServiceSerializeCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MetricsServiceSerializeCallbackNative.MetricsServiceSerializeCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsServiceType {
				public static class: java.lang.Class<com.mapbox.common.MetricsServiceType>;
				public static TELEMETRY: com.mapbox.common.MetricsServiceType;
				public static LOG: com.mapbox.common.MetricsServiceType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.MetricsServiceType;
				public static values(): androidNative.Array<com.mapbox.common.MetricsServiceType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsSource extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MetricsSource>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MetricsSource interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getMetrics(): java.util.List<com.mapbox.common.Metrics>;
				});
				public constructor();
				public getMetrics(): java.util.List<com.mapbox.common.Metrics>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MetricsSourceNative extends java.lang.Object implements com.mapbox.common.MetricsSource {
				public static class: java.lang.Class<com.mapbox.common.MetricsSourceNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public getMetrics(): java.util.List<com.mapbox.common.Metrics>;
				public constructor(peer: number);
			}
			export namespace MetricsSourceNative {
				export class MetricsSourcePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MetricsSourceNative.MetricsSourcePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementInfo extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.MovementInfo>;
				public getMovementMode(): java.util.HashMap<com.mapbox.common.MovementMode,java.lang.Integer>;
				public hashCode(): number;
				public getMovementProvider(): com.mapbox.common.MovementModeProvider;
				public constructor(moveme_e4b: java.util.HashMap<com.mapbox.common.MovementMode,java.lang.Integer>, moveme_0f5: com.mapbox.common.MovementModeProvider);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementInfoCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MovementInfoCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MovementInfoCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.MovementInfo>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.MovementInfo>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementInfoCallbackNative extends java.lang.Object implements com.mapbox.common.MovementInfoCallback {
				public static class: java.lang.Class<com.mapbox.common.MovementInfoCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.common.MovementInfo>): void;
			}
			export namespace MovementInfoCallbackNative {
				export class MovementInfoCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MovementInfoCallbackNative.MovementInfoCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementMode {
				public static class: java.lang.Class<com.mapbox.common.MovementMode>;
				public static IN_VEHICLE: com.mapbox.common.MovementMode;
				public static CYCLING: com.mapbox.common.MovementMode;
				public static RUNNING: com.mapbox.common.MovementMode;
				public static WALKING: com.mapbox.common.MovementMode;
				public static ON_FOOT: com.mapbox.common.MovementMode;
				public static STATIONARY: com.mapbox.common.MovementMode;
				public static UNKNOWN: com.mapbox.common.MovementMode;
				public static values(): androidNative.Array<com.mapbox.common.MovementMode>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.MovementMode;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementModeObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MovementModeObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MovementModeObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onMovementModeChanged(param0: com.mapbox.common.MovementInfo): void;
					onMovementModeError(param0: string): void;
				});
				public constructor();
				public onMovementModeError(param0: string): void;
				public onMovementModeChanged(param0: com.mapbox.common.MovementInfo): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementModeObserverNative extends java.lang.Object implements com.mapbox.common.MovementModeObserver {
				public static class: java.lang.Class<com.mapbox.common.MovementModeObserverNative>;
				public peer: number;
				public onMovementModeError(param0: string): void;
				public static cleanNativePeer(param0: number): void;
				public onMovementModeChanged(param0: com.mapbox.common.MovementInfo): void;
				public constructor(peer: number);
			}
			export namespace MovementModeObserverNative {
				export class MovementModeObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MovementModeObserverNative.MovementModeObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementModeProvider {
				public static class: java.lang.Class<com.mapbox.common.MovementModeProvider>;
				public static SYSTEM: com.mapbox.common.MovementModeProvider;
				public static SDK: com.mapbox.common.MovementModeProvider;
				public static UNKNOWN: com.mapbox.common.MovementModeProvider;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.MovementModeProvider>;
				public static valueOf(name: string): com.mapbox.common.MovementModeProvider;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementMonitorFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MovementMonitorFactory>;
				public peer: number;
				public static setUserDefined(param0: com.mapbox.common.MovementMonitorInterface): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getOrCreate(): com.mapbox.common.MovementMonitorInterface;
				public static reset(): void;
			}
			export namespace MovementMonitorFactory {
				export class MovementMonitorFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MovementMonitorFactory.MovementMonitorFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementMonitorInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.MovementMonitorInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.MovementMonitorInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getMovementInfo(param0: com.mapbox.common.MovementInfoCallback): void;
					setMovementInfo(param0: com.mapbox.common.MovementInfo): void;
					registerObserver(param0: com.mapbox.common.MovementModeObserver): void;
					unregisterObserver(param0: com.mapbox.common.MovementModeObserver): void;
				});
				public constructor();
				public getMovementInfo(param0: com.mapbox.common.MovementInfoCallback): void;
				public registerObserver(param0: com.mapbox.common.MovementModeObserver): void;
				public setMovementInfo(param0: com.mapbox.common.MovementInfo): void;
				public unregisterObserver(param0: com.mapbox.common.MovementModeObserver): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class MovementMonitorInterfaceNative extends java.lang.Object implements com.mapbox.common.MovementMonitorInterface {
				public static class: java.lang.Class<com.mapbox.common.MovementMonitorInterfaceNative>;
				public peer: number;
				public getMovementInfo(param0: com.mapbox.common.MovementInfoCallback): void;
				public registerObserver(param0: com.mapbox.common.MovementModeObserver): void;
				public static cleanNativePeer(param0: number): void;
				public setMovementInfo(param0: com.mapbox.common.MovementInfo): void;
				public unregisterObserver(param0: com.mapbox.common.MovementModeObserver): void;
				public constructor(peer: number);
			}
			export namespace MovementMonitorInterfaceNative {
				export class MovementMonitorInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.MovementMonitorInterfaceNative.MovementMonitorInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class NativeExceptionController extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.NativeExceptionController>;
				public static INSTANCE: com.mapbox.common.NativeExceptionController;
				public static getRethrowNativeExceptions(): boolean;
				public static setRethrowNativeExceptions(param0: boolean): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class NetworkRestriction {
				public static class: java.lang.Class<com.mapbox.common.NetworkRestriction>;
				public static NONE: com.mapbox.common.NetworkRestriction;
				public static DISALLOW_EXPENSIVE: com.mapbox.common.NetworkRestriction;
				public static DISALLOW_ALL: com.mapbox.common.NetworkRestriction;
				public value: number;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.NetworkRestriction;
				public static values(): androidNative.Array<com.mapbox.common.NetworkRestriction>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class NetworkStatus {
				public static class: java.lang.Class<com.mapbox.common.NetworkStatus>;
				public static NOT_REACHABLE: com.mapbox.common.NetworkStatus;
				public static REACHABLE_VIA_WI_FI: com.mapbox.common.NetworkStatus;
				public static REACHABLE_VIA_ETHERNET: com.mapbox.common.NetworkStatus;
				public static REACHABLE_VIA_WWAN: com.mapbox.common.NetworkStatus;
				public static values(): androidNative.Array<com.mapbox.common.NetworkStatus>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.NetworkStatus;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class NetworkUsageMetricsMeter extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.NetworkUsageMetricsMeter>;
				public peer: number;
				public static onHttpCodeReceived(param0: number): void;
				public static onBytesTransferred(param0: string, param1: number, param2: number): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace NetworkUsageMetricsMeter {
				export class NetworkUsageMetricsMeterPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.NetworkUsageMetricsMeter.NetworkUsageMetricsMeterPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class OfflineSwitch extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.OfflineSwitch>;
				public peer: number;
				public unregisterObserver(param0: com.mapbox.common.OfflineSwitchObserver): void;
				public static getInstance(): com.mapbox.common.OfflineSwitch;
				public isMapboxStackConnected(): boolean;
				public static cleanNativePeer(param0: number): void;
				public setMapboxStackConnected(param0: boolean): void;
				public constructor(peer: number);
				public registerObserver(param0: com.mapbox.common.OfflineSwitchObserver): void;
				public static reset(): void;
			}
			export namespace OfflineSwitch {
				export class OfflineSwitchPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.OfflineSwitch.OfflineSwitchPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class OfflineSwitchObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.OfflineSwitchObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.OfflineSwitchObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					statusChanged(param0: boolean): void;
				});
				public constructor();
				public statusChanged(param0: boolean): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class OfflineSwitchObserverNative extends java.lang.Object implements com.mapbox.common.OfflineSwitchObserver {
				public static class: java.lang.Class<com.mapbox.common.OfflineSwitchObserverNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public statusChanged(param0: boolean): void;
				public constructor(peer: number);
			}
			export namespace OfflineSwitchObserverNative {
				export class OfflineSwitchObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.OfflineSwitchObserverNative.OfflineSwitchObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class OnBillingServiceError extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.OnBillingServiceError>;
				/**
				 * Constructs a new instance of the com.mapbox.common.OnBillingServiceError interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.BillingServiceError): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.BillingServiceError): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class OnBillingServiceErrorNative extends java.lang.Object implements com.mapbox.common.OnBillingServiceError {
				public static class: java.lang.Class<com.mapbox.common.OnBillingServiceErrorNative>;
				public run(param0: com.mapbox.common.BillingServiceError): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace OnBillingServiceErrorNative {
				export class OnBillingServiceErrorPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.OnBillingServiceErrorNative.OnBillingServiceErrorPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class OnValueChanged extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.OnValueChanged>;
				/**
				 * Constructs a new instance of the com.mapbox.common.OnValueChanged interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: string, param1: com.mapbox.bindgen.Value, param2: com.mapbox.bindgen.Value): void;
				});
				public constructor();
				public run(param0: string, param1: com.mapbox.bindgen.Value, param2: com.mapbox.bindgen.Value): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class OnValueChangedNative extends java.lang.Object implements com.mapbox.common.OnValueChanged {
				public static class: java.lang.Class<com.mapbox.common.OnValueChangedNative>;
				public run(param0: string, param1: com.mapbox.bindgen.Value, param2: com.mapbox.bindgen.Value): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace OnValueChangedNative {
				export class OnValueChangedPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.OnValueChangedNative.OnValueChangedPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PersistentStorageData extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.PersistentStorageData>;
				public constructor(key: string, timestamp: java.util.Date, value: com.mapbox.bindgen.DataRef);
				public getTimestamp(): java.util.Date;
				public getValue(): com.mapbox.bindgen.DataRef;
				public hashCode(): number;
				public toString(): string;
				public getKey(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PersistentStorageError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.PersistentStorageError>;
				public getCode(): com.mapbox.common.PersistentStorageErrorCode;
				public hashCode(): number;
				public getMessage(): string;
				public toString(): string;
				public constructor(code: com.mapbox.common.PersistentStorageErrorCode, message: string);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PersistentStorageErrorCode {
				public static class: java.lang.Class<com.mapbox.common.PersistentStorageErrorCode>;
				public static KEY_ALREADY_EXISTS: com.mapbox.common.PersistentStorageErrorCode;
				public static KEY_NOT_FOUND: com.mapbox.common.PersistentStorageErrorCode;
				public static CORRUPTED_DATA: com.mapbox.common.PersistentStorageErrorCode;
				public static IOERROR: com.mapbox.common.PersistentStorageErrorCode;
				public static UNKNOWN: com.mapbox.common.PersistentStorageErrorCode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.PersistentStorageErrorCode>;
				public static valueOf(name: string): com.mapbox.common.PersistentStorageErrorCode;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PersistentStorageFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.PersistentStorageFactory>;
				public peer: number;
				public static getOrCreateByFile(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.common.PersistentStorageInterface>;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getOrCreateByKey(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.common.PersistentStorageInterface>;
			}
			export namespace PersistentStorageFactory {
				export class PersistentStorageFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.PersistentStorageFactory.PersistentStorageFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PersistentStorageInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.PersistentStorageInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.PersistentStorageInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					put(param0: string, param1: com.mapbox.bindgen.DataRef): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.Date>;
					putMulti(param0: java.util.List<com.mapbox.common.PersistentStorageKeyValue>): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.Date>;
					get(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.common.PersistentStorageData>;
					getMulti(param0: java.util.List<string>): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.List<com.mapbox.common.PersistentStorageData>>;
					getAll(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.List<com.mapbox.common.PersistentStorageData>>;
					remove(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.bindgen.None>;
					removeMulti(param0: java.util.List<string>, param1: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
					removeAll(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
					getStorageSize(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
					shrinkToFit(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.bindgen.None>;
				});
				public constructor();
				public remove(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.bindgen.None>;
				public removeAll(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
				public getStorageSize(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
				public shrinkToFit(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.bindgen.None>;
				public removeMulti(param0: java.util.List<string>, param1: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
				public put(param0: string, param1: com.mapbox.bindgen.DataRef): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.Date>;
				public getMulti(param0: java.util.List<string>): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.List<com.mapbox.common.PersistentStorageData>>;
				public putMulti(param0: java.util.List<com.mapbox.common.PersistentStorageKeyValue>): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.Date>;
				public getAll(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.List<com.mapbox.common.PersistentStorageData>>;
				public get(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.common.PersistentStorageData>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PersistentStorageInterfaceNative extends java.lang.Object implements com.mapbox.common.PersistentStorageInterface {
				public static class: java.lang.Class<com.mapbox.common.PersistentStorageInterfaceNative>;
				public peer: number;
				public remove(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.bindgen.None>;
				public removeAll(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
				public getStorageSize(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
				public shrinkToFit(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.bindgen.None>;
				public removeMulti(param0: java.util.List<string>, param1: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.lang.Long>;
				public put(param0: string, param1: com.mapbox.bindgen.DataRef): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.Date>;
				public getMulti(param0: java.util.List<string>): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.List<com.mapbox.common.PersistentStorageData>>;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public putMulti(param0: java.util.List<com.mapbox.common.PersistentStorageKeyValue>): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.Date>;
				public getAll(): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,java.util.List<com.mapbox.common.PersistentStorageData>>;
				public get(param0: string): com.mapbox.bindgen.Expected<com.mapbox.common.PersistentStorageError,com.mapbox.common.PersistentStorageData>;
			}
			export namespace PersistentStorageInterfaceNative {
				export class PersistentStorageInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.PersistentStorageInterfaceNative.PersistentStorageInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PersistentStorageKeyValue extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.PersistentStorageKeyValue>;
				public getValue(): com.mapbox.bindgen.DataRef;
				public hashCode(): number;
				public constructor(key: string, value: com.mapbox.bindgen.DataRef);
				public toString(): string;
				public getKey(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Platform {
				public static class: java.lang.Class<com.mapbox.common.Platform>;
				public static LINUX: com.mapbox.common.Platform;
				public static IOS: com.mapbox.common.Platform;
				public static ANDROID: com.mapbox.common.Platform;
				public static MAC_OS: com.mapbox.common.Platform;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.Platform>;
				public static valueOf(name: string): com.mapbox.common.Platform;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PlatformHttpService extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.PlatformHttpService>;
				public static INSTANCE: com.mapbox.common.PlatformHttpService;
				public static createPlatformWssService(): com.mapbox.common.experimental.wss_backend.Service;
				public static createPlatformHttpService(): com.mapbox.common.http_backend.Service;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PlatformMetrics extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.PlatformMetrics>;
				public static getPlatformMetricsSources(type: com.mapbox.common.MetricsServiceType): java.util.List<com.mapbox.common.MetricsSource>;
				public constructor();
			}
			export namespace PlatformMetrics {
				export namespace PlatformMetrics {
					export namespace Companion {
						function getPlatformMetricsSources(type: com.mapbox.common.MetricsServiceType): java.util.List<com.mapbox.common.MetricsSource>;
						function getPlatformMetricsSources(type: com.mapbox.common.MetricsServiceType): java.util.List<com.mapbox.common.MetricsSource>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class PlatformStreamFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.PlatformStreamFactory>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public static fileReadStream(param0: string): com.mapbox.common.ReadStream;
				public constructor(peer: number);
				public static memoryReadStream(param0: string): com.mapbox.common.ReadStream;
			}
			export namespace PlatformStreamFactory {
				export class PlatformStreamFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.PlatformStreamFactory.PlatformStreamFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Reachability extends java.lang.Object implements com.mapbox.common.ReachabilityInterface {
				public static class: java.lang.Class<com.mapbox.common.Reachability>;
				public TAG: string; // "MapboxReachability"
				public peer: number;
				public timeoutInMs: number;
				public removeListener(this_: number): boolean;
				public addListener(listener: com.mapbox.common.ReachabilityChanged): number;
				public static createPlatformReachability(hostname: string): com.mapbox.common.ReachabilityInterface;
				public finalize(): void;
				public currentNetworkStatus(): com.mapbox.common.NetworkStatus;
				public removeListener(param0: number): boolean;
				public constructor(exception: string);
				public onNetworkChanged(): void;
				public addListener(param0: com.mapbox.common.ReachabilityChanged): number;
				public isReachable(): boolean;
			}
			export namespace Reachability {
				export class ReachabilityOfflineSwitchObserver extends java.lang.Object implements com.mapbox.common.OfflineSwitchObserver {
					public static class: java.lang.Class<com.mapbox.common.Reachability.ReachabilityOfflineSwitchObserver>;
					public statusChanged(connected: boolean): void;
					public statusChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ReachabilityChanged extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ReachabilityChanged>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ReachabilityChanged interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.NetworkStatus): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.NetworkStatus): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ReachabilityChangedNative extends java.lang.Object implements com.mapbox.common.ReachabilityChanged {
				public static class: java.lang.Class<com.mapbox.common.ReachabilityChangedNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.NetworkStatus): void;
			}
			export namespace ReachabilityChangedNative {
				export class ReachabilityChangedPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ReachabilityChangedNative.ReachabilityChangedPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ReachabilityFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ReachabilityFactory>;
				public peer: number;
				public static reachability(param0: string): com.mapbox.common.ReachabilityInterface;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static reset(): void;
			}
			export namespace ReachabilityFactory {
				export class ReachabilityFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ReachabilityFactory.ReachabilityFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ReachabilityInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ReachabilityInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ReachabilityInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					addListener(param0: com.mapbox.common.ReachabilityChanged): number;
					removeListener(param0: number): boolean;
					isReachable(): boolean;
					currentNetworkStatus(): com.mapbox.common.NetworkStatus;
				});
				public constructor();
				public currentNetworkStatus(): com.mapbox.common.NetworkStatus;
				public removeListener(param0: number): boolean;
				public addListener(param0: com.mapbox.common.ReachabilityChanged): number;
				public isReachable(): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ReachabilityInterfaceNative extends java.lang.Object implements com.mapbox.common.ReachabilityInterface {
				public static class: java.lang.Class<com.mapbox.common.ReachabilityInterfaceNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public currentNetworkStatus(): com.mapbox.common.NetworkStatus;
				public removeListener(param0: number): boolean;
				public constructor(peer: number);
				public addListener(param0: com.mapbox.common.ReachabilityChanged): number;
				public isReachable(): boolean;
			}
			export namespace ReachabilityInterfaceNative {
				export class ReachabilityInterfacePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ReachabilityInterfaceNative.ReachabilityInterfacePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ReadStream extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ReadStream>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ReadStream interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					readBytes(): number;
					isReadable(): boolean;
					isExhausted(): boolean;
					read(param0: com.mapbox.common.Buffer): com.mapbox.bindgen.Expected<string,java.lang.Long>;
				});
				public constructor();
				public readBytes(): number;
				public read(param0: com.mapbox.common.Buffer): com.mapbox.bindgen.Expected<string,java.lang.Long>;
				public isExhausted(): boolean;
				public isReadable(): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ReadStreamNative extends java.lang.Object implements com.mapbox.common.ReadStream {
				public static class: java.lang.Class<com.mapbox.common.ReadStreamNative>;
				public peer: number;
				public readBytes(): number;
				public static cleanNativePeer(param0: number): void;
				public read(param0: com.mapbox.common.Buffer): com.mapbox.bindgen.Expected<string,java.lang.Long>;
				public isExhausted(): boolean;
				public constructor(peer: number);
				public isReadable(): boolean;
			}
			export namespace ReadStreamNative {
				export class ReadStreamPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ReadStreamNative.ReadStreamPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceData extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ResourceData>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public getData(): com.mapbox.bindgen.DataRef;
				public constructor(peer: number);
			}
			export namespace ResourceData {
				export class ResourceDataPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ResourceData.ResourceDataPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceDescription extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.ResourceDescription>;
				public getDomain(): com.mapbox.common.TileDataDomain;
				public hashCode(): number;
				public constructor(domain: com.mapbox.common.TileDataDomain, url: string);
				public getUrl(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadError>;
				public getTransferredBytes(): number;
				public constructor(type: com.mapbox.common.ResourceLoadErrorType, message: string, transf_2ac: number);
				public getType(): com.mapbox.common.ResourceLoadErrorType;
				public hashCode(): number;
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadErrorType {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadErrorType>;
				public static ERRORED: com.mapbox.common.ResourceLoadErrorType;
				public static UNSATISFIED: com.mapbox.common.ResourceLoadErrorType;
				public static CANCELED: com.mapbox.common.ResourceLoadErrorType;
				public static INVALID_ARGUMENT: com.mapbox.common.ResourceLoadErrorType;
				public static INSUFFICIENT_STORAGE: com.mapbox.common.ResourceLoadErrorType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.ResourceLoadErrorType>;
				public static valueOf(name: string): com.mapbox.common.ResourceLoadErrorType;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadFlags {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadFlags>;
				public static NONE: com.mapbox.common.ResourceLoadFlags;
				public static CRITICAL: com.mapbox.common.ResourceLoadFlags;
				public static ACCEPT_EXPIRED: com.mapbox.common.ResourceLoadFlags;
				public static FORCE_LOAD: com.mapbox.common.ResourceLoadFlags;
				public static SKIP_DATA_LOADING: com.mapbox.common.ResourceLoadFlags;
				public static SKIP_DATA_TRANSFER: com.mapbox.common.ResourceLoadFlags;
				public static FORCE_EXPIRED: com.mapbox.common.ResourceLoadFlags;
				public static SKIP_DECOMPRESSION: com.mapbox.common.ResourceLoadFlags;
				public static CHECK_INTEGRITY: com.mapbox.common.ResourceLoadFlags;
				public value: number;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.ResourceLoadFlags>;
				public static valueOf(name: string): com.mapbox.common.ResourceLoadFlags;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadOptions>;
				public getExtraOptions(): com.mapbox.bindgen.Value;
				public constructor(tag: string, flags: com.mapbox.common.ResourceLoadFlags, networ_fcd: com.mapbox.common.NetworkRestriction, extraO_f11: com.mapbox.bindgen.Value);
				public getFlags(): com.mapbox.common.ResourceLoadFlags;
				public hashCode(): number;
				public getTag(): string;
				public toString(): string;
				public constructor(tag: string, extraO_f11: com.mapbox.bindgen.Value);
				public getNetworkRestriction(): com.mapbox.common.NetworkRestriction;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadProgress extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadProgress>;
				public constructor(bytes: number, totalBytes: java.lang.Long);
				public hashCode(): number;
				public getBytes(): number;
				public getTotalBytes(): java.lang.Long;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadProgressCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadProgressCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ResourceLoadProgressCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.ResourceLoadProgress): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.ResourceLoadProgress): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadProgressCallbackNative extends java.lang.Object implements com.mapbox.common.ResourceLoadProgressCallback {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadProgressCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.ResourceLoadProgress): void;
			}
			export namespace ResourceLoadProgressCallbackNative {
				export class ResourceLoadProgressCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ResourceLoadProgressCallbackNative.ResourceLoadProgressCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadResult extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadResult>;
				public getContentType(): string;
				public getBelongsToGroup(): boolean;
				public getTotalBytes(): number;
				public getMustRevalidate(): boolean;
				public toString(): string;
				public getStatus(): com.mapbox.common.ResourceLoadStatus;
				public getExpires(): java.util.Date;
				public constructor(data: com.mapbox.common.ResourceData, status: com.mapbox.common.ResourceLoadStatus, immutable: boolean, mustRe_c1f: boolean, expires: java.util.Date, totalBytes: number, transf_2ac: number, conten_332: string, etag: string, belong_855: boolean);
				public equals(object: any): boolean;
				public getImmutable(): boolean;
				public getTransferredBytes(): number;
				public hashCode(): number;
				public getData(): com.mapbox.common.ResourceData;
				public getEtag(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadResultCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadResultCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ResourceLoadResultCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.ResourceLoadError,com.mapbox.common.ResourceLoadResult>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.ResourceLoadError,com.mapbox.common.ResourceLoadResult>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadResultCallbackNative extends java.lang.Object implements com.mapbox.common.ResourceLoadResultCallback {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadResultCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.ResourceLoadError,com.mapbox.common.ResourceLoadResult>): void;
			}
			export namespace ResourceLoadResultCallbackNative {
				export class ResourceLoadResultCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ResourceLoadResultCallbackNative.ResourceLoadResultCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResourceLoadStatus {
				public static class: java.lang.Class<com.mapbox.common.ResourceLoadStatus>;
				public static AVAILABLE: com.mapbox.common.ResourceLoadStatus;
				public static NOT_FOUND: com.mapbox.common.ResourceLoadStatus;
				public static UNAUTHORIZED: com.mapbox.common.ResourceLoadStatus;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.ResourceLoadStatus;
				public static values(): androidNative.Array<com.mapbox.common.ResourceLoadStatus>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResponseReadStream extends java.lang.Object implements com.mapbox.common.ReadStream {
				public static class: java.lang.Class<com.mapbox.common.ResponseReadStream>;
				public setExhausted(exhausted: boolean): void;
				public read(byteBuffer: com.mapbox.common.Buffer): com.mapbox.bindgen.Expected<string,java.lang.Long>;
				public readBytes(): number;
				public read(param0: com.mapbox.common.Buffer): com.mapbox.bindgen.Expected<string,java.lang.Long>;
				public getReadBytes(): number;
				public constructor(okioBuffer: okio.Buffer);
				public getOkioBuffer(): okio.Buffer;
				public setReadBytes(readBytes: number): void;
				public isExhausted(): boolean;
				public getExhausted(): boolean;
				public isReadable(): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResultCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ResultCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.ResultCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: boolean): void;
				});
				public constructor();
				public run(param0: boolean): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ResultCallbackNative extends java.lang.Object implements com.mapbox.common.ResultCallback {
				public static class: java.lang.Class<com.mapbox.common.ResultCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: boolean): void;
			}
			export namespace ResultCallbackNative {
				export class ResultCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ResultCallbackNative.ResultCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class RunloopErrorHandler extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.RunloopErrorHandler>;
				public static INSTANCE: com.mapbox.common.RunloopErrorHandler;
				public static TAG: string; // "run_loop"
				public static postErrorToMainLooper(error: java.lang.Throwable): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SDKVersions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SDKVersions>;
				public static getList(): java.util.List<string>;
				public constructor();
			}
			export namespace SDKVersions {
				export namespace SDKVersions {
					export namespace Companion {
						function getList(): java.util.List<string>;
						function getList(): java.util.List<string>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Scheduler extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.Scheduler>;
				/**
				 * Constructs a new instance of the com.mapbox.common.Scheduler interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getType(): com.mapbox.common.SchedulerType;
					schedule(param0: com.mapbox.common.Task, param1: com.mapbox.common.TaskOptions): void;
				});
				public constructor();
				public getType(): com.mapbox.common.SchedulerType;
				public schedule(param0: com.mapbox.common.Task, param1: com.mapbox.common.TaskOptions): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SchedulerExecutorDispatcher {
				public static class: java.lang.Class<com.mapbox.common.SchedulerExecutorDispatcher>;
				public close(): void;
				public constructor(executor: java.util.concurrent.Executor);
				public getExecutor(): java.util.concurrent.Executor;
				public dispatch(context: any, block: java.lang.Runnable): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SchedulerFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SchedulerFactory>;
				public peer: number;
				public static createSingleThreaded(): com.mapbox.common.Scheduler;
				public static threadPool(param0: com.mapbox.common.ThreadServiceType): com.mapbox.common.Scheduler;
				public static cleanNativePeer(param0: number): void;
				public static threadPool(): com.mapbox.common.Scheduler;
				public static createSequenced(param0: com.mapbox.common.ThreadServiceType): com.mapbox.common.Scheduler;
				public constructor(peer: number);
				public static createSequenced(): com.mapbox.common.Scheduler;
				public static createSingleThreaded(param0: com.mapbox.common.ThreadServiceType): com.mapbox.common.Scheduler;
			}
			export namespace SchedulerFactory {
				export class SchedulerFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.SchedulerFactory.SchedulerFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SchedulerNative extends java.lang.Object implements com.mapbox.common.Scheduler {
				public static class: java.lang.Class<com.mapbox.common.SchedulerNative>;
				public peer: number;
				public getType(): com.mapbox.common.SchedulerType;
				public static cleanNativePeer(param0: number): void;
				public schedule(param0: com.mapbox.common.Task, param1: com.mapbox.common.TaskOptions): void;
				public constructor(peer: number);
			}
			export namespace SchedulerNative {
				export class SchedulerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.SchedulerNative.SchedulerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SchedulerType {
				public static class: java.lang.Class<com.mapbox.common.SchedulerType>;
				public static PARALLEL: com.mapbox.common.SchedulerType;
				public static SEQUENTIAL: com.mapbox.common.SchedulerType;
				public static values(): androidNative.Array<com.mapbox.common.SchedulerType>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.SchedulerType;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SdkInfoRegistry extends java.lang.Object implements com.mapbox.common.SdkInfoRegistryInterface {
				public static class: java.lang.Class<com.mapbox.common.SdkInfoRegistry>;
				public peer: number;
				public getSdkInformation(): java.util.List<com.mapbox.common.SdkInformation>;
				public registerSdkInformation(param0: com.mapbox.common.SdkInformation): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace SdkInfoRegistry {
				export class SdkInfoRegistryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.SdkInfoRegistry.SdkInfoRegistryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SdkInfoRegistryFactory extends java.lang.Object implements com.mapbox.common.SdkInfoRegistryFactoryInterface {
				public static class: java.lang.Class<com.mapbox.common.SdkInfoRegistryFactory>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getInstance(): com.mapbox.common.SdkInfoRegistry;
				public static reset(): void;
			}
			export namespace SdkInfoRegistryFactory {
				export class SdkInfoRegistryFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.SdkInfoRegistryFactory.SdkInfoRegistryFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SdkInfoRegistryFactoryInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SdkInfoRegistryFactoryInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.SdkInfoRegistryFactoryInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SdkInfoRegistryInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SdkInfoRegistryInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.SdkInfoRegistryInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					registerSdkInformation(param0: com.mapbox.common.SdkInformation): void;
					getSdkInformation(): java.util.List<com.mapbox.common.SdkInformation>;
				});
				public constructor();
				public getSdkInformation(): java.util.List<com.mapbox.common.SdkInformation>;
				public registerSdkInformation(param0: com.mapbox.common.SdkInformation): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SdkInformation extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.SdkInformation>;
				public getVersion(): string;
				public hashCode(): number;
				public getPackageName(): string;
				public getName(): string;
				public constructor(name: string, version: string, packag_540: string);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SdkInformationQuery extends java.lang.Object implements com.mapbox.common.SdkInformationQueryInterface {
				public static class: java.lang.Class<com.mapbox.common.SdkInformationQuery>;
				public peer: number;
				public static getSdkInformationByName(param0: string): com.mapbox.common.SdkInformation;
				public static getSdkInformation(): java.util.List<com.mapbox.common.SdkInformation>;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace SdkInformationQuery {
				export class SdkInformationQueryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.SdkInformationQuery.SdkInformationQueryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SdkInformationQueryInterface extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SdkInformationQueryInterface>;
				/**
				 * Constructs a new instance of the com.mapbox.common.SdkInformationQueryInterface interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SessionSKUIdentifier {
				public static class: java.lang.Class<com.mapbox.common.SessionSKUIdentifier>;
				public static NAV2_SES_TRIP: com.mapbox.common.SessionSKUIdentifier;
				public static NAV2_SES_FDTRIP: com.mapbox.common.SessionSKUIdentifier;
				public static NAV3_SES_UX_AGTRIP: com.mapbox.common.SessionSKUIdentifier;
				public static NAV3_SES_UX_FDTRIP: com.mapbox.common.SessionSKUIdentifier;
				public static NAV3_SES_CORE_AGTRIP: com.mapbox.common.SessionSKUIdentifier;
				public static NAV3_SES_CORE_FDTRIP: com.mapbox.common.SessionSKUIdentifier;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.SessionSKUIdentifier;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.common.SessionSKUIdentifier>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SettingsService extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SettingsService>;
				public peer: number;
				public has(param0: string): com.mapbox.bindgen.Expected<string,java.lang.Boolean>;
				public registerObserver(param0: string, param1: com.mapbox.common.OnValueChanged): number;
				public get(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public static cleanNativePeer(param0: number): void;
				public setFromFile(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public erase(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public get(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public registerObserverAtSettingsThread(param0: string, param1: com.mapbox.common.OnValueChanged): number;
				public constructor(peer: number);
				public set(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public unregisterObserver(param0: number): void;
			}
			export namespace SettingsService {
				export class SettingsServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.SettingsService.SettingsServicePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SettingsServiceFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SettingsServiceFactory>;
				public peer: number;
				public static getInstance(param0: com.mapbox.common.SettingsServiceStorageType): com.mapbox.common.SettingsService;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace SettingsServiceFactory {
				export class SettingsServiceFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.SettingsServiceFactory.SettingsServiceFactoryPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SettingsServiceHelper extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.SettingsServiceHelper>;
				public static get(key: string): com.mapbox.bindgen.Expected<string,string>;
				public static erase(key: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public static has(key: string): boolean;
				public static set(key: string, value: string): com.mapbox.bindgen.Expected<string,java.util.List<string>>;
				public constructor();
			}
			export namespace SettingsServiceHelper {
				export namespace SettingsServiceHelper {
					export namespace Companion {
						function clear$common_release(): void;
						function set(this_s_dbb: string, exception: string): com.mapbox.bindgen.Expected<string,java.util.List<string>>;
						function get(exception: string): com.mapbox.bindgen.Expected<string,string>;
						function erase(this_e_1ef: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
						function has(this_: string): boolean;
						function clear$common_release(): void;
						function set(this_s_dbb: string, exception: string): com.mapbox.bindgen.Expected<string,java.util.List<string>>;
						function get(exception: string): com.mapbox.bindgen.Expected<string,string>;
						function erase(this_e_1ef: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
						function has(this_: string): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SettingsServiceStorageType {
				public static class: java.lang.Class<com.mapbox.common.SettingsServiceStorageType>;
				public static PERSISTENT: com.mapbox.common.SettingsServiceStorageType;
				public static NON_PERSISTENT: com.mapbox.common.SettingsServiceStorageType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.SettingsServiceStorageType;
				public static values(): androidNative.Array<com.mapbox.common.SettingsServiceStorageType>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class SystemInformation extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.SystemInformation>;
				public getApplicationVersion(): string;
				public getPlatformVersion(): string;
				public getPrettyDeviceName(): string;
				public getApplicationName(): string;
				public runningTime(): number;
				public getPlatform(): com.mapbox.common.Platform;
				public getArchitecture(): string;
				public getPlatformName(): string;
				public toString(): string;
				public equals(object: any): boolean;
				public getIsPhysicalDevice(): boolean;
				public getApplicationPackage(): string;
				public getApplicationBuildNumber(): string;
				public getDevice(): string;
				public getDeviceInfo(): string;
				public hashCode(): number;
				public getApplicationCachePath(): string;
				public totalMemory(): number;
				public constructor(platform: com.mapbox.common.Platform, platfo_159: string, platfo_55e: string, applic_f86: string, applic_51b: string, applic_eb7: string, applic_442: string, device: string, archit_cc2: string, deviceInfo: string, applic_4d6: string, isPhys_f5a: boolean, applic_196: string);
				public getApplicationDataPath(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Task extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.Task>;
				/**
				 * Constructs a new instance of the com.mapbox.common.Task interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(): void;
				});
				public constructor();
				public run(): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TaskNative extends java.lang.Object implements com.mapbox.common.Task {
				public static class: java.lang.Class<com.mapbox.common.TaskNative>;
				public run(): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace TaskNative {
				export class TaskPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TaskNative.TaskPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TaskOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TaskOptions>;
				public getDelay(): number;
				public hashCode(): number;
				public constructor(delay: number, priority: com.mapbox.common.TaskPriority);
				public toString(): string;
				public constructor(delay: number);
				public equals(object: any): boolean;
				public getPriority(): com.mapbox.common.TaskPriority;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TaskPriority {
				public static class: java.lang.Class<com.mapbox.common.TaskPriority>;
				public static DEFAULT: com.mapbox.common.TaskPriority;
				public static HIGH: com.mapbox.common.TaskPriority;
				public static values(): androidNative.Array<com.mapbox.common.TaskPriority>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.TaskPriority;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryCollectionState {
				public static class: java.lang.Class<com.mapbox.common.TelemetryCollectionState>;
				public static ENABLED: com.mapbox.common.TelemetryCollectionState;
				public static TURNSTILE_EVENTS_ONLY: com.mapbox.common.TelemetryCollectionState;
				public static UNKNOWN: com.mapbox.common.TelemetryCollectionState;
				public static BACKGROUND_LOCATIONS_DISABLED: com.mapbox.common.TelemetryCollectionState;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.TelemetryCollectionState>;
				public static valueOf(name: string): com.mapbox.common.TelemetryCollectionState;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryCollectionStateObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TelemetryCollectionStateObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TelemetryCollectionStateObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onStateChanged(param0: com.mapbox.common.TelemetryCollectionState): void;
				});
				public constructor();
				public onStateChanged(param0: com.mapbox.common.TelemetryCollectionState): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryCollectionStateObserverNative extends java.lang.Object implements com.mapbox.common.TelemetryCollectionStateObserver {
				public static class: java.lang.Class<com.mapbox.common.TelemetryCollectionStateObserverNative>;
				public peer: number;
				public onStateChanged(param0: com.mapbox.common.TelemetryCollectionState): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace TelemetryCollectionStateObserverNative {
				export class TelemetryCollectionStateObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TelemetryCollectionStateObserverNative.TelemetryCollectionStateObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryLocationProvider extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TelemetryLocationProvider>;
				public peer: number;
				public static getDeviceLocationProvider(): com.mapbox.common.location.DeviceLocationProvider;
				public static cleanNativePeer(param0: number): void;
				public static setDeviceLocationProvider(param0: com.mapbox.common.location.DeviceLocationProvider): void;
				public constructor(peer: number);
			}
			export namespace TelemetryLocationProvider {
				export class TelemetryLocationProviderPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TelemetryLocationProvider.TelemetryLocationProviderPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryService extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TelemetryService>;
				public peer: number;
				public flush(param0: com.mapbox.common.FlushOperationResultCallback): void;
				public static cleanNativePeer(param0: number): void;
				public static getOrCreate(): com.mapbox.common.TelemetryService;
				public constructor(peer: number);
			}
			export namespace TelemetryService {
				export class TelemetryServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TelemetryService.TelemetryServicePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetrySystemUtils extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TelemetrySystemUtils>;
				public static obtainCellularNetworkType(se: globalAndroid.content.Context): string;
				public static obtainBatteryLevel(context: globalAndroid.content.Context): number;
				public static generateCreateDateFormatted(date: java.util.Date): string;
				public static obtainUniversalUniqueIdentifier(): string;
				public static isPluggedIn(context: globalAndroid.content.Context): boolean;
				public static obtainCurrentDate(): string;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryUtils extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TelemetryUtils>;
				public peer: number;
				public unregisterTelemetryCollectionStateObserver(param0: com.mapbox.common.TelemetryCollectionStateObserver): void;
				public static getEventsCollectionState(): boolean;
				public static setEventsCollectionState(param0: boolean, param1: com.mapbox.common.TelemetryUtilsResponseCallback): void;
				public static cleanNativePeer(param0: number): void;
				public static getUserID(): string;
				public constructor(peer: number);
				public static getClientServerEventsCollectionState(): com.mapbox.common.TelemetryCollectionState;
				public registerTelemetryCollectionStateObserver(param0: com.mapbox.common.TelemetryCollectionStateObserver): void;
				public constructor();
			}
			export namespace TelemetryUtils {
				export class TelemetryUtilsPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TelemetryUtils.TelemetryUtilsPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryUtilsResponseCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TelemetryUtilsResponseCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TelemetryUtilsResponseCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.EventsServiceError,com.mapbox.bindgen.None>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.EventsServiceError,com.mapbox.bindgen.None>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TelemetryUtilsResponseCallbackNative extends java.lang.Object implements com.mapbox.common.TelemetryUtilsResponseCallback {
				public static class: java.lang.Class<com.mapbox.common.TelemetryUtilsResponseCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.EventsServiceError,com.mapbox.bindgen.None>): void;
			}
			export namespace TelemetryUtilsResponseCallbackNative {
				export class TelemetryUtilsResponseCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TelemetryUtilsResponseCallbackNative.TelemetryUtilsResponseCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ThreadServiceType {
				public static class: java.lang.Class<com.mapbox.common.ThreadServiceType>;
				public static INTERACTIVE: com.mapbox.common.ThreadServiceType;
				public static IMPORTANT: com.mapbox.common.ThreadServiceType;
				public static DEFAULT: com.mapbox.common.ThreadServiceType;
				public static UTILITY: com.mapbox.common.ThreadServiceType;
				public static BACKGROUND: com.mapbox.common.ThreadServiceType;
				public static UNSPECIFIED: com.mapbox.common.ThreadServiceType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.ThreadServiceType;
				public static values(): androidNative.Array<com.mapbox.common.ThreadServiceType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileDataDomain {
				public static class: java.lang.Class<com.mapbox.common.TileDataDomain>;
				public static MAPS: com.mapbox.common.TileDataDomain;
				public static NAVIGATION: com.mapbox.common.TileDataDomain;
				public static SEARCH: com.mapbox.common.TileDataDomain;
				public static ADAS: com.mapbox.common.TileDataDomain;
				public static NAVIGATION_HD: com.mapbox.common.TileDataDomain;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.TileDataDomain;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.common.TileDataDomain>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegion extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileRegion>;
				public constructor(id: string, requir_7eb: number, comple_3d1: number, comple_463: number, expires: java.util.Date, extraData: com.mapbox.bindgen.Value);
				public getId(): string;
				public hashCode(): number;
				public getExtraData(): com.mapbox.bindgen.Value;
				public getCompletedResourceCount(): number;
				public getCompletedResourceSize(): number;
				public toString(): string;
				public getRequiredResourceCount(): number;
				public getExpires(): java.util.Date;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionBooleanCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionBooleanCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionBooleanCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,java.lang.Boolean>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,java.lang.Boolean>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionBooleanCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionBooleanCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionBooleanCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,java.lang.Boolean>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace TileRegionBooleanCallbackNative {
				export class TileRegionBooleanCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionBooleanCallbackNative.TileRegionBooleanCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegion>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegion>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegion>): void;
			}
			export namespace TileRegionCallbackNative {
				export class TileRegionCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionCallbackNative.TileRegionCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileRegionError>;
				public getType(): com.mapbox.common.TileRegionErrorType;
				public hashCode(): number;
				public constructor(type: com.mapbox.common.TileRegionErrorType, message: string);
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionErrorType {
				public static class: java.lang.Class<com.mapbox.common.TileRegionErrorType>;
				public static CANCELED: com.mapbox.common.TileRegionErrorType;
				public static DOES_NOT_EXIST: com.mapbox.common.TileRegionErrorType;
				public static TILESET_DESCRIPTOR: com.mapbox.common.TileRegionErrorType;
				public static DISK_FULL: com.mapbox.common.TileRegionErrorType;
				public static OTHER: com.mapbox.common.TileRegionErrorType;
				public static TILE_COUNT_EXCEEDED: com.mapbox.common.TileRegionErrorType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.TileRegionErrorType>;
				public static valueOf(name: string): com.mapbox.common.TileRegionErrorType;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionEstimateOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateOptions>;
				public getExtraOptions(): com.mapbox.bindgen.Value;
				public constructor(extraO_f11: com.mapbox.bindgen.Value);
				public hashCode(): number;
				public constructor(errorM_a3f: number, precis_94c: number, timeout: number, extraO_f11: com.mapbox.bindgen.Value);
				public getTimeout(): number;
				public getPreciseEstimationTimeout(): number;
				public toString(): string;
				public getErrorMargin(): number;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionEstimateProgress extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateProgress>;
				public getPartialResult(): com.mapbox.common.TileRegionEstimateResult;
				public hashCode(): number;
				public constructor(requir_7eb: number, errore_d93: number, comple_3d1: number, partia_bc3: com.mapbox.common.TileRegionEstimateResult);
				public getErroredResourceCount(): number;
				public getCompletedResourceCount(): number;
				public toString(): string;
				public getRequiredResourceCount(): number;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionEstimateProgressCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateProgressCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionEstimateProgressCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.TileRegionEstimateProgress): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.TileRegionEstimateProgress): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionEstimateProgressCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionEstimateProgressCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateProgressCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.TileRegionEstimateProgress): void;
			}
			export namespace TileRegionEstimateProgressCallbackNative {
				export class TileRegionEstimateProgressCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateProgressCallbackNative.TileRegionEstimateProgressCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionEstimateResult extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateResult>;
				public getTransferSize(): number;
				public getStorageSize(): number;
				public constructor(errorM_a3f: number, transf_ca7: number, storag_e47: number, extraData: com.mapbox.bindgen.Value);
				public hashCode(): number;
				public getExtraData(): com.mapbox.bindgen.Value;
				public toString(): string;
				public getErrorMargin(): number;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionEstimateResultCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateResultCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionEstimateResultCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegionEstimateResult>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegionEstimateResult>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionEstimateResultCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionEstimateResultCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateResultCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegionEstimateResult>): void;
			}
			export namespace TileRegionEstimateResultCallbackNative {
				export class TileRegionEstimateResultCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionEstimateResultCallbackNative.TileRegionEstimateResultCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionGeometryCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionGeometryCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionGeometryCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.geojson.Geometry>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.geojson.Geometry>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionGeometryCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionGeometryCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionGeometryCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.geojson.Geometry>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace TileRegionGeometryCallbackNative {
				export class TileRegionGeometryCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionGeometryCallbackNative.TileRegionGeometryCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionLoadOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileRegionLoadOptions>;
				public getExtraOptions(): com.mapbox.bindgen.Value;
				public toBuilder(): com.mapbox.common.TileRegionLoadOptions.Builder;
				public getGeometry(): com.mapbox.geojson.Geometry;
				public getAverageBytesPerSecond(): java.lang.Integer;
				public hashCode(): number;
				public getStartLocation(): com.mapbox.geojson.Point;
				public getAcceptExpired(): boolean;
				public getMetadata(): com.mapbox.bindgen.Value;
				public getDescriptors(): java.util.List<com.mapbox.common.TilesetDescriptor>;
				public toString(): string;
				public getNetworkRestriction(): com.mapbox.common.NetworkRestriction;
				public equals(object: any): boolean;
			}
			export namespace TileRegionLoadOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.TileRegionLoadOptions.Builder>;
					public metadata(metadata: com.mapbox.bindgen.Value): com.mapbox.common.TileRegionLoadOptions.Builder;
					public acceptExpired(accept_e36: boolean): com.mapbox.common.TileRegionLoadOptions.Builder;
					public extraOptions(extraO_f11: com.mapbox.bindgen.Value): com.mapbox.common.TileRegionLoadOptions.Builder;
					public descriptors(descri_449: java.util.List<com.mapbox.common.TilesetDescriptor>): com.mapbox.common.TileRegionLoadOptions.Builder;
					public networkRestriction(networ_fcd: com.mapbox.common.NetworkRestriction): com.mapbox.common.TileRegionLoadOptions.Builder;
					public startLocation(startL_0b8: com.mapbox.geojson.Point): com.mapbox.common.TileRegionLoadOptions.Builder;
					public constructor();
					public averageBytesPerSecond(averag_6fe: java.lang.Integer): com.mapbox.common.TileRegionLoadOptions.Builder;
					public build(): com.mapbox.common.TileRegionLoadOptions;
					public geometry(geometry: com.mapbox.geojson.Geometry): com.mapbox.common.TileRegionLoadOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionLoadProgress extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileRegionLoadProgress>;
				public getLoadedResourceCount(): number;
				public getLoadedResourceSize(): number;
				public hashCode(): number;
				public getErroredResourceCount(): number;
				public getCompletedResourceCount(): number;
				public getCompletedResourceSize(): number;
				public toString(): string;
				public getRequiredResourceCount(): number;
				public constructor(comple_3d1: number, comple_463: number, errore_d93: number, requir_7eb: number, loaded_04b: number, loaded_4cd: number);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionLoadProgressCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionLoadProgressCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionLoadProgressCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.TileRegionLoadProgress): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.TileRegionLoadProgress): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionLoadProgressCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionLoadProgressCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionLoadProgressCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.TileRegionLoadProgress): void;
			}
			export namespace TileRegionLoadProgressCallbackNative {
				export class TileRegionLoadProgressCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionLoadProgressCallbackNative.TileRegionLoadProgressCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionMetadataCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionMetadataCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionMetadataCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.bindgen.Value>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.bindgen.Value>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionMetadataCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionMetadataCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionMetadataCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.bindgen.Value>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace TileRegionMetadataCallbackNative {
				export class TileRegionMetadataCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionMetadataCallbackNative.TileRegionMetadataCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionTilesetsCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionTilesetsCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionTilesetsCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TilesetDescriptor>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TilesetDescriptor>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionTilesetsCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionTilesetsCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionTilesetsCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TilesetDescriptor>): void;
			}
			export namespace TileRegionTilesetsCallbackNative {
				export class TileRegionTilesetsCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionTilesetsCallbackNative.TileRegionTilesetsCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionsCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileRegionsCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileRegionsCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,java.util.List<com.mapbox.common.TileRegion>>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,java.util.List<com.mapbox.common.TileRegion>>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileRegionsCallbackNative extends java.lang.Object implements com.mapbox.common.TileRegionsCallback {
				public static class: java.lang.Class<com.mapbox.common.TileRegionsCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,java.util.List<com.mapbox.common.TileRegion>>): void;
			}
			export namespace TileRegionsCallbackNative {
				export class TileRegionsCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileRegionsCallbackNative.TileRegionsCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileStore extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileStore>;
				public peer: number;
				public loadTileRegion(param0: string, param1: com.mapbox.common.TileRegionLoadOptions, param2: com.mapbox.common.TileRegionCallback): com.mapbox.common.Cancelable;
				public loadResource(param0: com.mapbox.common.ResourceDescription, param1: com.mapbox.common.ResourceLoadOptions, param2: com.mapbox.common.ResourceLoadProgressCallback, param3: com.mapbox.common.ResourceLoadResultCallback): com.mapbox.common.Cancelable;
				public addObserver(param0: com.mapbox.common.TileStoreObserver): void;
				public setOption(param0: string, param1: com.mapbox.common.TileDataDomain, param2: com.mapbox.bindgen.Value): void;
				public getAllTileRegions(param0: com.mapbox.common.TileRegionsCallback): void;
				public clearAmbientCache(param0: com.mapbox.common.AmbientCacheClearingCallback): void;
				public prepareTileRegionUpdate(param0: string, param1: com.mapbox.common.TileRegionLoadOptions, param2: com.mapbox.common.TileRegionLoadProgressCallback, param3: com.mapbox.common.TileRegionCallback): com.mapbox.common.Cancelable;
				public removeTileRegion(param0: string, param1: com.mapbox.common.TileRegionCallback): void;
				public static create(param0: string): com.mapbox.common.TileStore;
				public loadTileRegion(param0: string, param1: com.mapbox.common.TileRegionLoadOptions, param2: com.mapbox.common.TileRegionLoadProgressCallback, param3: com.mapbox.common.TileRegionCallback): com.mapbox.common.Cancelable;
				public static create(): com.mapbox.common.TileStore;
				public getTileRegion(param0: string, param1: com.mapbox.common.TileRegionCallback): void;
				public getTileRegionGeometry(param0: string, param1: com.mapbox.common.TileRegionGeometryCallback): void;
				public removeObserver(param0: com.mapbox.common.TileStoreObserver): void;
				public constructor(peer: number);
				public estimateTileRegion(param0: string, param1: com.mapbox.common.TileRegionLoadOptions, param2: com.mapbox.common.TileRegionEstimateOptions, param3: com.mapbox.common.TileRegionEstimateProgressCallback, param4: com.mapbox.common.TileRegionEstimateResultCallback): com.mapbox.common.Cancelable;
				public estimateTileRegion(param0: string, param1: com.mapbox.common.TileRegionLoadOptions, param2: com.mapbox.common.TileRegionEstimateProgressCallback, param3: com.mapbox.common.TileRegionEstimateResultCallback): com.mapbox.common.Cancelable;
				public loadTileRegion(param0: string, param1: com.mapbox.common.TileRegionLoadOptions): com.mapbox.common.Cancelable;
				public getTileRegionMetadata(param0: string, param1: com.mapbox.common.TileRegionMetadataCallback): void;
				public setOption(param0: string, param1: com.mapbox.bindgen.Value): void;
				public getTileRegionTilesets(param0: string, param1: com.mapbox.common.TileRegionTilesetsCallback): void;
				public tileRegionContainsDescriptors(param0: string, param1: java.util.List<com.mapbox.common.TilesetDescriptor>, param2: com.mapbox.common.TileRegionBooleanCallback): void;
				public removeTileRegion(param0: string): void;
				public static cleanNativePeer(param0: number): void;
				public computeCoveredArea(param0: java.util.List<com.mapbox.common.TilesetDescriptor>, param1: com.mapbox.common.TileRegionGeometryCallback): void;
				public applyTileRegionUpdate(param0: string, param1: com.mapbox.common.TileRegionLoadProgressCallback, param2: com.mapbox.common.TileRegionCallback): com.mapbox.common.Cancelable;
				public clearAmbientCache(param0: com.mapbox.common.AmbientCacheClearingCallback, param1: com.mapbox.common.TileStoreAmbientCacheFilterOptions): void;
			}
			export namespace TileStore {
				export class TileStorePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileStore.TileStorePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileStoreAmbientCacheFilterOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TileStoreAmbientCacheFilterOptions>;
				public getDomainFilter(): java.util.List<com.mapbox.common.TileDataDomain>;
				public hashCode(): number;
				public constructor(typeFilter: java.util.List<com.mapbox.common.TileStoreAmbientCacheType>, domain_8e3: java.util.List<com.mapbox.common.TileDataDomain>);
				public getTypeFilter(): java.util.List<com.mapbox.common.TileStoreAmbientCacheType>;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileStoreAmbientCacheType {
				public static class: java.lang.Class<com.mapbox.common.TileStoreAmbientCacheType>;
				public static TILES: com.mapbox.common.TileStoreAmbientCacheType;
				public static RESOURCES: com.mapbox.common.TileStoreAmbientCacheType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.TileStoreAmbientCacheType>;
				public static valueOf(name: string): com.mapbox.common.TileStoreAmbientCacheType;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileStoreObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileStoreObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TileStoreObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onRegionLoadProgress(param0: string, param1: com.mapbox.common.TileRegionLoadProgress): void;
					onRegionLoadFinished(param0: string, param1: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegion>): void;
					onRegionRemoved(param0: string): void;
					onRegionGeometryChanged(param0: string, param1: com.mapbox.geojson.Geometry): void;
					onRegionMetadataChanged(param0: string, param1: com.mapbox.bindgen.Value): void;
				});
				public constructor();
				public onRegionLoadFinished(param0: string, param1: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegion>): void;
				public onRegionGeometryChanged(param0: string, param1: com.mapbox.geojson.Geometry): void;
				public onRegionMetadataChanged(param0: string, param1: com.mapbox.bindgen.Value): void;
				public onRegionRemoved(param0: string): void;
				public onRegionLoadProgress(param0: string, param1: com.mapbox.common.TileRegionLoadProgress): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileStoreObserverNative extends java.lang.Object implements com.mapbox.common.TileStoreObserver {
				public static class: java.lang.Class<com.mapbox.common.TileStoreObserverNative>;
				public peer: number;
				public onRegionLoadFinished(param0: string, param1: com.mapbox.bindgen.Expected<com.mapbox.common.TileRegionError,com.mapbox.common.TileRegion>): void;
				public onRegionGeometryChanged(param0: string, param1: com.mapbox.geojson.Geometry): void;
				public onRegionMetadataChanged(param0: string, param1: com.mapbox.bindgen.Value): void;
				public onRegionRemoved(param0: string): void;
				public static cleanNativePeer(param0: number): void;
				public onRegionLoadProgress(param0: string, param1: com.mapbox.common.TileRegionLoadProgress): void;
				public constructor(peer: number);
			}
			export namespace TileStoreObserverNative {
				export class TileStoreObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TileStoreObserverNative.TileStoreObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TileStoreOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TileStoreOptions>;
				public static DISK_QUOTA: string; // "disk-quota"
				public static MAPBOX_APIURL: string; // "mapbox-api-url"
				public static TILE_URLTEMPLATE: string; // "tile-url-template"
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TilesetDescriptor extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TilesetDescriptor>;
				public peer: number;
				public toValue(param0: com.mapbox.common.TilesetDescriptorValueCallback): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace TilesetDescriptor {
				export class TilesetDescriptorPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TilesetDescriptor.TilesetDescriptorPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TilesetDescriptorValueCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.TilesetDescriptorValueCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.TilesetDescriptorValueCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TilesetDescriptorValueCallbackNative extends java.lang.Object implements com.mapbox.common.TilesetDescriptorValueCallback {
				public static class: java.lang.Class<com.mapbox.common.TilesetDescriptorValueCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>): void;
			}
			export namespace TilesetDescriptorValueCallbackNative {
				export class TilesetDescriptorValueCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.TilesetDescriptorValueCallbackNative.TilesetDescriptorValueCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TransferError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TransferError>;
				public constructor(code: com.mapbox.common.TransferErrorCode, message: string);
				public getCode(): com.mapbox.common.TransferErrorCode;
				public hashCode(): number;
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TransferErrorCode {
				public static class: java.lang.Class<com.mapbox.common.TransferErrorCode>;
				public static FILE_SYSTEM_ERROR: com.mapbox.common.TransferErrorCode;
				public static NETWORK_ERROR: com.mapbox.common.TransferErrorCode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.TransferErrorCode>;
				public static valueOf(name: string): com.mapbox.common.TransferErrorCode;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TransferState {
				public static class: java.lang.Class<com.mapbox.common.TransferState>;
				public static PENDING: com.mapbox.common.TransferState;
				public static IN_PROGRESS: com.mapbox.common.TransferState;
				public static FAILED: com.mapbox.common.TransferState;
				public static FINISHED: com.mapbox.common.TransferState;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.common.TransferState>;
				public static valueOf(name: string): com.mapbox.common.TransferState;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class TurnstileEvent extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.TurnstileEvent>;
				public hashCode(): number;
				public constructor(skuId: com.mapbox.common.UserSKUIdentifier);
				public toString(): string;
				public getSkuId(): com.mapbox.common.UserSKUIdentifier;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class UploadOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.UploadOptions>;
				public getTimeout(): number;
				public getUrl(): string;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor(filePath: string, url: string, headers: java.util.HashMap<string,string>, metadata: string, mediaType: string, sdkInf_f5f: com.mapbox.common.SdkInformation);
				public setHeaders(headers: java.util.HashMap<string,string>): void;
				public constructor(filePath: string, url: string, headers: java.util.HashMap<string,string>, metadata: string, mediaType: string, networ_fcd: com.mapbox.common.NetworkRestriction, sdkInf_f5f: com.mapbox.common.SdkInformation, timeout: number);
				public getMediaType(): string;
				public getSdkInformation(): com.mapbox.common.SdkInformation;
				public getHeaders(): java.util.HashMap<string,string>;
				public hashCode(): number;
				public getFilePath(): string;
				public getNetworkRestriction(): com.mapbox.common.NetworkRestriction;
				public getMetadata(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class UploadStatus extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.common.UploadStatus>;
				public getUploadId(): number;
				public getSentBytes(): number;
				public setUploadId(uploadId: number): void;
				public setTotalSentBytes(totalS_e12: number): void;
				public setState(state: com.mapbox.common.TransferState): void;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor(uploadId: number, state: com.mapbox.common.TransferState, error: com.mapbox.common.TransferError, totalBytes: java.lang.Long, sentBytes: number, totalS_e12: number, httpResult: com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>);
				public setError(error: com.mapbox.common.TransferError): void;
				public setTotalBytes(totalBytes: java.lang.Long): void;
				public getTotalSentBytes(): number;
				public setHttpResult(httpResult: com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>): void;
				public hashCode(): number;
				public getHttpResult(): com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>;
				public getTotalBytes(): java.lang.Long;
				public constructor(error: com.mapbox.common.TransferError, totalBytes: java.lang.Long, httpResult: com.mapbox.bindgen.Expected<com.mapbox.common.HttpRequestError,com.mapbox.common.HttpResponseData>);
				public setSentBytes(sentBytes: number): void;
				public getError(): com.mapbox.common.TransferError;
				public getState(): com.mapbox.common.TransferState;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class UploadStatusCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.UploadStatusCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.common.UploadStatusCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.common.UploadStatus): void;
				});
				public constructor();
				public run(param0: com.mapbox.common.UploadStatus): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class UploadStatusCallbackNative extends java.lang.Object implements com.mapbox.common.UploadStatusCallback {
				public static class: java.lang.Class<com.mapbox.common.UploadStatusCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.common.UploadStatus): void;
			}
			export namespace UploadStatusCallbackNative {
				export class UploadStatusCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.UploadStatusCallbackNative.UploadStatusCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class UserSKUIdentifier {
				public static class: java.lang.Class<com.mapbox.common.UserSKUIdentifier>;
				public static MAPS_MAUS: com.mapbox.common.UserSKUIdentifier;
				public static VISION_MAUS: com.mapbox.common.UserSKUIdentifier;
				public static VISION_FLEET_MAUS: com.mapbox.common.UserSKUIdentifier;
				public static NAV2_SES_MAU: com.mapbox.common.UserSKUIdentifier;
				public static NAV3_UX_MAU: com.mapbox.common.UserSKUIdentifier;
				public static NAV3_CORE_MAU: com.mapbox.common.UserSKUIdentifier;
				public static GEOFENCING_MAU: com.mapbox.common.UserSKUIdentifier;
				public static UNITY_MAUS: com.mapbox.common.UserSKUIdentifier;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.common.UserSKUIdentifier;
				public static values(): androidNative.Array<com.mapbox.common.UserSKUIdentifier>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class ValueConverter extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.ValueConverter>;
				public peer: number;
				public static toJson(param0: com.mapbox.bindgen.Value): string;
				public static cleanNativePeer(param0: number): void;
				public static toJson(param0: com.mapbox.bindgen.Value, param1: number): string;
				public constructor(peer: number);
				public static fromJson(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
			}
			export namespace ValueConverter {
				export class ValueConverterPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.ValueConverter.ValueConverterPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export class Version extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.common.Version>;
				public peer: number;
				public static getCommonSDKRevisionString(): string;
				public static getCommonSDKVersionString(): string;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getMinorVersion(): number;
				public static getMajorVersion(): number;
				public static getPatchVersion(): number;
			}
			export namespace Version {
				export class VersionPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.common.Version.VersionPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace battery {
				export class AndroidBatteryMonitor extends java.lang.Object implements com.mapbox.common.BatteryMonitorInterface {
					public static class: java.lang.Class<com.mapbox.common.battery.AndroidBatteryMonitor>;
					public constructor(context: globalAndroid.content.Context, intent_d31: string);
					public unregisterObserver(observer: com.mapbox.common.BatteryMonitorObserver): void;
					public unregisterObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
					public static create(): com.mapbox.common.BatteryMonitorInterface;
					public getBatteryChargingStatus(this_: com.mapbox.common.BatteryChargingStatusCallback): void;
					public getBatteryChargingStatus(param0: com.mapbox.common.BatteryChargingStatusCallback): void;
					public registerObserver(it: com.mapbox.common.BatteryMonitorObserver): void;
					public registerObserver(param0: com.mapbox.common.BatteryMonitorObserver): void;
				}
				export namespace AndroidBatteryMonitor {
					export namespace AndroidBatteryMonitor {
						export namespace Companion {
							function create(): com.mapbox.common.BatteryMonitorInterface;
							function create(): com.mapbox.common.BatteryMonitorInterface;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace core {
				export class BuildConfig extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.core.BuildConfig>;
					public static DEBUG: boolean; // 0
					public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.common.core"
					public static BUILD_TYPE: string; // "release"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace core {
				export namespace module {
					export class CommonSingletonModuleProvider extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.core.module.CommonSingletonModuleProvider>;
						public static INSTANCE: com.mapbox.common.core.module.CommonSingletonModuleProvider;
						public getLoaderInstance(): com.mapbox.common.module.LibraryLoader;
					}
					export namespace CommonSingletonModuleProvider {
						export class WhenMappings extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.common.core.module.CommonSingletonModuleProvider.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export class MapboxSupport extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.experimental.MapboxSupport>;
					public constructor(nativePeer: number);
					public static getSupportPackageData(): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.DataRef>;
					public static saveSupportPackageToFile(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
					public setPeer(nativePeer: number): void;
				}
				export namespace MapboxSupport {
					export namespace MapboxSupport {
						export namespace Companion {
							function getSupportPackageData(): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.DataRef>;
							function saveSupportPackageToFile(fileName: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							function getSupportPackageData(): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.DataRef>;
							function saveSupportPackageToFile(fileName: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export class PersistentLogConfiguration extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.experimental.PersistentLogConfiguration>;
					public peer: number;
					public static resetFileLoggingLevelForCategory(param0: string): void;
					public static getFileFlushLines(): java.lang.Long;
					public static getFileRotateCount(): number;
					public static setFileLoggingLevel(param0: com.mapbox.common.LoggingLevel): void;
					public static getFilePath(): string;
					public static getFileLoggingLevel(): com.mapbox.common.LoggingLevel;
					public static getFileLoggingLevelForCategory(param0: string): com.mapbox.common.LoggingLevel;
					public static getFileMaxSize(): number;
					public static setFileMaxSize(param0: number): void;
					public static getFileFlushBufferSize(): java.lang.Long;
					public static setFileRotateCount(param0: number): void;
					public static setFilePerCategory(param0: boolean): void;
					public static setFilePath(param0: string): void;
					public static setFileFlushConfig(param0: java.lang.Long, param1: java.lang.Long, param2: java.lang.Long, param3: com.mapbox.common.LoggingLevel): void;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public static setFileAllowHeader(param0: boolean): void;
					public static getFilePerCategory(): boolean;
					public static getFileAllowHeader(): boolean;
					public static getFileFlushImmediateFromLogLevel(): com.mapbox.common.LoggingLevel;
					public static getFileFlushSeconds(): java.lang.Long;
					public static setFileLoggingLevelForCategory(param0: string, param1: com.mapbox.common.LoggingLevel): void;
				}
				export namespace PersistentLogConfiguration {
					export class PersistentLogConfigurationPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.experimental.PersistentLogConfiguration.PersistentLogConfigurationPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class Data extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.Data>;
						public isString(): boolean;
						public isByteArray(): boolean;
						public static valueOf(value: string): com.mapbox.common.experimental.wss_backend.Data;
						public getByteArray(): androidNative.Array<number>;
						public getString(): string;
						public constructor(value: androidNative.Array<number>);
						public constructor(value: string);
						public static valueOf(value: androidNative.Array<number>): com.mapbox.common.experimental.wss_backend.Data;
						public toString(): string;
						public getTypeInfo(): com.mapbox.common.experimental.wss_backend.Data.Type;
					}
					export namespace Data {
						export class Type {
							public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.Data.Type>;
							public static BYTE_ARRAY: com.mapbox.common.experimental.wss_backend.Data.Type;
							public static STRING: com.mapbox.common.experimental.wss_backend.Data.Type;
							public static valueOf(name: string): com.mapbox.common.experimental.wss_backend.Data.Type;
							public static values(): androidNative.Array<com.mapbox.common.experimental.wss_backend.Data.Type>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class Request extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.Request>;
						public getNetworkRestriction(): com.mapbox.common.NetworkRestriction;
						public toBuilder(): com.mapbox.common.experimental.wss_backend.Request.Builder;
						public setHeaders(headers: java.util.HashMap<string,string>): void;
						public getFlags(): number;
						public hashCode(): number;
						public getUrl(): string;
						public getHeaders(): java.util.HashMap<string,string>;
						public getTimeout(): number;
						public equals(object: any): boolean;
						public toString(): string;
					}
					export namespace Request {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.Request.Builder>;
							public constructor();
							public url(url: string): com.mapbox.common.experimental.wss_backend.Request.Builder;
							public timeout(timeout: number): com.mapbox.common.experimental.wss_backend.Request.Builder;
							public networkRestriction(networ_fcd: com.mapbox.common.NetworkRestriction): com.mapbox.common.experimental.wss_backend.Request.Builder;
							public build(): com.mapbox.common.experimental.wss_backend.Request;
							public flags(flags: number): com.mapbox.common.experimental.wss_backend.Request.Builder;
							public headers(headers: java.util.HashMap<string,string>): com.mapbox.common.experimental.wss_backend.Request.Builder;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class RequestObserver extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.RequestObserver>;
						/**
						 * Constructs a new instance of the com.mapbox.common.experimental.wss_backend.RequestObserver interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onResponse(param0: number, param1: com.mapbox.common.experimental.wss_backend.ResponseData): void;
							onData(param0: number, param1: com.mapbox.common.experimental.wss_backend.WsOpCode, param2: boolean): void;
							onSucceeded(param0: number): void;
							onFailed(param0: number, param1: com.mapbox.common.HttpRequestError, param2: java.lang.Integer): void;
							onSwitchingProtocols(param0: number): void;
						});
						public constructor();
						public onData(param0: number, param1: com.mapbox.common.experimental.wss_backend.WsOpCode, param2: boolean): void;
						public onResponse(param0: number, param1: com.mapbox.common.experimental.wss_backend.ResponseData): void;
						public onFailed(param0: number, param1: com.mapbox.common.HttpRequestError, param2: java.lang.Integer): void;
						public onSucceeded(param0: number): void;
						public onSwitchingProtocols(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class RequestObserverNative extends java.lang.Object implements com.mapbox.common.experimental.wss_backend.RequestObserver {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.RequestObserverNative>;
						public peer: number;
						public onData(param0: number, param1: com.mapbox.common.experimental.wss_backend.WsOpCode, param2: boolean): void;
						public onResponse(param0: number, param1: com.mapbox.common.experimental.wss_backend.ResponseData): void;
						public static cleanNativePeer(param0: number): void;
						public onFailed(param0: number, param1: com.mapbox.common.HttpRequestError, param2: java.lang.Integer): void;
						public onSucceeded(param0: number): void;
						public onSwitchingProtocols(param0: number): void;
						public constructor(peer: number);
					}
					export namespace RequestObserverNative {
						export class RequestObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.RequestObserverNative.RequestObserverPeerCleaner>;
							public constructor(peer: number);
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class ResponseData extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.ResponseData>;
						public constructor(headers: java.util.HashMap<string,string>, code: number, dataStream: com.mapbox.common.ReadStream);
						public getCode(): number;
						public getDataStream(): com.mapbox.common.ReadStream;
						public hashCode(): number;
						public getHeaders(): java.util.HashMap<string,string>;
						public equals(object: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class Service extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.Service>;
						/**
						 * Constructs a new instance of the com.mapbox.common.experimental.wss_backend.Service interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							setPingTimeout(param0: number): void;
							connect(param0: com.mapbox.common.experimental.wss_backend.Request, param1: com.mapbox.common.experimental.wss_backend.RequestObserver): number;
							cancelConnection(param0: number, param1: com.mapbox.common.ResultCallback): void;
							write(param0: number, param1: com.mapbox.common.experimental.wss_backend.Data): void;
						});
						public constructor();
						public write(param0: number, param1: com.mapbox.common.experimental.wss_backend.Data): void;
						public setPingTimeout(param0: number): void;
						public connect(param0: com.mapbox.common.experimental.wss_backend.Request, param1: com.mapbox.common.experimental.wss_backend.RequestObserver): number;
						public cancelConnection(param0: number, param1: com.mapbox.common.ResultCallback): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class ServiceNative extends java.lang.Object implements com.mapbox.common.experimental.wss_backend.Service {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.ServiceNative>;
						public peer: number;
						public write(param0: number, param1: com.mapbox.common.experimental.wss_backend.Data): void;
						public setPingTimeout(param0: number): void;
						public static cleanNativePeer(param0: number): void;
						public connect(param0: com.mapbox.common.experimental.wss_backend.Request, param1: com.mapbox.common.experimental.wss_backend.RequestObserver): number;
						public cancelConnection(param0: number, param1: com.mapbox.common.ResultCallback): void;
						public constructor(peer: number);
					}
					export namespace ServiceNative {
						export class ServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.ServiceNative.ServicePeerCleaner>;
							public constructor(peer: number);
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace experimental {
				export namespace wss_backend {
					export class WsOpCode {
						public static class: java.lang.Class<com.mapbox.common.experimental.wss_backend.WsOpCode>;
						public static TEXT: com.mapbox.common.experimental.wss_backend.WsOpCode;
						public static BINARY: com.mapbox.common.experimental.wss_backend.WsOpCode;
						public static CONTINUATION: com.mapbox.common.experimental.wss_backend.WsOpCode;
						public static CLOSE: com.mapbox.common.experimental.wss_backend.WsOpCode;
						public static PING: com.mapbox.common.experimental.wss_backend.WsOpCode;
						public static PONG: com.mapbox.common.experimental.wss_backend.WsOpCode;
						public static valueOf(name: string): com.mapbox.common.experimental.wss_backend.WsOpCode;
						public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): androidNative.Array<com.mapbox.common.experimental.wss_backend.WsOpCode>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class AddFeatureCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.AddFeatureCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.AddFeatureCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,string>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,string>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class AddFeatureCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.AddFeatureCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.AddFeatureCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,string>): void;
				}
				export namespace AddFeatureCallbackNative {
					export namespace AddFeatureCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class AddObserverCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.AddObserverCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.AddObserverCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class AddObserverCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.AddObserverCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.AddObserverCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
				export namespace AddObserverCallbackNative {
					export namespace AddObserverCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class ClearFeaturesCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.ClearFeaturesCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.ClearFeaturesCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,java.lang.Integer>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,java.lang.Integer>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class ClearFeaturesCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.ClearFeaturesCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.ClearFeaturesCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,java.lang.Integer>): void;
				}
				export namespace ClearFeaturesCallbackNative {
					export namespace ClearFeaturesCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class ConfigureCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.ConfigureCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.ConfigureCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class ConfigureCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.ConfigureCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.ConfigureCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
				export namespace ConfigureCallbackNative {
					export namespace ConfigureCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofenceState extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofenceState>;
					public toString(): string;
					public getTimestamp(): java.util.Date;
					public equals(other: any): boolean;
					public toBuilder(): com.mapbox.common.geofencing.GeofenceState.Builder;
					public hashCode(): number;
					public getFeature(): com.mapbox.geojson.Feature;
				}
				export namespace GeofenceState {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.geofencing.GeofenceState.Builder>;
						public constructor();
						public setFeature(this_s_62c: com.mapbox.geojson.Feature): com.mapbox.common.geofencing.GeofenceState.Builder;
						public getTimestamp(): java.util.Date;
						public setTimestamp(this_s_f71: java.util.Date): com.mapbox.common.geofencing.GeofenceState.Builder;
						public build(): com.mapbox.common.geofencing.GeofenceState;
						public getFeature(): com.mapbox.geojson.Feature;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingError extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingError>;
					public toString(): string;
					public toBuilder(): com.mapbox.common.geofencing.GeofencingError.Builder;
					public equals(other: any): boolean;
					public getMessage(): string;
					public getType(): com.mapbox.common.geofencing.GeofencingErrorType;
					public hashCode(): number;
				}
				export namespace GeofencingError {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingError.Builder>;
						public getMessage(): string;
						public constructor();
						public getType(): com.mapbox.common.geofencing.GeofencingErrorType;
						public setMessage(this_s_3dc: string): com.mapbox.common.geofencing.GeofencingError.Builder;
						public setType(this_s_260: com.mapbox.common.geofencing.GeofencingErrorType): com.mapbox.common.geofencing.GeofencingError.Builder;
						public build(): com.mapbox.common.geofencing.GeofencingError;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingErrorType {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingErrorType>;
					public static GENERIC: com.mapbox.common.geofencing.GeofencingErrorType;
					public static NOT_AVAILABLE: com.mapbox.common.geofencing.GeofencingErrorType;
					public static DEFAULT_RADIUS_TOO_LARGE: com.mapbox.common.geofencing.GeofencingErrorType;
					public static MONITORED_FEATURES_LIMIT_REACHED: com.mapbox.common.geofencing.GeofencingErrorType;
					public static LOCATION_SERVICE_UNAVAILABLE: com.mapbox.common.geofencing.GeofencingErrorType;
					public static LOCATION_SERVICE_UNAUTHORIZED: com.mapbox.common.geofencing.GeofencingErrorType;
					public static LOCATION_SERVICE_INACCURATE: com.mapbox.common.geofencing.GeofencingErrorType;
					public static DEVICE_LOCATION_PROVIDER_ERROR: com.mapbox.common.geofencing.GeofencingErrorType;
					public static FEATURE_ALREADY_ADDED: com.mapbox.common.geofencing.GeofencingErrorType;
					public static FEATURE_NOT_FOUND: com.mapbox.common.geofencing.GeofencingErrorType;
					public static FEATURE_INVALID: com.mapbox.common.geofencing.GeofencingErrorType;
					public static OBSERVER_ALREADY_ADDED: com.mapbox.common.geofencing.GeofencingErrorType;
					public static OBSERVER_NOT_FOUND: com.mapbox.common.geofencing.GeofencingErrorType;
					public static FEATURE_NOT_STORED: com.mapbox.common.geofencing.GeofencingErrorType;
					public getValue(): number;
					public static values(): androidNative.Array<com.mapbox.common.geofencing.GeofencingErrorType>;
					public static valueOf(value: string): com.mapbox.common.geofencing.GeofencingErrorType;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingEvent extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingEvent>;
					public toString(): string;
					public getTimestamp(): java.util.Date;
					public toBuilder(): com.mapbox.common.geofencing.GeofencingEvent.Builder;
					public equals(other: any): boolean;
					public hashCode(): number;
					public getFeature(): com.mapbox.geojson.Feature;
				}
				export namespace GeofencingEvent {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingEvent.Builder>;
						public build(): com.mapbox.common.geofencing.GeofencingEvent;
						public setTimestamp(this_s_f71: java.util.Date): com.mapbox.common.geofencing.GeofencingEvent.Builder;
						public constructor();
						public getTimestamp(): java.util.Date;
						public setFeature(this_s_62c: com.mapbox.geojson.Feature): com.mapbox.common.geofencing.GeofencingEvent.Builder;
						public getFeature(): com.mapbox.geojson.Feature;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingFactory extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingFactory>;
					public static reset(): void;
					public static getOrCreate(): com.mapbox.common.geofencing.GeofencingService;
					public constructor(nativePeer: number);
					public static setUserDefined(param0: com.mapbox.common.geofencing.GeofencingService): void;
					public setPeer(nativePeer: number): void;
				}
				export namespace GeofencingFactory {
					export namespace GeofencingFactory {
						export namespace Companion {
							function getOrCreate(): com.mapbox.common.geofencing.GeofencingService;
							function reset(): void;
							function setUserDefined(custom: com.mapbox.common.geofencing.GeofencingService): void;
							function getOrCreate(): com.mapbox.common.geofencing.GeofencingService;
							function reset(): void;
							function setUserDefined(custom: com.mapbox.common.geofencing.GeofencingService): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingObserver extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingObserver>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.GeofencingObserver interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onEntry(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
						onDwell(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
						onExit(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
						onError(param0: com.mapbox.common.geofencing.GeofencingError): void;
						onUserConsentChanged(param0: boolean): void;
					});
					public constructor();
					public onError(param0: com.mapbox.common.geofencing.GeofencingError): void;
					public onExit(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
					public onUserConsentChanged(param0: boolean): void;
					public onEntry(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
					public onDwell(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingObserverNative extends java.lang.Object implements com.mapbox.common.geofencing.GeofencingObserver {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingObserverNative>;
					public onError(param0: com.mapbox.common.geofencing.GeofencingError): void;
					public onExit(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
					public onUserConsentChanged(param0: boolean): void;
					public onEntry(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
					public onDwell(param0: com.mapbox.common.geofencing.GeofencingEvent): void;
				}
				export namespace GeofencingObserverNative {
					export namespace GeofencingObserverNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingOptions extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingOptions>;
					public toBuilder(): com.mapbox.common.geofencing.GeofencingOptions.Builder;
					public toString(): string;
					public equals(other: any): boolean;
					public hashCode(): number;
					public getMaximumMonitoredFeatures(): number;
				}
				export namespace GeofencingOptions {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingOptions.Builder>;
						public constructor();
						public build(): com.mapbox.common.geofencing.GeofencingOptions;
						public setMaximumMonitoredFeatures(this_s_7c2: number): com.mapbox.common.geofencing.GeofencingOptions.Builder;
						public getMaximumMonitoredFeatures(): java.lang.Integer;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingPropertiesKeys extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingPropertiesKeys>;
					public static INSTANCE: com.mapbox.common.geofencing.GeofencingPropertiesKeys;
					public static DWELL_TIME_KEY: string; // "MBX_GEOFENCE_DWELL_TIME"
					public static POINT_RADIUS_KEY: string; // "MBX_GEOFENCE_POINT_RADIUS"
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingService extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingService>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.GeofencingService interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						configure(param0: com.mapbox.common.geofencing.GeofencingOptions, param1: com.mapbox.common.geofencing.ConfigureCallback): void;
						getOptions(param0: com.mapbox.common.geofencing.GetOptionsCallback): void;
						addFeature(param0: com.mapbox.geojson.Feature, param1: com.mapbox.common.geofencing.AddFeatureCallback): void;
						getFeature(param0: string, param1: com.mapbox.common.geofencing.GetFeatureCallback): void;
						removeFeature(param0: string, param1: com.mapbox.common.geofencing.RemoveFeatureCallback): void;
						clearFeatures(param0: com.mapbox.common.geofencing.ClearFeaturesCallback): void;
						addObserver(param0: com.mapbox.common.geofencing.GeofencingObserver, param1: com.mapbox.common.geofencing.AddObserverCallback): void;
						removeObserver(param0: com.mapbox.common.geofencing.GeofencingObserver, param1: com.mapbox.common.geofencing.RemoveObserverCallback): void;
					});
					public constructor();
					public getOptions(param0: com.mapbox.common.geofencing.GetOptionsCallback): void;
					public addObserver(param0: com.mapbox.common.geofencing.GeofencingObserver, param1: com.mapbox.common.geofencing.AddObserverCallback): void;
					public addFeature(param0: com.mapbox.geojson.Feature, param1: com.mapbox.common.geofencing.AddFeatureCallback): void;
					public getFeature(param0: string, param1: com.mapbox.common.geofencing.GetFeatureCallback): void;
					public removeFeature(param0: string, param1: com.mapbox.common.geofencing.RemoveFeatureCallback): void;
					public clearFeatures(param0: com.mapbox.common.geofencing.ClearFeaturesCallback): void;
					public removeObserver(param0: com.mapbox.common.geofencing.GeofencingObserver, param1: com.mapbox.common.geofencing.RemoveObserverCallback): void;
					public configure(param0: com.mapbox.common.geofencing.GeofencingOptions, param1: com.mapbox.common.geofencing.ConfigureCallback): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingServiceNative extends java.lang.Object implements com.mapbox.common.geofencing.GeofencingService {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingServiceNative>;
					public getOptions(param0: com.mapbox.common.geofencing.GetOptionsCallback): void;
					public addObserver(param0: com.mapbox.common.geofencing.GeofencingObserver, param1: com.mapbox.common.geofencing.AddObserverCallback): void;
					public addFeature(param0: com.mapbox.geojson.Feature, param1: com.mapbox.common.geofencing.AddFeatureCallback): void;
					public getFeature(param0: string, param1: com.mapbox.common.geofencing.GetFeatureCallback): void;
					public removeFeature(param0: string, param1: com.mapbox.common.geofencing.RemoveFeatureCallback): void;
					public clearFeatures(param0: com.mapbox.common.geofencing.ClearFeaturesCallback): void;
					public removeObserver(param0: com.mapbox.common.geofencing.GeofencingObserver, param1: com.mapbox.common.geofencing.RemoveObserverCallback): void;
					public configure(param0: com.mapbox.common.geofencing.GeofencingOptions, param1: com.mapbox.common.geofencing.ConfigureCallback): void;
				}
				export namespace GeofencingServiceNative {
					export namespace GeofencingServiceNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingUtils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingUtils>;
					public static setUserConsent(param0: boolean, param1: com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback): void;
					public static getUserConsent(): boolean;
					public constructor(nativePeer: number);
					public static isActive(): boolean;
					public setPeer(nativePeer: number): void;
				}
				export namespace GeofencingUtils {
					export namespace GeofencingUtils {
						export namespace Companion {
							function setUserConsent(isCons_24e: boolean, callback: com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback): void;
							function getUserConsent(): boolean;
							function isActive(): boolean;
							function setUserConsent(isCons_24e: boolean, callback: com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback): void;
							function getUserConsent(): boolean;
							function isActive(): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingUtilsUserConsentResponseCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GeofencingUtilsUserConsentResponseCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
				export namespace GeofencingUtilsUserConsentResponseCallbackNative {
					export namespace GeofencingUtilsUserConsentResponseCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GetFeatureCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GetFeatureCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.GetFeatureCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.common.geofencing.GeofenceState>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.common.geofencing.GeofenceState>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GetFeatureCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.GetFeatureCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GetFeatureCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.common.geofencing.GeofenceState>): void;
				}
				export namespace GetFeatureCallbackNative {
					export namespace GetFeatureCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GetOptionsCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GetOptionsCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.GetOptionsCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.common.geofencing.GeofencingOptions>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.common.geofencing.GeofencingOptions>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class GetOptionsCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.GetOptionsCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.GetOptionsCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.common.geofencing.GeofencingOptions>): void;
				}
				export namespace GetOptionsCallbackNative {
					export namespace GetOptionsCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class RemoveFeatureCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.RemoveFeatureCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.RemoveFeatureCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class RemoveFeatureCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.RemoveFeatureCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.RemoveFeatureCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
				export namespace RemoveFeatureCallbackNative {
					export namespace RemoveFeatureCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class RemoveObserverCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.geofencing.RemoveObserverCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.geofencing.RemoveObserverCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
					});
					public constructor();
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace geofencing {
				export class RemoveObserverCallbackNative extends java.lang.Object implements com.mapbox.common.geofencing.RemoveObserverCallback {
					public static class: java.lang.Class<com.mapbox.common.geofencing.RemoveObserverCallbackNative>;
					public run(param0: com.mapbox.bindgen.Expected<com.mapbox.common.geofencing.GeofencingError,com.mapbox.bindgen.None>): void;
				}
				export namespace RemoveObserverCallbackNative {
					export namespace RemoveObserverCallbackNative {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace http_backend {
				export class Request extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.http_backend.Request>;
					public getTimeout(): number;
					public getFlags(): number;
					public getHeaders(): java.util.HashMap<string,string>;
					public setMethod(method: com.mapbox.common.HttpMethod): void;
					public setHeaders(headers: java.util.HashMap<string,string>): void;
					public getNetworkRestriction(): com.mapbox.common.NetworkRestriction;
					public getMethod(): com.mapbox.common.HttpMethod;
					public equals(object: any): boolean;
					public toString(): string;
					public getUrl(): string;
					public toBuilder(): com.mapbox.common.http_backend.Request.Builder;
					public hashCode(): number;
					public getBody(): com.mapbox.common.ReadStream;
				}
				export namespace Request {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.http_backend.Request.Builder>;
						public networkRestriction(networ_fcd: com.mapbox.common.NetworkRestriction): com.mapbox.common.http_backend.Request.Builder;
						public constructor();
						public body(body: com.mapbox.common.ReadStream): com.mapbox.common.http_backend.Request.Builder;
						public url(url: string): com.mapbox.common.http_backend.Request.Builder;
						public build(): com.mapbox.common.http_backend.Request;
						public timeout(timeout: number): com.mapbox.common.http_backend.Request.Builder;
						public method(method: com.mapbox.common.HttpMethod): com.mapbox.common.http_backend.Request.Builder;
						public headers(headers: java.util.HashMap<string,string>): com.mapbox.common.http_backend.Request.Builder;
						public flags(flags: number): com.mapbox.common.http_backend.Request.Builder;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace http_backend {
				export class RequestObserver extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.http_backend.RequestObserver>;
					/**
					 * Constructs a new instance of the com.mapbox.common.http_backend.RequestObserver interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onResponse(param0: number, param1: com.mapbox.common.http_backend.ResponseData): void;
						onData(param0: number): void;
						onSucceeded(param0: number): void;
						onFailed(param0: number, param1: com.mapbox.common.HttpRequestError): void;
					});
					public constructor();
					public onResponse(param0: number, param1: com.mapbox.common.http_backend.ResponseData): void;
					public onFailed(param0: number, param1: com.mapbox.common.HttpRequestError): void;
					public onData(param0: number): void;
					public onSucceeded(param0: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace http_backend {
				export class RequestObserverNative extends java.lang.Object implements com.mapbox.common.http_backend.RequestObserver {
					public static class: java.lang.Class<com.mapbox.common.http_backend.RequestObserverNative>;
					public peer: number;
					public onResponse(param0: number, param1: com.mapbox.common.http_backend.ResponseData): void;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public onFailed(param0: number, param1: com.mapbox.common.HttpRequestError): void;
					public onData(param0: number): void;
					public onSucceeded(param0: number): void;
				}
				export namespace RequestObserverNative {
					export class RequestObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.http_backend.RequestObserverNative.RequestObserverPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace http_backend {
				export class ResponseData extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.http_backend.ResponseData>;
					public equals(object: any): boolean;
					public toString(): string;
					public getDataStream(): com.mapbox.common.ReadStream;
					public getHeaders(): java.util.HashMap<string,string>;
					public constructor(headers: java.util.HashMap<string,string>, code: number, dataStream: com.mapbox.common.ReadStream);
					public hashCode(): number;
					public getCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace http_backend {
				export class Service extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.http_backend.Service>;
					/**
					 * Constructs a new instance of the com.mapbox.common.http_backend.Service interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						setMaxRequestsPerHost(param0: number): void;
						request(param0: com.mapbox.common.http_backend.Request, param1: com.mapbox.common.http_backend.RequestObserver): number;
						cancelRequest(param0: number, param1: com.mapbox.common.ResultCallback): void;
						supportsKeepCompression(): boolean;
					});
					public constructor();
					public supportsKeepCompression(): boolean;
					public cancelRequest(param0: number, param1: com.mapbox.common.ResultCallback): void;
					public request(param0: com.mapbox.common.http_backend.Request, param1: com.mapbox.common.http_backend.RequestObserver): number;
					public setMaxRequestsPerHost(param0: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace http_backend {
				export class ServiceNative extends java.lang.Object implements com.mapbox.common.http_backend.Service {
					public static class: java.lang.Class<com.mapbox.common.http_backend.ServiceNative>;
					public peer: number;
					public supportsKeepCompression(): boolean;
					public cancelRequest(param0: number, param1: com.mapbox.common.ResultCallback): void;
					public request(param0: com.mapbox.common.http_backend.Request, param1: com.mapbox.common.http_backend.RequestObserver): number;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public setMaxRequestsPerHost(param0: number): void;
				}
				export namespace ServiceNative {
					export class ServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.http_backend.ServiceNative.ServicePeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace loader {
				export class BuildConfig extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.loader.BuildConfig>;
					public static DEBUG: boolean; // 0
					public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.common.loader"
					public static BUILD_TYPE: string; // "release"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace loader {
				export class MapboxLibraryLoader extends java.lang.Object implements com.mapbox.common.module.LibraryLoader {
					public static class: java.lang.Class<com.mapbox.common.loader.MapboxLibraryLoader>;
					public static INSTANCE: com.mapbox.common.loader.MapboxLibraryLoader;
					public load(librar_273: string): void;
					public load(param0: string): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class AccuracyAuthorization {
					public static class: java.lang.Class<com.mapbox.common.location.AccuracyAuthorization>;
					public static NONE: com.mapbox.common.location.AccuracyAuthorization;
					public static EXACT: com.mapbox.common.location.AccuracyAuthorization;
					public static INEXACT: com.mapbox.common.location.AccuracyAuthorization;
					public toString(): string;
					public static valueOf(name: string): com.mapbox.common.location.AccuracyAuthorization;
					public static values(): androidNative.Array<com.mapbox.common.location.AccuracyAuthorization>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class AccuracyLevel {
					public static class: java.lang.Class<com.mapbox.common.location.AccuracyLevel>;
					public static PASSIVE: com.mapbox.common.location.AccuracyLevel;
					public static LOW: com.mapbox.common.location.AccuracyLevel;
					public static MEDIUM: com.mapbox.common.location.AccuracyLevel;
					public static HIGH: com.mapbox.common.location.AccuracyLevel;
					public static HIGHEST: com.mapbox.common.location.AccuracyLevel;
					public static valueOf(name: string): com.mapbox.common.location.AccuracyLevel;
					public static values(): androidNative.Array<com.mapbox.common.location.AccuracyLevel>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class AndroidDeviceLocationProvider extends com.mapbox.common.location.BaseDeviceLocationProvider {
					public static class: java.lang.Class<com.mapbox.common.location.AndroidDeviceLocationProvider>;
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public doStart(): void;
					public getLastLocation(it: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public getLocationProviderName(): string;
					public requestLocationUpdates(criteria: globalAndroid.app.PendingIntent): void;
					public constructor(context: globalAndroid.content.Context, request: com.mapbox.common.location.LocationProviderRequest);
					public requestLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public constructor(context: globalAndroid.content.Context, request: com.mapbox.common.location.LocationProviderRequest, locati_168: string);
					public toString(): string;
					public removeLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public constructor();
					public getName(): string;
					public addLocationObserver(observer: com.mapbox.common.location.LocationObserver, looper: globalAndroid.os.Looper): void;
					public extractResult(androi_b4b: globalAndroid.content.Intent): java.util.List<com.mapbox.common.location.Location>;
					public removeLocationUpdates(pendin_efa: globalAndroid.app.PendingIntent): void;
					public getPersistentId(): number;
					public doStop(): void;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
				export namespace AndroidDeviceLocationProvider {
					export namespace AndroidDeviceLocationProvider {
						export namespace Companion {
						}
					}
					export class LocationRequestAttributes extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.AndroidDeviceLocationProvider.LocationRequestAttributes>;
						public getMinDisplacement(): number;
						public component2(): number;
						public equals(other: any): boolean;
						public component1(): globalAndroid.location.Criteria;
						public getMinInterval(): number;
						public constructor(criteria: globalAndroid.location.Criteria, minInt_f46: number, minDis_9ac: number);
						public hashCode(): number;
						public getCriteria(): globalAndroid.location.Criteria;
						public copy(criteria: globalAndroid.location.Criteria, minInt_f46: number, minDis_9ac: number): com.mapbox.common.location.AndroidDeviceLocationProvider.LocationRequestAttributes;
						public component3(): number;
						public toString(): string;
					}
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.AndroidDeviceLocationProvider.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export abstract class BaseDeviceLocationProvider extends com.mapbox.common.location.BaseLocationProvider implements com.mapbox.common.location.DeviceLocationProvider {
					public static class: java.lang.Class<com.mapbox.common.location.BaseDeviceLocationProvider>;
					public state: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState;
					public removeLocationObserver(observer: com.mapbox.common.location.LocationObserver): void;
					public getRequest(): com.mapbox.common.location.LocationProviderRequest;
					public addLocationObserver(observer: com.mapbox.common.location.LocationObserver): void;
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public setCurrentMode(curren_f81: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode): void;
					public doStart(): void;
					public extractResult(param0: globalAndroid.content.Intent): java.util.List<com.mapbox.common.location.Location>;
					public getLocationUpdatePendingIntent(): globalAndroid.app.PendingIntent;
					public start(): void;
					public constructor(context: globalAndroid.content.Context, request: com.mapbox.common.location.LocationProviderRequest);
					public requestLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public removeLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public constructor();
					public getName(): string;
					public addLocationObserver(observer: com.mapbox.common.location.LocationObserver, looper: globalAndroid.os.Looper): void;
					public stop(): void;
					public notifyLocationUpdate(locations: java.util.List<any>): void;
					public getContext(): globalAndroid.content.Context;
					public getCurrentMode(): com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode;
					public getPersistentId(): number;
					public doStop(): void;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
				export namespace BaseDeviceLocationProvider {
					export namespace BaseDeviceLocationProvider {
						export namespace Companion {
						}
					}
					export class DeviceLocationProviderMode {
						public static class: java.lang.Class<com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode>;
						public static NONE: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode;
						public static CALLBACK: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode;
						public static PENDING_INTENT: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode;
						public static values(): androidNative.Array<com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode>;
						public static valueOf(value: string): com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderMode;
						public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export class DeviceLocationProviderState {
						public static class: java.lang.Class<com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState>;
						public static STOPPED: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState;
						public static STOPPING: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState;
						public static STARTED: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState;
						public static STARTING: com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState;
						public static values(): androidNative.Array<com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState>;
						public static valueOf(value: string): com.mapbox.common.location.BaseDeviceLocationProvider.DeviceLocationProviderState;
						public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export class LocationCancelable extends java.lang.Object implements com.mapbox.common.Cancelable {
						public static class: java.lang.Class<com.mapbox.common.location.BaseDeviceLocationProvider.LocationCancelable>;
						public constructor(this_0: com.mapbox.common.location.BaseDeviceLocationProvider);
						public cancel(): void;
						public invokeIfNotCanceled(cb: any): void;
					}
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.BaseDeviceLocationProvider.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export abstract class BaseLocationProvider extends java.lang.Object implements com.mapbox.common.location.LocationProvider {
					public static class: java.lang.Class<com.mapbox.common.location.BaseLocationProvider>;
					public static EMPTY_HANDLER: globalAndroid.os.Handler;
					public addLocationObserver(it: com.mapbox.common.location.LocationObserver): void;
					public removeLocationObserver(observer: com.mapbox.common.location.LocationObserver): void;
					public getObservers(): java.util.concurrent.ConcurrentHashMap<com.mapbox.common.location.LocationObserver,globalAndroid.os.Handler>;
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public constructor();
					public notifyLocationUpdate(observer: java.util.List<any>): void;
					public addLocationObserver(observer: com.mapbox.common.location.LocationObserver, looper: globalAndroid.os.Looper): void;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
				export namespace BaseLocationProvider {
					export namespace BaseLocationProvider {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class DeviceLocationProvider extends java.lang.Object implements com.mapbox.common.location.LocationProvider {
					public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProvider>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.DeviceLocationProvider interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						requestLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
						removeLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
						getName(): string;
						addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
						addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
						removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
						getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					});
					public constructor();
					public requestLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public removeLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public getName(): string;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
				export namespace DeviceLocationProvider {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProvider.DefaultImpls>;
						public static getName(this_: com.mapbox.common.location.DeviceLocationProvider): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class DeviceLocationProviderFactory extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProviderFactory>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.DeviceLocationProviderFactory interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						build(param0: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					});
					public constructor();
					public build(param0: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class DeviceLocationProviderFactoryNative extends java.lang.Object implements com.mapbox.common.location.DeviceLocationProviderFactory {
					public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProviderFactoryNative>;
					public peer: number;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public build(param0: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
				}
				export namespace DeviceLocationProviderFactoryNative {
					export class DeviceLocationProviderFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProviderFactoryNative.DeviceLocationProviderFactoryPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class DeviceLocationProviderNative extends java.lang.Object implements com.mapbox.common.location.DeviceLocationProvider {
					public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProviderNative>;
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public getPeer(): number;
					public requestLocationUpdates(pendin_efa: globalAndroid.app.PendingIntent): void;
					public requestLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public removeLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public getName(): string;
					public addLocationObserver(observer: com.mapbox.common.location.LocationObserver, looper: globalAndroid.os.Looper): void;
					public removeLocationUpdates(pendin_efa: globalAndroid.app.PendingIntent): void;
					public setPeer(peer: number): void;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
				export namespace DeviceLocationProviderNative {
					export namespace DeviceLocationProviderNative {
						export namespace Companion {
							function cleanNativePeer(peer: number): void;
							function cleanNativePeer(peer: number): void;
						}
					}
					export class DeviceLocationProviderPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProviderNative.DeviceLocationProviderPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class DeviceLocationProviderType {
					public static class: java.lang.Class<com.mapbox.common.location.DeviceLocationProviderType>;
					public static BEST: com.mapbox.common.location.DeviceLocationProviderType;
					public static ANDROID: com.mapbox.common.location.DeviceLocationProviderType;
					public static GOOGLE_PLAY_SERVICES: com.mapbox.common.location.DeviceLocationProviderType;
					public static values(): androidNative.Array<com.mapbox.common.location.DeviceLocationProviderType>;
					public static valueOf(name: string): com.mapbox.common.location.DeviceLocationProviderType;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class ExtendedLocationProviderParameters extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.location.ExtendedLocationProviderParameters>;
					public getDeviceLocationProviderType(): com.mapbox.common.location.DeviceLocationProviderType;
					public equals(object: any): boolean;
					public toBuilder(): com.mapbox.common.location.ExtendedLocationProviderParameters.Builder;
					public toString(): string;
					public getLocationProviderName(): string;
					public getAllowUserDefined(): java.lang.Boolean;
					public hashCode(): number;
				}
				export namespace ExtendedLocationProviderParameters {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.ExtendedLocationProviderParameters.Builder>;
						public constructor();
						public deviceLocationProviderType(device_3b9: com.mapbox.common.location.DeviceLocationProviderType): com.mapbox.common.location.ExtendedLocationProviderParameters.Builder;
						public locationProviderName(locati_168: string): com.mapbox.common.location.ExtendedLocationProviderParameters.Builder;
						public allowUserDefined(allowU_452: java.lang.Boolean): com.mapbox.common.location.ExtendedLocationProviderParameters.Builder;
						public build(): com.mapbox.common.location.ExtendedLocationProviderParameters;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class FailedTask<T>  extends com.google.android.gms.tasks.Task<any> {
					public static class: java.lang.Class<com.mapbox.common.location.FailedTask<any>>;
					public constructor(exception: java.lang.Exception);
					public addOnFailureListener(this_a_efa: com.google.android.gms.tasks.OnFailureListener): com.google.android.gms.tasks.Task<any>;
					public addOnSuccessListener(p0: com.google.android.gms.tasks.OnSuccessListener<any>): com.google.android.gms.tasks.Task<any>;
					public isComplete(): boolean;
					public addOnFailureListener(p0: java.util.concurrent.Executor, p1: com.google.android.gms.tasks.OnFailureListener): com.google.android.gms.tasks.Task<any>;
					public addOnFailureListener(p0: globalAndroid.app.Activity, p1: com.google.android.gms.tasks.OnFailureListener): com.google.android.gms.tasks.Task<any>;
					public addOnSuccessListener(p0: java.util.concurrent.Executor, p1: com.google.android.gms.tasks.OnSuccessListener<any>): com.google.android.gms.tasks.Task<any>;
					public isCanceled(): boolean;
					public isSuccessful(): boolean;
					public addOnCanceledListener(p0: com.google.android.gms.tasks.OnCanceledListener): com.google.android.gms.tasks.Task<any>;
					public getException(): java.lang.Exception;
					public getResult(): any;
					public getResult(except_2a6: java.lang.Class<any>): any;
					public addOnSuccessListener(p0: globalAndroid.app.Activity, p1: com.google.android.gms.tasks.OnSuccessListener<any>): com.google.android.gms.tasks.Task<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class GetLocationCallback extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.GetLocationCallback>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.GetLocationCallback interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						run(param0: com.mapbox.common.location.Location): void;
					});
					public constructor();
					public run(param0: com.mapbox.common.location.Location): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class GetLocationCallbackNative extends java.lang.Object implements com.mapbox.common.location.GetLocationCallback {
					public static class: java.lang.Class<com.mapbox.common.location.GetLocationCallbackNative>;
					public run(param0: com.mapbox.common.location.Location): void;
					public static cleanNativePeer(param0: number): void;
				}
				export namespace GetLocationCallbackNative {
					export class GetLocationCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.GetLocationCallbackNative.GetLocationCallbackPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class GoogleDeviceLocationProvider extends com.mapbox.common.location.BaseDeviceLocationProvider {
					public static class: java.lang.Class<com.mapbox.common.location.GoogleDeviceLocationProvider>;
					public setFusedLocationProviderClient(fusedL_309: com.mapbox.common.location.ProxyGoogleFusedLocationProviderClient): void;
					public requestLocationUpdates(this_: globalAndroid.app.PendingIntent): void;
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public doStart(): void;
					public getLastLocation(locati_c9b: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public getFusedLocationProviderClient(): com.mapbox.common.location.ProxyGoogleFusedLocationProviderClient;
					public constructor(context: globalAndroid.content.Context, request: com.mapbox.common.location.LocationProviderRequest);
					public requestLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public toString(): string;
					public removeLocationUpdates(param0: globalAndroid.app.PendingIntent): void;
					public extractResult(location: globalAndroid.content.Intent): java.util.List<com.mapbox.common.location.Location>;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public constructor();
					public getName(): string;
					public addLocationObserver(observer: com.mapbox.common.location.LocationObserver, looper: globalAndroid.os.Looper): void;
					public removeLocationUpdates(pendin_efa: globalAndroid.app.PendingIntent): void;
					public getPersistentId(): number;
					public doStop(): void;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
				export namespace GoogleDeviceLocationProvider {
					export namespace GoogleDeviceLocationProvider {
						export namespace Companion {
							function isAvailable(): boolean;
							function isAvailable(): boolean;
						}
					}
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.GoogleDeviceLocationProvider.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class GooglePlayServicesHelper extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.GooglePlayServicesHelper>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.GooglePlayServicesHelper interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						isGooglePlayServicesReady(): boolean;
						isGooglePlayServicesLocationAvailable(): boolean;
						isGooglePlayActivityRecognitionAvailable(): boolean;
					});
					public constructor();
					public isGooglePlayActivityRecognitionAvailable(): boolean;
					public isGooglePlayServicesReady(): boolean;
					public isGooglePlayServicesLocationAvailable(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class IncompatibleGooglePlayServicesActivityRecognitionVersion extends java.lang.Exception {
					public static class: java.lang.Class<com.mapbox.common.location.IncompatibleGooglePlayServicesActivityRecognitionVersion>;
					public constructor(message: string);
					public constructor(cause: java.lang.Exception);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class IncompatibleGooglePlayServicesLocationVersion extends java.lang.Exception {
					public static class: java.lang.Class<com.mapbox.common.location.IncompatibleGooglePlayServicesLocationVersion>;
					public constructor(message: string);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class IntervalSettings extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.location.IntervalSettings>;
					public equals(object: any): boolean;
					public toString(): string;
					public getMinimumInterval(): java.lang.Long;
					public getMaximumInterval(): java.lang.Long;
					public toBuilder(): com.mapbox.common.location.IntervalSettings.Builder;
					public getInterval(): java.lang.Long;
					public hashCode(): number;
				}
				export namespace IntervalSettings {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.IntervalSettings.Builder>;
						public constructor();
						public minimumInterval(minimu_7a6: java.lang.Long): com.mapbox.common.location.IntervalSettings.Builder;
						public interval(interval: java.lang.Long): com.mapbox.common.location.IntervalSettings.Builder;
						public build(): com.mapbox.common.location.IntervalSettings;
						public maximumInterval(maximu_62c: java.lang.Long): com.mapbox.common.location.IntervalSettings.Builder;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class Location extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.location.Location>;
					public setAltitude(altitude: java.lang.Double): void;
					public setHorizontalAccuracy(horizo_c60: java.lang.Double): void;
					public getLatitude(): number;
					public getLongitude(): number;
					public getSource(): string;
					public setVerticalAccuracy(vertic_4ca: java.lang.Double): void;
					public setSpeed(speed: java.lang.Double): void;
					public equals(object: any): boolean;
					public toString(): string;
					public setFloor(floor: java.lang.Long): void;
					public setSource(source: string): void;
					public getVerticalAccuracy(): java.lang.Double;
					public getBearingAccuracy(): java.lang.Double;
					public getExtra(): com.mapbox.bindgen.Value;
					public getHorizontalAccuracy(): java.lang.Double;
					public hashCode(): number;
					public getFloor(): java.lang.Long;
					public setSpeedAccuracy(speedA_285: java.lang.Double): void;
					public getSpeedAccuracy(): java.lang.Double;
					public getBearing(): java.lang.Double;
					public getSpeed(): java.lang.Double;
					public setBearingAccuracy(bearin_f04: java.lang.Double): void;
					public getMonotonicTimestamp(): java.lang.Long;
					public getTimestamp(): number;
					public setBearing(bearing: java.lang.Double): void;
					public getAltitude(): java.lang.Double;
					public setMonotonicTimestamp(monoto_cc5: java.lang.Long): void;
					public toBuilder(): com.mapbox.common.location.Location.Builder;
				}
				export namespace Location {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.Location.Builder>;
						public longitude(longitude: number): com.mapbox.common.location.Location.Builder;
						public constructor();
						public monotonicTimestamp(monoto_cc5: java.lang.Long): com.mapbox.common.location.Location.Builder;
						public timestamp(timestamp: number): com.mapbox.common.location.Location.Builder;
						public horizontalAccuracy(horizo_c60: java.lang.Double): com.mapbox.common.location.Location.Builder;
						public floor(floor: java.lang.Long): com.mapbox.common.location.Location.Builder;
						public altitude(altitude: java.lang.Double): com.mapbox.common.location.Location.Builder;
						public verticalAccuracy(vertic_4ca: java.lang.Double): com.mapbox.common.location.Location.Builder;
						public speed(speed: java.lang.Double): com.mapbox.common.location.Location.Builder;
						public bearingAccuracy(bearin_f04: java.lang.Double): com.mapbox.common.location.Location.Builder;
						public speedAccuracy(speedA_285: java.lang.Double): com.mapbox.common.location.Location.Builder;
						public source(source: string): com.mapbox.common.location.Location.Builder;
						public extra(extra: com.mapbox.bindgen.Value): com.mapbox.common.location.Location.Builder;
						public build(): com.mapbox.common.location.Location;
						public latitude(latitude: number): com.mapbox.common.location.Location.Builder;
						public bearing(bearing: java.lang.Double): com.mapbox.common.location.Location.Builder;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationError extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.location.LocationError>;
					public equals(object: any): boolean;
					public toString(): string;
					public getCode(): com.mapbox.common.location.LocationErrorCode;
					public getMessage(): string;
					public constructor(code: com.mapbox.common.location.LocationErrorCode, message: string);
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationErrorCode {
					public static class: java.lang.Class<com.mapbox.common.location.LocationErrorCode>;
					public static NONE: com.mapbox.common.location.LocationErrorCode;
					public static NOT_READY: com.mapbox.common.location.LocationErrorCode;
					public static NOT_AVAILABLE: com.mapbox.common.location.LocationErrorCode;
					public static ACCESS_DENIED: com.mapbox.common.location.LocationErrorCode;
					public static INVALID_ARGUMENT: com.mapbox.common.location.LocationErrorCode;
					public static FAILED_TO_DETECT_LOCATION: com.mapbox.common.location.LocationErrorCode;
					public static COMMUNICATION_FAILURE: com.mapbox.common.location.LocationErrorCode;
					public static CANCELLED: com.mapbox.common.location.LocationErrorCode;
					public static NOT_SUPPORTED: com.mapbox.common.location.LocationErrorCode;
					public static UNKNOWN: com.mapbox.common.location.LocationErrorCode;
					public static valueOf(name: string): com.mapbox.common.location.LocationErrorCode;
					public toString(): string;
					public static values(): androidNative.Array<com.mapbox.common.location.LocationErrorCode>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationExtraKeys extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.LocationExtraKeys>;
					public static IS_MOCK: string; // "is_mock"
					public static IS_EXTERNAL: string; // "is_external"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationObserver extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.LocationObserver>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.LocationObserver interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onLocationUpdateReceived(param0: java.util.List<com.mapbox.common.location.Location>): void;
					});
					public constructor();
					public onLocationUpdateReceived(param0: java.util.List<com.mapbox.common.location.Location>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationObserverNative extends java.lang.Object implements com.mapbox.common.location.LocationObserver {
					public static class: java.lang.Class<com.mapbox.common.location.LocationObserverNative>;
					public peer: number;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public onLocationUpdateReceived(param0: java.util.List<com.mapbox.common.location.Location>): void;
				}
				export namespace LocationObserverNative {
					export class LocationObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.LocationObserverNative.LocationObserverPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationProvider extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.LocationProvider>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.LocationProvider interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
						addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
						removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
						getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					});
					public constructor();
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationProviderNative extends java.lang.Object implements com.mapbox.common.location.LocationProvider {
					public static class: java.lang.Class<com.mapbox.common.location.LocationProviderNative>;
					public peer: number;
					public removeLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver, param1: globalAndroid.os.Looper): void;
					public addLocationObserver(observer: com.mapbox.common.location.LocationObserver, looper: globalAndroid.os.Looper): void;
					public getLastLocation(callback: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public getLastLocation(param0: com.mapbox.common.location.GetLocationCallback): com.mapbox.common.Cancelable;
					public addLocationObserver(param0: com.mapbox.common.location.LocationObserver): void;
				}
				export namespace LocationProviderNative {
					export class LocationProviderPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.LocationProviderNative.LocationProviderPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationProviderRequest extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.mapbox.common.location.LocationProviderRequest>;
					public equals(object: any): boolean;
					public toString(): string;
					public getInterval(): com.mapbox.common.location.IntervalSettings;
					public toBuilder(): com.mapbox.common.location.LocationProviderRequest.Builder;
					public hashCode(): number;
					public getAccuracy(): com.mapbox.common.location.AccuracyLevel;
					public getDisplacement(): java.lang.Float;
				}
				export namespace LocationProviderRequest {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.LocationProviderRequest.Builder>;
						public constructor();
						public displacement(displa_7d6: java.lang.Float): com.mapbox.common.location.LocationProviderRequest.Builder;
						public accuracy(accuracy: com.mapbox.common.location.AccuracyLevel): com.mapbox.common.location.LocationProviderRequest.Builder;
						public build(): com.mapbox.common.location.LocationProviderRequest;
						public interval(interval: com.mapbox.common.location.IntervalSettings): com.mapbox.common.location.LocationProviderRequest.Builder;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export namespace LocationProviderSettingsExtKt {
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.LocationProviderSettingsExtKt.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationService extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.LocationService>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.LocationService interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						isAvailable(): boolean;
						getPermissionStatus(): com.mapbox.common.location.PermissionStatus;
						getAccuracyAuthorization(): com.mapbox.common.location.AccuracyAuthorization;
						registerObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
						unregisterObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
						getDeviceLocationProvider(param0: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
						setUserDefinedDeviceLocationProviderFactory(param0: com.mapbox.common.location.DeviceLocationProviderFactory): void;
						getDeviceLocationProvider(param0: com.mapbox.common.location.DeviceLocationProviderType, param1: com.mapbox.common.location.LocationProviderRequest, param2: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
						getDeviceLocationProvider(param0: com.mapbox.common.location.ExtendedLocationProviderParameters, param1: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					});
					public constructor();
					public setUserDefinedDeviceLocationProviderFactory(param0: com.mapbox.common.location.DeviceLocationProviderFactory): void;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.ExtendedLocationProviderParameters, param1: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public unregisterObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public getPermissionStatus(): com.mapbox.common.location.PermissionStatus;
					public isAvailable(): boolean;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.DeviceLocationProviderType, param1: com.mapbox.common.location.LocationProviderRequest, param2: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public registerObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
					public getAccuracyAuthorization(): com.mapbox.common.location.AccuracyAuthorization;
				}
				export namespace LocationService {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.LocationService.DefaultImpls>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationServiceFactory extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.LocationServiceFactory>;
					public peer: number;
					public static reset(): void;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public static getOrCreate(): com.mapbox.common.location.LocationService;
				}
				export namespace LocationServiceFactory {
					export class LocationServiceFactoryPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.LocationServiceFactory.LocationServiceFactoryPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationServiceImpl extends java.lang.Object implements com.mapbox.common.location.LocationService {
					public static class: java.lang.Class<com.mapbox.common.location.LocationServiceImpl>;
					public static TAG: string; // "LocationService"
					public static ERROR_MESSAGE_GOOGLE_PLAY_NOT_AVAILABLE: string; // "Google Play Location Services are not available on this device"
					public static ERROR_MESSAGE_FAILED_TO_GET_LAST_LOCATION: string; // "failed to get last known location"
					public static ERROR_MESSAGE_LAST_LOCATION_NOT_AVAILABLE: string; // "no last known location available"
					public getDeviceLocationProvider(param0: com.mapbox.common.location.ExtendedLocationProviderParameters, param1: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public static createPlatformLocationService(): com.mapbox.common.location.LocationService;
					public unregisterObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public registerObserver(observer: com.mapbox.common.location.LocationServiceObserver): void;
					public getPermissionStatus(): com.mapbox.common.location.PermissionStatus;
					public getDeviceLocationProvider(type: com.mapbox.common.location.DeviceLocationProviderType, request: com.mapbox.common.location.LocationProviderRequest, allowU_452: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.DeviceLocationProviderType, param1: com.mapbox.common.location.LocationProviderRequest, param2: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public setUserDefinedDeviceLocationProviderFactory(settin_6b0: com.mapbox.common.location.DeviceLocationProviderFactory): void;
					public registerObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
					public setLocationProviders$common_release(locati_e2f: java.util.concurrent.CopyOnWriteArrayList<any>): void;
					public getAccuracyAuthorization(): com.mapbox.common.location.AccuracyAuthorization;
					public setUserDefinedDeviceLocationProviderFactory(param0: com.mapbox.common.location.DeviceLocationProviderFactory): void;
					public getLocationProviders$common_release(): java.util.concurrent.CopyOnWriteArrayList<any>;
					public getDeviceLocationProvider(i_a_fi_906: com.mapbox.common.location.ExtendedLocationProviderParameters, it: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public getDeviceLocationProvider(request: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public unregisterObserver(observer: com.mapbox.common.location.LocationServiceObserver): void;
					public isAvailable(): boolean;
					public resetLocationServices$common_release(): void;
				}
				export namespace LocationServiceImpl {
					export namespace LocationServiceImpl {
						export namespace Companion {
							function createPlatformLocationService(): com.mapbox.common.location.LocationService;
							function createPlatformLocationService(): com.mapbox.common.location.LocationService;
						}
					}
					export abstract class DeviceLocationProviderParams extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.LocationServiceImpl.DeviceLocationProviderParams>;
					}
					export namespace DeviceLocationProviderParams {
						export class Custom extends com.mapbox.common.location.LocationServiceImpl.DeviceLocationProviderParams {
							public static class: java.lang.Class<com.mapbox.common.location.LocationServiceImpl.DeviceLocationProviderParams.Custom>;
							public constructor(factory: java.lang.ref.WeakReference<com.mapbox.common.location.DeviceLocationProviderFactory>, request: com.mapbox.common.location.LocationProviderRequest);
							public component2(): com.mapbox.common.location.LocationProviderRequest;
							public hashCode(): number;
							public getRequest(): com.mapbox.common.location.LocationProviderRequest;
							public equals(other: any): boolean;
							public toString(): string;
							public getFactory(): java.lang.ref.WeakReference<com.mapbox.common.location.DeviceLocationProviderFactory>;
							public copy(factory: java.lang.ref.WeakReference<com.mapbox.common.location.DeviceLocationProviderFactory>, request: com.mapbox.common.location.LocationProviderRequest): com.mapbox.common.location.LocationServiceImpl.DeviceLocationProviderParams.Custom;
							public component1(): java.lang.ref.WeakReference<com.mapbox.common.location.DeviceLocationProviderFactory>;
						}
						export class Default extends com.mapbox.common.location.LocationServiceImpl.DeviceLocationProviderParams {
							public static class: java.lang.Class<com.mapbox.common.location.LocationServiceImpl.DeviceLocationProviderParams.Default>;
							public constructor(type: com.mapbox.common.location.DeviceLocationProviderType, request: com.mapbox.common.location.LocationProviderRequest, name: string);
							public component1(): com.mapbox.common.location.DeviceLocationProviderType;
							public component2(): com.mapbox.common.location.LocationProviderRequest;
							public hashCode(): number;
							public getRequest(): com.mapbox.common.location.LocationProviderRequest;
							public getName(): string;
							public equals(other: any): boolean;
							public toString(): string;
							public component3(): string;
							public copy(type: com.mapbox.common.location.DeviceLocationProviderType, request: com.mapbox.common.location.LocationProviderRequest, name: string): com.mapbox.common.location.LocationServiceImpl.DeviceLocationProviderParams.Default;
							public getType(): com.mapbox.common.location.DeviceLocationProviderType;
						}
					}
					export class LocationModeChangedBroadcastReceiver extends globalAndroid.content.BroadcastReceiver {
						public static class: java.lang.Class<com.mapbox.common.location.LocationServiceImpl.LocationModeChangedBroadcastReceiver>;
						public constructor();
						public constructor(this_0: com.mapbox.common.location.LocationServiceImpl);
						public onReceive(reference: globalAndroid.content.Context, element_iv: globalAndroid.content.Intent): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationServiceNative extends java.lang.Object implements com.mapbox.common.location.LocationService {
					public static class: java.lang.Class<com.mapbox.common.location.LocationServiceNative>;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.ExtendedLocationProviderParameters, param1: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public unregisterObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public getPermissionStatus(): com.mapbox.common.location.PermissionStatus;
					public getDeviceLocationProvider(type: com.mapbox.common.location.DeviceLocationProviderType, request: com.mapbox.common.location.LocationProviderRequest, allowU_452: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public getDeviceLocationProvider(param0: com.mapbox.common.location.DeviceLocationProviderType, param1: com.mapbox.common.location.LocationProviderRequest, param2: boolean): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public getPeer(): number;
					public registerObserver(param0: com.mapbox.common.location.LocationServiceObserver): void;
					public getAccuracyAuthorization(): com.mapbox.common.location.AccuracyAuthorization;
					public setUserDefinedDeviceLocationProviderFactory(param0: com.mapbox.common.location.DeviceLocationProviderFactory): void;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public isAvailable(): boolean;
					public getDeviceLocationProvider(extend_114: com.mapbox.common.location.ExtendedLocationProviderParameters, request: com.mapbox.common.location.LocationProviderRequest): com.mapbox.bindgen.Expected<com.mapbox.common.location.LocationError,com.mapbox.common.location.DeviceLocationProvider>;
					public setPeer(peer: number): void;
				}
				export namespace LocationServiceNative {
					export namespace LocationServiceNative {
						export namespace Companion {
							function cleanNativePeer(peer: number): void;
							function cleanNativePeer(peer: number): void;
						}
					}
					export class LocationServicePeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.LocationServiceNative.LocationServicePeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationServiceObserver extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.LocationServiceObserver>;
					/**
					 * Constructs a new instance of the com.mapbox.common.location.LocationServiceObserver interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onAvailabilityChanged(param0: boolean): void;
						onPermissionStatusChanged(param0: com.mapbox.common.location.PermissionStatus): void;
						onAccuracyAuthorizationChanged(param0: com.mapbox.common.location.AccuracyAuthorization): void;
					});
					public constructor();
					public onAccuracyAuthorizationChanged(param0: com.mapbox.common.location.AccuracyAuthorization): void;
					public onPermissionStatusChanged(param0: com.mapbox.common.location.PermissionStatus): void;
					public onAvailabilityChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationServiceObserverNative extends java.lang.Object implements com.mapbox.common.location.LocationServiceObserver {
					public static class: java.lang.Class<com.mapbox.common.location.LocationServiceObserverNative>;
					public peer: number;
					public onAccuracyAuthorizationChanged(param0: com.mapbox.common.location.AccuracyAuthorization): void;
					public constructor(peer: number);
					public static cleanNativePeer(param0: number): void;
					public onPermissionStatusChanged(param0: com.mapbox.common.location.PermissionStatus): void;
					public onAvailabilityChanged(param0: boolean): void;
				}
				export namespace LocationServiceObserverNative {
					export class LocationServiceObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.location.LocationServiceObserverNative.LocationServiceObserverPeerCleaner>;
						public run(): void;
						public constructor(peer: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationServiceUtils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.LocationServiceUtils>;
					public static getAccuracyAuthorization(context: globalAndroid.content.Context): com.mapbox.common.location.AccuracyAuthorization;
					public static toAndroidLocation(i_a_le_155: com.mapbox.common.location.Location): globalAndroid.location.Location;
					public static setGooglePlayServicesBundled(google_c0c: boolean): void;
					public static toCommonLocation(i_a_le_6e7: globalAndroid.location.Location): com.mapbox.common.location.Location;
					public static isOnClasspath(exception: string): boolean;
					public static isPermissionGranted(context: globalAndroid.content.Context, permission: string): boolean;
					public static toBundle(i_a_fo_9a5: com.mapbox.bindgen.Value): globalAndroid.os.Bundle;
					public static getVersionSDKInt(): number;
					public static getGooglePlayServicesBundled(): boolean;
					public static getPermissionStatus(applic_51b: globalAndroid.content.Context): com.mapbox.common.location.PermissionStatus;
				}
				export namespace LocationServiceUtils {
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.LocationServiceUtils.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class LocationUpdatesReceiver extends globalAndroid.content.BroadcastReceiver {
					public static class: java.lang.Class<com.mapbox.common.location.LocationUpdatesReceiver>;
					public static ACTION_PROCESS_LOCATION_UPDATES: string; // "com.mapbox.common.location.action.PROCESS_LOCATION_UPDATES"
					public static LOCATION_PROVIDER_ID_KEY: string; // "com.mapbox.common.location.DeviceLocationProvider.ID"
					public onReceive(message: globalAndroid.content.Context, i_a_ge_ace: globalAndroid.content.Intent): void;
					public constructor();
				}
				export namespace LocationUpdatesReceiver {
					export class CircularArray<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.location.LocationUpdatesReceiver.CircularArray<any>>;
						public spliterator(): java.util.Spliterator<T>;
						public constructor(capacity: number);
						public getSize(): number;
						public iterator(): java.util.Iterator<T>;
						public forEach(action: any): void;
						public toList(): java.util.List<T>;
						public add(item: T): void;
						public get(index: number): T;
					}
					export namespace LocationUpdatesReceiver {
						export namespace Companion {
							function addDeviceLocationProvider$common_release(locations: number, client: com.mapbox.common.location.BaseDeviceLocationProvider): void;
							function removeDeviceLocationProvider$common_release(persis_5dd: number): void;
							function addDeviceLocationProvider$common_release(locations: number, client: com.mapbox.common.location.BaseDeviceLocationProvider): void;
							function removeDeviceLocationProvider$common_release(persis_5dd: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class PermissionStatus {
					public static class: java.lang.Class<com.mapbox.common.location.PermissionStatus>;
					public static DENIED: com.mapbox.common.location.PermissionStatus;
					public static GRANTED: com.mapbox.common.location.PermissionStatus;
					public static FOREGROUND: com.mapbox.common.location.PermissionStatus;
					public static BACKGROUND: com.mapbox.common.location.PermissionStatus;
					public toString(): string;
					public static valueOf(name: string): com.mapbox.common.location.PermissionStatus;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static values(): androidNative.Array<com.mapbox.common.location.PermissionStatus>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class ProxyGoogleFusedLocationProviderClient extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.ProxyGoogleFusedLocationProviderClient>;
					public static requestLocationUpdatesCallback: java.lang.reflect.Method;
					public static requestLocationUpdatesPendingIntent: java.lang.reflect.Method;
					public static removeLocationUpdatesCallback: java.lang.reflect.Method;
					public static removeLocationUpdatesPendingIntent: java.lang.reflect.Method;
					public getLastLocation(): com.google.android.gms.tasks.Task<globalAndroid.location.Location>;
					public removeLocationUpdates(this_: com.google.android.gms.location.LocationCallback): com.google.android.gms.tasks.Task<java.lang.Void>;
					public requestLocationUpdates(this_: com.google.android.gms.location.LocationRequest, request: globalAndroid.app.PendingIntent): com.google.android.gms.tasks.Task<java.lang.Void>;
					public setGoogleFusedLocationProviderClient(google_e14: any): void;
					public requestLocationUpdates(this_: com.google.android.gms.location.LocationRequest, request: com.google.android.gms.location.LocationCallback, callback: globalAndroid.os.Looper): com.google.android.gms.tasks.Task<java.lang.Void>;
					public getGoogleFusedLocationProviderClient(): any;
					public constructor(context: globalAndroid.content.Context);
					public removeLocationUpdates(this_: globalAndroid.app.PendingIntent): com.google.android.gms.tasks.Task<java.lang.Void>;
				}
				export namespace ProxyGoogleFusedLocationProviderClient {
					export namespace ProxyGoogleFusedLocationProviderClient {
						export namespace Companion {
							function getRequestLocationUpdatesCallback(): java.lang.reflect.Method;
							function setRequestLocationUpdatesCallback(reques_cea: java.lang.reflect.Method): void;
							function getRequestLocationUpdatesPendingIntent(): java.lang.reflect.Method;
							function setRequestLocationUpdatesPendingIntent(reques_2b6: java.lang.reflect.Method): void;
							function getRemoveLocationUpdatesCallback(): java.lang.reflect.Method;
							function setRemoveLocationUpdatesCallback(remove_ba7: java.lang.reflect.Method): void;
							function getRemoveLocationUpdatesPendingIntent(): java.lang.reflect.Method;
							function setRemoveLocationUpdatesPendingIntent(remove_22d: java.lang.reflect.Method): void;
							function verifyAndCacheMethods$common_release(): boolean;
							function getAvailable$common_release(): boolean;
							function getRequestLocationUpdatesCallback(): java.lang.reflect.Method;
							function setRequestLocationUpdatesCallback(reques_cea: java.lang.reflect.Method): void;
							function getRequestLocationUpdatesPendingIntent(): java.lang.reflect.Method;
							function setRequestLocationUpdatesPendingIntent(reques_2b6: java.lang.reflect.Method): void;
							function getRemoveLocationUpdatesCallback(): java.lang.reflect.Method;
							function setRemoveLocationUpdatesCallback(remove_ba7: java.lang.reflect.Method): void;
							function getRemoveLocationUpdatesPendingIntent(): java.lang.reflect.Method;
							function setRemoveLocationUpdatesPendingIntent(remove_22d: java.lang.reflect.Method): void;
							function verifyAndCacheMethods$common_release(): boolean;
							function getAvailable$common_release(): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace location {
				export class UserDefinedProviderTypes extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.location.UserDefinedProviderTypes>;
					public static MOCKED: string; // "mocked"
					public static REAL: string; // "real"
					public static MIXED: string; // "mixed"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace logger {
				export class BuildConfig extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.logger.BuildConfig>;
					public static DEBUG: boolean; // 0
					public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.common.logger"
					public static BUILD_TYPE: string; // "release"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace logger {
				export class LogEntry extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.logger.LogEntry>;
					public toString(): string;
					public component1(): string;
					public component2(): string;
					public getThrowable(): java.lang.Throwable;
					public component3(): java.lang.Throwable;
					public equals(other: any): boolean;
					public getMessage(): string;
					public copy(tag: string, message: string, throwable: java.lang.Throwable): com.mapbox.common.logger.LogEntry;
					public hashCode(): number;
					public constructor(tag: string, message: string, throwable: java.lang.Throwable);
					public getTag(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace logger {
				export class LogPriority extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.logger.LogPriority>;
					public static VERBOSE: number; // 2
					public static DEBUG: number; // 3
					public static INFO: number; // 4
					public static WARN: number; // 5
					public static ERROR: number; // 6
					public static NONE: number; // 99
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace logger {
				export class LoggerObserver extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.logger.LoggerObserver>;
					/**
					 * Constructs a new instance of the com.mapbox.common.logger.LoggerObserver interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						log(param0: number, param1: com.mapbox.common.logger.LogEntry): void;
					});
					public constructor();
					public log(param0: number, param1: com.mapbox.common.logger.LogEntry): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace logger {
				export class MapboxLogger extends java.lang.Object implements com.mapbox.base.common.logger.Logger {
					public static class: java.lang.Class<com.mapbox.common.logger.MapboxLogger>;
					public static INSTANCE: com.mapbox.common.logger.MapboxLogger;
					public w(msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public e(msg: com.mapbox.base.common.logger.model.Message): void;
					public e(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
					public v(msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public v(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message): void;
					public w(msg: com.mapbox.base.common.logger.model.Message): void;
					public v(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public w(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public d(msg: com.mapbox.base.common.logger.model.Message): void;
					public i(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public i(msg: com.mapbox.base.common.logger.model.Message): void;
					public removeObserver(): void;
					public i(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
					public d(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public e(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public i(msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public e(msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public v(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
					public getLogLevel(): number;
					public i(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message): void;
					public w(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
					public setLogLevel(logLevel: number): void;
					public d(msg: com.mapbox.base.common.logger.model.Message, tr: java.lang.Throwable): void;
					public w(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message): void;
					public d(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message): void;
					public v(msg: com.mapbox.base.common.logger.model.Message): void;
					public d(param0: com.mapbox.base.common.logger.model.Tag, param1: com.mapbox.base.common.logger.model.Message, param2: java.lang.Throwable): void;
					public setObserver(observer: com.mapbox.common.logger.LoggerObserver): void;
					public e(tag: com.mapbox.base.common.logger.model.Tag, msg: com.mapbox.base.common.logger.model.Message): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace logger {
				export namespace annotations {
					export class LogLevel extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.mapbox.common.logger.annotations.LogLevel>;
						/**
						 * Constructs a new instance of the com.mapbox.common.logger.annotations.LogLevel interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							annotationType(): java.lang.Class<any>;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
						});
						public constructor();
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export class HttpClientDetail extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.module.HttpClientDetail>;
					/**
					 * Constructs a new instance of the com.mapbox.common.module.HttpClientDetail interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						buildRequest(param0: com.mapbox.common.http_backend.Request, param1: number, param2: com.mapbox.common.http_backend.RequestObserver, param3: any): com.mapbox.common.module.RequestDetail;
						executor(): java.util.concurrent.Executor;
						setMaxRequestsPerHost(param0: number): void;
						supportsKeepCompression(): boolean;
					});
					public constructor();
					public supportsKeepCompression(): boolean;
					public executor(): java.util.concurrent.Executor;
					public buildRequest(param0: com.mapbox.common.http_backend.Request, param1: number, param2: com.mapbox.common.http_backend.RequestObserver, param3: any): com.mapbox.common.module.RequestDetail;
					public setMaxRequestsPerHost(param0: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export class LibraryLoader extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.module.LibraryLoader>;
					/**
					 * Constructs a new instance of the com.mapbox.common.module.LibraryLoader interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						load(param0: string): void;
					});
					public constructor();
					public load(param0: string): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export class MapboxHttpClient extends java.lang.Object implements com.mapbox.common.http_backend.Service {
					public static class: java.lang.Class<com.mapbox.common.module.MapboxHttpClient>;
					public cancelRequest(param0: number, param1: com.mapbox.common.ResultCallback): void;
					public request(param0: com.mapbox.common.http_backend.Request, param1: com.mapbox.common.http_backend.RequestObserver): number;
					public setMaxRequestsPerHost(max: number): void;
					public constructor(pauseR_378: com.mapbox.common.module.HttpClientDetail);
					public supportsKeepCompression(): boolean;
					public disableBackgroundRequests(): void;
					public disablePauseRequestsOnDemand(): void;
					public enableBackgroundRequests(): void;
					public getForegroundQueueSize(): number;
					public enablePauseRequestsOnDemand(): void;
					public request(exception: com.mapbox.common.http_backend.Request, id: com.mapbox.common.http_backend.RequestObserver): number;
					public cancelRequest(this_: number, id: com.mapbox.common.ResultCallback): void;
					public setMaxRequestsPerHost(param0: number): void;
				}
				export namespace MapboxHttpClient {
					export class HttpServiceLifecycleObserver extends java.lang.Object implements com.mapbox.common.LifecycleObserver {
						public static class: java.lang.Class<com.mapbox.common.module.MapboxHttpClient.HttpServiceLifecycleObserver>;
						public onMonitoringStateChanged(param0: com.mapbox.common.LifecycleMonitoringState, param1: string): void;
						public onLifecycleStateChanged(param0: com.mapbox.common.LifecycleState): void;
						public onMonitoringStateChanged(state: com.mapbox.common.LifecycleMonitoringState, error: string): void;
						public onLifecycleStateChanged(this_: com.mapbox.common.LifecycleState): void;
						public constructor(this_0: com.mapbox.common.module.MapboxHttpClient);
					}
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.module.MapboxHttpClient.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export class NetworkIdGenerator extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.module.NetworkIdGenerator>;
					public static INSTANCE: com.mapbox.common.module.NetworkIdGenerator;
					public newId(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export class RequestDetail extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.module.RequestDetail>;
					/**
					 * Constructs a new instance of the com.mapbox.common.module.RequestDetail interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						start(): void;
						cancel(param0: com.mapbox.common.HttpRequestError): void;
					});
					public constructor();
					public start(): void;
					public cancel(param0: com.mapbox.common.HttpRequestError): void;
				}
				export namespace RequestDetail {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.module.RequestDetail.DefaultImpls>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace cronet {
					export class CronetClientDetail extends java.lang.Object implements com.mapbox.common.module.HttpClientDetail {
						public static class: java.lang.Class<com.mapbox.common.module.cronet.CronetClientDetail>;
						public setMaxRequestsPerHost(max: number): void;
						public buildRequest(engine: com.mapbox.common.http_backend.Request, this_: number, request: com.mapbox.common.http_backend.RequestObserver, id: any): com.mapbox.common.module.RequestDetail;
						public executor(): java.util.concurrent.Executor;
						public buildRequest(param0: com.mapbox.common.http_backend.Request, param1: number, param2: com.mapbox.common.http_backend.RequestObserver, param3: any): com.mapbox.common.module.RequestDetail;
						public supportsKeepCompression(): boolean;
						public constructor(fallback: com.mapbox.common.module.HttpClientDetail);
						public executor(): java.util.concurrent.ExecutorService;
						public setMaxRequestsPerHost(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace cronet {
					export class CronetRequestDetail extends java.lang.Object implements com.mapbox.common.module.RequestDetail, com.mapbox.common.module.cronet.UrlCallback.StatusCallback, com.mapbox.common.Task {
						public static class: java.lang.Class<com.mapbox.common.module.cronet.CronetRequestDetail>;
						public static DEFAULT_READ_TIMEOUT: number; // 60
						public constructor(request: org.chromium.net.UrlRequest, callback: com.mapbox.common.module.cronet.UrlCallback, timeou_255: number);
						public cancel(it: com.mapbox.common.HttpRequestError): void;
						public cancel(param0: com.mapbox.common.HttpRequestError): void;
						public onRead(): void;
						public start(): void;
						public run(): void;
						public onDone(): void;
					}
					export namespace CronetRequestDetail {
						export namespace CronetRequestDetail {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace cronet {
					export class CronetRequestFinishedListener {
						public static class: java.lang.Class<com.mapbox.common.module.cronet.CronetRequestFinishedListener>;
						public constructor(executor: java.util.concurrent.Executor);
						public onRequestFinished(this_: org.chromium.net.RequestFinishedInfo): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace cronet {
					export class CronetTimeout extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.mapbox.common.module.cronet.CronetTimeout>;
						public start(): void;
						public run(): void;
						public constructor(timeou_255: number, action: com.mapbox.common.Task);
						public cancel(): void;
						public resetDeadline(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace cronet {
					export class LazyEngine extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.module.cronet.LazyEngine>;
						public getEngine(): org.chromium.net.CronetEngine;
						public constructor(executor: java.util.concurrent.Executor);
					}
					export namespace LazyEngine {
						export namespace LazyEngine {
							export namespace Companion {
								function onCronetNotAvailable(): void;
								function onCronetAvailable(provid_209: org.chromium.net.CronetProvider): void;
								function installCronetFromPlayServices(context: globalAndroid.content.Context): com.google.android.gms.tasks.Task<java.lang.Void>;
								function canInstallFromGooglePlay(): boolean;
								function onCronetNotAvailable(): void;
								function onCronetAvailable(provid_209: org.chromium.net.CronetProvider): void;
								function installCronetFromPlayServices(context: globalAndroid.content.Context): com.google.android.gms.tasks.Task<java.lang.Void>;
								function canInstallFromGooglePlay(): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace cronet {
					export class UrlCallback {
						public static class: java.lang.Class<com.mapbox.common.module.cronet.UrlCallback>;
						public setCancelReason(reason: com.mapbox.common.HttpRequestError): void;
						public onCanceled(this_: org.chromium.net.UrlRequest, request: org.chromium.net.UrlResponseInfo): void;
						public onReadCompleted(bytesRead: org.chromium.net.UrlRequest, error: org.chromium.net.UrlResponseInfo, totalB_350: java.nio.ByteBuffer): void;
						public constructor(id: number, observer: com.mapbox.common.http_backend.RequestObserver, onRequ_79f: any);
						public getStatus(callback: com.mapbox.common.module.cronet.UrlCallback.StatusCallback): void;
						public onRedirectReceived(request: org.chromium.net.UrlRequest, info: org.chromium.net.UrlResponseInfo, newLoc_af3: string): void;
						public onSucceeded(request: org.chromium.net.UrlRequest, info: org.chromium.net.UrlResponseInfo): void;
						public onFailed(it: org.chromium.net.UrlRequest, errorType: org.chromium.net.UrlResponseInfo, errorInfo: org.chromium.net.CronetException): void;
						public onResponseStarted(it: org.chromium.net.UrlRequest, entry_iv: org.chromium.net.UrlResponseInfo): void;
					}
					export namespace UrlCallback {
						export class StatusCallback extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.common.module.cronet.UrlCallback.StatusCallback>;
							/**
							 * Constructs a new instance of the com.mapbox.common.module.cronet.UrlCallback$StatusCallback interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onRead(): void;
								onDone(): void;
							});
							public constructor();
							public onDone(): void;
							public onRead(): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class CallbackWrapper extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.CallbackWrapper>;
						public constructor(service: com.mapbox.common.module.okhttp.OkHttpClientDetail, id: number, call: okhttp3.Call, callback: com.mapbox.common.module.okhttp.CallbackWrapper.RequestCallback, onRequ_79f: any);
						public cancel(): void;
						public onFailure(error: okhttp3.Call, this_: java.io.IOException): void;
						public cancel(error: com.mapbox.common.HttpRequestError): void;
						public onResponse(exception: okhttp3.Call, this_: okhttp3.Response): void;
					}
					export namespace CallbackWrapper {
						export class RequestCallback extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.common.module.okhttp.CallbackWrapper.RequestCallback>;
							/**
							 * Constructs a new instance of the com.mapbox.common.module.okhttp.CallbackWrapper$RequestCallback interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onFailure(param0: com.mapbox.common.HttpRequestError): void;
								onResponse(param0: okhttp3.Call, param1: okhttp3.Response): void;
							});
							public constructor();
							public onFailure(param0: com.mapbox.common.HttpRequestError): void;
							public onResponse(param0: okhttp3.Call, param1: okhttp3.Response): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class HttpCallback extends java.lang.Object implements com.mapbox.common.module.okhttp.CallbackWrapper.RequestCallback {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.HttpCallback>;
						public onResponse(totalRead: okhttp3.Call, i_a_us_317: okhttp3.Response): void;
						public onResponse(param0: okhttp3.Call, param1: okhttp3.Response): void;
						public onFailure(param0: com.mapbox.common.HttpRequestError): void;
						public onFailure(error: com.mapbox.common.HttpRequestError): void;
						public constructor(id: number, observer: com.mapbox.common.http_backend.RequestObserver, onRequ_79f: any);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class LazyClient extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.LazyClient>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class NetworkUsageListener {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.NetworkUsageListener>;
						public static FACTORY: okhttp3.EventListener.Factory;
						public static CALLBACK: com.mapbox.common.module.okhttp.NetworkUsageListener.NetworkUsageMetricCallback;
						public callFailed(call: okhttp3.Call, ioe: java.io.IOException): void;
						public requestHeadersEnd(call: okhttp3.Call, request: okhttp3.Request): void;
						public requestBodyEnd(call: okhttp3.Call, byteCount: number): void;
						public responseHeadersEnd(call: okhttp3.Call, response: okhttp3.Response): void;
						public responseBodyEnd(call: okhttp3.Call, byteCount: number): void;
						public callEnd(call: okhttp3.Call): void;
					}
					export namespace NetworkUsageListener {
						export class NetworkUsageMetricCallback extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.common.module.okhttp.NetworkUsageListener.NetworkUsageMetricCallback>;
							/**
							 * Constructs a new instance of the com.mapbox.common.module.okhttp.NetworkUsageListener$NetworkUsageMetricCallback interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onBytesTransferred(param0: string, param1: number, param2: number): void;
							});
							public constructor();
							public onBytesTransferred(param0: string, param1: number, param2: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class OkHttpClientDetail extends java.lang.Object implements com.mapbox.common.module.HttpClientDetail {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.OkHttpClientDetail>;
						public constructor();
						public setMaxRequestsPerHost(max: number): void;
						public buildRequest(value: com.mapbox.common.http_backend.Request, postBody: number, reques_a7d: com.mapbox.common.http_backend.RequestObserver, resour_bce: any): com.mapbox.common.module.RequestDetail;
						public executor(): java.util.concurrent.Executor;
						public buildRequest(param0: com.mapbox.common.http_backend.Request, param1: number, param2: com.mapbox.common.http_backend.RequestObserver, param3: any): com.mapbox.common.module.RequestDetail;
						public supportsKeepCompression(): boolean;
						public executor(): java.util.concurrent.ExecutorService;
						public setMaxRequestsPerHost(param0: number): void;
					}
					export namespace OkHttpClientDetail {
						export class WhenMappings extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.common.module.okhttp.OkHttpClientDetail.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class OkHttpRequestDetail extends java.lang.Object implements com.mapbox.common.module.RequestDetail {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.OkHttpRequestDetail>;
						public cancel(param0: com.mapbox.common.HttpRequestError): void;
						public getCallback(): com.mapbox.common.module.okhttp.CallbackWrapper;
						public start(): void;
						public constructor(call: okhttp3.Call, callback: com.mapbox.common.module.okhttp.CallbackWrapper);
						public cancel(error: com.mapbox.common.HttpRequestError): void;
						public getCall(): okhttp3.Call;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class StreamingRequestBody {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.StreamingRequestBody>;
						public getInputStream(): com.mapbox.common.ReadStream;
						public getContentType(): okhttp3.MediaType;
						public contentType(): okhttp3.MediaType;
						public writeTo(sink: okio.BufferedSink): void;
						public getBuffer(): okio.Buffer;
						public contentLength(): number;
						public constructor(byteBuffer: com.mapbox.common.ReadStream, common_74e: okhttp3.MediaType);
						public isOneShot(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class WebsocketObserverWrapper {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.WebsocketObserverWrapper>;
						public webSocket: okhttp3.WebSocket;
						public onClosedCallback: com.mapbox.common.ResultCallback;
						public onOpen(this_: okhttp3.WebSocket, webSocket: okhttp3.Response): void;
						public getWebSocket(): okhttp3.WebSocket;
						public constructor(reques_2f4: com.mapbox.common.experimental.wss_backend.RequestObserver, id: number, verbose: boolean);
						public onClosed(e: okhttp3.WebSocket, this_: number, webSocket: string): void;
						public onMessage(webSocket: okhttp3.WebSocket, text: string): void;
						public onFailure(this_: okhttp3.WebSocket, webSocket: java.lang.Throwable, t: okhttp3.Response): void;
						public getBuffer(): okio.Buffer;
						public setOnClosedCallback(onClos_80b: com.mapbox.common.ResultCallback): void;
						public onMessage(webSocket: okhttp3.WebSocket, bytes: okio.ByteString): void;
						public setWebSocket(webSocket: okhttp3.WebSocket): void;
						public getRequestObserver(): com.mapbox.common.experimental.wss_backend.RequestObserver;
						public getOnClosedCallback(): com.mapbox.common.ResultCallback;
					}
					export namespace WebsocketObserverWrapper {
						export namespace WebsocketObserverWrapper {
							export namespace Companion {
								function getWebsocketClosedNormalCode(): number;
								function getWebsocketClosedNormalCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace okhttp {
					export class WssBackend extends java.lang.Object implements com.mapbox.common.experimental.wss_backend.Service {
						public static class: java.lang.Class<com.mapbox.common.module.okhttp.WssBackend>;
						public static TAG: string; // "WssBackend"
						public static verboseSettingName: string; // "com.mapbox.common.network.wss.enable_android_verbose_logging"
						public write(param0: number, param1: com.mapbox.common.experimental.wss_backend.Data): void;
						public constructor();
						public setPingTimeout(param0: number): void;
						public setConnectionTimeout(connec_c74: number): void;
						public setPingTimeout(pingTi_204: number): void;
						public connect(key: com.mapbox.common.experimental.wss_backend.Request, value: com.mapbox.common.experimental.wss_backend.RequestObserver): number;
						public connect(param0: com.mapbox.common.experimental.wss_backend.Request, param1: com.mapbox.common.experimental.wss_backend.RequestObserver): number;
						public cancelConnection(param0: number, param1: com.mapbox.common.ResultCallback): void;
						public write(verbose: number, success: com.mapbox.common.experimental.wss_backend.Data): void;
						public cancelConnection(verbose: number, this_: com.mapbox.common.ResultCallback): void;
					}
					export namespace WssBackend {
						export namespace WssBackend {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace provider {
					export class MapboxInvalidModuleException extends java.lang.RuntimeException {
						public static class: java.lang.Class<com.mapbox.common.module.provider.MapboxInvalidModuleException>;
						public constructor();
						public equals(other: any): boolean;
						public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
						public constructor(type: com.mapbox.annotation.module.MapboxModuleType);
						public constructor(message: string, cause: java.lang.Throwable);
						public constructor(cause: java.lang.Throwable);
						public constructor(message: string);
						public hashCode(): number;
						public copy(type: com.mapbox.annotation.module.MapboxModuleType): com.mapbox.common.module.provider.MapboxInvalidModuleException;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace provider {
					export class MapboxModuleProvider extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.module.provider.MapboxModuleProvider>;
						public static INSTANCE: com.mapbox.common.module.provider.MapboxModuleProvider;
						public createModule(provid_455: com.mapbox.annotation.module.MapboxModuleType, provid_260: any): any;
					}
					export namespace MapboxModuleProvider {
						export class ModuleInstanceProvider extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.common.module.provider.MapboxModuleProvider.ModuleInstanceProvider>;
							/**
							 * Constructs a new instance of the com.mapbox.common.module.provider.MapboxModuleProvider$ModuleInstanceProvider interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getInstance(param0: java.lang.Class<any>, param1: com.mapbox.annotation.module.MapboxModuleType, param2: any): any;
							});
							public constructor();
							public getInstance(param0: java.lang.Class<any>, param1: com.mapbox.annotation.module.MapboxModuleType, param2: any): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace module {
				export namespace provider {
					export class ModuleProviderArgument extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.module.provider.ModuleProviderArgument>;
						public copy(expect_27a: java.lang.Class<any>, argume_b31: any): com.mapbox.common.module.provider.ModuleProviderArgument;
						public component2(): any;
						public equals(other: any): boolean;
						public constructor(expect_27a: java.lang.Class<any>, argume_b31: any);
						public hashCode(): number;
						public component1(): java.lang.Class<any>;
						public getExpectedArgumentClass(): java.lang.Class<any>;
						public getArgumentInstance(): any;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace movement {
				export class ActivityRecognitionClient extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.movement.ActivityRecognitionClient>;
					/**
					 * Constructs a new instance of the com.mapbox.common.movement.ActivityRecognitionClient interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						isPlatformActivityRecognitionAvailable(): boolean;
						start(): void;
						stop(): void;
						addObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
						removeObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					});
					public constructor();
					public isPlatformActivityRecognitionAvailable(): boolean;
					public stop(): void;
					public addObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public start(): void;
					public removeObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
				}
				export namespace ActivityRecognitionClient {
					export class Observer extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.movement.ActivityRecognitionClient.Observer>;
						/**
						 * Constructs a new instance of the com.mapbox.common.movement.ActivityRecognitionClient$Observer interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onMovementInfo(param0: com.mapbox.common.MovementInfo): void;
						});
						public constructor();
						public onMovementInfo(param0: com.mapbox.common.MovementInfo): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace movement {
				export class AndroidMovementMonitor extends java.lang.Object implements com.mapbox.common.MovementMonitorInterface {
					public static class: java.lang.Class<com.mapbox.common.movement.AndroidMovementMonitor>;
					public constructor(activi_b0b: com.mapbox.common.movement.ActivityRecognitionClient);
					public setMovementInfo(moveme_aa4: com.mapbox.common.MovementInfo): void;
					public unregisterObserver(observer: com.mapbox.common.MovementModeObserver): void;
					public registerObserver(param0: com.mapbox.common.MovementModeObserver): void;
					public unregisterObserver(param0: com.mapbox.common.MovementModeObserver): void;
					public getMovementInfo(result: com.mapbox.common.MovementInfoCallback): void;
					public static create(): com.mapbox.common.MovementMonitorInterface;
					public getMovementInfo(param0: com.mapbox.common.MovementInfoCallback): void;
					public registerObserver(it: com.mapbox.common.MovementModeObserver): void;
					public setMovementInfo(param0: com.mapbox.common.MovementInfo): void;
				}
				export namespace AndroidMovementMonitor {
					export namespace AndroidMovementMonitor {
						export namespace Companion {
							function create(): com.mapbox.common.MovementMonitorInterface;
							function create(): com.mapbox.common.MovementMonitorInterface;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace movement {
				export class GoogleActivityRecognition extends java.lang.Object implements com.mapbox.common.movement.ActivityRecognitionClient {
					public static class: java.lang.Class<com.mapbox.common.movement.GoogleActivityRecognition>;
					public static TAG: string; // "ActivityRecognitionObserver"
					public static ACTIVITY_UPDATES_ACTION: string; // "com.mapbox.common.movement.action.ACTIVITY_RECOGNITION_UPDATES"
					public static GOOGLE_ACTIVITY_RECOGNITION_CLIENT: string; // "com.google.android.gms.location.ActivityRecognitionClient"
					public isPlatformActivityRecognitionAvailable(): boolean;
					public removeObserver(observer: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public addObserver(observer: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public stop(): void;
					public addObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public start(): void;
					public removeObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public constructor(context: globalAndroid.content.Context, mode: com.mapbox.common.movement.GoogleActivityRecognition.Mode);
				}
				export namespace GoogleActivityRecognition {
					export namespace GoogleActivityRecognition {
						export namespace Companion {
							function getGooglePlayActivityRecognitionBundled$common_release(): boolean;
							function setGooglePlayActivityRecognitionBundled$common_release(google_933: boolean): void;
							function isAvailable$common_release(): boolean;
							function getGooglePlayActivityRecognitionBundled$common_release(): boolean;
							function setGooglePlayActivityRecognitionBundled$common_release(google_933: boolean): void;
							function isAvailable$common_release(): boolean;
						}
					}
					export class Mode {
						public static class: java.lang.Class<com.mapbox.common.movement.GoogleActivityRecognition.Mode>;
						public static TRANSITION_API: com.mapbox.common.movement.GoogleActivityRecognition.Mode;
						public static SAMPLING_API: com.mapbox.common.movement.GoogleActivityRecognition.Mode;
						public static valueOf(value: string): com.mapbox.common.movement.GoogleActivityRecognition.Mode;
						public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): androidNative.Array<com.mapbox.common.movement.GoogleActivityRecognition.Mode>;
					}
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.common.movement.GoogleActivityRecognition.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace movement {
				export class ProxyGoogleActivityRecognitionClient extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.common.movement.ProxyGoogleActivityRecognitionClient>;
					public removeActivityTransitionUpdates(this_: globalAndroid.app.PendingIntent): com.google.android.gms.tasks.Task<java.lang.Void>;
					public requestActivityTransitionUpdates(this_: com.google.android.gms.location.ActivityTransitionRequest, activi_3a8: globalAndroid.app.PendingIntent): com.google.android.gms.tasks.Task<java.lang.Void>;
					public constructor(context: globalAndroid.content.Context);
					public removeActivityUpdates(this_: globalAndroid.app.PendingIntent): com.google.android.gms.tasks.Task<java.lang.Void>;
					public requestActivityUpdates(this_: number, detect_b7f: globalAndroid.app.PendingIntent): com.google.android.gms.tasks.Task<java.lang.Void>;
				}
				export namespace ProxyGoogleActivityRecognitionClient {
					export namespace ProxyGoogleActivityRecognitionClient {
						export namespace Companion {
							function verifyAndCacheMethods$common_release(): void;
							function getAvailable$common_release(): boolean;
							function verifyAndCacheMethods$common_release(): void;
							function getAvailable$common_release(): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace common {
			export namespace movement {
				export class StubActivityRecognition extends java.lang.Object implements com.mapbox.common.movement.ActivityRecognitionClient {
					public static class: java.lang.Class<com.mapbox.common.movement.StubActivityRecognition>;
					public static INSTANCE: com.mapbox.common.movement.StubActivityRecognition;
					public isPlatformActivityRecognitionAvailable(): boolean;
					public removeObserver(observer: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public addObserver(observer: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public stop(): void;
					public addObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
					public start(): void;
					public removeObserver(param0: com.mapbox.common.movement.ActivityRecognitionClient.Observer): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export abstract class BaseCoordinatesTypeAdapter<T>  extends com.google.gson.TypeAdapter<any> {
				public static class: java.lang.Class<com.mapbox.geojson.BaseCoordinatesTypeAdapter<any>>;
				public writePointList(out: com.google.gson.stream.JsonWriter, value: java.util.List<java.lang.Double>): void;
				public writePoint(out: com.google.gson.stream.JsonWriter, point: com.mapbox.geojson.Point): void;
				public readPoint(in_: com.google.gson.stream.JsonReader): com.mapbox.geojson.Point;
				public readPointList(in_: com.google.gson.stream.JsonReader): java.util.List<java.lang.Double>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export abstract class BaseGeometryTypeAdapter<G, T>  extends com.google.gson.TypeAdapter<any> {
				public static class: java.lang.Class<com.mapbox.geojson.BaseGeometryTypeAdapter<any,any>>;
				public readCoordinateContainer(boundi_099: com.google.gson.stream.JsonReader): com.mapbox.geojson.CoordinateContainer<any>;
				public writeCoordinateContainer(boundi_099: com.google.gson.stream.JsonWriter, coordi_dbf: com.mapbox.geojson.CoordinateContainer<any>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class BoundingBox extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.geojson.BoundingBox>;
				public static fromJson(json: string): com.mapbox.geojson.BoundingBox;
				public northeast(): com.mapbox.geojson.Point;
				public west(): number;
				/** @deprecated */
				public static fromCoordinates(west: number, south: number, east: number, north: number): com.mapbox.geojson.BoundingBox;
				public static fromPoints(southwest: com.mapbox.geojson.Point, northeast: com.mapbox.geojson.Point): com.mapbox.geojson.BoundingBox;
				public southwest(): com.mapbox.geojson.Point;
				public toString(): string;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.BoundingBox>;
				public toJson(): string;
				public north(): number;
				/** @deprecated */
				public static fromCoordinates(west: number, south: number, southw_353: number, east: number, north: number, northE_b73: number): com.mapbox.geojson.BoundingBox;
				public south(): number;
				public equals(this_: any): boolean;
				public east(): number;
				public hashCode(): number;
				public static fromLngLats(west: number, south: number, east: number, north: number): com.mapbox.geojson.BoundingBox;
				public static fromLngLats(west: number, south: number, southw_353: number, east: number, north: number, northE_b73: number): com.mapbox.geojson.BoundingBox;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class CoordinateContainer<T>  extends com.mapbox.geojson.Geometry {
				public static class: java.lang.Class<com.mapbox.geojson.CoordinateContainer<any>>;
				/**
				 * Constructs a new instance of the com.mapbox.geojson.CoordinateContainer<any> interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					coordinates(): any;
					type(): string;
					toJson(): string;
					bbox(): com.mapbox.geojson.BoundingBox;
				});
				public constructor();
				public type(): string;
				public coordinates(): any;
				public toJson(): string;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class Feature extends java.lang.Object implements com.mapbox.geojson.GeoJson {
				public static class: java.lang.Class<com.mapbox.geojson.Feature>;
				public id(): string;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.Feature>;
				public getProperty(key: string): com.google.gson.JsonElement;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry, properties: com.google.gson.JsonObject, id: string): com.mapbox.geojson.Feature;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry): com.mapbox.geojson.Feature;
				public properties(): com.google.gson.JsonObject;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry, properties: com.google.gson.JsonObject, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.Feature;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry, properties: com.google.gson.JsonObject): com.mapbox.geojson.Feature;
				public hasNonNullValueForProperty(key: string): boolean;
				public addNumberProperty(key: string, value: java.lang.Number): void;
				public hashCode(): number;
				public type(): string;
				public addStringProperty(key: string, value: string): void;
				public removeProperty(key: string): com.google.gson.JsonElement;
				public geometry(): com.mapbox.geojson.Geometry;
				public getNumberProperty(key: string): java.lang.Number;
				public getBooleanProperty(key: string): java.lang.Boolean;
				public addBooleanProperty(key: string, value: java.lang.Boolean): void;
				public getCharacterProperty(key: string): java.lang.Character;
				public toString(): string;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry, properties: com.google.gson.JsonObject, id: string, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.Feature;
				public toJson(): string;
				public getStringProperty(key: string): string;
				public hasProperty(key: string): boolean;
				public addProperty(key: string, value: com.google.gson.JsonElement): void;
				public equals(this_: any): boolean;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.Feature;
				public static fromJson(json: string): com.mapbox.geojson.Feature;
				public addCharacterProperty(key: string, value: java.lang.Character): void;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
			export namespace Feature {
				export class GsonTypeAdapter extends com.google.gson.TypeAdapter<com.mapbox.geojson.Feature> {
					public static class: java.lang.Class<com.mapbox.geojson.Feature.GsonTypeAdapter>;
					public read(boundi_fd9: com.google.gson.stream.JsonReader): com.mapbox.geojson.Feature;
					public write(boundi_fd9: com.google.gson.stream.JsonWriter, string_277: com.mapbox.geojson.Feature): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class FeatureCollection extends java.lang.Object implements com.mapbox.geojson.GeoJson {
				public static class: java.lang.Class<com.mapbox.geojson.FeatureCollection>;
				public static fromFeatures(features: androidNative.Array<com.mapbox.geojson.Feature>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.FeatureCollection;
				public static fromFeatures(features: androidNative.Array<com.mapbox.geojson.Feature>): com.mapbox.geojson.FeatureCollection;
				public static fromFeatures(features: java.util.List<com.mapbox.geojson.Feature>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.FeatureCollection;
				public static fromFeatures(features: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.geojson.FeatureCollection;
				public static fromFeature(feature: com.mapbox.geojson.Feature): com.mapbox.geojson.FeatureCollection;
				public toString(): string;
				public toJson(): string;
				public static fromFeature(feature: com.mapbox.geojson.Feature, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.FeatureCollection;
				public equals(this_: any): boolean;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.FeatureCollection>;
				public hashCode(): number;
				public type(): string;
				public static fromJson(json: string): com.mapbox.geojson.FeatureCollection;
				public features(): java.util.List<com.mapbox.geojson.Feature>;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
			export namespace FeatureCollection {
				export class GsonTypeAdapter extends com.google.gson.TypeAdapter<com.mapbox.geojson.FeatureCollection> {
					public static class: java.lang.Class<com.mapbox.geojson.FeatureCollection.GsonTypeAdapter>;
					public read(boundi_099: com.google.gson.stream.JsonReader): com.mapbox.geojson.FeatureCollection;
					public write(boundi_fd9: com.google.gson.stream.JsonWriter, typeToken: com.mapbox.geojson.FeatureCollection): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class GeoJson extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.geojson.GeoJson>;
				/**
				 * Constructs a new instance of the com.mapbox.geojson.GeoJson interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					type(): string;
					toJson(): string;
					bbox(): com.mapbox.geojson.BoundingBox;
				});
				public constructor();
				public type(): string;
				public toJson(): string;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class Geometry extends java.lang.Object implements com.mapbox.geojson.GeoJson {
				public static class: java.lang.Class<com.mapbox.geojson.Geometry>;
				/**
				 * Constructs a new instance of the com.mapbox.geojson.Geometry interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					type(): string;
					toJson(): string;
					bbox(): com.mapbox.geojson.BoundingBox;
				});
				public constructor();
				public type(): string;
				public toJson(): string;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export abstract class GeometryAdapterFactory extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.geojson.GeometryAdapterFactory>;
				public static create(): com.google.gson.TypeAdapterFactory;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class GeometryCollection extends java.lang.Object implements com.mapbox.geojson.Geometry {
				public static class: java.lang.Class<com.mapbox.geojson.GeometryCollection>;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.GeometryCollection>;
				public geometries(): java.util.List<com.mapbox.geojson.Geometry>;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.GeometryCollection;
				public static fromGeometries(geometries: java.util.List<com.mapbox.geojson.Geometry>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.GeometryCollection;
				public toString(): string;
				public toJson(): string;
				public static fromJson(json: string): com.mapbox.geojson.GeometryCollection;
				public equals(this_: any): boolean;
				public static fromGeometry(geometry: com.mapbox.geojson.Geometry): com.mapbox.geojson.GeometryCollection;
				public static fromGeometries(geometries: java.util.List<com.mapbox.geojson.Geometry>): com.mapbox.geojson.GeometryCollection;
				public hashCode(): number;
				public type(): string;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
			export namespace GeometryCollection {
				export class GsonTypeAdapter extends com.google.gson.TypeAdapter<com.mapbox.geojson.GeometryCollection> {
					public static class: java.lang.Class<com.mapbox.geojson.GeometryCollection.GsonTypeAdapter>;
					public read(boundi_fd9: com.google.gson.stream.JsonReader): com.mapbox.geojson.GeometryCollection;
					public write(boundi_fd9: com.google.gson.stream.JsonWriter, typeToken: com.mapbox.geojson.GeometryCollection): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class LineString extends com.mapbox.geojson.CoordinateContainer<java.util.List<com.mapbox.geojson.Point>> {
				public static class: java.lang.Class<com.mapbox.geojson.LineString>;
				public toPolyline(precision: number): string;
				public toString(): string;
				public static fromJson(json: string): com.mapbox.geojson.LineString;
				public toJson(): string;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.LineString>;
				public coordinates(): any;
				public static fromPolyline(polyline: string, precision: number): com.mapbox.geojson.LineString;
				public static fromLngLats(points: java.util.List<com.mapbox.geojson.Point>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.LineString;
				public equals(this_: any): boolean;
				public static fromLngLats(points: java.util.List<com.mapbox.geojson.Point>): com.mapbox.geojson.LineString;
				public hashCode(): number;
				public type(): string;
				public static fromLngLats(multiPoint: com.mapbox.geojson.MultiPoint): com.mapbox.geojson.LineString;
				public static fromLngLats(multiPoint: com.mapbox.geojson.MultiPoint, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.LineString;
				public bbox(): com.mapbox.geojson.BoundingBox;
				public coordinates(): java.util.List<com.mapbox.geojson.Point>;
			}
			export namespace LineString {
				export class GsonTypeAdapter extends com.mapbox.geojson.BaseGeometryTypeAdapter<com.mapbox.geojson.LineString,java.util.List<com.mapbox.geojson.Point>> {
					public static class: java.lang.Class<com.mapbox.geojson.LineString.GsonTypeAdapter>;
					public read(jsonReader: com.google.gson.stream.JsonReader): com.mapbox.geojson.LineString;
					public write(jsonWriter: com.google.gson.stream.JsonWriter, object: com.mapbox.geojson.LineString): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class ListOfDoublesCoordinatesTypeAdapter extends com.mapbox.geojson.BaseCoordinatesTypeAdapter<java.util.List<java.lang.Double>> {
				public static class: java.lang.Class<com.mapbox.geojson.ListOfDoublesCoordinatesTypeAdapter>;
				public read(in_: com.google.gson.stream.JsonReader): java.util.List<java.lang.Double>;
				public write(out: com.google.gson.stream.JsonWriter, value: java.util.List<java.lang.Double>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class ListOfListOfPointCoordinatesTypeAdapter extends com.mapbox.geojson.BaseCoordinatesTypeAdapter<java.util.List<java.util.List<com.mapbox.geojson.Point>>> {
				public static class: java.lang.Class<com.mapbox.geojson.ListOfListOfPointCoordinatesTypeAdapter>;
				public write(listOf_92b: com.google.gson.stream.JsonWriter, this_: java.util.List<java.util.List<com.mapbox.geojson.Point>>): void;
				public read(points: com.google.gson.stream.JsonReader): java.util.List<java.util.List<com.mapbox.geojson.Point>>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class ListOfPointCoordinatesTypeAdapter extends com.mapbox.geojson.BaseCoordinatesTypeAdapter<java.util.List<com.mapbox.geojson.Point>> {
				public static class: java.lang.Class<com.mapbox.geojson.ListOfPointCoordinatesTypeAdapter>;
				public write(this_: com.google.gson.stream.JsonWriter, out: java.util.List<com.mapbox.geojson.Point>): void;
				public read(this_: com.google.gson.stream.JsonReader): java.util.List<com.mapbox.geojson.Point>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class ListofListofListOfPointCoordinatesTypeAdapter extends com.mapbox.geojson.BaseCoordinatesTypeAdapter<java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>> {
				public static class: java.lang.Class<com.mapbox.geojson.ListofListofListOfPointCoordinatesTypeAdapter>;
				public read(listOf_9be: com.google.gson.stream.JsonReader): java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>;
				public write(listOf_92b: com.google.gson.stream.JsonWriter, listOf_9be: java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class MultiLineString extends com.mapbox.geojson.CoordinateContainer<java.util.List<java.util.List<com.mapbox.geojson.Point>>> {
				public static class: java.lang.Class<com.mapbox.geojson.MultiLineString>;
				public lineStrings(): java.util.List<com.mapbox.geojson.LineString>;
				public static fromLineString(lineString: com.mapbox.geojson.LineString, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.MultiLineString;
				public static fromLineStrings(lineString: java.util.List<com.mapbox.geojson.LineString>, lineSt_473: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.MultiLineString;
				public static fromLngLats(points: java.util.List<java.util.List<com.mapbox.geojson.Point>>): com.mapbox.geojson.MultiLineString;
				public toString(): string;
				public static fromJson(json: string): com.mapbox.geojson.MultiLineString;
				public static fromLineString(lineString: com.mapbox.geojson.LineString): com.mapbox.geojson.MultiLineString;
				public toJson(): string;
				public coordinates(): any;
				public static fromLngLats(points: java.util.List<java.util.List<com.mapbox.geojson.Point>>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.MultiLineString;
				public equals(this_: any): boolean;
				public static fromLineStrings(lineString: java.util.List<com.mapbox.geojson.LineString>): com.mapbox.geojson.MultiLineString;
				public hashCode(): number;
				public type(): string;
				public coordinates(): java.util.List<java.util.List<com.mapbox.geojson.Point>>;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.MultiLineString>;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
			export namespace MultiLineString {
				export class GsonTypeAdapter extends com.mapbox.geojson.BaseGeometryTypeAdapter<com.mapbox.geojson.MultiLineString,java.util.List<java.util.List<com.mapbox.geojson.Point>>> {
					public static class: java.lang.Class<com.mapbox.geojson.MultiLineString.GsonTypeAdapter>;
					public read(jsonReader: com.google.gson.stream.JsonReader): com.mapbox.geojson.MultiLineString;
					public write(jsonWriter: com.google.gson.stream.JsonWriter, object: com.mapbox.geojson.MultiLineString): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class MultiPoint extends com.mapbox.geojson.CoordinateContainer<java.util.List<com.mapbox.geojson.Point>> {
				public static class: java.lang.Class<com.mapbox.geojson.MultiPoint>;
				public static fromLngLats(points: java.util.List<com.mapbox.geojson.Point>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.MultiPoint;
				public equals(this_: any): boolean;
				public static fromLngLats(points: java.util.List<com.mapbox.geojson.Point>): com.mapbox.geojson.MultiPoint;
				public hashCode(): number;
				public type(): string;
				public static fromJson(json: string): com.mapbox.geojson.MultiPoint;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.MultiPoint>;
				public toString(): string;
				public toJson(): string;
				public coordinates(): any;
				public bbox(): com.mapbox.geojson.BoundingBox;
				public coordinates(): java.util.List<com.mapbox.geojson.Point>;
			}
			export namespace MultiPoint {
				export class GsonTypeAdapter extends com.mapbox.geojson.BaseGeometryTypeAdapter<com.mapbox.geojson.MultiPoint,java.util.List<com.mapbox.geojson.Point>> {
					public static class: java.lang.Class<com.mapbox.geojson.MultiPoint.GsonTypeAdapter>;
					public read(jsonReader: com.google.gson.stream.JsonReader): com.mapbox.geojson.MultiPoint;
					public write(jsonWriter: com.google.gson.stream.JsonWriter, object: com.mapbox.geojson.MultiPoint): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class MultiPolygon extends com.mapbox.geojson.CoordinateContainer<java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>> {
				public static class: java.lang.Class<com.mapbox.geojson.MultiPolygon>;
				public coordinates(): java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.MultiPolygon>;
				public static fromLngLats(points: java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.MultiPolygon;
				public toString(): string;
				public toJson(): string;
				public coordinates(): any;
				public static fromJson(json: string): com.mapbox.geojson.MultiPolygon;
				public static fromPolygon(polygon: com.mapbox.geojson.Polygon): com.mapbox.geojson.MultiPolygon;
				public equals(this_: any): boolean;
				public hashCode(): number;
				public static fromPolygon(polygon: com.mapbox.geojson.Polygon, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.MultiPolygon;
				public polygons(): java.util.List<com.mapbox.geojson.Polygon>;
				public type(): string;
				public static fromPolygons(polygon: java.util.List<com.mapbox.geojson.Polygon>): com.mapbox.geojson.MultiPolygon;
				public static fromLngLats(points: java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>): com.mapbox.geojson.MultiPolygon;
				public bbox(): com.mapbox.geojson.BoundingBox;
				public static fromPolygons(polygon: java.util.List<com.mapbox.geojson.Polygon>, polygons: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.MultiPolygon;
			}
			export namespace MultiPolygon {
				export class GsonTypeAdapter extends com.mapbox.geojson.BaseGeometryTypeAdapter<com.mapbox.geojson.MultiPolygon,java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>>> {
					public static class: java.lang.Class<com.mapbox.geojson.MultiPolygon.GsonTypeAdapter>;
					public read(jsonReader: com.google.gson.stream.JsonReader): com.mapbox.geojson.MultiPolygon;
					public write(jsonWriter: com.google.gson.stream.JsonWriter, object: com.mapbox.geojson.MultiPolygon): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class Point extends com.mapbox.geojson.CoordinateContainer<java.util.List<java.lang.Double>> {
				public static class: java.lang.Class<com.mapbox.geojson.Point>;
				public hasAltitude(): boolean;
				public static fromJson(json: string): com.mapbox.geojson.Point;
				public static fromLngLat(longitude: number, latitude: number, altitude: number): com.mapbox.geojson.Point;
				public altitude(): number;
				public coordinates(): java.util.List<java.lang.Double>;
				public longitude(): number;
				public toString(): string;
				public toJson(): string;
				public coordinates(): any;
				public latitude(): number;
				public static fromLngLat(longitude: number, latitude: number): com.mapbox.geojson.Point;
				public equals(this_: any): boolean;
				public hashCode(): number;
				public static fromLngLat(longitude: number, latitude: number, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.Point;
				public static fromLngLat(longitude: number, latitude: number, altitude: number, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.Point;
				public type(): string;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.Point>;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
			export namespace Point {
				export class GsonTypeAdapter extends com.mapbox.geojson.BaseGeometryTypeAdapter<com.mapbox.geojson.Point,java.util.List<java.lang.Double>> {
					public static class: java.lang.Class<com.mapbox.geojson.Point.GsonTypeAdapter>;
					public write(jsonWriter: com.google.gson.stream.JsonWriter, object: com.mapbox.geojson.Point): void;
					public read(jsonReader: com.google.gson.stream.JsonReader): com.mapbox.geojson.Point;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class PointAsCoordinatesTypeAdapter extends com.mapbox.geojson.BaseCoordinatesTypeAdapter<com.mapbox.geojson.Point> {
				public static class: java.lang.Class<com.mapbox.geojson.PointAsCoordinatesTypeAdapter>;
				public write(out: com.google.gson.stream.JsonWriter, value: com.mapbox.geojson.Point): void;
				public read(in_: com.google.gson.stream.JsonReader): com.mapbox.geojson.Point;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export class Polygon extends com.mapbox.geojson.CoordinateContainer<java.util.List<java.util.List<com.mapbox.geojson.Point>>> {
				public static class: java.lang.Class<com.mapbox.geojson.Polygon>;
				public static fromOuterInner(lineString: com.mapbox.geojson.LineString, outer: com.mapbox.geojson.BoundingBox, bbox: androidNative.Array<com.mapbox.geojson.LineString>): com.mapbox.geojson.Polygon;
				public static fromJson(json: string): com.mapbox.geojson.Polygon;
				public static fromOuterInner(lineString: com.mapbox.geojson.LineString, outer: java.util.List<com.mapbox.geojson.LineString>): com.mapbox.geojson.Polygon;
				public static fromLngLats(coordi_628: java.util.List<java.util.List<com.mapbox.geojson.Point>>): com.mapbox.geojson.Polygon;
				public static typeAdapter(gson: com.google.gson.Gson): com.google.gson.TypeAdapter<com.mapbox.geojson.Polygon>;
				public toString(): string;
				public toJson(): string;
				public coordinates(): any;
				public outer(): com.mapbox.geojson.LineString;
				public static fromLngLats(coordi_628: java.util.List<java.util.List<com.mapbox.geojson.Point>>, bbox: com.mapbox.geojson.BoundingBox): com.mapbox.geojson.Polygon;
				public inner(): java.util.List<com.mapbox.geojson.LineString>;
				public equals(this_: any): boolean;
				public hashCode(): number;
				public static fromOuterInner(lineString: com.mapbox.geojson.LineString, outer: androidNative.Array<com.mapbox.geojson.LineString>): com.mapbox.geojson.Polygon;
				public type(): string;
				public static fromOuterInner(lineString: com.mapbox.geojson.LineString, outer: com.mapbox.geojson.BoundingBox, bbox: java.util.List<com.mapbox.geojson.LineString>): com.mapbox.geojson.Polygon;
				public coordinates(): java.util.List<java.util.List<com.mapbox.geojson.Point>>;
				public bbox(): com.mapbox.geojson.BoundingBox;
			}
			export namespace Polygon {
				export class GsonTypeAdapter extends com.mapbox.geojson.BaseGeometryTypeAdapter<com.mapbox.geojson.Polygon,java.util.List<java.util.List<com.mapbox.geojson.Point>>> {
					public static class: java.lang.Class<com.mapbox.geojson.Polygon.GsonTypeAdapter>;
					public read(jsonReader: com.google.gson.stream.JsonReader): com.mapbox.geojson.Polygon;
					public write(jsonWriter: com.google.gson.stream.JsonWriter, object: com.mapbox.geojson.Polygon): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace constants {
				export class GeoJsonConstants extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.geojson.constants.GeoJsonConstants>;
					public static MIN_LONGITUDE: number; // -180.0
					public static MAX_LONGITUDE: number; // 180.0
					public static MIN_LATITUDE: number; // -90.0
					public static MAX_LATITUDE: number; // 90.0
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace exception {
				export class GeoJsonException extends java.lang.RuntimeException {
					public static class: java.lang.Class<com.mapbox.geojson.exception.GeoJsonException>;
					public constructor(message: string);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace gson {
				export class BoundingBoxTypeAdapter extends com.google.gson.TypeAdapter<com.mapbox.geojson.BoundingBox> {
					public static class: java.lang.Class<com.mapbox.geojson.gson.BoundingBoxTypeAdapter>;
					public read(in_: com.google.gson.stream.JsonReader): com.mapbox.geojson.BoundingBox;
					public constructor();
					public write(out: com.google.gson.stream.JsonWriter, value: com.mapbox.geojson.BoundingBox): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace gson {
				export abstract class GeoJsonAdapterFactory extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.geojson.gson.GeoJsonAdapterFactory>;
					public static create(): com.google.gson.TypeAdapterFactory;
					public constructor();
				}
				export namespace GeoJsonAdapterFactory {
					export class GeoJsonAdapterFactoryIml extends com.mapbox.geojson.gson.GeoJsonAdapterFactory {
						public static class: java.lang.Class<com.mapbox.geojson.gson.GeoJsonAdapterFactory.GeoJsonAdapterFactoryIml>;
						public constructor();
						public create(gson: com.google.gson.Gson, type: com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter;
						public static create(): com.google.gson.TypeAdapterFactory;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace gson {
				export class GeometryGeoJson extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.geojson.gson.GeometryGeoJson>;
					public constructor();
					public static fromJson(json: string): com.mapbox.geojson.Geometry;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace internal {
				export namespace typeadapters {
					export class RuntimeTypeAdapterFactory<T>  extends com.google.gson.TypeAdapterFactory {
						public static class: java.lang.Class<com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory<any>>;
						public create(entry: com.google.gson.Gson, this_: com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter;
						public static of(baseType: java.lang.Class<any>, typeFi_81c: string): com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory<any>;
						public static of(baseType: java.lang.Class<any>): com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory<any>;
						public static of(baseType: java.lang.Class<any>, typeFi_81c: string, mainta_8bc: boolean): com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory<any>;
						public registerSubtype(type: java.lang.Class<any>): com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory<any>;
						public registerSubtype(type: java.lang.Class<any>, label: string): com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace shifter {
				export class CoordinateShifter extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.geojson.shifter.CoordinateShifter>;
					/**
					 * Constructs a new instance of the com.mapbox.geojson.shifter.CoordinateShifter interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						shiftLonLat(param0: number, param1: number): java.util.List<java.lang.Double>;
						shiftLonLatAlt(param0: number, param1: number, param2: number): java.util.List<java.lang.Double>;
						unshiftPoint(param0: com.mapbox.geojson.Point): java.util.List<java.lang.Double>;
						unshiftPoint(param0: java.util.List<java.lang.Double>): java.util.List<java.lang.Double>;
					});
					public constructor();
					public shiftLonLatAlt(param0: number, param1: number, param2: number): java.util.List<java.lang.Double>;
					public unshiftPoint(param0: com.mapbox.geojson.Point): java.util.List<java.lang.Double>;
					public shiftLonLat(param0: number, param1: number): java.util.List<java.lang.Double>;
					public unshiftPoint(param0: java.util.List<java.lang.Double>): java.util.List<java.lang.Double>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace shifter {
				export class CoordinateShifterManager extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.geojson.shifter.CoordinateShifterManager>;
					public static setCoordinateShifter(coordi_412: com.mapbox.geojson.shifter.CoordinateShifter): void;
					public constructor();
					public static isUsingDefaultShifter(): boolean;
					public static getCoordinateShifter(): com.mapbox.geojson.shifter.CoordinateShifter;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace utils {
				export class GeoJsonUtils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.geojson.utils.GeoJsonUtils>;
					public constructor();
					public static trim(value: number): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace geojson {
			export namespace utils {
				export class PolylineUtils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.geojson.utils.PolylineUtils>;
					/** @deprecated */
					public static simplify(points: java.util.List<com.mapbox.geojson.Point>, tolerance: number): java.util.List<com.mapbox.geojson.Point>;
					/** @deprecated */
					public static simplify(points: java.util.List<com.mapbox.geojson.Point>, highes_b74: boolean): java.util.List<com.mapbox.geojson.Point>;
					public static encode(lat: java.util.List<com.mapbox.geojson.Point>, lng: number): string;
					/** @deprecated */
					public static simplify(points: java.util.List<com.mapbox.geojson.Point>, tolerance: number, highes_b74: boolean): java.util.List<com.mapbox.geojson.Point>;
					/** @deprecated */
					public static simplify(points: java.util.List<com.mapbox.geojson.Point>): java.util.List<com.mapbox.geojson.Point>;
					public static decode(result: string, shift: number): java.util.List<com.mapbox.geojson.Point>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class AnnotatedFeature extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.AnnotatedFeature>;
				public constructor(value: com.mapbox.geojson.Geometry);
				public getGeometry(): com.mapbox.geojson.Geometry;
				public static valueOf(value: com.mapbox.geojson.Geometry): com.mapbox.maps.AnnotatedFeature;
				public isGeometry(): boolean;
				public constructor(value: com.mapbox.maps.AnnotatedLayerFeature);
				public isAnnotatedLayerFeature(): boolean;
				public getTypeInfo(): com.mapbox.maps.AnnotatedFeature.Type;
				public static valueOf(value: com.mapbox.maps.AnnotatedLayerFeature): com.mapbox.maps.AnnotatedFeature;
				public getAnnotatedLayerFeature(): com.mapbox.maps.AnnotatedLayerFeature;
				public toString(): string;
			}
			export namespace AnnotatedFeature {
				export class Type {
					public static class: java.lang.Class<com.mapbox.maps.AnnotatedFeature.Type>;
					public static GEOMETRY: com.mapbox.maps.AnnotatedFeature.Type;
					public static ANNOTATED_LAYER_FEATURE: com.mapbox.maps.AnnotatedFeature.Type;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static valueOf(name: string): com.mapbox.maps.AnnotatedFeature.Type;
					public static values(): androidNative.Array<com.mapbox.maps.AnnotatedFeature.Type>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class AnnotatedLayerFeature extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.AnnotatedLayerFeature>;
				public getLayerId(): string;
				public toBuilder(): com.mapbox.maps.AnnotatedLayerFeature.Builder;
				public hashCode(): number;
				public getFeatureId(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace AnnotatedLayerFeature {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.AnnotatedLayerFeature.Builder>;
					public featureId(featureId: string): com.mapbox.maps.AnnotatedLayerFeature.Builder;
					public constructor();
					public build(): com.mapbox.maps.AnnotatedLayerFeature;
					public layerId(layerId: string): com.mapbox.maps.AnnotatedLayerFeature.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class AsyncOperationResultCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.AsyncOperationResultCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.AsyncOperationResultCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class AsyncOperationResultCallbackNative extends java.lang.Object implements com.mapbox.maps.AsyncOperationResultCallback {
				public static class: java.lang.Class<com.mapbox.maps.AsyncOperationResultCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
			}
			export namespace AsyncOperationResultCallbackNative {
				export class AsyncOperationResultCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.AsyncOperationResultCallbackNative.AsyncOperationResultCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class BuildConfig extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.BuildConfig>;
				public static DEBUG: boolean; // 0
				public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps"
				public static BUILD_TYPE: string; // "release"
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraAnimationHint extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraAnimationHint>;
				public hashCode(): number;
				public toBuilder(): com.mapbox.maps.CameraAnimationHint.Builder;
				public toString(): string;
				public equals(object: any): boolean;
				public getStages(): java.util.List<com.mapbox.maps.CameraAnimationHintStage>;
			}
			export namespace CameraAnimationHint {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.CameraAnimationHint.Builder>;
					public constructor();
					public build(): com.mapbox.maps.CameraAnimationHint;
					public stages(stages: java.util.List<com.mapbox.maps.CameraAnimationHintStage>): com.mapbox.maps.CameraAnimationHint.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraAnimationHintStage extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraAnimationHintStage>;
				public getProgress(): number;
				public hashCode(): number;
				public toBuilder(): com.mapbox.maps.CameraAnimationHintStage.Builder;
				public toString(): string;
				public equals(object: any): boolean;
				public getCamera(): com.mapbox.maps.CameraOptions;
			}
			export namespace CameraAnimationHintStage {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.CameraAnimationHintStage.Builder>;
					public progress(progress: number): com.mapbox.maps.CameraAnimationHintStage.Builder;
					public constructor();
					public camera(camera: com.mapbox.maps.CameraOptions): com.mapbox.maps.CameraAnimationHintStage.Builder;
					public build(): com.mapbox.maps.CameraAnimationHintStage;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraAttributeParser extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CameraAttributeParser>;
				public static INSTANCE: com.mapbox.maps.CameraAttributeParser;
				public parseCameraOptions(zoom: globalAndroid.content.res.TypedArray, centerLng: number): com.mapbox.maps.CameraOptions;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraBounds extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraBounds>;
				public getMinPitch(): number;
				public hashCode(): number;
				public getBounds(): com.mapbox.maps.CoordinateBounds;
				public constructor(bounds: com.mapbox.maps.CoordinateBounds, maxZoom: number, minZoom: number, maxPitch: number, minPitch: number);
				public toString(): string;
				public getMaxZoom(): number;
				public getMaxPitch(): number;
				public equals(object: any): boolean;
				public getMinZoom(): number;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraBoundsOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraBoundsOptions>;
				public getMinZoom(): java.lang.Double;
				public getMaxPitch(): java.lang.Double;
				public getMinPitch(): java.lang.Double;
				public hashCode(): number;
				public getBounds(): com.mapbox.maps.CoordinateBounds;
				public getMaxZoom(): java.lang.Double;
				public toBuilder(): com.mapbox.maps.CameraBoundsOptions.Builder;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace CameraBoundsOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.CameraBoundsOptions.Builder>;
					public maxZoom(maxZoom: java.lang.Double): com.mapbox.maps.CameraBoundsOptions.Builder;
					public minZoom(minZoom: java.lang.Double): com.mapbox.maps.CameraBoundsOptions.Builder;
					public minPitch(minPitch: java.lang.Double): com.mapbox.maps.CameraBoundsOptions.Builder;
					public constructor();
					public maxPitch(maxPitch: java.lang.Double): com.mapbox.maps.CameraBoundsOptions.Builder;
					public bounds(bounds: com.mapbox.maps.CoordinateBounds): com.mapbox.maps.CameraBoundsOptions.Builder;
					public build(): com.mapbox.maps.CameraBoundsOptions;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraChanged extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraChanged>;
				public getTimestamp(): java.util.Date;
				public hashCode(): number;
				public getCameraState(): com.mapbox.maps.CameraState;
				public toString(): string;
				public constructor(camera_4f3: com.mapbox.maps.CameraState, timestamp: java.util.Date);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraChangedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CameraChangedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.CameraChangedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.CameraChanged): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.CameraChanged): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraChangedCallbackNative extends java.lang.Object implements com.mapbox.maps.CameraChangedCallback {
				public static class: java.lang.Class<com.mapbox.maps.CameraChangedCallbackNative>;
				public run(param0: com.mapbox.maps.CameraChanged): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace CameraChangedCallbackNative {
				export class CameraChangedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.CameraChangedCallbackNative.CameraChangedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraChangedCoalesced extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraChangedCoalesced>;
				public getTimestamp(): java.util.Date;
				public hashCode(): number;
				public getCameraState(): com.mapbox.maps.CameraState;
				public toString(): string;
				public constructor(camera_4f3: com.mapbox.maps.CameraState, timestamp: java.util.Date);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraChangedCoalescedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CameraChangedCoalescedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.CameraChangedCoalescedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.CameraChangedCoalesced): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.CameraChangedCoalesced): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraChangedCoalescedCallbackNative extends java.lang.Object implements com.mapbox.maps.CameraChangedCoalescedCallback {
				public static class: java.lang.Class<com.mapbox.maps.CameraChangedCoalescedCallbackNative>;
				public run(param0: com.mapbox.maps.CameraChangedCoalesced): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace CameraChangedCoalescedCallbackNative {
				export class CameraChangedCoalescedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.CameraChangedCoalescedCallbackNative.CameraChangedCoalescedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraManager extends com.mapbox.maps.StyleManager {
				public static class: java.lang.Class<com.mapbox.maps.CameraManager>;
				public getBounds(): com.mapbox.maps.CameraBounds;
				public coordinatesInfoForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.maps.CoordinateInfo>;
				public getFreeCameraOptions(): com.mapbox.maps.FreeCameraOptions;
				public coordinateBoundsZoomForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				public tileCover(param0: com.mapbox.maps.TileCoverOptions, param1: com.mapbox.maps.CameraOptions): java.util.List<com.mapbox.maps.CanonicalTileID>;
				/** @deprecated */
				public cameraForCoordinateBounds(param0: com.mapbox.maps.CoordinateBounds, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double, param4: java.lang.Double, param5: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public coordinateBoundsForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.EdgeInsets, param3: java.lang.Double, param4: com.mapbox.maps.ScreenCoordinate): com.mapbox.bindgen.Expected<string,com.mapbox.maps.CameraOptions>;
				public cameraForDrag(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public coordinateBoundsForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				public pixelForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
				public getCameraState(): com.mapbox.maps.CameraState;
				public pixelsForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>): java.util.List<com.mapbox.maps.ScreenCoordinate>;
				/** @deprecated */
				public cameraForGeometry(param0: com.mapbox.geojson.Geometry, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
				public setCamera(param0: com.mapbox.maps.FreeCameraOptions): void;
				public setCamera(param0: com.mapbox.maps.CameraOptions): void;
				public getRenderWorldCopies(): boolean;
				public coordinateForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
				public setRenderWorldCopies(param0: boolean): void;
				public constructor(peer: number);
				/** @deprecated */
				public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
				public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.ScreenBox): com.mapbox.maps.CameraOptions;
				public setBounds(param0: com.mapbox.maps.CameraBoundsOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public coordinateBoundsZoomForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				public coordinateInfoForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CoordinateInfo;
				public coordinatesForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.geojson.Point>;
				public isPixelAboveHorizon(param0: com.mapbox.maps.ScreenCoordinate): boolean;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace CameraManager {
				export class CameraManagerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.CameraManager.CameraManagerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraOptions>;
				public getAnchor(): com.mapbox.maps.ScreenCoordinate;
				public getPitch(): java.lang.Double;
				public hashCode(): number;
				public getBearing(): java.lang.Double;
				public getCenter(): com.mapbox.geojson.Point;
				public getZoom(): java.lang.Double;
				public toString(): string;
				public getPadding(): com.mapbox.maps.EdgeInsets;
				public equals(object: any): boolean;
				public toBuilder(): com.mapbox.maps.CameraOptions.Builder;
			}
			export namespace CameraOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.CameraOptions.Builder>;
					public pitch(pitch: java.lang.Double): com.mapbox.maps.CameraOptions.Builder;
					public padding(padding: com.mapbox.maps.EdgeInsets): com.mapbox.maps.CameraOptions.Builder;
					public anchor(anchor: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions.Builder;
					public constructor();
					public zoom(zoom: java.lang.Double): com.mapbox.maps.CameraOptions.Builder;
					public center(center: com.mapbox.geojson.Point): com.mapbox.maps.CameraOptions.Builder;
					public bearing(bearing: java.lang.Double): com.mapbox.maps.CameraOptions.Builder;
					public build(): com.mapbox.maps.CameraOptions;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CameraState extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CameraState>;
				public getBearing(): number;
				public getZoom(): number;
				public constructor(center: com.mapbox.geojson.Point, padding: com.mapbox.maps.EdgeInsets, zoom: number, bearing: number, pitch: number);
				public hashCode(): number;
				public getPitch(): number;
				public getCenter(): com.mapbox.geojson.Point;
				public toString(): string;
				public getPadding(): com.mapbox.maps.EdgeInsets;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CanonicalTileID extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CanonicalTileID>;
				public getX(): number;
				public hashCode(): number;
				public getY(): number;
				public getZ(): number;
				public constructor(z: number, x: number, y: number);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ClickInteraction<T>  extends com.mapbox.maps.MapInteraction {
				public static class: java.lang.Class<com.mapbox.maps.ClickInteraction<any>>;
				public static featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
				public static map(onClick: any): com.mapbox.maps.ClickInteraction<any>;
				public static layer(id: string, onClick: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, importId: string, onClick: any): com.mapbox.maps.MapInteraction;
				public static layer(id: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, onClick: any): com.mapbox.maps.MapInteraction;
				public static layer(id: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
				public constructor(featureset: com.mapbox.maps.FeaturesetDescriptor, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any, featur_cc6: any);
				public constructor();
				public static featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
			}
			export namespace ClickInteraction {
				export namespace ClickInteraction {
					export namespace Companion {
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
						function map(onClick: any): com.mapbox.maps.ClickInteraction<any>;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, onClick: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, onClick: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, onClick: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
						function map(onClick: any): com.mapbox.maps.ClickInteraction<any>;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, onClick: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, onClick: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, onClick: any): com.mapbox.maps.MapInteraction;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ColorTheme extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.ColorTheme>;
				public getStylePropertyValue(): com.mapbox.maps.StylePropertyValue;
				public static valueOf(value: com.mapbox.maps.StylePropertyValue): com.mapbox.maps.ColorTheme;
				public static valueOf(value: com.mapbox.maps.Image): com.mapbox.maps.ColorTheme;
				public isStylePropertyValue(): boolean;
				public toString(): string;
				public getImage(): com.mapbox.maps.Image;
				public getTypeInfo(): com.mapbox.maps.ColorTheme.Type;
				public constructor(value: com.mapbox.maps.Image);
				public constructor(value: com.mapbox.maps.StylePropertyValue);
				public isImage(): boolean;
			}
			export namespace ColorTheme {
				export class Type {
					public static class: java.lang.Class<com.mapbox.maps.ColorTheme.Type>;
					public static IMAGE: com.mapbox.maps.ColorTheme.Type;
					public static STYLE_PROPERTY_VALUE: com.mapbox.maps.ColorTheme.Type;
					public static values(): androidNative.Array<com.mapbox.maps.ColorTheme.Type>;
					public static valueOf(name: string): com.mapbox.maps.ColorTheme.Type;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ConstrainMode {
				public static class: java.lang.Class<com.mapbox.maps.ConstrainMode>;
				public static NONE: com.mapbox.maps.ConstrainMode;
				public static HEIGHT_ONLY: com.mapbox.maps.ConstrainMode;
				public static WIDTH_AND_HEIGHT: com.mapbox.maps.ConstrainMode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.ConstrainMode>;
				public static valueOf(name: string): com.mapbox.maps.ConstrainMode;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ContextMode {
				public static class: java.lang.Class<com.mapbox.maps.ContextMode>;
				public static UNIQUE: com.mapbox.maps.ContextMode;
				public static SHARED: com.mapbox.maps.ContextMode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.ContextMode>;
				public static valueOf(name: string): com.mapbox.maps.ContextMode;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CoordinateBounds extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CoordinateBounds>;
				public isBounded(): boolean;
				public northwest(): com.mapbox.geojson.Point;
				public latitudeSpan(): number;
				public southeast(): com.mapbox.geojson.Point;
				public north(): number;
				public south(): number;
				public static world(): com.mapbox.maps.CoordinateBounds;
				public extend(param0: com.mapbox.geojson.Point): com.mapbox.maps.CoordinateBounds;
				public contains(param0: com.mapbox.maps.CoordinateBounds, param1: boolean): boolean;
				public hashCode(): number;
				public static singleton(param0: com.mapbox.geojson.Point): com.mapbox.maps.CoordinateBounds;
				public isEmpty(): boolean;
				public west(): number;
				public static hull(param0: com.mapbox.geojson.Point, param1: com.mapbox.geojson.Point): com.mapbox.maps.CoordinateBounds;
				public intersects(param0: com.mapbox.maps.CoordinateBounds, param1: boolean): boolean;
				public crossesAntimeridian(): boolean;
				public constrain(param0: com.mapbox.geojson.Point): com.mapbox.geojson.Point;
				public longitudeSpan(): number;
				public isValid(): boolean;
				public toString(): string;
				public center(): com.mapbox.geojson.Point;
				public equals(object: any): boolean;
				public contains(param0: com.mapbox.geojson.Point, param1: boolean): boolean;
				public getInfiniteBounds(): boolean;
				public constructor(southwest: com.mapbox.geojson.Point, northeast: com.mapbox.geojson.Point);
				public east(): number;
				public getSouthwest(): com.mapbox.geojson.Point;
				public extend(param0: com.mapbox.maps.CoordinateBounds): com.mapbox.maps.CoordinateBounds;
				public getNortheast(): com.mapbox.geojson.Point;
				public constructor(southwest: com.mapbox.geojson.Point, northeast: com.mapbox.geojson.Point, infini_dd0: boolean);
				public containsLatitude(param0: number): boolean;
				public containsLongitude(param0: number): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CoordinateBoundsZoom extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CoordinateBoundsZoom>;
				public getZoom(): number;
				public hashCode(): number;
				public getBounds(): com.mapbox.maps.CoordinateBounds;
				public constructor(bounds: com.mapbox.maps.CoordinateBounds, zoom: number);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CoordinateInfo extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CoordinateInfo>;
				public hashCode(): number;
				public getCoordinate(): com.mapbox.geojson.Point;
				public constructor(coordinate: com.mapbox.geojson.Point, isOnSu_66b: boolean);
				public getIsOnSurface(): boolean;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CumulativeRenderingStatistics extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CumulativeRenderingStatistics>;
				public getVertexBytes(): java.lang.Long;
				public getDrawCalls(): java.lang.Long;
				public hashCode(): number;
				public constructor(drawCalls: java.lang.Long, textur_217: java.lang.Long, vertex_b32: java.lang.Long, graphi_165: java.lang.Long, graphi_777: java.lang.Double, fboSwi_a39: java.lang.Long);
				public getGraphicsProgramsCreationTimeMillis(): java.lang.Double;
				public getFboSwitchCount(): java.lang.Long;
				public getTextureBytes(): java.lang.Long;
				public toString(): string;
				public getGraphicsPrograms(): java.lang.Long;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomGeometrySourceOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CustomGeometrySourceOptions>;
				public getCancelTileFunction(): com.mapbox.maps.TileFunctionCallback;
				public hashCode(): number;
				public getFetchTileFunction(): com.mapbox.maps.TileFunctionCallback;
				public toString(): string;
				public getMaxZoom(): number;
				public getTileOptions(): com.mapbox.maps.TileOptions;
				public equals(object: any): boolean;
				public toBuilder(): com.mapbox.maps.CustomGeometrySourceOptions.Builder;
				public getMinZoom(): number;
			}
			export namespace CustomGeometrySourceOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.CustomGeometrySourceOptions.Builder>;
					public maxZoom(maxZoom: number): com.mapbox.maps.CustomGeometrySourceOptions.Builder;
					public tileOptions(tileOp_0b1: com.mapbox.maps.TileOptions): com.mapbox.maps.CustomGeometrySourceOptions.Builder;
					public constructor();
					public cancelTileFunction(cancel_b2f: com.mapbox.maps.TileFunctionCallback): com.mapbox.maps.CustomGeometrySourceOptions.Builder;
					public minZoom(minZoom: number): com.mapbox.maps.CustomGeometrySourceOptions.Builder;
					public build(): com.mapbox.maps.CustomGeometrySourceOptions;
					public fetchTileFunction(fetchT_f77: com.mapbox.maps.TileFunctionCallback): com.mapbox.maps.CustomGeometrySourceOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomLayerHost extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CustomLayerHost>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.CustomLayerHost interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					initialize(): void;
					prerender(parameters: com.mapbox.maps.CustomLayerRenderParameters): com.mapbox.maps.CustomLayerRenderConfiguration;
					render(param0: com.mapbox.maps.CustomLayerRenderParameters): void;
					renderToTile(tileID: com.mapbox.maps.CanonicalTileID): void;
					contextLost(): void;
					deinitialize(): void;
				});
				public constructor();
				public contextLost(): void;
				public deinitialize(): void;
				public initialize(): void;
				public renderToTile(tileID: com.mapbox.maps.CanonicalTileID): void;
				public prerender(parameters: com.mapbox.maps.CustomLayerRenderParameters): com.mapbox.maps.CustomLayerRenderConfiguration;
				public render(param0: com.mapbox.maps.CustomLayerRenderParameters): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomLayerHostNative extends java.lang.Object implements com.mapbox.maps.CustomLayerHost {
				public static class: java.lang.Class<com.mapbox.maps.CustomLayerHostNative>;
				public peer: number;
				public contextLost(): void;
				public deinitialize(): void;
				public initialize(): void;
				public static cleanNativePeer(param0: number): void;
				public renderToTile(param0: com.mapbox.maps.CanonicalTileID): void;
				public renderToTile(tileID: com.mapbox.maps.CanonicalTileID): void;
				public render(param0: com.mapbox.maps.CustomLayerRenderParameters): void;
				public prerender(parameters: com.mapbox.maps.CustomLayerRenderParameters): com.mapbox.maps.CustomLayerRenderConfiguration;
				public constructor(peer: number);
				public prerender(param0: com.mapbox.maps.CustomLayerRenderParameters): com.mapbox.maps.CustomLayerRenderConfiguration;
			}
			export namespace CustomLayerHostNative {
				export class CustomLayerHostPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.CustomLayerHostNative.CustomLayerHostPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomLayerMapProjection extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CustomLayerMapProjection>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.CustomLayerMapProjection interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					convertMercatorModelMatrix(param0: java.util.List<java.lang.Double>, param1: boolean): java.util.List<java.lang.Double>;
					getModelMatrix(): java.util.List<java.lang.Double>;
					getTransitionPhase(): number;
					getTransitionMatrix(): java.util.List<java.lang.Double>;
				});
				public constructor();
				public getModelMatrix(): java.util.List<java.lang.Double>;
				public getTransitionPhase(): number;
				public getTransitionMatrix(): java.util.List<java.lang.Double>;
				public convertMercatorModelMatrix(param0: java.util.List<java.lang.Double>, param1: boolean): java.util.List<java.lang.Double>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomLayerMapProjectionNative extends java.lang.Object implements com.mapbox.maps.CustomLayerMapProjection {
				public static class: java.lang.Class<com.mapbox.maps.CustomLayerMapProjectionNative>;
				public peer: number;
				public getModelMatrix(): java.util.List<java.lang.Double>;
				public getTransitionPhase(): number;
				public getTransitionMatrix(): java.util.List<java.lang.Double>;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public convertMercatorModelMatrix(param0: java.util.List<java.lang.Double>, param1: boolean): java.util.List<java.lang.Double>;
			}
			export namespace CustomLayerMapProjectionNative {
				export class CustomLayerMapProjectionPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.CustomLayerMapProjectionNative.CustomLayerMapProjectionPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomLayerRenderConfiguration extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CustomLayerRenderConfiguration>;
				public getShouldRerenderTiles(): boolean;
				public toBuilder(): com.mapbox.maps.CustomLayerRenderConfiguration.Builder;
				public hashCode(): number;
				public getIsRenderToTileSupported(): boolean;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace CustomLayerRenderConfiguration {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.CustomLayerRenderConfiguration.Builder>;
					public isRenderToTileSupported(isRend_efe: boolean): com.mapbox.maps.CustomLayerRenderConfiguration.Builder;
					public constructor();
					public build(): com.mapbox.maps.CustomLayerRenderConfiguration;
					public shouldRerenderTiles(should_1f4: boolean): com.mapbox.maps.CustomLayerRenderConfiguration.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomLayerRenderParameters extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CustomLayerRenderParameters>;
				public getHeight(): number;
				public getBearing(): number;
				public getRenderToTilesIDs(): java.util.List<com.mapbox.maps.CanonicalTileID>;
				public getZoom(): number;
				public getProjection(): com.mapbox.maps.CustomLayerMapProjection;
				/** @deprecated */
				public constructor(width: number, height: number, latitude: number, longitude: number, zoom: number, bearing: number, pitch: number, fieldO_c93: number, projec_099: java.util.List<java.lang.Double>, depthRange: com.mapbox.maps.DepthRange, elevat_dac: com.mapbox.maps.ElevationData, projection: com.mapbox.maps.CustomLayerMapProjection);
				public getPitch(): number;
				public toString(): string;
				public equals(object: any): boolean;
				public getWidth(): number;
				public getLatitude(): number;
				public hashCode(): number;
				public getLongitude(): number;
				public getDepthRange(): com.mapbox.maps.DepthRange;
				public getFieldOfView(): number;
				public getProjectionMatrix(): java.util.List<java.lang.Double>;
				public getElevationData(): com.mapbox.maps.ElevationData;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceClient extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceClient>;
				public getCustomRasterSourceTileRenderer(): com.mapbox.maps.CustomRasterSourceTileRenderer;
				public static valueOf(value: com.mapbox.maps.CustomRasterSourceTileRenderer): com.mapbox.maps.CustomRasterSourceClient;
				public constructor(value: com.mapbox.maps.CustomRasterSourceTileStatusChangedCallback);
				public static valueOf(value: com.mapbox.maps.CustomRasterSourceTileStatusChangedCallback): com.mapbox.maps.CustomRasterSourceClient;
				public isCustomRasterSourceTileRenderer(): boolean;
				public isCustomRasterSourceTileStatusChangedCallback(): boolean;
				public getTypeInfo(): com.mapbox.maps.CustomRasterSourceClient.Type;
				public toString(): string;
				public getCustomRasterSourceTileStatusChangedCallback(): com.mapbox.maps.CustomRasterSourceTileStatusChangedCallback;
				public constructor(value: com.mapbox.maps.CustomRasterSourceTileRenderer);
			}
			export namespace CustomRasterSourceClient {
				export class Type {
					public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceClient.Type>;
					public static CUSTOM_RASTER_SOURCE_TILE_STATUS_CHANGED_CALLBACK: com.mapbox.maps.CustomRasterSourceClient.Type;
					public static CUSTOM_RASTER_SOURCE_TILE_RENDERER: com.mapbox.maps.CustomRasterSourceClient.Type;
					public static values(): androidNative.Array<com.mapbox.maps.CustomRasterSourceClient.Type>;
					public static valueOf(name: string): com.mapbox.maps.CustomRasterSourceClient.Type;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceOptions>;
				public toBuilder(): com.mapbox.maps.CustomRasterSourceOptions.Builder;
				public getClientCallback(): com.mapbox.maps.CustomRasterSourceClient;
				public hashCode(): number;
				public getTileSize(): number;
				public toString(): string;
				public getMaxZoom(): number;
				public equals(object: any): boolean;
				public getMinZoom(): number;
			}
			export namespace CustomRasterSourceOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceOptions.Builder>;
					public minZoom(minZoom: number): com.mapbox.maps.CustomRasterSourceOptions.Builder;
					public constructor();
					public clientCallback(client_e81: com.mapbox.maps.CustomRasterSourceClient): com.mapbox.maps.CustomRasterSourceOptions.Builder;
					public maxZoom(maxZoom: number): com.mapbox.maps.CustomRasterSourceOptions.Builder;
					public tileSize(tileSize: number): com.mapbox.maps.CustomRasterSourceOptions.Builder;
					public build(): com.mapbox.maps.CustomRasterSourceOptions;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceTileData extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileData>;
				public hashCode(): number;
				public getTileId(): com.mapbox.maps.CanonicalTileID;
				public getImage(): com.mapbox.maps.Image;
				public toString(): string;
				public constructor(tileId: com.mapbox.maps.CanonicalTileID, image: com.mapbox.maps.Image);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceTileRenderer extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileRenderer>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.CustomRasterSourceTileRenderer interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					initialize(): void;
					isTileRenderable(param0: com.mapbox.maps.CanonicalTileID, param1: com.mapbox.maps.CustomRasterSourceTileStatus): boolean;
					prerender(param0: com.mapbox.maps.CustomLayerRenderParameters): void;
					renderToTile(param0: com.mapbox.maps.CanonicalTileID): void;
					contextLost(): void;
					deinitialize(): void;
				});
				public constructor();
				public contextLost(): void;
				public deinitialize(): void;
				public initialize(): void;
				public isTileRenderable(param0: com.mapbox.maps.CanonicalTileID, param1: com.mapbox.maps.CustomRasterSourceTileStatus): boolean;
				public prerender(param0: com.mapbox.maps.CustomLayerRenderParameters): void;
				public renderToTile(param0: com.mapbox.maps.CanonicalTileID): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceTileRendererNative extends java.lang.Object implements com.mapbox.maps.CustomRasterSourceTileRenderer {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileRendererNative>;
				public peer: number;
				public contextLost(): void;
				public deinitialize(): void;
				public initialize(): void;
				public isTileRenderable(param0: com.mapbox.maps.CanonicalTileID, param1: com.mapbox.maps.CustomRasterSourceTileStatus): boolean;
				public prerender(param0: com.mapbox.maps.CustomLayerRenderParameters): void;
				public static cleanNativePeer(param0: number): void;
				public renderToTile(param0: com.mapbox.maps.CanonicalTileID): void;
				public constructor(peer: number);
			}
			export namespace CustomRasterSourceTileRendererNative {
				export class CustomRasterSourceTileRendererPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileRendererNative.CustomRasterSourceTileRendererPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceTileStatus {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileStatus>;
				public static REQUIRED: com.mapbox.maps.CustomRasterSourceTileStatus;
				public static OPTIONAL: com.mapbox.maps.CustomRasterSourceTileStatus;
				public static NOT_NEEDED: com.mapbox.maps.CustomRasterSourceTileStatus;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.CustomRasterSourceTileStatus>;
				public static valueOf(name: string): com.mapbox.maps.CustomRasterSourceTileStatus;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceTileStatusChangedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileStatusChangedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.CustomRasterSourceTileStatusChangedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.CanonicalTileID, param1: com.mapbox.maps.CustomRasterSourceTileStatus): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.CanonicalTileID, param1: com.mapbox.maps.CustomRasterSourceTileStatus): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class CustomRasterSourceTileStatusChangedCallbackNative extends java.lang.Object implements com.mapbox.maps.CustomRasterSourceTileStatusChangedCallback {
				public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileStatusChangedCallbackNative>;
				public run(param0: com.mapbox.maps.CanonicalTileID, param1: com.mapbox.maps.CustomRasterSourceTileStatus): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace CustomRasterSourceTileStatusChangedCallbackNative {
				export class CustomRasterSourceTileStatusChangedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.CustomRasterSourceTileStatusChangedCallbackNative.CustomRasterSourceTileStatusChangedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class DelegatingMapClient extends java.lang.Object implements com.mapbox.maps.MapClient {
				public static class: java.lang.Class<com.mapbox.maps.DelegatingMapClient>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.DelegatingMapClient interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					scheduleRepaint(): void;
				});
				public constructor();
				public scheduleRepaint(): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class DelegatingViewAnnotationPositionDescriptor extends com.mapbox.maps.ViewAnnotationPositionDescriptor {
				public static class: java.lang.Class<com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor>;
				public constructor(identifier: string, width: number, height: number, leftTo_a8d: com.mapbox.maps.ScreenCoordinate, anchor_5ea: com.mapbox.geojson.Point, anchor_192: com.mapbox.maps.ViewAnnotationAnchorConfig);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export abstract class DelegatingViewAnnotationPositionsUpdateListener extends java.lang.Object implements com.mapbox.maps.ViewAnnotationPositionsUpdateListener {
				public static class: java.lang.Class<com.mapbox.maps.DelegatingViewAnnotationPositionsUpdateListener>;
				public onDelegatingViewAnnotationPositionsUpdate(param0: java.util.List<com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor>): void;
				public onViewAnnotationPositionsUpdate(param0: java.util.List<com.mapbox.maps.ViewAnnotationPositionDescriptor>): void;
				public constructor();
				public onViewAnnotationPositionsUpdate(it: java.util.List<com.mapbox.maps.ViewAnnotationPositionDescriptor>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class DepthRange extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.DepthRange>;
				public getMax(): number;
				public constructor(min: number, max: number);
				public getMin(): number;
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class DragInteraction<T>  extends com.mapbox.maps.MapInteraction {
				public static class: java.lang.Class<com.mapbox.maps.DragInteraction<any>>;
				public static layer(id: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, importId: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
				public static layer(id: string, filter: com.mapbox.bindgen.Value, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
			}
			export namespace DragInteraction {
				export namespace DragInteraction {
					export namespace Companion {
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, onDrag_947: any, onDrag: any, onDragEnd: any): com.mapbox.maps.MapInteraction;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class DurationStatistics extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.DurationStatistics>;
				public getMedianMillis(): number;
				public getMaxMillis(): number;
				public constructor(maxMillis: number, median_375: number);
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class EdgeInsets extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.EdgeInsets>;
				public getTop(): number;
				public getLeft(): number;
				public hashCode(): number;
				public getBottom(): number;
				public getRight(): number;
				public toString(): string;
				public constructor(top: number, left: number, bottom: number, right: number);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ElevationData extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.ElevationData>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.ElevationData interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getElevation(param0: com.mapbox.geojson.Point): java.lang.Double;
					getTerrainExaggeration(): number;
				});
				public constructor();
				public getElevation(param0: com.mapbox.geojson.Point): java.lang.Double;
				public getTerrainExaggeration(): number;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ElevationDataNative extends java.lang.Object implements com.mapbox.maps.ElevationData {
				public static class: java.lang.Class<com.mapbox.maps.ElevationDataNative>;
				public peer: number;
				public getElevation(param0: com.mapbox.geojson.Point): java.lang.Double;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public getTerrainExaggeration(): number;
			}
			export namespace ElevationDataNative {
				export class ElevationDataPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.ElevationDataNative.ElevationDataPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class EventTimeInterval extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.EventTimeInterval>;
				public getEnd(): java.util.Date;
				public hashCode(): number;
				public getBegin(): java.util.Date;
				public toString(): string;
				public constructor(begin: java.util.Date, end: java.util.Date);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ExtensionUtils extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.ExtensionUtils>;
				public static toCameraOptions(this_t_85f: com.mapbox.maps.CameraState): com.mapbox.maps.CameraOptions;
				public static toMapboxImage(native_273: globalAndroid.graphics.Bitmap): com.mapbox.maps.Image;
				public static toCameraOptions(this_t_85f: com.mapbox.maps.CameraState, anchor: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FeatureExtensionValue extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.FeatureExtensionValue>;
				public getValue(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public getFeatureCollection(): java.util.List<com.mapbox.geojson.Feature>;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor(value: com.mapbox.bindgen.Value, featur_b09: java.util.List<com.mapbox.geojson.Feature>);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FeatureStateOperationCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.FeatureStateOperationCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.FeatureStateOperationCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FeatureStateOperationCallbackNative extends java.lang.Object implements com.mapbox.maps.FeatureStateOperationCallback {
				public static class: java.lang.Class<com.mapbox.maps.FeatureStateOperationCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>): void;
			}
			export namespace FeatureStateOperationCallbackNative {
				export class FeatureStateOperationCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.FeatureStateOperationCallbackNative.FeatureStateOperationCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FeaturesetDescriptor extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.FeaturesetDescriptor>;
				public getFeaturesetId(): string;
				public getLayerId(): string;
				public constructor(featur_586: string, importId: string, layerId: string);
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
				public getImportId(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FeaturesetFeatureId extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.FeaturesetFeatureId>;
				public getFeatureNamespace(): string;
				public constructor(featureId: string, featur_688: string);
				public hashCode(): number;
				public getFeatureId(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FeaturesetQueryTarget extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.FeaturesetQueryTarget>;
				public getFilter(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public getId(): java.lang.Long;
				public constructor(featureset: com.mapbox.maps.FeaturesetDescriptor, filter: com.mapbox.bindgen.Value, id: java.lang.Long);
				public toString(): string;
				public getFeatureset(): com.mapbox.maps.FeaturesetDescriptor;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FontUtils extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.FontUtils>;
				public static INSTANCE: com.mapbox.maps.FontUtils;
				public extractValidFont(it: string): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class FreeCameraOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.FreeCameraOptions>;
				public peer: number;
				public setPosition(param0: com.mapbox.maps.Vec3): void;
				public getLocation(): com.mapbox.geojson.Point;
				public getAltitude(): java.lang.Double;
				public setPitchBearing(param0: number, param1: number): void;
				public setLocation(param0: com.mapbox.geojson.Point, param1: number): void;
				public lookAtPoint(param0: com.mapbox.geojson.Point): void;
				public constructor(peer: number);
				public getOrientation(): com.mapbox.maps.Vec4;
				public lookAtPoint(param0: com.mapbox.geojson.Point, param1: number): void;
				public static cleanNativePeer(param0: number): void;
				public lookAtPoint(param0: com.mapbox.geojson.Point, param1: number, param2: com.mapbox.maps.Vec3): void;
				public setLocation(param0: com.mapbox.geojson.Point): void;
				public getPosition(): com.mapbox.maps.Vec3;
				public setOrientation(param0: com.mapbox.maps.Vec4): void;
				public setAltitude(param0: number): void;
			}
			export namespace FreeCameraOptions {
				export class FreeCameraOptionsPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.FreeCameraOptions.FreeCameraOptionsPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class GenericEvent extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.GenericEvent>;
				public constructor(name: string, data: com.mapbox.bindgen.Value, timeIn_3e5: com.mapbox.maps.EventTimeInterval);
				public getData(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public getName(): string;
				public toString(): string;
				public equals(object: any): boolean;
				public getTimeInterval(): com.mapbox.maps.EventTimeInterval;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class GenericEventCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.GenericEventCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.GenericEventCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.GenericEvent): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.GenericEvent): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class GenericEventCallbackNative extends java.lang.Object implements com.mapbox.maps.GenericEventCallback {
				public static class: java.lang.Class<com.mapbox.maps.GenericEventCallbackNative>;
				public run(param0: com.mapbox.maps.GenericEvent): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace GenericEventCallbackNative {
				export class GenericEventCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.GenericEventCallbackNative.GenericEventCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class GeoJSONSourceData extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.GeoJSONSourceData>;
				public getList(): java.util.List<com.mapbox.geojson.Feature>;
				public getString(): string;
				public constructor(value: com.mapbox.geojson.Geometry);
				public isList(): boolean;
				public getGeometry(): com.mapbox.geojson.Geometry;
				public isGeometry(): boolean;
				public isFeature(): boolean;
				public static valueOf(value: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.maps.GeoJSONSourceData;
				public getTypeInfo(): com.mapbox.maps.GeoJSONSourceData.Type;
				public constructor(value: java.util.List<com.mapbox.geojson.Feature>);
				public toString(): string;
				public static valueOf(value: string): com.mapbox.maps.GeoJSONSourceData;
				public constructor(value: com.mapbox.geojson.Feature);
				public static valueOf(value: com.mapbox.geojson.Feature): com.mapbox.maps.GeoJSONSourceData;
				public static valueOf(value: com.mapbox.geojson.Geometry): com.mapbox.maps.GeoJSONSourceData;
				public getFeature(): com.mapbox.geojson.Feature;
				public isString(): boolean;
				public constructor(value: string);
			}
			export namespace GeoJSONSourceData {
				export class Type {
					public static class: java.lang.Class<com.mapbox.maps.GeoJSONSourceData.Type>;
					public static GEOMETRY: com.mapbox.maps.GeoJSONSourceData.Type;
					public static FEATURE: com.mapbox.maps.GeoJSONSourceData.Type;
					public static LIST: com.mapbox.maps.GeoJSONSourceData.Type;
					public static STRING: com.mapbox.maps.GeoJSONSourceData.Type;
					public static valueOf(name: string): com.mapbox.maps.GeoJSONSourceData.Type;
					public static values(): androidNative.Array<com.mapbox.maps.GeoJSONSourceData.Type>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class GlyphsRasterizationMode {
				public static class: java.lang.Class<com.mapbox.maps.GlyphsRasterizationMode>;
				public static NO_GLYPHS_RASTERIZED_LOCALLY: com.mapbox.maps.GlyphsRasterizationMode;
				public static IDEOGRAPHS_RASTERIZED_LOCALLY: com.mapbox.maps.GlyphsRasterizationMode;
				public static ALL_GLYPHS_RASTERIZED_LOCALLY: com.mapbox.maps.GlyphsRasterizationMode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.GlyphsRasterizationMode>;
				public static valueOf(name: string): com.mapbox.maps.GlyphsRasterizationMode;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class GlyphsRasterizationOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.GlyphsRasterizationOptions>;
				public getRasterizationMode(): com.mapbox.maps.GlyphsRasterizationMode;
				public toBuilder(): com.mapbox.maps.GlyphsRasterizationOptions.Builder;
				public hashCode(): number;
				public toString(): string;
				public getFontFamily(): string;
				public equals(object: any): boolean;
			}
			export namespace GlyphsRasterizationOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.GlyphsRasterizationOptions.Builder>;
					public fontFamily(fontFamily: string): com.mapbox.maps.GlyphsRasterizationOptions.Builder;
					public constructor();
					public build(): com.mapbox.maps.GlyphsRasterizationOptions;
					public rasterizationMode(raster_f93: com.mapbox.maps.GlyphsRasterizationMode): com.mapbox.maps.GlyphsRasterizationOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class GroupPerformanceStatistics extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.GroupPerformanceStatistics>;
				public getDurationMillis(): number;
				public hashCode(): number;
				public constructor(durati_64f: number, name: string);
				public getName(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Image extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.Image>;
				public getWidth(): number;
				public getHeight(): number;
				public hashCode(): number;
				public constructor(width: number, height: number, data: com.mapbox.bindgen.DataRef);
				public getData(): com.mapbox.bindgen.DataRef;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ImageContent extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ImageContent>;
				public getTop(): number;
				public getLeft(): number;
				public hashCode(): number;
				public getBottom(): number;
				public getRight(): number;
				public toString(): string;
				public equals(object: any): boolean;
				public constructor(left: number, top: number, right: number, bottom: number);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ImageHolder extends java.lang.Object implements globalAndroid.os.Parcelable {
				public static class: java.lang.Class<com.mapbox.maps.ImageHolder>;
				public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.ImageHolder>;
				public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
				public equals(other: any): boolean;
				public static from(bitmap: globalAndroid.graphics.Bitmap): com.mapbox.maps.ImageHolder;
				public hashCode(): number;
				public getDrawableId(): java.lang.Integer;
				public describeContents(): number;
				public static from(drawableId: number): com.mapbox.maps.ImageHolder;
				public static from(image: com.mapbox.maps.Image): com.mapbox.maps.ImageHolder;
				public getImage(): com.mapbox.maps.Image;
				public toString(): string;
				public getBitmap(): globalAndroid.graphics.Bitmap;
				public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
			}
			export namespace ImageHolder {
				export namespace ImageHolder {
					export namespace Companion {
						function from(drawableId: number): com.mapbox.maps.ImageHolder;
						function from(bitmap: globalAndroid.graphics.Bitmap): com.mapbox.maps.ImageHolder;
						function from(image: com.mapbox.maps.Image): com.mapbox.maps.ImageHolder;
						function from(drawableId: number): com.mapbox.maps.ImageHolder;
						function from(bitmap: globalAndroid.graphics.Bitmap): com.mapbox.maps.ImageHolder;
						function from(image: com.mapbox.maps.Image): com.mapbox.maps.ImageHolder;
					}
				}
				export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.ImageHolder> {
					public static class: java.lang.Class<com.mapbox.maps.ImageHolder.Creator>;
					public constructor();
					public newArray(param0: number): androidNative.Array<any>;
					public newArray(size: number): androidNative.Array<com.mapbox.maps.ImageHolder>;
					public createFromParcel(param0: globalAndroid.os.Parcel): any;
					public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.ImageHolder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ImageStretches extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ImageStretches>;
				public constructor(first: number, second: number);
				public getFirst(): number;
				public hashCode(): number;
				public toString(): string;
				public getSecond(): number;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ImportPosition extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ImportPosition>;
				public getAt(): java.lang.Integer;
				public hashCode(): number;
				public constructor(above: string, below: string, at: java.lang.Integer);
				public getBelow(): string;
				public toString(): string;
				public equals(object: any): boolean;
				public getAbove(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Interaction extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.Interaction>;
				public getType(): com.mapbox.maps.InteractionType;
				public getFilter(): com.mapbox.bindgen.Value;
				public getHandler(): com.mapbox.maps.InteractionHandler;
				public hashCode(): number;
				public constructor(featureset: com.mapbox.maps.FeaturesetDescriptor, filter: com.mapbox.bindgen.Value, type: com.mapbox.maps.InteractionType, handler: com.mapbox.maps.InteractionHandler, radius: java.lang.Double);
				public getRadius(): java.lang.Double;
				public toString(): string;
				public getFeatureset(): com.mapbox.maps.FeaturesetDescriptor;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class InteractionContext extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.InteractionContext>;
				public getScreenCoordinate(): com.mapbox.maps.ScreenCoordinate;
				public getCoordinateInfo(): com.mapbox.maps.CoordinateInfo;
				public constructor(coordi_8af: com.mapbox.maps.CoordinateInfo, screen_b07: com.mapbox.maps.ScreenCoordinate);
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class InteractionHandler extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.InteractionHandler>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.InteractionHandler interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					handleBegin(param0: com.mapbox.maps.QueriedFeature, param1: com.mapbox.maps.InteractionContext): boolean;
					handleChange(param0: com.mapbox.maps.InteractionContext): void;
					handleEnd(param0: com.mapbox.maps.InteractionContext): void;
				});
				public constructor();
				public handleEnd(param0: com.mapbox.maps.InteractionContext): void;
				public handleChange(param0: com.mapbox.maps.InteractionContext): void;
				public handleBegin(param0: com.mapbox.maps.QueriedFeature, param1: com.mapbox.maps.InteractionContext): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class InteractionHandlerNative extends java.lang.Object implements com.mapbox.maps.InteractionHandler {
				public static class: java.lang.Class<com.mapbox.maps.InteractionHandlerNative>;
				public peer: number;
				public handleEnd(param0: com.mapbox.maps.InteractionContext): void;
				public static cleanNativePeer(param0: number): void;
				public handleChange(param0: com.mapbox.maps.InteractionContext): void;
				public handleBegin(param0: com.mapbox.maps.QueriedFeature, param1: com.mapbox.maps.InteractionContext): boolean;
				public constructor(peer: number);
			}
			export namespace InteractionHandlerNative {
				export class InteractionHandlerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.InteractionHandlerNative.InteractionHandlerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class InteractionType {
				public static class: java.lang.Class<com.mapbox.maps.InteractionType>;
				public static CLICK: com.mapbox.maps.InteractionType;
				public static LONG_CLICK: com.mapbox.maps.InteractionType;
				public static DRAG: com.mapbox.maps.InteractionType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.InteractionType;
				public static values(): androidNative.Array<com.mapbox.maps.InteractionType>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class LayerPosition extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.LayerPosition>;
				public getAt(): java.lang.Integer;
				public hashCode(): number;
				public constructor(above: string, below: string, at: java.lang.Integer);
				public getBelow(): string;
				public toString(): string;
				public equals(object: any): boolean;
				public getAbove(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class LongClickInteraction<T>  extends com.mapbox.maps.MapInteraction {
				public static class: java.lang.Class<com.mapbox.maps.LongClickInteraction<any>>;
				public static featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, importId: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
				public static featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
				public constructor(featureset: com.mapbox.maps.FeaturesetDescriptor, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any, featur_cc6: any);
				public static layer(id: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
				public static layer(id: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
				public static layer(id: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
				public static map(onLong_e1e: any): com.mapbox.maps.LongClickInteraction<any>;
				public constructor();
			}
			export namespace LongClickInteraction {
				export namespace LongClickInteraction {
					export namespace Companion {
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function map(onLong_e1e: any): com.mapbox.maps.LongClickInteraction<any>;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function map(onLong_e1e: any): com.mapbox.maps.LongClickInteraction<any>;
						function featureset(id: string, importId: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, importId: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function featureset(id: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
						function layer(id: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Map extends com.mapbox.maps.CameraManager {
				public static class: java.lang.Class<com.mapbox.maps.Map>;
				public getElevation(param0: com.mapbox.geojson.Point): java.lang.Double;
				public setTileCacheBudget(param0: com.mapbox.maps.TileCacheBudget): void;
				public setNorthOrientation(param0: com.mapbox.maps.NorthOrientation): void;
				public setCenterAltitudeMode(param0: com.mapbox.maps.MapCenterAltitudeMode): void;
				public resetFeatureStates(param0: com.mapbox.maps.FeaturesetDescriptor, param1: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public getScreenCullingShape(): java.util.List<com.mapbox.maps.Vec2>;
				public setViewAnnotationPositionsUpdateListener(param0: com.mapbox.maps.ViewAnnotationPositionsUpdateListener): void;
				public getFeatureState(param0: com.mapbox.maps.FeaturesetDescriptor, param1: com.mapbox.maps.FeaturesetFeatureId, param2: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
				public getDebug(): java.util.List<com.mapbox.maps.MapDebugOptions>;
				public setDebug(param0: java.util.List<com.mapbox.maps.MapDebugOptions>, param1: boolean): void;
				public removeFeatureState(param0: com.mapbox.maps.FeaturesetDescriptor, param1: com.mapbox.maps.FeaturesetFeatureId, param2: string, param3: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public isUserAnimationInProgress(): boolean;
				public getMapOptions(): com.mapbox.maps.MapOptions;
				public setUserAnimationInProgress(param0: boolean): void;
				public getViewAnnotationAvoidLayers(): java.util.HashSet<string>;
				public constructor(client: com.mapbox.maps.MapClient, mapOptions: com.mapbox.maps.MapOptions);
				public isGestureInProgress(): boolean;
				public setCameraAnimationHint(param0: com.mapbox.maps.CameraAnimationHint): void;
				public setConstrainMode(param0: com.mapbox.maps.ConstrainMode): void;
				public startPerformanceStatisticsCollection(param0: com.mapbox.maps.PerformanceStatisticsOptions, param1: com.mapbox.maps.PerformanceStatisticsCallback): void;
				public setFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.bindgen.Value, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public queryRenderedFeatures(param0: com.mapbox.maps.RenderedQueryGeometry, param1: com.mapbox.maps.RenderedQueryOptions, param2: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
				public removeViewAnnotation(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateViewAnnotation(param0: string, param1: com.mapbox.maps.ViewAnnotationOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getCenterAltitudeMode(): com.mapbox.maps.MapCenterAltitudeMode;
				public querySourceFeatures(param0: com.mapbox.maps.FeaturesetQueryTarget, param1: com.mapbox.maps.QuerySourceFeaturesCallback): com.mapbox.common.Cancelable;
				public querySourceFeatures(param0: string, param1: com.mapbox.maps.SourceQueryOptions, param2: com.mapbox.maps.QuerySourceFeaturesCallback): com.mapbox.common.Cancelable;
				public removeFeatureState(param0: string, param1: string, param2: string, param3: string, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public dispatch(param0: com.mapbox.maps.PlatformEventInfo): void;
				public setScreenCullingShape(param0: java.util.List<com.mapbox.maps.Vec2>): void;
				public resetThreadServiceType(): void;
				public queryRenderedFeatures(param0: com.mapbox.maps.RenderedQueryGeometry, param1: java.util.List<com.mapbox.maps.FeaturesetQueryTarget>, param2: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
				public triggerRepaint(): void;
				public resetFeatureStates(param0: string, param1: string, param2: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public getAttributions(): java.util.List<string>;
				public addViewAnnotation(param0: string, param1: com.mapbox.maps.ViewAnnotationOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public destroyRenderer(): void;
				public setViewAnnotationAvoidLayers(param0: java.util.HashSet<string>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
				public setFeatureState(param0: com.mapbox.maps.FeaturesetDescriptor, param1: com.mapbox.maps.FeaturesetFeatureId, param2: com.mapbox.bindgen.Value, param3: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public render(): void;
				public setPrefetchZoomDelta(param0: number): void;
				public reduceMemoryUse(): void;
				public setViewportMode(param0: com.mapbox.maps.ViewportMode): void;
				public getViewAnnotationOptions(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.maps.ViewAnnotationOptions>;
				public stopPerformanceStatisticsCollection(): void;
				public queryFeatureExtensions(param0: string, param1: com.mapbox.geojson.Feature, param2: string, param3: string, param4: java.util.HashMap<string,com.mapbox.bindgen.Value>, param5: com.mapbox.maps.QueryFeatureExtensionCallback): com.mapbox.common.Cancelable;
				public constructor(peer: number);
				public addInteraction(param0: com.mapbox.maps.Interaction): com.mapbox.common.Cancelable;
				public createRenderer(): void;
				public getPrefetchZoomDelta(): number;
				public setSize(param0: com.mapbox.maps.Size): void;
				public setGestureInProgress(param0: boolean): void;
				public static cleanNativePeer(param0: number): void;
				public getSize(): com.mapbox.maps.Size;
			}
			export namespace Map {
				export class MapPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.Map.MapPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapAttributeParser extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapAttributeParser>;
				public static INSTANCE: com.mapbox.maps.MapAttributeParser;
				public parseMapOptions(constrain: globalAndroid.content.res.TypedArray, orient_c21: number): com.mapbox.maps.MapOptions;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapCenterAltitudeMode {
				public static class: java.lang.Class<com.mapbox.maps.MapCenterAltitudeMode>;
				public static TERRAIN: com.mapbox.maps.MapCenterAltitudeMode;
				public static SEA: com.mapbox.maps.MapCenterAltitudeMode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.MapCenterAltitudeMode;
				public static values(): androidNative.Array<com.mapbox.maps.MapCenterAltitudeMode>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapClient extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapClient>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapClient interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					scheduleRepaint(): void;
				});
				public constructor();
				public scheduleRepaint(): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapClientNative extends java.lang.Object implements com.mapbox.maps.MapClient {
				public static class: java.lang.Class<com.mapbox.maps.MapClientNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public scheduleRepaint(): void;
			}
			export namespace MapClientNative {
				export class MapClientPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapClientNative.MapClientPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapConstants extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapConstants>;
				public static MIN_PITCH: number; // 0.0
				public static MAX_PITCH: number; // 85.0
				public static MIN_ZOOM: number; // 0.0
				public static MAX_ZOOM: number; // 25.5
				public static DEFAULT_TRANSITION_DURATION: number; // 300
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapControllable extends java.lang.Object implements com.mapbox.maps.MapboxLifecycleObserver {
				public static class: java.lang.Class<com.mapbox.maps.MapControllable>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapControllable interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					getMapboxMap(): com.mapbox.maps.MapboxMap;
					onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
					onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
					onSizeChanged(param0: number, param1: number): void;
					queueEvent(param0: java.lang.Runnable, param1: boolean): void;
					snapshot(): globalAndroid.graphics.Bitmap;
					snapshot(param0: com.mapbox.maps.MapView.OnSnapshotReady): void;
					setMaximumFps(param0: number): void;
					setOnFpsChangedListener(param0: com.mapbox.maps.renderer.OnFpsChangedListener): void;
					setRenderThreadStatsRecorder(param0: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
					addWidget(param0: com.mapbox.maps.renderer.widget.Widget): void;
					removeWidget(param0: com.mapbox.maps.renderer.widget.Widget): boolean;
					addRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
					removeRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
					onStart(): void;
					onStop(): void;
					onDestroy(): void;
					onLowMemory(): void;
					onResume(): void;
				});
				public constructor();
				public onResume(): void;
				public onLowMemory(): void;
				public setMaximumFps(param0: number): void;
				public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public setOnFpsChangedListener(param0: com.mapbox.maps.renderer.OnFpsChangedListener): void;
				public removeWidget(param0: com.mapbox.maps.renderer.widget.Widget): boolean;
				public getMapboxMap(): com.mapbox.maps.MapboxMap;
				public snapshot(param0: com.mapbox.maps.MapView.OnSnapshotReady): void;
				public addWidget(param0: com.mapbox.maps.renderer.widget.Widget): void;
				public onStart(): void;
				public snapshot(): globalAndroid.graphics.Bitmap;
				public removeRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public queueEvent(param0: java.lang.Runnable, param1: boolean): void;
				public setRenderThreadStatsRecorder(param0: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
				public onStop(): void;
				public onDestroy(): void;
				public addRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public onSizeChanged(param0: number, param1: number): void;
			}
			export namespace MapControllable {
				export class DefaultImpls extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapControllable.DefaultImpls>;
					public static onResume(this_: com.mapbox.maps.MapControllable): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapController extends java.lang.Object implements com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate, com.mapbox.maps.MapControllable {
				public static class: java.lang.Class<com.mapbox.maps.MapController>;
				public static TAG: string; // "MapController"
				public addRendererSetupErrorListener(render_29b: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public getMapboxMap(): com.mapbox.maps.MapboxMap;
				public getNativeMap(): com.mapbox.maps.NativeMapImpl;
				public setOnFpsChangedListener(listener: com.mapbox.maps.renderer.OnFpsChangedListener): void;
				public createPlugin(mapView: com.mapbox.maps.MapView, plugin: com.mapbox.maps.plugin.Plugin): void;
				public initializePlugins(ex: com.mapbox.maps.MapInitOptions, ex_1: com.mapbox.maps.MapView): void;
				public getPlugin(param0: string): com.mapbox.maps.plugin.MapPlugin;
				public queueEvent(event: java.lang.Runnable, needRender: boolean): void;
				public constructor(it: com.mapbox.maps.renderer.MapboxRenderer, this_: com.mapbox.maps.MapInitOptions);
				public setScreenRefreshRate$maps_sdk_release(refres_386: number): void;
				public addWidget(param0: com.mapbox.maps.renderer.widget.Widget): void;
				public setMaximumFps(fps: number): void;
				public addWidget(widget: com.mapbox.maps.renderer.widget.Widget): void;
				public removePlugin(id: string): void;
				public onStop(): void;
				public constructor(renderer: com.mapbox.maps.renderer.MapboxRenderer, native_dfc: com.mapbox.maps.NativeObserver, mapIni_d6b: com.mapbox.maps.MapInitOptions, contex_23f: com.mapbox.maps.ContextMode, nativeMap: com.mapbox.maps.NativeMapImpl, mapboxMap: com.mapbox.maps.MapboxMap, plugin_f71: com.mapbox.maps.plugin.MapPluginRegistry, onStyl_5f5: com.mapbox.maps.StyleDataLoadedCallback);
				public onSizeChanged(w: number, h: number): void;
				public setLifecycleState$maps_sdk_release(lifecy_bde: com.mapbox.maps.MapController.LifecycleState): void;
				public getLifecycleScope$maps_sdk_release(): anyx.coroutines.CoroutineScope;
				public removeRendererSetupErrorListener(render_29b: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public getPlugin(id: string): com.mapbox.maps.plugin.MapPlugin;
				public getRenderer$maps_sdk_release(): com.mapbox.maps.renderer.MapboxRenderer;
				public onResume(): void;
				public setRenderThreadStatsRecorder(render_b2e: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
				public onLowMemory(): void;
				public setMaximumFps(param0: number): void;
				public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public removeWidget(this_: com.mapbox.maps.renderer.widget.Widget): boolean;
				public setOnFpsChangedListener(param0: com.mapbox.maps.renderer.OnFpsChangedListener): void;
				public removeWidget(param0: com.mapbox.maps.renderer.widget.Widget): boolean;
				public onAttachedToWindow$maps_sdk_release(mapView: com.mapbox.maps.MapView): void;
				public snapshot(listener: com.mapbox.maps.MapView.OnSnapshotReady): void;
				public snapshot(param0: com.mapbox.maps.MapView.OnSnapshotReady): void;
				public onGenericMotionEvent(event: globalAndroid.view.MotionEvent): boolean;
				public onStart(): void;
				public snapshot(): globalAndroid.graphics.Bitmap;
				public removeRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public onTouchEvent(event: globalAndroid.view.MotionEvent): boolean;
				public queueEvent(param0: java.lang.Runnable, param1: boolean): void;
				public getLifecycleState$maps_sdk_release(): com.mapbox.maps.MapController.LifecycleState;
				public setRenderThreadStatsRecorder(param0: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
				public onDestroy(): void;
				public addRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public onSizeChanged(param0: number, param1: number): void;
			}
			export namespace MapController {
				export namespace MapController {
					export namespace Companion {
					}
				}
				export class LifecycleState {
					public static class: java.lang.Class<com.mapbox.maps.MapController.LifecycleState>;
					public static STATE_STOPPED: com.mapbox.maps.MapController.LifecycleState;
					public static STATE_STARTED: com.mapbox.maps.MapController.LifecycleState;
					public static STATE_DESTROYED: com.mapbox.maps.MapController.LifecycleState;
					public static valueOf(value: string): com.mapbox.maps.MapController.LifecycleState;
					public static values(): androidNative.Array<com.mapbox.maps.MapController.LifecycleState>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapDebugOptions {
				public static class: java.lang.Class<com.mapbox.maps.MapDebugOptions>;
				public static TILE_BORDERS: com.mapbox.maps.MapDebugOptions;
				public static PARSE_STATUS: com.mapbox.maps.MapDebugOptions;
				public static TIMESTAMPS: com.mapbox.maps.MapDebugOptions;
				public static COLLISION: com.mapbox.maps.MapDebugOptions;
				public static OVERDRAW: com.mapbox.maps.MapDebugOptions;
				public static STENCIL_CLIP: com.mapbox.maps.MapDebugOptions;
				public static DEPTH_BUFFER: com.mapbox.maps.MapDebugOptions;
				public static MODEL_BOUNDS: com.mapbox.maps.MapDebugOptions;
				public static TERRAIN_WIREFRAME: com.mapbox.maps.MapDebugOptions;
				public static LAYERS2_DWIREFRAME: com.mapbox.maps.MapDebugOptions;
				public static LAYERS3_DWIREFRAME: com.mapbox.maps.MapDebugOptions;
				public static LIGHT: com.mapbox.maps.MapDebugOptions;
				public static values(): androidNative.Array<com.mapbox.maps.MapDebugOptions>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.MapDebugOptions;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapGeofencingConsentImpl extends java.lang.Object implements com.mapbox.maps.geofencing.MapGeofencingConsent {
				public static class: java.lang.Class<com.mapbox.maps.MapGeofencingConsentImpl>;
				public setUserConsent(isCons_24e: boolean, callback: com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback): void;
				public shouldShowConsent(): boolean;
				public constructor();
				public getUserConsent(): boolean;
				public setUserConsent(param0: boolean, param1: com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapIdle extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MapIdle>;
				public getTimestamp(): java.util.Date;
				public hashCode(): number;
				public toString(): string;
				public constructor(timestamp: java.util.Date);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapIdleCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapIdleCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapIdleCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.MapIdle): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.MapIdle): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapIdleCallbackNative extends java.lang.Object implements com.mapbox.maps.MapIdleCallback {
				public static class: java.lang.Class<com.mapbox.maps.MapIdleCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.MapIdle): void;
			}
			export namespace MapIdleCallbackNative {
				export class MapIdleCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapIdleCallbackNative.MapIdleCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapInitOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapInitOptions>;
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>, camera_b60: com.mapbox.maps.CameraOptions);
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>, camera_b60: com.mapbox.maps.CameraOptions, textur_eed: boolean, styleUri: string, attrs: globalAndroid.util.AttributeSet, antial_992: number, mapName: string);
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>, camera_b60: com.mapbox.maps.CameraOptions, textur_eed: boolean, styleUri: string, attrs: globalAndroid.util.AttributeSet, antial_992: number);
				public constructor(context: globalAndroid.content.Context);
				public component6(): string;
				public component5(): boolean;
				public component7(): globalAndroid.util.AttributeSet;
				public component2(): com.mapbox.maps.MapOptions;
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>);
				public getTextureView(): boolean;
				public component4(): com.mapbox.maps.CameraOptions;
				public equals(other: any): boolean;
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>, camera_b60: com.mapbox.maps.CameraOptions, textur_eed: boolean, styleUri: string, attrs: globalAndroid.util.AttributeSet);
				public setAntialiasingSampleCount(antial_992: number): void;
				public hashCode(): number;
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>, camera_b60: com.mapbox.maps.CameraOptions, textur_eed: boolean, styleUri: string);
				public component9(): string;
				public copy(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>, camera_b60: com.mapbox.maps.CameraOptions, textur_eed: boolean, styleUri: string, attrs: globalAndroid.util.AttributeSet, antial_992: number, mapName: string): com.mapbox.maps.MapInitOptions;
				public setMapOptions(mapOptions: com.mapbox.maps.MapOptions): void;
				public getAttrs(): globalAndroid.util.AttributeSet;
				public getMapName(): string;
				public getMapOptions(): com.mapbox.maps.MapOptions;
				public getStyleUri(): string;
				public component1(): globalAndroid.content.Context;
				public getContext(): globalAndroid.content.Context;
				public getPlugins(): java.util.List<com.mapbox.maps.plugin.Plugin>;
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions);
				public constructor(context: globalAndroid.content.Context, mapOptions: com.mapbox.maps.MapOptions, plugins: java.util.List<any>, camera_b60: com.mapbox.maps.CameraOptions, textur_eed: boolean);
				public setTextureView(textur_eed: boolean): void;
				public setPlugins(plugins: java.util.List<any>): void;
				public component3(): java.util.List<com.mapbox.maps.plugin.Plugin>;
				public setMapName(mapName: string): void;
				public toString(): string;
				public setCameraOptions(camera_b60: com.mapbox.maps.CameraOptions): void;
				public getCameraOptions(): com.mapbox.maps.CameraOptions;
				public getAntialiasingSampleCount(): number;
				public setAttrs(attrs: globalAndroid.util.AttributeSet): void;
				public component8(): number;
			}
			export namespace MapInitOptions {
				export namespace MapInitOptions {
					export namespace Companion {
						function getDefaultMapOptions(context: globalAndroid.content.Context): com.mapbox.maps.MapOptions;
						function getDefaultPluginList(): java.util.List<com.mapbox.maps.plugin.Plugin>;
						function getDefaultMapOptions(context: globalAndroid.content.Context): com.mapbox.maps.MapOptions;
						function getDefaultPluginList(): java.util.List<com.mapbox.maps.plugin.Plugin>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export abstract class MapInteraction extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapInteraction>;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoaded extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MapLoaded>;
				public constructor(timeIn_3e5: com.mapbox.maps.EventTimeInterval);
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
				public getTimeInterval(): com.mapbox.maps.EventTimeInterval;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoadedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapLoadedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapLoadedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.MapLoaded): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.MapLoaded): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoadedCallbackNative extends java.lang.Object implements com.mapbox.maps.MapLoadedCallback {
				public static class: java.lang.Class<com.mapbox.maps.MapLoadedCallbackNative>;
				public run(param0: com.mapbox.maps.MapLoaded): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace MapLoadedCallbackNative {
				export class MapLoadedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapLoadedCallbackNative.MapLoadedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoadingError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MapLoadingError>;
				public getTimestamp(): java.util.Date;
				public hashCode(): number;
				public getSourceId(): string;
				public getTileId(): com.mapbox.maps.CanonicalTileID;
				public getMessage(): string;
				public toString(): string;
				public constructor(type: com.mapbox.maps.MapLoadingErrorType, message: string, sourceId: string, tileId: com.mapbox.maps.CanonicalTileID, timestamp: java.util.Date);
				public equals(object: any): boolean;
				public getType(): com.mapbox.maps.MapLoadingErrorType;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoadingErrorCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapLoadingErrorCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapLoadingErrorCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.MapLoadingError): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.MapLoadingError): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoadingErrorCallbackNative extends java.lang.Object implements com.mapbox.maps.MapLoadingErrorCallback {
				public static class: java.lang.Class<com.mapbox.maps.MapLoadingErrorCallbackNative>;
				public run(param0: com.mapbox.maps.MapLoadingError): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace MapLoadingErrorCallbackNative {
				export class MapLoadingErrorCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapLoadingErrorCallbackNative.MapLoadingErrorCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoadingErrorDelegate extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapLoadingErrorDelegate>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapLoadingErrorDelegate interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					sendMapLoadingError(param0: com.mapbox.maps.MapLoadingError): void;
				});
				public constructor();
				public sendMapLoadingError(param0: com.mapbox.maps.MapLoadingError): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapLoadingErrorType {
				public static class: java.lang.Class<com.mapbox.maps.MapLoadingErrorType>;
				public static STYLE: com.mapbox.maps.MapLoadingErrorType;
				public static SPRITE: com.mapbox.maps.MapLoadingErrorType;
				public static SOURCE: com.mapbox.maps.MapLoadingErrorType;
				public static GLYPHS: com.mapbox.maps.MapLoadingErrorType;
				public static TILE: com.mapbox.maps.MapLoadingErrorType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.MapLoadingErrorType;
				public static values(): androidNative.Array<com.mapbox.maps.MapLoadingErrorType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MapOptions>;
				public getConstrainMode(): com.mapbox.maps.ConstrainMode;
				public getPixelRatio(): number;
				public getContextMode(): com.mapbox.maps.ContextMode;
				public hashCode(): number;
				public getOrientation(): com.mapbox.maps.NorthOrientation;
				public getCrossSourceCollisions(): java.lang.Boolean;
				public getViewportMode(): com.mapbox.maps.ViewportMode;
				public getGlyphsRasterizationOptions(): com.mapbox.maps.GlyphsRasterizationOptions;
				public toBuilder(): com.mapbox.maps.MapOptions.Builder;
				public getSize(): com.mapbox.maps.Size;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace MapOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapOptions.Builder>;
					public contextMode(contex_23f: com.mapbox.maps.ContextMode): com.mapbox.maps.MapOptions.Builder;
					public pixelRatio(pixelRatio: number): com.mapbox.maps.MapOptions.Builder;
					public constrainMode(constr_8f1: com.mapbox.maps.ConstrainMode): com.mapbox.maps.MapOptions.Builder;
					public constructor();
					public orientation(orient_c21: com.mapbox.maps.NorthOrientation): com.mapbox.maps.MapOptions.Builder;
					public build(): com.mapbox.maps.MapOptions;
					public viewportMode(viewpo_bec: com.mapbox.maps.ViewportMode): com.mapbox.maps.MapOptions.Builder;
					public crossSourceCollisions(crossS_697: java.lang.Boolean): com.mapbox.maps.MapOptions.Builder;
					public size(size: com.mapbox.maps.Size): com.mapbox.maps.MapOptions.Builder;
					public glyphsRasterizationOptions(glyphs_929: com.mapbox.maps.GlyphsRasterizationOptions): com.mapbox.maps.MapOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapPlayerOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MapPlayerOptions>;
				public getPlaybackSpeedMultiplier(): number;
				public hashCode(): number;
				public getAvoidPlaybackPauses(): boolean;
				public toString(): string;
				public getPlaybackCount(): number;
				public equals(object: any): boolean;
				public toBuilder(): com.mapbox.maps.MapPlayerOptions.Builder;
			}
			export namespace MapPlayerOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapPlayerOptions.Builder>;
					public constructor();
					public playbackCount(playba_3f3: number): com.mapbox.maps.MapPlayerOptions.Builder;
					public build(): com.mapbox.maps.MapPlayerOptions;
					public avoidPlaybackPauses(avoidP_8b0: boolean): com.mapbox.maps.MapPlayerOptions.Builder;
					public playbackSpeedMultiplier(playba_6fc: number): com.mapbox.maps.MapPlayerOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapProvider extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapProvider>;
				public static INSTANCE: com.mapbox.maps.MapProvider;
				public flushPendingEvents(): void;
				public getMapTelemetryInstance(context: globalAndroid.content.Context): com.mapbox.maps.module.MapTelemetry;
				public getMapPluginRegistry(mapboxMap: com.mapbox.maps.MapboxMap, mapCon_875: com.mapbox.maps.MapController, telemetry: com.mapbox.maps.module.MapTelemetry, mapGeo_7ca: com.mapbox.maps.geofencing.MapGeofencingConsent): com.mapbox.maps.plugin.MapPluginRegistry;
				public getNativeMapWrapper(mapIni_d6b: com.mapbox.maps.MapInitOptions, mapClient: com.mapbox.maps.MapClient): com.mapbox.maps.NativeMapImpl;
				public getNativeMapCore(mapView: com.mapbox.maps.MapView): com.mapbox.maps.Map;
				public getMapboxMap(nativeMap: com.mapbox.maps.NativeMapImpl, native_dfc: com.mapbox.maps.NativeObserver, pixelRatio: number): com.mapbox.maps.MapboxMap;
				public getMapGeofencingConsent(): com.mapbox.maps.geofencing.MapGeofencingConsent;
			}
			export namespace MapProvider {
				export class WhenMappings extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapProvider.WhenMappings>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapRecorder extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapRecorder>;
				public peer: number;
				public togglePauseReplay(): void;
				public getPlaybackState(): string;
				public replay(param0: com.mapbox.bindgen.DataRef, param1: com.mapbox.maps.MapPlayerOptions, param2: com.mapbox.maps.PlaybackFinished): void;
				public static createInstance(param0: com.mapbox.maps.Map): com.mapbox.bindgen.Expected<string,com.mapbox.maps.MapRecorder>;
				public startRecording(param0: com.mapbox.maps.MapRecorderOptions): void;
				public static cleanNativePeer(param0: number): void;
				public stopRecording(): com.mapbox.bindgen.DataRef;
				public constructor(peer: number);
			}
			export namespace MapRecorder {
				export class MapRecorderPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapRecorder.MapRecorderPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapRecorderOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MapRecorderOptions>;
				public getTimeWindow(): java.lang.Long;
				public getCompressed(): boolean;
				public toBuilder(): com.mapbox.maps.MapRecorderOptions.Builder;
				public hashCode(): number;
				public getLoggingEnabled(): boolean;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace MapRecorderOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapRecorderOptions.Builder>;
					public constructor();
					public compressed(compressed: boolean): com.mapbox.maps.MapRecorderOptions.Builder;
					public timeWindow(timeWindow: java.lang.Long): com.mapbox.maps.MapRecorderOptions.Builder;
					public build(): com.mapbox.maps.MapRecorderOptions;
					public loggingEnabled(loggin_37b: boolean): com.mapbox.maps.MapRecorderOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapSnapshot extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapSnapshot>;
				public peer: number;
				public moveImage(): com.mapbox.maps.Image;
				public screenCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
				public attributions(): java.util.List<string>;
				public static cleanNativePeer(param0: number): void;
				public coordinate(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
				public constructor(peer: number);
			}
			export namespace MapSnapshot {
				export class MapSnapshotPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapSnapshot.MapSnapshotPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapSnapshotOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MapSnapshotOptions>;
				public getPixelRatio(): number;
				public toBuilder(): com.mapbox.maps.MapSnapshotOptions.Builder;
				public hashCode(): number;
				public getGlyphsRasterizationOptions(): com.mapbox.maps.GlyphsRasterizationOptions;
				public getSize(): com.mapbox.maps.Size;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace MapSnapshotOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapSnapshotOptions.Builder>;
					public pixelRatio(pixelRatio: number): com.mapbox.maps.MapSnapshotOptions.Builder;
					public glyphsRasterizationOptions(glyphs_929: com.mapbox.maps.GlyphsRasterizationOptions): com.mapbox.maps.MapSnapshotOptions.Builder;
					public build(): com.mapbox.maps.MapSnapshotOptions;
					public constructor();
					public size(size: com.mapbox.maps.Size): com.mapbox.maps.MapSnapshotOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapSnapshotter extends com.mapbox.maps.CameraManager {
				public static class: java.lang.Class<com.mapbox.maps.MapSnapshotter>;
				public getElevation(param0: com.mapbox.geojson.Point): java.lang.Double;
				public reduceMemoryUse(): void;
				public setSize(param0: com.mapbox.maps.Size): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(options: com.mapbox.maps.MapSnapshotOptions);
				public cancel(): void;
				public start(param0: com.mapbox.maps.SnapshotCompleteCallback): void;
				public getSize(): com.mapbox.maps.Size;
				public constructor(peer: number);
			}
			export namespace MapSnapshotter {
				export class MapSnapshotterPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapSnapshotter.MapSnapshotterPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapSurface extends java.lang.Object implements com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate, com.mapbox.maps.MapControllable {
				public static class: java.lang.Class<com.mapbox.maps.MapSurface>;
				public addRendererSetupErrorListener(render_29b: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public constructor(this_i_12e: globalAndroid.content.Context, this_: globalAndroid.view.Surface, context: com.mapbox.maps.MapInitOptions);
				public surfaceCreated(): void;
				public getMapboxMap(): com.mapbox.maps.MapboxMap;
				public setOnFpsChangedListener(listener: com.mapbox.maps.renderer.OnFpsChangedListener): void;
				public getPlugin(param0: string): com.mapbox.maps.plugin.MapPlugin;
				public queueEvent(event: java.lang.Runnable, needRender: boolean): void;
				public addWidget(param0: com.mapbox.maps.renderer.widget.Widget): void;
				public surfaceChanged(width: number, height: number): void;
				public setMaximumFps(fps: number): void;
				public addWidget(widget: com.mapbox.maps.renderer.widget.Widget): void;
				public onStop(): void;
				public onSizeChanged(w: number, h: number): void;
				public removeRendererSetupErrorListener(render_29b: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public getPlugin(id: string): com.mapbox.maps.plugin.MapPlugin;
				public setRenderThreadStatsRecorder(render_b2e: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
				public onResume(): void;
				public onLowMemory(): void;
				public setMaximumFps(param0: number): void;
				public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public setOnFpsChangedListener(param0: com.mapbox.maps.renderer.OnFpsChangedListener): void;
				public removeWidget(param0: com.mapbox.maps.renderer.widget.Widget): boolean;
				public constructor(context: globalAndroid.content.Context, surface: globalAndroid.view.Surface);
				public snapshot(listener: com.mapbox.maps.MapView.OnSnapshotReady): void;
				public constructor(context: globalAndroid.content.Context, surface: globalAndroid.view.Surface, mapIni_d6b: com.mapbox.maps.MapInitOptions, renderer: com.mapbox.maps.renderer.MapboxSurfaceRenderer, mapCon_875: com.mapbox.maps.MapController);
				public snapshot(param0: com.mapbox.maps.MapView.OnSnapshotReady): void;
				public getSurface(): globalAndroid.view.Surface;
				public surfaceDestroyed(): void;
				public onGenericMotionEvent(event: globalAndroid.view.MotionEvent): boolean;
				public onStart(): void;
				public snapshot(): globalAndroid.graphics.Bitmap;
				public removeRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public onTouchEvent(event: globalAndroid.view.MotionEvent): boolean;
				public queueEvent(param0: java.lang.Runnable, param1: boolean): void;
				public setRenderThreadStatsRecorder(param0: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
				public onDestroy(): void;
				public removeWidget(widget: com.mapbox.maps.renderer.widget.Widget): boolean;
				public addRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public onSizeChanged(param0: number, param1: number): void;
			}
			export namespace MapSurface {
				export namespace MapSurface {
					export namespace Companion {
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapView extends globalAndroid.widget.FrameLayout implements com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate, com.mapbox.maps.MapControllable {
				public static class: java.lang.Class<com.mapbox.maps.MapView>;
				public createPlugin(plugin: com.mapbox.maps.plugin.Plugin): void;
				public addRendererSetupErrorListener(render_29b: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public childDrawableStateChanged(param0: globalAndroid.view.View): void;
				public focusSearch(direction: number): globalAndroid.view.View;
				public setDebugOptions(value: java.util.Set<com.mapbox.maps.debugoptions.MapViewDebugOptions>): void;
				public clearChildFocus(param0: globalAndroid.view.View): void;
				public onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public updateViewLayout(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
				public isLayoutRequested(): boolean;
				public sendAccessibilityEvent(param0: number): void;
				public addWidget(param0: com.mapbox.maps.renderer.widget.Widget): void;
				public onStartNestedScroll(param0: globalAndroid.view.View, param1: globalAndroid.view.View, param2: number): boolean;
				public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
				public getViewAnnotationManager(): com.mapbox.maps.viewannotation.ViewAnnotationManager;
				public setMaximumFps(fps: number): void;
				public getTextDirection(): number;
				public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
				public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet, defSty_ebe: number);
				public onSizeChanged(w: number, h: number): void;
				public getPlugin(id: string): com.mapbox.maps.plugin.MapPlugin;
				public getChildVisibleRect(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: globalAndroid.graphics.Point): boolean;
				public getDebugOptions(): java.util.Set<com.mapbox.maps.debugoptions.MapViewDebugOptions>;
				public setMaximumFps(param0: number): void;
				public getParentForAccessibility(): globalAndroid.view.ViewParent;
				public removeWidget(param0: com.mapbox.maps.renderer.widget.Widget): boolean;
				public onNestedPrePerformAccessibilityAction(param0: globalAndroid.view.View, param1: number, param2: globalAndroid.os.Bundle): boolean;
				public requestChildRectangleOnScreen(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: boolean): boolean;
				public isTextDirectionResolved(): boolean;
				public onStart(): void;
				public snapshot(): globalAndroid.graphics.Bitmap;
				public showContextMenuForChild(param0: globalAndroid.view.View, param1: number, param2: number): boolean;
				public scheduleThreadServiceTypeReset(): void;
				public isLayoutDirectionResolved(): boolean;
				public notifySubtreeAccessibilityStateChanged(param0: globalAndroid.view.View, param1: globalAndroid.view.View, param2: number): void;
				public static isRenderingSupported(): boolean;
				public childHasTransientStateChanged(param0: globalAndroid.view.View, param1: boolean): void;
				public unscheduleDrawable(who: globalAndroid.graphics.drawable.Drawable): void;
				public showContextMenuForChild(param0: globalAndroid.view.View): boolean;
				public startActionModeForChild(origin_77b: globalAndroid.view.View, callback: globalAndroid.view.ActionMode.Callback, type: number): globalAndroid.view.ActionMode;
				public bringChildToFront(param0: globalAndroid.view.View): void;
				public setSnapshotLegacyMode(enabled: boolean): void;
				public removeRendererSetupErrorListener(render_29b: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public findOnBackInvokedDispatcherForChild(child: globalAndroid.view.View, requester: globalAndroid.view.View): globalAndroid.window.OnBackInvokedDispatcher;
				public setRenderThreadStatsRecorder(render_b2e: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
				public onNestedScroll(param0: globalAndroid.view.View, param1: number, param2: number, param3: number, param4: number): void;
				public addView(child: globalAndroid.view.View, index: number, params: globalAndroid.view.ViewGroup.LayoutParams): void;
				public showContextMenuForChild(origin_77b: globalAndroid.view.View, x: number, y: number): boolean;
				public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback, param2: number): globalAndroid.view.ActionMode;
				public removeRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public queueEvent(param0: java.lang.Runnable, param1: boolean): void;
				public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
				public onStopNestedScroll(param0: globalAndroid.view.View): void;
				public onAttachedToWindow(): void;
				public getParent(): globalAndroid.view.ViewParent;
				/** @deprecated */
				public invalidateChildInParent(param0: androidNative.Array<number>, param1: globalAndroid.graphics.Rect): globalAndroid.view.ViewParent;
				public onSizeChanged(param0: number, param1: number): void;
				public requestDisallowInterceptTouchEvent(param0: boolean): void;
				/** @deprecated */
				public invalidateChild(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect): void;
				public constructor(context: globalAndroid.content.Context);
				public requestChildFocus(param0: globalAndroid.view.View, param1: globalAndroid.view.View): void;
				public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
				public addView(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
				public createContextMenu(param0: globalAndroid.view.ContextMenu): void;
				public constructor(context: globalAndroid.content.Context, mapIni_d6b: com.mapbox.maps.MapInitOptions);
				public queueEvent(event: java.lang.Runnable, needRender: boolean): void;
				public addView(child: globalAndroid.view.View, index: number): void;
				public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet);
				public focusSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
				public requestFitSystemWindows(): void;
				public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
				public requestTransparentRegion(param0: globalAndroid.view.View): void;
				public onInterceptTouchEvent(it: globalAndroid.view.MotionEvent): boolean;
				public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback): globalAndroid.view.ActionMode;
				public onNestedFling(param0: globalAndroid.view.View, param1: number, param2: number, param3: boolean): boolean;
				public onResume(): void;
				public getTextAlignment(): number;
				public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
				public setOnFpsChangedListener(param0: com.mapbox.maps.renderer.OnFpsChangedListener): void;
				public snapshot(listener: com.mapbox.maps.MapView.OnSnapshotReady): void;
				public addView(child: globalAndroid.view.View, width: number, height: number): void;
				public setRenderThreadStatsRecorder(param0: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
				public onNestedPreFling(param0: globalAndroid.view.View, param1: number, param2: number): boolean;
				public addRendererSetupErrorListener(param0: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
				public addView(child: globalAndroid.view.View): void;
				public recomputeViewAttributes(param0: globalAndroid.view.View): void;
				public isTextAlignmentResolved(): boolean;
				public onNestedScrollAccepted(param0: globalAndroid.view.View, param1: globalAndroid.view.View, param2: number): void;
				public static isTerrainRenderingSupported(): boolean;
				public getLayoutDirection(): number;
				public removeView(param0: globalAndroid.view.View): void;
				public canResolveTextDirection(): boolean;
				public canResolveTextAlignment(): boolean;
				public onNestedPreScroll(param0: globalAndroid.view.View, param1: number, param2: number, param3: androidNative.Array<number>): void;
				public getMapboxMap(): com.mapbox.maps.MapboxMap;
				public setOnFpsChangedListener(listener: com.mapbox.maps.renderer.OnFpsChangedListener): void;
				public getPlugin(param0: string): com.mapbox.maps.plugin.MapPlugin;
				public addWidget(widget: com.mapbox.maps.renderer.widget.Widget): void;
				public requestLayout(): void;
				public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
				public removePlugin(id: string): void;
				public onStop(): void;
				public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet, defSty_ebe: number, defSty_f75: number);
				public onDescendantInvalidated(child: globalAndroid.view.View, target: globalAndroid.view.View): void;
				public keyboardNavigationClusterSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
				public onLowMemory(): void;
				public requestSendAccessibilityEvent(param0: globalAndroid.view.View, param1: globalAndroid.view.accessibility.AccessibilityEvent): boolean;
				public focusableViewAvailable(param0: globalAndroid.view.View): void;
				public canResolveLayoutDirection(): boolean;
				public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
				public snapshot(param0: com.mapbox.maps.MapView.OnSnapshotReady): void;
				public onGenericMotionEvent(event: globalAndroid.view.MotionEvent): boolean;
				public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
				public onTouchEvent(it: globalAndroid.view.MotionEvent): boolean;
				public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
				public onDestroy(): void;
				public removeWidget(widget: com.mapbox.maps.renderer.widget.Widget): boolean;
			}
			export namespace MapView {
				export namespace MapView {
					export namespace Companion {
						function isRenderingSupported(): boolean;
						function isTerrainRenderingSupported(): boolean;
						function isRenderingSupported(): boolean;
						function isTerrainRenderingSupported(): boolean;
					}
				}
				export class OnSnapshotReady extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapView.OnSnapshotReady>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.MapView$OnSnapshotReady interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onSnapshotReady(param0: globalAndroid.graphics.Bitmap): void;
					});
					public constructor();
					public onSnapshotReady(param0: globalAndroid.graphics.Bitmap): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxAnnotationException extends java.lang.RuntimeException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxAnnotationException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor();
				public constructor(except_ec5: string);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxCameraAnimationException extends java.lang.RuntimeException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxCameraAnimationException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor();
				public constructor(except_ec5: string);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxConcurrentGeometryModificationException extends java.util.ConcurrentModificationException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxConcurrentGeometryModificationException>;
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor(message: string);
				public constructor(except_ec5: string, sourceId: string);
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxConfigurationException extends java.lang.RuntimeException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxConfigurationException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor(message: string);
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxConstants extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapboxConstants>;
				public static CORE_SHARED_LIBRARY_NAME: string; // "mapbox-common"
				public static MAP_SHARED_LIBRARY_NAME: string; // "mapbox-maps"
				public static MINIMUM_ZOOM: number; // 0.0
				public static MAXIMUM_ZOOM: number; // 25.5
				public static MAXIMUM_BEARING: number; // 360.0
				public static MINIMUM_BEARING: number; // 0.0
				public static getMAPBOX_LOCALE(): java.util.Locale;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxDelicateApi extends java.lang.Object implements java.lang.annotation.Annotation {
				public static class: java.lang.Class<com.mapbox.maps.MapboxDelicateApi>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapboxDelicateApi interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					annotationType(): java.lang.Class<any>;
					equals(param0: any): boolean;
					hashCode(): number;
					toString(): string;
				});
				public constructor();
				public hashCode(): number;
				public equals(param0: any): boolean;
				public annotationType(): java.lang.Class<any>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxExperimental extends java.lang.Object implements java.lang.annotation.Annotation {
				public static class: java.lang.Class<com.mapbox.maps.MapboxExperimental>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapboxExperimental interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					annotationType(): java.lang.Class<any>;
					equals(param0: any): boolean;
					hashCode(): number;
					toString(): string;
				});
				public constructor();
				public hashCode(): number;
				public equals(param0: any): boolean;
				public annotationType(): java.lang.Class<any>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxLifecycleObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapboxLifecycleObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.MapboxLifecycleObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onStart(): void;
					onStop(): void;
					onDestroy(): void;
					onLowMemory(): void;
					onResume(): void;
				});
				public constructor();
				public onResume(): void;
				public onStart(): void;
				public onLowMemory(): void;
				public onStop(): void;
				public onDestroy(): void;
			}
			export namespace MapboxLifecycleObserver {
				export class DefaultImpls extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.MapboxLifecycleObserver.DefaultImpls>;
					public static onResume(this_: com.mapbox.maps.MapboxLifecycleObserver): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxLocationComponentException extends java.lang.RuntimeException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxLocationComponentException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor();
				public constructor(except_ec5: string);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxLogger extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapboxLogger>;
				public static logE(tag: string, message: string): void;
				public static logI(tag: string, message: string): void;
				public static logD(tag: string, message: string): void;
				public static logW(tag: string, message: string): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxMap extends com.mapbox.maps.MapboxStyleManager implements com.mapbox.maps.plugin.delegates.MapTransformDelegate, com.mapbox.maps.plugin.delegates.MapProjectionDelegate, com.mapbox.maps.plugin.delegates.MapFeatureQueryDelegate, com.mapbox.maps.plugin.delegates.MapListenerDelegate, com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, com.mapbox.maps.plugin.delegates.MapInteractionDelegate, com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate {
				public static class: java.lang.Class<com.mapbox.maps.MapboxMap>;
				/** @deprecated */
				public removeOnSourceDataLoadedListener(onSour_528: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
				public setNorthOrientation(param0: com.mapbox.maps.NorthOrientation): void;
				public getFeatureState(sourceId: string, source_f98: string, featureId: string, callback: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnSourceAddedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
				public getScreenCullingShape(): java.util.List<com.mapbox.maps.Vec2>;
				public loadStyle(styleE_a3f: com.mapbox.maps.extension.style.StyleContract.StyleExtension): void;
				public subscribeSourceRemoved(param0: com.mapbox.maps.SourceRemovedCallback): com.mapbox.common.Cancelable;
				public removeFeatureState(featur_9df: com.mapbox.maps.interactions.FeaturesetFeature<any>): com.mapbox.common.Cancelable;
				public tileCover(tileCo_1fa: com.mapbox.maps.TileCoverOptions, camera_b60: com.mapbox.maps.CameraOptions): java.util.List<com.mapbox.maps.CanonicalTileID>;
				/** @deprecated */
				public loadStyleJson(styleJson: string, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded, onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				/** @deprecated */
				public cameraForCoordinates(coordi_628: java.util.List<com.mapbox.geojson.Point>, camera: com.mapbox.maps.CameraOptions, box: com.mapbox.maps.ScreenBox): com.mapbox.maps.CameraOptions;
				public setRenderWorldCopies(render_a02: boolean): void;
				public setPrefetchZoomDelta(delta: number): void;
				public cameraForCoordinates(this_c_26d: java.util.List<com.mapbox.geojson.Point>, i_f_ca_e37: com.mapbox.maps.CameraOptions, this_: com.mapbox.maps.EdgeInsets, coordi_628: java.lang.Double, camera: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public pixelsForCoordinates(it: java.util.List<com.mapbox.geojson.Point>): java.util.List<com.mapbox.maps.ScreenCoordinate>;
				public coordinateForProjectedMeters(projec_c9d: com.mapbox.maps.ProjectedMeters): com.mapbox.geojson.Point;
				/** @deprecated */
				public addOnSourceDataLoadedListener(onSour_528: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
				public setCamera(param0: com.mapbox.maps.CameraOptions): void;
				public setFeatureState(featur_9df: com.mapbox.maps.interactions.FeaturesetFeature<any>, state: com.mapbox.maps.interactions.FeatureState): com.mapbox.common.Cancelable;
				/** @deprecated */
				public cameraForGeometry(geometry: com.mapbox.geojson.Geometry, geomet_7da: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double): com.mapbox.maps.CameraOptions;
				public resetFeatureStates(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>): com.mapbox.common.Cancelable;
				public resetFeatureStates(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public subscribeStyleImageMissing(styleI_23a: com.mapbox.maps.StyleImageMissingCallback): com.mapbox.common.Cancelable;
				public subscribeMapLoadingError(mapLoa_a44: com.mapbox.maps.MapLoadingErrorCallback): com.mapbox.common.Cancelable;
				public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.EdgeInsets, param3: java.lang.Double, param4: com.mapbox.maps.ScreenCoordinate, param5: any): void;
				public dispatch(platfo_8ce: com.mapbox.maps.PlatformEventInfo): void;
				public getMetersPerPixelAtLatitude(param0: number): number;
				public removeFeatureState(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, id: com.mapbox.maps.FeaturesetFeatureId, stateKey: com.mapbox.maps.interactions.FeatureStateKey<any>, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public getBounds(): com.mapbox.maps.CameraBounds;
				/** @deprecated */
				public addOnStyleImageMissingListener(onStyl_3f2: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
				public subscribeGenericEvent(param0: string, param1: com.mapbox.maps.GenericEventCallback): com.mapbox.common.Cancelable;
				public setCamera(camera_b60: com.mapbox.maps.CameraOptions): void;
				/** @deprecated */
				public removeOnStyleImageMissingListener(onStyl_3f2: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
				/** @deprecated */
				public addOnCameraChangeListener(onCame_1a3: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
				public coordinateBoundsZoomForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				/** @deprecated */
				public addOnStyleDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
				public setFeatureState(sourceId: string, featureId: string, state: com.mapbox.bindgen.Value, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public coordinateBoundsForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				/** @deprecated */
				public cameraForCoordinates(coordi_628: java.util.List<com.mapbox.geojson.Point>, coordi_71d: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double): com.mapbox.maps.CameraOptions;
				public resetFeatureStates(sourceId: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public subscribeStyleImageRemoveUnused(param0: com.mapbox.maps.StyleImageRemoveUnusedCallback): com.mapbox.common.Cancelable;
				public getFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnSourceRemovedListener(onSour_f93: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
				/** @deprecated */
				public removeOnCameraChangeListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
				public pixelsForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>): java.util.List<com.mapbox.maps.ScreenCoordinate>;
				/** @deprecated */
				public removeOnMapLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
				public queryRenderedFeatures(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, geometry: com.mapbox.maps.RenderedQueryGeometry, callback: com.mapbox.maps.interactions.QueryRenderedFeaturesetFeaturesCallback<any>): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnMapLoadedListener(onMapL_8a7: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
				/** @deprecated */
				public addOnStyleImageUnusedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
				public coordinateBoundsZoomForCamera(camera: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				public subscribeResourceRequest(resour_7d5: com.mapbox.maps.ResourceRequestCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnStyleImageMissingListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
				public subscribeMapLoaded(param0: com.mapbox.maps.MapLoadedCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnSourceRemovedListener(onSour_f93: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
				public addInteraction(this_: com.mapbox.maps.MapInteraction): com.mapbox.common.Cancelable;
				public loadStyle(style: string): void;
				public cameraAnimationsPlugin(it: any): any;
				public unproject(param0: com.mapbox.maps.MercatorCoordinate, param1: number): com.mapbox.geojson.Point;
				public getGeoJsonClusterExpansionZoom(source_42b: string, cluster: com.mapbox.geojson.Feature, callback: com.mapbox.maps.QueryFeatureExtensionCallback): com.mapbox.common.Cancelable;
				public subscribeStyleLoaded(styleL_410: com.mapbox.maps.StyleLoadedCallback): com.mapbox.common.Cancelable;
				public subscribeRenderFrameFinished(param0: com.mapbox.maps.RenderFrameFinishedCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnStyleImageUnusedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
				public coordinateInfoForPixel(pixel: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CoordinateInfo;
				/** @deprecated */
				public setDebug(debugO_4c6: java.util.List<any>, enabled: boolean): void;
				public setFeatureState(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, id: com.mapbox.maps.FeaturesetFeatureId, state: com.mapbox.maps.interactions.FeatureState): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnSourceRemovedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
				public subscribeStyleDataLoaded(param0: com.mapbox.maps.StyleDataLoadedCallback): com.mapbox.common.Cancelable;
				public getNativeMap(): com.mapbox.maps.Map;
				public gesturesPlugin(it: any): any;
				/** @deprecated */
				public cameraForCoordinateBounds(param0: com.mapbox.maps.CoordinateBounds, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double, param4: java.lang.Double, param5: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public subscribeMapIdle(mapIdl_700: com.mapbox.maps.MapIdleCallback): com.mapbox.common.Cancelable;
				public setTileCacheBudget(tileCa_eb4: com.mapbox.maps.TileCacheBudget): void;
				public removeFeatureState(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, id: com.mapbox.maps.FeaturesetFeatureId): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnRenderFrameStartedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
				public cameraForDrag(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public coordinateBoundsForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				public getStyle(p0: com.mapbox.maps.Style.OnStyleLoaded): void;
				/** @deprecated */
				public loadStyleJson(styleJson: string, styleT_dbd: com.mapbox.maps.TransitionOptions, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded, onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				public isGestureInProgress(): boolean;
				public setBounds(options: com.mapbox.maps.CameraBoundsOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				/** @deprecated */
				public removeOnMapLoadedListener(onMapL_8a7: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
				/** @deprecated */
				public removeOnStyleDataLoadedListener(onStyl_a28: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
				public coordinatesInfoForPixels(pixels: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.maps.CoordinateInfo>;
				public querySourceFeatures(param0: string, param1: com.mapbox.maps.SourceQueryOptions, param2: com.mapbox.maps.QuerySourceFeaturesCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnRenderFrameStartedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
				/** @deprecated */
				public loadStyle(styleE_a3f: com.mapbox.maps.extension.style.StyleContract.StyleExtension, styleT_dbd: com.mapbox.maps.TransitionOptions, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded, onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				public projectedMetersForCoordinate(point: com.mapbox.geojson.Point): com.mapbox.maps.ProjectedMeters;
				public cameraForDrag(fromPoint: com.mapbox.maps.ScreenCoordinate, toPoint: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public dispatch(param0: com.mapbox.maps.PlatformEventInfo): void;
				public coordinatesInfoForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.maps.CoordinateInfo>;
				/** @deprecated */
				public removeOnMapLoadErrorListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				public getAttributions(): java.util.List<string>;
				public resetFeatureStates(param0: string, param1: string, param2: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public getElevation(coordinate: com.mapbox.geojson.Point): java.lang.Double;
				public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.EdgeInsets, param3: java.lang.Double, param4: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public setViewportMode(viewpo_bec: com.mapbox.maps.ViewportMode): void;
				public subscribeStyleDataLoaded(styleD_8d0: com.mapbox.maps.StyleDataLoadedCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnMapIdleListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
				public subscribeStyleLoaded(param0: com.mapbox.maps.StyleLoadedCallback): com.mapbox.common.Cancelable;
				public addInteraction(param0: com.mapbox.maps.MapInteraction): com.mapbox.common.Cancelable;
				public pixelForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
				/** @deprecated */
				public addOnMapLoadErrorListener(onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				/** @deprecated */
				public addOnStyleImageUnusedListener(onStyl_65c: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
				public queryRenderedFeatures(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, callback: com.mapbox.maps.interactions.QueryRenderedFeaturesetFeaturesCallback<any>): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnSourceAddedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
				public removeFeatureState(sourceId: string, source_f98: string, featureId: string, stateKey: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public subscribeSourceAdded(param0: com.mapbox.maps.SourceAddedCallback): com.mapbox.common.Cancelable;
				public setCamera(param0: com.mapbox.maps.FreeCameraOptions): void;
				public getMetersPerPixelAtLatitude(latitude: number, zoom: number): number;
				public setConstrainMode(constr_8f1: com.mapbox.maps.ConstrainMode): void;
				public setViewportMode(param0: com.mapbox.maps.ViewportMode): void;
				public subscribeStyleImageMissing(param0: com.mapbox.maps.StyleImageMissingCallback): com.mapbox.common.Cancelable;
				public coordinateBoundsZoomForCameraUnwrapped(camera: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				/** @deprecated */
				public loadStyleJson(styleJson: string): void;
				public removeFeatureState(featur_9df: com.mapbox.maps.interactions.FeaturesetFeature<any>, stateKey: com.mapbox.maps.interactions.FeatureStateKey<any>): com.mapbox.common.Cancelable;
				/** @deprecated */
				public getDebug(): java.util.List<com.mapbox.maps.MapDebugOptions>;
				public subscribeRenderFrameStarted(render_d88: com.mapbox.maps.RenderFrameStartedCallback): com.mapbox.common.Cancelable;
				public subscribeSourceDataLoaded(source_63e: com.mapbox.maps.SourceDataLoadedCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnSourceRemovedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
				/** @deprecated */
				public removeOnMapLoadErrorListener(onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				public getSize(): com.mapbox.maps.Size;
				/** @deprecated */
				public removeOnRenderFrameStartedListener(onRend_56a: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
				/** @deprecated */
				public addOnMapIdleListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
				public subscribeGenericEvent(eventName: string, generi_929: com.mapbox.maps.GenericEventCallback): com.mapbox.common.Cancelable;
				public subscribeSourceDataLoaded(param0: com.mapbox.maps.SourceDataLoadedCallback): com.mapbox.common.Cancelable;
				public getMetersPerPixelAtLatitude(latitude: number): number;
				public subscribeSourceAdded(source_64d: com.mapbox.maps.SourceAddedCallback): com.mapbox.common.Cancelable;
				public removeFeatureState(sourceId: string, source_f98: string, featureId: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public getGeoJsonClusterLeaves(source_42b: string, cluster: com.mapbox.geojson.Feature, limit: number, offset: number, callback: com.mapbox.maps.QueryFeatureExtensionCallback): com.mapbox.common.Cancelable;
				public setGestureInProgress(inProgress: boolean): void;
				public getCameraState(): com.mapbox.maps.CameraState;
				public coordinateBoundsForCamera(camera: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				public isUserAnimationInProgress(): boolean;
				public coordinatesForPixels(pixels: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.geojson.Point>;
				public getMapOptions(): com.mapbox.maps.MapOptions;
				public unproject(coordinate: com.mapbox.maps.MercatorCoordinate, zoomScale: number): com.mapbox.geojson.Point;
				public setUserAnimationInProgress(param0: boolean): void;
				public setCameraAnimationHint(param0: com.mapbox.maps.CameraAnimationHint): void;
				public getFeatureState(sourceId: string, featureId: string, callback: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnRenderFrameFinishedListener(onRend_cd3: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
				public pixelForCoordinate(coordinate: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
				public getRenderWorldCopies(): boolean;
				public coordinateForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
				public getFeatureState(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, id: com.mapbox.maps.FeaturesetFeatureId, callback: com.mapbox.maps.interactions.FeatureStateCallback<any>): com.mapbox.common.Cancelable;
				/** @deprecated */
				public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
				/** @deprecated */
				public removeOnStyleLoadedListener(onStyl_e48: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
				public setBounds(param0: com.mapbox.maps.CameraBoundsOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				/** @deprecated */
				public addOnSourceDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
				public coordinateBoundsZoomForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				public coordinateInfoForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CoordinateInfo;
				/** @deprecated */
				public addOnRenderFrameStartedListener(onRend_56a: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
				public setFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.bindgen.Value, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public subscribeCameraChanged(camera_e9d: com.mapbox.maps.CameraChangedCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnRenderFrameFinishedListener(onRend_cd3: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
				public setCameraAnimationHint(camera_3c5: com.mapbox.maps.CameraAnimationHint): void;
				public getDebugOptions$maps_sdk_release(): java.util.Set<com.mapbox.maps.MapDebugOptions>;
				public projectedMetersForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ProjectedMeters;
				public subscribeRenderFrameStarted(param0: com.mapbox.maps.RenderFrameStartedCallback): com.mapbox.common.Cancelable;
				public resetFeatureStates(sourceId: string, source_f98: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public triggerRepaint(): void;
				public createRecorder(): com.mapbox.maps.MapboxMapRecorder;
				/** @deprecated */
				public addOnRenderFrameFinishedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
				/** @deprecated */
				public addOnSourceAddedListener(onSour_4c1: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
				public getGeoJsonClusterChildren(source_42b: string, cluster: com.mapbox.geojson.Feature, callback: com.mapbox.maps.QueryFeatureExtensionCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnRenderFrameFinishedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
				/** @deprecated */
				public addOnCameraChangeListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
				/** @deprecated */
				public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.ScreenBox): com.mapbox.maps.CameraOptions;
				/** @deprecated */
				public loadStyleUri(styleUri: string): void;
				public cameraAnimationsPlugin(param0: any): any;
				public loadStyle(style: string, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded): void;
				/** @deprecated */
				public cameraForGeometry(param0: com.mapbox.geojson.Geometry, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
				/** @deprecated */
				public removeOnCameraChangeListener(onCame_1a3: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
				public stopPerformanceStatisticsCollection(): void;
				public isValid(): boolean;
				public queryRenderedFeatures(geometry: com.mapbox.maps.RenderedQueryGeometry, options: com.mapbox.maps.RenderedQueryOptions, callback: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
				public getFeatureState(id: com.mapbox.maps.interactions.FeaturesetFeature<any>, i_a_al_22d: com.mapbox.maps.interactions.FeatureStateCallback<any>): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnStyleImageUnusedListener(onStyl_65c: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
				public setViewAnnotationAvoidLayers$maps_sdk_release(layerIds: java.util.HashSet<string>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setNorthOrientation(northO_8ee: com.mapbox.maps.NorthOrientation): void;
				public getPrefetchZoomDelta(): number;
				public coordinatesForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.geojson.Point>;
				public loadStyle(styleE_a3f: com.mapbox.maps.extension.style.StyleContract.StyleExtension, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded): void;
				public setGestureInProgress(param0: boolean): void;
				public coordinateForPixel(pixel: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
				public project(param0: com.mapbox.geojson.Point, param1: number): com.mapbox.maps.MercatorCoordinate;
				public subscribeCameraChanged(param0: com.mapbox.maps.CameraChangedCallback): com.mapbox.common.Cancelable;
				public whenSizeReady(action: any): void;
				public querySourceFeatures(sourceId: string, options: com.mapbox.maps.SourceQueryOptions, callback: com.mapbox.maps.QuerySourceFeaturesCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnStyleLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
				public setCenterAltitudeMode(param0: com.mapbox.maps.MapCenterAltitudeMode): void;
				public gesturesPlugin(param0: any): any;
				public subscribeMapLoadingError(param0: com.mapbox.maps.MapLoadingErrorCallback): com.mapbox.common.Cancelable;
				public removeFeatureState(sourceId: string, featureId: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public setDebugOptions$maps_sdk_release(value: java.util.Set<any>): void;
				public subscribeMapLoaded(mapLoa_65f: com.mapbox.maps.MapLoadedCallback): com.mapbox.common.Cancelable;
				public setScreenCullingShape(shape: java.util.List<com.mapbox.maps.Vec2>): void;
				/** @deprecated */
				public addOnMapIdleListener(onMapI_9e8: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
				/** @deprecated */
				public addOnMapLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
				public coordinateBoundsForRect(param0: globalAndroid.graphics.RectF): com.mapbox.maps.CoordinateBounds;
				/** @deprecated */
				public addOnStyleDataLoadedListener(onStyl_a28: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
				public setFeatureState(sourceId: string, source_f98: string, featureId: string, state: com.mapbox.bindgen.Value, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public setFeatureState(id: com.mapbox.maps.interactions.FeaturesetFeature<any>, i_a_al_dfc: com.mapbox.maps.interactions.FeatureState, it: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnStyleDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
				public subscribeCameraChangedCoalesced(camera_c14: com.mapbox.maps.CameraChangedCoalescedCallback): com.mapbox.common.Cancelable;
				public setConstrainMode(param0: com.mapbox.maps.ConstrainMode): void;
				public subscribeStyleImageRemoveUnused(styleI_65e: com.mapbox.maps.StyleImageRemoveUnusedCallback): com.mapbox.common.Cancelable;
				public removeFeatureState(id: com.mapbox.maps.interactions.FeaturesetFeature<any>, i_a_al_e72: com.mapbox.maps.interactions.FeatureStateKey<any>, it: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnSourceDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
				public setCenterAltitudeMode(mode: com.mapbox.maps.MapCenterAltitudeMode): void;
				/** @deprecated */
				public loadStyleUri(styleUri: string, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded): void;
				/** @deprecated */
				public addOnStyleImageMissingListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
				public subscribeCameraChangedCoalesced(param0: com.mapbox.maps.CameraChangedCoalescedCallback): com.mapbox.common.Cancelable;
				public queryRenderedFeatures(param0: com.mapbox.maps.RenderedQueryGeometry, param1: com.mapbox.maps.RenderedQueryOptions, param2: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
				public getCenterAltitudeMode(): com.mapbox.maps.MapCenterAltitudeMode;
				public removeFeatureState(param0: string, param1: string, param2: string, param3: string, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public executeOnRenderThread(runnable: java.lang.Runnable): void;
				public subscribeSourceRemoved(source_407: com.mapbox.maps.SourceRemovedCallback): com.mapbox.common.Cancelable;
				public removeFeatureState(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, id: com.mapbox.maps.FeaturesetFeatureId, stateKey: com.mapbox.maps.interactions.FeatureStateKey<any>): com.mapbox.common.Cancelable;
				public coordinateBoundsForCameraUnwrapped(camera: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				/** @deprecated */
				public removeOnMapIdleListener(onMapI_9e8: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
				public getFreeCameraOptions(): com.mapbox.maps.FreeCameraOptions;
				public executeOnRenderThread(param0: java.lang.Runnable): void;
				public setCamera(freeCa_c32: com.mapbox.maps.FreeCameraOptions): void;
				public setFeatureState(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, id: com.mapbox.maps.FeaturesetFeatureId, state: com.mapbox.maps.interactions.FeatureState, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public coordinateForProjectedMeters(param0: com.mapbox.maps.ProjectedMeters): com.mapbox.geojson.Point;
				public static clearData(callback: com.mapbox.maps.AsyncOperationResultCallback): void;
				/** @deprecated */
				public removeOnStyleLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
				/** @deprecated */
				public loadStyleUri(styleUri: string, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded, onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				/** @deprecated */
				public addOnMapLoadErrorListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				/** @deprecated */
				public loadStyleUri(styleUri: string, styleT_dbd: com.mapbox.maps.TransitionOptions, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded, onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				public cameraForCoordinates(coordi_628: java.util.List<com.mapbox.geojson.Point>, camera: com.mapbox.maps.CameraOptions, coordi_71d: com.mapbox.maps.EdgeInsets, maxZoom: java.lang.Double, offset: com.mapbox.maps.ScreenCoordinate, result: any): void;
				public queryRenderedFeatures(descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, geometry: com.mapbox.maps.RenderedQueryGeometry, filter: com.mapbox.bindgen.Value, callback: com.mapbox.maps.interactions.QueryRenderedFeaturesetFeaturesCallback<any>): com.mapbox.common.Cancelable;
				public project(point: com.mapbox.geojson.Point, zoomScale: number): com.mapbox.maps.MercatorCoordinate;
				/** @deprecated */
				public addOnStyleLoadedListener(onStyl_e48: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
				public getStyle(): com.mapbox.maps.Style;
				public setUserAnimationInProgress(inProgress: boolean): void;
				public coordinateBoundsForRect(this_: globalAndroid.graphics.RectF): com.mapbox.maps.CoordinateBounds;
				public reduceMemoryUse(): void;
				public subscribeRenderFrameFinished(render_46b: com.mapbox.maps.RenderFrameFinishedCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public loadStyleJson(styleJson: string, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded): void;
				public startPerformanceStatisticsCollection(options: com.mapbox.maps.PerformanceStatisticsOptions, callback: com.mapbox.maps.PerformanceStatisticsCallback): void;
				public subscribeResourceRequest(param0: com.mapbox.maps.ResourceRequestCallback): com.mapbox.common.Cancelable;
				public subscribeMapIdle(param0: com.mapbox.maps.MapIdleCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public cameraForCoordinateBounds(bounds: com.mapbox.maps.CoordinateBounds, bounds_abd: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double, maxZoom: java.lang.Double, offset: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public getViewAnnotationAvoidLayers$maps_sdk_release(): java.util.HashSet<string>;
				public getGeoJsonClusterLeaves(source_42b: string, cluster: com.mapbox.geojson.Feature, limit: number, callback: com.mapbox.maps.QueryFeatureExtensionCallback): com.mapbox.common.Cancelable;
				public getGeoJsonClusterLeaves(source_42b: string, cluster: com.mapbox.geojson.Feature, callback: com.mapbox.maps.QueryFeatureExtensionCallback): com.mapbox.common.Cancelable;
				/** @deprecated */
				public loadStyle(styleE_a3f: com.mapbox.maps.extension.style.StyleContract.StyleExtension, onStyl_b70: com.mapbox.maps.Style.OnStyleLoaded, onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				/** @deprecated */
				public removeOnSourceAddedListener(onSour_4c1: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
				public getMetersPerPixelAtLatitude(param0: number, param1: number): number;
			}
			export namespace MapboxMap {
				export namespace MapboxMap {
					export namespace Companion {
						function clearData(callback: com.mapbox.maps.AsyncOperationResultCallback): void;
						function clearData(callback: com.mapbox.maps.AsyncOperationResultCallback): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxMapException extends java.lang.RuntimeException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxMapException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor();
				public constructor(except_ec5: string);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxMapRecorder extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapboxMapRecorder>;
				public constructor(mapRec_ce7: com.mapbox.maps.MapRecorder);
				public togglePauseReplay(): void;
				public getPlaybackState(): string;
				public startRecording(): void;
				public startRecording(options: com.mapbox.maps.MapRecorderOptions): void;
				public replay(record_5d0: java.nio.ByteBuffer): void;
				public stopRecording(): java.nio.ByteBuffer;
				public replay(this_r_8ea: java.nio.ByteBuffer, dataRef: com.mapbox.maps.MapPlayerOptions, this_: any): void;
				public replay(record_5d0: java.nio.ByteBuffer, options: com.mapbox.maps.MapPlayerOptions): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxMapsOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapboxMapsOptions>;
				public static INSTANCE: com.mapbox.maps.MapboxMapsOptions;
				public static setDataPath(value: string): void;
				public static getBaseUrl(): string;
				public static getDataPath(): string;
				public static setTileStore(value: com.mapbox.common.TileStore): void;
				public static getTileStore(): com.mapbox.common.TileStore;
				public static setBaseUrl(value: string): void;
				public static setTileStoreUsageMode(value: com.mapbox.maps.TileStoreUsageMode): void;
				public static getTileStoreUsageMode(): com.mapbox.maps.TileStoreUsageMode;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxStyleException extends java.lang.RuntimeException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxStyleException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor();
				public constructor(except_ec5: string);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxStyleManager extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapboxStyleManager>;
				public removeStyleSourceUnchecked(sourceId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImportConfigProperties(importId: string): com.mapbox.bindgen.Expected<string,java.util.HashMap<string,com.mapbox.maps.StylePropertyValue>>;
				public getStyleImportConfigProperty(importId: string, config: string): com.mapbox.bindgen.Expected<string,com.mapbox.maps.StylePropertyValue>;
				public addStyleImportFromURI(importId: string, uri: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>, import_c87: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public hasStyleImage(imageId: string): boolean;
				public setStyleCustomGeometrySourceTileData(sourceId: string, tileId: com.mapbox.maps.CanonicalTileID, featur_b09: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSourceProperty(sourceId: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public moveStyleLayer(layerId: string, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getPixelRatio(): number;
				public getStyleSlots(): java.util.List<string>;
				public getStyleImage(imageId: string): com.mapbox.maps.Image;
				public isStyleLoaded(): boolean;
				public removeStyleImport(importId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getFeaturesets(): java.util.List<com.mapbox.maps.FeaturesetDescriptor>;
				public getStyleAtmosphereProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public getStyleURI(): string;
				public getStyleProjectionProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleImportConfigProperties(importId: string, configs: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public styleLayerExists(layerId: string): boolean;
				public getStyleManager(): com.mapbox.maps.StyleManager;
				public setStyleColorTheme(image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSnowProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleColorTheme(base64: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleLights(lights: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleLayer(parameters: com.mapbox.bindgen.Value, position: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addImage(imageId: string, bitmap: globalAndroid.graphics.Bitmap): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImportWithURI(importId: string, uri: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public invalidateStyleCustomGeometrySourceTile(sourceId: string, tileId: com.mapbox.maps.CanonicalTileID): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public constructor(styleM_755: com.mapbox.maps.StyleManager, pixelRatio: number, mapLoa_62c: com.mapbox.maps.MapLoadingErrorDelegate);
				public getStyleRainProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public getStyleImports(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setStyleTerrain(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public invalidateStyleCustomGeometrySourceRegion(sourceId: string, coordi_d26: com.mapbox.maps.CoordinateBounds): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleJSON(): string;
				public getStyleTerrainProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public setImportColorTheme(importId: string, base64: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImageSourceImage(sourceId: string, image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImportWithJSON(importId: string, json: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public moveStyleImport(importId: string, import_c87: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setInitialStyleColorTheme(): void;
				public removeGeoJSONSourceFeatures(sourceId: string, dataId: string, featureIds: java.util.List<string>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleSource(sourceId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setImportColorTheme(importId: string, image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSnowProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLayers(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setStyleColorTheme(bitmap: globalAndroid.graphics.Bitmap): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleLayerProperty(layerId: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSourceProperties(sourceId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public removeStyleImage(imageId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLayerProperties(layerId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public removeStyleSource(sourceId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleLayer(layerId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addImage(imageId: string, image: com.mapbox.maps.Image, sdf: boolean): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addPersistentStyleLayer(properties: com.mapbox.bindgen.Value, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleLayerProperties(layerId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleRainProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleCustomRasterSourceTileData(sourceId: string, tiles: java.util.List<com.mapbox.maps.CustomRasterSourceTileData>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLights(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public addStyleImportFromJSON(importId: string, json: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>, import_c87: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleTransition(transi_54c: com.mapbox.maps.TransitionOptions): void;
				public setStyleSnow(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public isStyleLayerPersistent(layerId: string): com.mapbox.bindgen.Expected<string,java.lang.Boolean>;
				public addPersistentStyleCustomLayer(layerId: string, layerHost: com.mapbox.maps.CustomLayerHost, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSourceProperties(sourceId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addImage(imageId: string, bitmap: globalAndroid.graphics.Bitmap, sdf: boolean): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public styleSourceExists(sourceId: string): boolean;
				public setStyleAtmosphereProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public hasStyleModel(modelId: string): boolean;
				public getStyleSources(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setImportColorTheme(importId: string, colorTheme: com.mapbox.maps.ColorTheme): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addImage(imageId: string, image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleModel(modelId: string, modelUri: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateGeoJSONSourceFeatures(sourceId: string, dataId: string, features: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleRain(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleDefaultCamera(): com.mapbox.maps.CameraOptions;
				public setStyleColorTheme(colorTheme: com.mapbox.maps.ColorTheme): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleModel(modelId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleCustomLayer(layerId: string, layerHost: com.mapbox.maps.CustomLayerHost, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleProjection(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleTransition(): com.mapbox.maps.TransitionOptions;
				public setStyleLayerPropertiesAsync(layerId: string, properties: com.mapbox.bindgen.Value, callback: com.mapbox.maps.AsyncOperationResultCallback): com.mapbox.common.Cancelable;
				public addGeoJSONSourceFeatures(sourceId: string, dataId: string, features: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleProjectionProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleTerrainProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleImportConfigProperty(importId: string, config: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleGlyphURL(): string;
				public setImportColorTheme(importId: string, bitmap: globalAndroid.graphics.Bitmap): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLightProperty(id: string, property: string): com.mapbox.maps.StylePropertyValue;
				public getMapLoadingErrorDelegate(): com.mapbox.maps.MapLoadingErrorDelegate;
				public setStyleLayerPropertyAsync(layerId: string, property: string, value: com.mapbox.bindgen.Value, callback: com.mapbox.maps.AsyncOperationResultCallback): com.mapbox.common.Cancelable;
				public addStyleImage(imageId: string, scale: number, image: com.mapbox.maps.Image, sdf: boolean, stretchX: java.util.List<com.mapbox.maps.ImageStretches>, stretchY: java.util.List<com.mapbox.maps.ImageStretches>, content: com.mapbox.maps.ImageContent): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleCustomGeometrySource(sourceId: string, options: com.mapbox.maps.CustomGeometrySourceOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleCustomRasterSource(sourceId: string, options: com.mapbox.maps.CustomRasterSourceOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSourceProperty(sourceId: string, property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleGeoJSONSourceData(sourceId: string, dataId: string, data: com.mapbox.maps.GeoJSONSourceData): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImportSchema(importId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public getStyleLayerProperty(layerId: string, property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleLightProperty(id: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleGlyphURL(url: string): void;
				public setStyleAtmosphere(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxTracing extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapboxTracing>;
				public static INSTANCE: com.mapbox.maps.MapboxTracing;
				public static MAPBOX_TRACE_ID: string; // "mbx"
				public disableAll(): void;
				public enablePlatform(): void;
				public enableCore(): void;
				public getPlatformTracingEnabled$maps_sdk_release(): boolean;
				public enableAll(): void;
				public setPlatformTracingEnabled$maps_sdk_release(platfo_3cd: boolean): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapboxViewAnnotationException extends java.lang.RuntimeException {
				public static class: java.lang.Class<com.mapbox.maps.MapboxViewAnnotationException>;
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor();
				public constructor(except_ec5: string);
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MapsResourceOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.MapsResourceOptions>;
				public peer: number;
				public static setBaseURL(param0: string): void;
				public static clearData(param0: com.mapbox.maps.AsyncOperationResultCallback): void;
				public static setDataPath(param0: string): void;
				public static getDataPath(): string;
				public static getTileStore(): com.mapbox.common.TileStore;
				public constructor(peer: number);
				public static setAssetPath(param0: string): void;
				public static setTileStore(param0: com.mapbox.common.TileStore): void;
				public static setTileStoreUsageMode(param0: com.mapbox.maps.TileStoreUsageMode): void;
				public static cleanNativePeer(param0: number): void;
				public static getAssetPath(): string;
				public static getTileStoreUsageMode(): com.mapbox.maps.TileStoreUsageMode;
				public static getBaseURL(): string;
			}
			export namespace MapsResourceOptions {
				export class MapsResourceOptionsPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.MapsResourceOptions.MapsResourceOptionsPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class MercatorCoordinate extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.MercatorCoordinate>;
				public constructor(x: number, y: number);
				public getX(): number;
				public hashCode(): number;
				public getY(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class NativeMapImpl extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.NativeMapImpl>;
				public hasStyleImage(imageId: string): boolean;
				public getFeatureState(sourceId: string, source_f98: string, featureId: string, callback: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
				public setStyleCustomGeometrySourceTileData(sourceId: string, tileId: com.mapbox.maps.CanonicalTileID, featur_b09: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public subscribe(onMapI_9e8: com.mapbox.maps.MapIdleCallback): com.mapbox.common.Cancelable;
				public getScreenCullingShape(): java.util.List<com.mapbox.maps.Vec2>;
				public subscribe(source_407: com.mapbox.maps.SourceRemovedCallback): com.mapbox.common.Cancelable;
				public subscribe(styleD_8d0: com.mapbox.maps.StyleDataLoadedCallback): com.mapbox.common.Cancelable;
				public setStyleSourceProperty(sourceId: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setBounds(boundO_5af: com.mapbox.maps.CameraBoundsOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public moveStyleLayer(layerId: string, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public subscribe(source_64d: com.mapbox.maps.SourceAddedCallback): com.mapbox.common.Cancelable;
				public getStyleImage(imageId: string): com.mapbox.maps.Image;
				public tileCover(tileCo_1fa: com.mapbox.maps.TileCoverOptions, camera_b60: com.mapbox.maps.CameraOptions): java.util.List<com.mapbox.maps.CanonicalTileID>;
				public isStyleLoaded(): boolean;
				public getStyleAtmosphereProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public getStyleProjectionProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public getStyleURI(): string;
				public setRenderWorldCopies(render_a02: boolean): void;
				public subscribe(camera_e9d: com.mapbox.maps.CameraChangedCallback): com.mapbox.common.Cancelable;
				public getCameraState(): com.mapbox.maps.CameraState;
				public cameraForCoordinates(points: java.util.List<com.mapbox.geojson.Point>, camera: com.mapbox.maps.CameraOptions, box: com.mapbox.maps.ScreenBox): com.mapbox.maps.CameraOptions;
				public isUserAnimationInProgress(): boolean;
				public coordinatesForPixels(pixels: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.geojson.Point>;
				public setStyleJSON(json: string): void;
				public getMapOptions(): com.mapbox.maps.MapOptions;
				public getMap(): com.mapbox.maps.Map;
				public styleLayerExists(layerId: string): boolean;
				public getElevation(point: com.mapbox.geojson.Point): java.lang.Double;
				public addStyleLayer(parameters: com.mapbox.bindgen.Value, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public constructor(map: com.mapbox.maps.Map);
				public setFeatureState(featureset: com.mapbox.maps.FeaturesetDescriptor, featureId: com.mapbox.maps.FeaturesetFeatureId, state: com.mapbox.bindgen.Value, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public cameraForCoordinateBounds(coordi_d26: com.mapbox.maps.CoordinateBounds, padding: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double, maxZoom: java.lang.Double, offset: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public getRenderWorldCopies(): boolean;
				public coordinateBoundsForCameraUnwrapped(camera_b60: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				public queryRenderedFeatures(geometry: com.mapbox.maps.RenderedQueryGeometry, targets: java.util.List<com.mapbox.maps.FeaturesetQueryTarget>, callback: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
				public setStyleLights(lights: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setViewAnnotationPositionsUpdateListener(listener: com.mapbox.maps.ViewAnnotationPositionsUpdateListener): void;
				public removeFeatureState(featureset: com.mapbox.maps.FeaturesetDescriptor, featureId: com.mapbox.maps.FeaturesetFeatureId, stateKey: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public setCameraAnimationHint(camera_3c5: com.mapbox.maps.CameraAnimationHint): void;
				public removeViewAnnotation(identifier: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public dispatch(platfo_8ce: com.mapbox.maps.PlatformEventInfo): void;
				public pixelsForCoordinates(coordi_628: java.util.List<com.mapbox.geojson.Point>): java.util.List<com.mapbox.maps.ScreenCoordinate>;
				public invalidateStyleCustomGeometrySourceTile(sourceId: string, tileId: com.mapbox.maps.CanonicalTileID): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getBounds(): com.mapbox.maps.CameraBounds;
				public subscribe(render_46b: com.mapbox.maps.RenderFrameFinishedCallback): com.mapbox.common.Cancelable;
				public resetThreadServiceType(): void;
				public setStyleTerrain(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setCamera(camera_b60: com.mapbox.maps.CameraOptions): void;
				public invalidateStyleCustomGeometrySourceRegion(sourceId: string, coordi_d26: com.mapbox.maps.CoordinateBounds): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public resetFeatureStates(sourceId: string, source_f98: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public triggerRepaint(): void;
				public getStyleJSON(): string;
				public getStyleTerrainProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public updateStyleImageSourceImage(sourceId: string, image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public render(): void;
				public subscribe(mapLoa_65f: com.mapbox.maps.MapLoadedCallback): com.mapbox.common.Cancelable;
				public stopPerformanceStatisticsCollection(): void;
				public setViewAnnotationAvoidLayers(layerIds: java.util.HashSet<string>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public coordinateBoundsZoomForCamera(camera: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				public queryRenderedFeatures(geometry: com.mapbox.maps.RenderedQueryGeometry, options: com.mapbox.maps.RenderedQueryOptions, callback: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
				public coordinateForPixel(screen_b07: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
				public subscribe(eventName: string, onGene_4cc: com.mapbox.maps.GenericEventCallback): com.mapbox.common.Cancelable;
				public subscribe(mapLoa_a44: com.mapbox.maps.MapLoadingErrorCallback): com.mapbox.common.Cancelable;
				public getPrefetchZoomDelta(): number;
				public setNorthOrientation(northO_8ee: com.mapbox.maps.NorthOrientation): void;
				public getStyleLayers(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setDebug(list: java.util.List<any>, debugA_bb2: boolean): void;
				public setStyleLayerProperty(layerId: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSourceProperties(sourceId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public removeStyleImage(imageId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLayerProperties(layerId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public querySourceFeatures(sourceId: string, options: com.mapbox.maps.SourceQueryOptions, callback: com.mapbox.maps.QuerySourceFeaturesCallback): com.mapbox.common.Cancelable;
				public coordinateInfoForPixel(pixel: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CoordinateInfo;
				public removeStyleSource(sourceId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleLayer(layerId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setSize(size: com.mapbox.maps.Size): void;
				public addPersistentStyleLayer(properties: com.mapbox.bindgen.Value, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public subscribe(styleI_23a: com.mapbox.maps.StyleImageMissingCallback): com.mapbox.common.Cancelable;
				public setStyleLayerProperties(layerId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public whenMapSizeReady(callback: any): void;
				public getStyleLights(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public addViewAnnotation(identifier: string, options: com.mapbox.maps.ViewAnnotationOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public subscribe(styleL_410: com.mapbox.maps.StyleLoadedCallback): com.mapbox.common.Cancelable;
				public setStyleTransition(transi_54c: com.mapbox.maps.TransitionOptions): void;
				public cameraForCoordinates(points: java.util.List<com.mapbox.geojson.Point>, padding: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double): com.mapbox.maps.CameraOptions;
				public setTileCacheBudget(tileCa_eb4: com.mapbox.maps.TileCacheBudget): void;
				public isStyleLayerPersistent(layerId: string): com.mapbox.bindgen.Expected<string,java.lang.Boolean>;
				public setScreenCullingShape(shape: java.util.List<com.mapbox.maps.Vec2>): void;
				public subscribe(render_d88: com.mapbox.maps.RenderFrameStartedCallback): com.mapbox.common.Cancelable;
				public getDebug(): java.util.List<com.mapbox.maps.MapDebugOptions>;
				public addPersistentStyleCustomLayer(layerId: string, layerHost: com.mapbox.maps.CustomLayerHost, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSourceProperties(sourceId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public resetFeatureStates(featureset: com.mapbox.maps.FeaturesetDescriptor, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public styleSourceExists(sourceId: string): boolean;
				public setStyleAtmosphereProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setFeatureState(sourceId: string, source_f98: string, featureId: string, state: com.mapbox.bindgen.Value, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public setGestureInProgress(gestur_e14: boolean): void;
				public hasStyleModel(modelId: string): boolean;
				public getViewAnnotationAvoidLayers(): java.util.HashSet<string>;
				public isGestureInProgress(): boolean;
				public getStyleSources(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public coordinateBoundsForCamera(camera_b60: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				public setPrefetchZoomDelta(zoomDelta: number): void;
				public addStyleModel(modelId: string, modelUri: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public queryFeatureExtensions(source_42b: string, feature: com.mapbox.geojson.Feature, extension: string, extens_00e: string, args: java.util.HashMap<string,com.mapbox.bindgen.Value>, callback: com.mapbox.maps.QueryFeatureExtensionCallback): com.mapbox.common.Cancelable;
				public getStyleDefaultCamera(): com.mapbox.maps.CameraOptions;
				public setCenterAltitudeMode(mode: com.mapbox.maps.MapCenterAltitudeMode): void;
				public subscribe(styleI_65e: com.mapbox.maps.StyleImageRemoveUnusedCallback): com.mapbox.common.Cancelable;
				public getSizeSet$maps_sdk_release(): boolean;
				public getFeatureState(featureset: com.mapbox.maps.FeaturesetDescriptor, featureId: com.mapbox.maps.FeaturesetFeatureId, callback: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
				public getCenterAltitudeMode(): com.mapbox.maps.MapCenterAltitudeMode;
				public coordinatesInfoForPixels(pixels: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.maps.CoordinateInfo>;
				public removeStyleModel(modelId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleCustomLayer(layerId: string, layerHost: com.mapbox.maps.CustomLayerHost, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleProjection(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateViewAnnotation(identifier: string, options: com.mapbox.maps.ViewAnnotationOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public cameraForDrag(fromPoint: com.mapbox.maps.ScreenCoordinate, toPoint: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
				public getFreeCameraOptions(): com.mapbox.maps.FreeCameraOptions;
				public getStyleTransition(): com.mapbox.maps.TransitionOptions;
				public setCamera(freeCa_c32: com.mapbox.maps.FreeCameraOptions): void;
				public getAttributions(): java.util.List<string>;
				public addStyleSource(sourceId: string, source: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleProjectionProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setViewportMode(viewpo_bec: com.mapbox.maps.ViewportMode): void;
				public subscribe(source_63e: com.mapbox.maps.SourceDataLoadedCallback): com.mapbox.common.Cancelable;
				public destroyRenderer(): void;
				public subscribe(camera_c14: com.mapbox.maps.CameraChangedCoalescedCallback): com.mapbox.common.Cancelable;
				public setSizeSet$maps_sdk_release(it: boolean): void;
				public setStyleTerrainProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getViewAnnotationOptions(identifier: string): com.mapbox.bindgen.Expected<string,com.mapbox.maps.ViewAnnotationOptions>;
				public coordinateBoundsZoomForCameraUnwrapped(camera_b60: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
				public getStyleLightProperty(id: string, property: string): com.mapbox.maps.StylePropertyValue;
				public setUserAnimationInProgress(inProgress: boolean): void;
				public removeFeatureState(sourceId: string, source_f98: string, featureId: string, stateKey: string, callback: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
				public pixelForCoordinate(pixel: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
				public reduceMemoryUse(): void;
				public setConstrainMode(constr_8f1: com.mapbox.maps.ConstrainMode): void;
				public startPerformanceStatisticsCollection(options: com.mapbox.maps.PerformanceStatisticsOptions, callback: com.mapbox.maps.PerformanceStatisticsCallback): void;
				public addStyleImage(imageId: string, scale: number, image: com.mapbox.maps.Image, sdf: boolean, stretchX: java.util.List<com.mapbox.maps.ImageStretches>, stretchY: java.util.List<com.mapbox.maps.ImageStretches>, content: com.mapbox.maps.ImageContent): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleCustomGeometrySource(sourceId: string, options: com.mapbox.maps.CustomGeometrySourceOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleURI(uri: string): void;
				public addInteraction(intera_94b: com.mapbox.maps.Interaction): com.mapbox.common.Cancelable;
				public createRenderer(): void;
				public setStyleGeoJSONSourceData(sourceId: string, dataId: string, data: com.mapbox.maps.GeoJSONSourceData): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSourceProperty(sourceId: string, property: string): com.mapbox.maps.StylePropertyValue;
				public getStyleLayerProperty(layerId: string, property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleLightProperty(id: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public subscribe(resour_7d5: com.mapbox.maps.ResourceRequestCallback): com.mapbox.common.Cancelable;
				public setStyleAtmosphere(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getSize(): com.mapbox.maps.Size;
				public cameraForCoordinates(points: java.util.List<com.mapbox.geojson.Point>, camera: com.mapbox.maps.CameraOptions, padding: com.mapbox.maps.EdgeInsets, maxZoom: java.lang.Double, offset: com.mapbox.maps.ScreenCoordinate): com.mapbox.bindgen.Expected<string,com.mapbox.maps.CameraOptions>;
				public cameraForGeometry(geometry: com.mapbox.geojson.Geometry, padding: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double): com.mapbox.maps.CameraOptions;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class NativeObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.NativeObserver>;
				public subscribeRenderFrameStarted(render_d88: com.mapbox.maps.RenderFrameStartedCallback, onCancel: any, render_99f: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnSourceDataLoadedListener(onSour_528: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
				/** @deprecated */
				public addOnStyleImageMissingListener(onStyl_3f2: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
				/** @deprecated */
				public removeOnMapIdleListener(onMapI_9e8: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
				public subscribeSourceAdded(source_64d: com.mapbox.maps.SourceAddedCallback, onCancel: any, source_ec6: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): com.mapbox.common.Cancelable;
				public subscribeStyleLoaded(this_: com.mapbox.maps.StyleLoadedCallback, styleL_410: any, onCancel: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnStyleImageMissingListener(onStyl_3f2: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
				public subscribeStyleImageMissing(styleI_23a: com.mapbox.maps.StyleImageMissingCallback, onCancel: any, styleI_64d: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): com.mapbox.common.Cancelable;
				public subscribeStyleDataLoaded(this_: com.mapbox.maps.StyleDataLoadedCallback, styleD_8d0: any, onCancel: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnCameraChangeListener(onCame_1a3: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
				public subscribeMapIdle(mapIdl_700: com.mapbox.maps.MapIdleCallback, onCancel: any, mapIdl_847: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): com.mapbox.common.Cancelable;
				public subscribeStyleImageRemoveUnused(styleI_65e: com.mapbox.maps.StyleImageRemoveUnusedCallback, onCancel: any, styleI_85d: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): com.mapbox.common.Cancelable;
				public get_resubscribableSet$maps_sdk_release(): java.util.Set<any>;
				/** @deprecated */
				public addOnMapIdleListener(onMapI_9e8: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
				/** @deprecated */
				public addOnSourceAddedListener(onSour_4c1: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
				/** @deprecated */
				public addOnMapLoadErrorListener(onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				/** @deprecated */
				public addOnStyleImageUnusedListener(onStyl_65c: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
				/** @deprecated */
				public addOnStyleDataLoadedListener(onStyl_a28: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
				public get_cancelableSet$maps_sdk_release(): java.util.Set<any>;
				/** @deprecated */
				public addOnStyleLoadedListener(onStyl_e48: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
				/** @deprecated */
				public addOnSourceRemovedListener(onSour_f93: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
				public subscribeResourceRequest(resour_7d5: com.mapbox.maps.ResourceRequestCallback, onCancel: any): com.mapbox.common.Cancelable;
				public subscribeMapLoadingError(mapLoa_a44: com.mapbox.maps.MapLoadingErrorCallback, onCancel: any, mapLoa_7c3: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): com.mapbox.common.Cancelable;
				public subscribeSourceDataLoaded(source_63e: com.mapbox.maps.SourceDataLoadedCallback, onCancel: any, source_d49: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnSourceDataLoadedListener(onSour_528: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
				/** @deprecated */
				public removeOnCameraChangeListener(onCame_1a3: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
				/** @deprecated */
				public addOnRenderFrameFinishedListener(onRend_cd3: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
				public subscribeGenericEvent(eventName: string, generi_929: com.mapbox.maps.GenericEventCallback, onCancel: any): com.mapbox.common.Cancelable;
				/** @deprecated */
				public addOnMapLoadedListener(onMapL_8a7: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
				public subscribeCameraChanged(camera_e9d: com.mapbox.maps.CameraChangedCallback, onCancel: any, onCame_1a3: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnStyleImageUnusedListener(onStyl_65c: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
				/** @deprecated */
				public removeOnStyleLoadedListener(onStyl_e48: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
				public sendMapLoadingError(it: com.mapbox.maps.MapLoadingError): void;
				public resubscribeStyleLoadListeners(): void;
				/** @deprecated */
				public removeOnSourceRemovedListener(onSour_f93: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
				/** @deprecated */
				public addOnRenderFrameStartedListener(onRend_56a: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
				public subscribeMapLoaded(mapLoa_65f: com.mapbox.maps.MapLoadedCallback, onCancel: any, mapLoa_9a4: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): com.mapbox.common.Cancelable;
				public subscribeRenderFrameFinished(render_46b: com.mapbox.maps.RenderFrameFinishedCallback, onCancel: any, render_6e8: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnRenderFrameFinishedListener(onRend_cd3: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
				public subscribeCameraChangedCoalesced(camera_c14: com.mapbox.maps.CameraChangedCoalescedCallback, onCancel: any): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnSourceAddedListener(onSour_4c1: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
				public constructor(observable: com.mapbox.maps.NativeMapImpl);
				/** @deprecated */
				public removeOnMapLoadedListener(onMapL_8a7: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
				/** @deprecated */
				public removeOnMapLoadErrorListener(onMapL_608: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
				/** @deprecated */
				public removeOnStyleDataLoadedListener(onStyl_a28: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
				public onDestroy(): void;
				public subscribeSourceRemoved(source_407: com.mapbox.maps.SourceRemovedCallback, onCancel: any, source_1ec: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): com.mapbox.common.Cancelable;
				/** @deprecated */
				public removeOnRenderFrameStartedListener(onRend_56a: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
			}
			export namespace NativeObserver {
				export class ExtendedCancelable extends java.lang.Object implements com.mapbox.common.Cancelable {
					public static class: java.lang.Class<com.mapbox.maps.NativeObserver.ExtendedCancelable>;
					public getListener(): any;
					public getOriginalCancelable(): com.mapbox.common.Cancelable;
					public constructor(this_0: com.mapbox.common.Cancelable, origin_3a8: any, onCancel: java.util.Set<com.mapbox.maps.NativeObserver.ExtendedCancelable>, cancel_1dd: any);
					public getOnCancel(): any;
					public equals(other: any): boolean;
					public cancel(): void;
					public hashCode(): number;
				}
				export class ResubscribeExtendedCancelable extends com.mapbox.maps.NativeObserver.ExtendedCancelable {
					public static class: java.lang.Class<com.mapbox.maps.NativeObserver.ResubscribeExtendedCancelable>;
					public constructor(this_0: any, resubs_d9e: com.mapbox.common.Cancelable, origin_3a8: java.util.Set<com.mapbox.maps.NativeObserver.ResubscribeExtendedCancelable>, cancel_1dd: any, onCancel: any);
					public getOriginalCancelable(): com.mapbox.common.Cancelable;
					public constructor(this_0: com.mapbox.common.Cancelable, origin_3a8: any, onCancel: java.util.Set<com.mapbox.maps.NativeObserver.ExtendedCancelable>, cancel_1dd: any);
					public equals(other: any): boolean;
					public resubscribe(): void;
					public cancel(): void;
					public setOriginalCancelable(origin_3a8: com.mapbox.common.Cancelable): void;
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class NorthOrientation {
				public static class: java.lang.Class<com.mapbox.maps.NorthOrientation>;
				public static UPWARDS: com.mapbox.maps.NorthOrientation;
				public static RIGHTWARDS: com.mapbox.maps.NorthOrientation;
				public static DOWNWARDS: com.mapbox.maps.NorthOrientation;
				public static LEFTWARDS: com.mapbox.maps.NorthOrientation;
				public static values(): androidNative.Array<com.mapbox.maps.NorthOrientation>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.NorthOrientation;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Observable extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.Observable>;
				public peer: number;
				public subscribe(param0: com.mapbox.maps.CameraChangedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.StyleImageRemoveUnusedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.RenderFrameStartedCallback): com.mapbox.common.Cancelable;
				public constructor(peer: number);
				public subscribe(param0: com.mapbox.maps.StyleImageMissingCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: string, param1: com.mapbox.maps.GenericEventCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.MapLoadedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.StyleLoadedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.RenderFrameFinishedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.StyleDataLoadedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.SourceRemovedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.MapIdleCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.ResourceRequestCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.SourceDataLoadedCallback): com.mapbox.common.Cancelable;
				public static cleanNativePeer(param0: number): void;
				public subscribe(param0: com.mapbox.maps.SourceAddedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.CameraChangedCoalescedCallback): com.mapbox.common.Cancelable;
				public subscribe(param0: com.mapbox.maps.MapLoadingErrorCallback): com.mapbox.common.Cancelable;
			}
			export namespace Observable {
				export class ObservablePeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.Observable.ObservablePeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineDatabaseMergeCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineDatabaseMergeCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.OfflineDatabaseMergeCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.OfflineRegion>>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.OfflineRegion>>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineDatabaseMergeCallbackNative extends java.lang.Object implements com.mapbox.maps.OfflineDatabaseMergeCallback {
				public static class: java.lang.Class<com.mapbox.maps.OfflineDatabaseMergeCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.OfflineRegion>>): void;
			}
			export namespace OfflineDatabaseMergeCallbackNative {
				export class OfflineDatabaseMergeCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineDatabaseMergeCallbackNative.OfflineDatabaseMergeCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineManager extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineManager>;
				public peer: number;
				public loadStylePack(param0: string, param1: com.mapbox.maps.StylePackLoadOptions, param2: com.mapbox.maps.StylePackCallback): com.mapbox.common.Cancelable;
				public loadStylePack(param0: string, param1: com.mapbox.maps.StylePackLoadOptions, param2: com.mapbox.maps.StylePackLoadProgressCallback, param3: com.mapbox.maps.StylePackCallback): com.mapbox.common.Cancelable;
				public getStylePackMetadata(param0: string, param1: com.mapbox.maps.StylePackMetadataCallback): void;
				public getAllStylePacks(param0: com.mapbox.maps.StylePacksCallback): void;
				public removeStylePack(param0: string): void;
				public removeStylePack(param0: string, param1: com.mapbox.maps.StylePackCallback): void;
				public createTilesetDescriptor(param0: com.mapbox.maps.TilesetDescriptorOptions): com.mapbox.common.TilesetDescriptor;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public getStylePack(param0: string, param1: com.mapbox.maps.StylePackCallback): void;
				public constructor();
			}
			export namespace OfflineManager {
				export class OfflineManagerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineManager.OfflineManagerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegion extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegion>;
				public peer: number;
				public invalidate(param0: com.mapbox.maps.AsyncOperationResultCallback): void;
				public getGeometryDefinition(): com.mapbox.maps.OfflineRegionGeometryDefinition;
				public setOfflineRegionDownloadState(param0: com.mapbox.maps.OfflineRegionDownloadState): void;
				public setOfflineRegionObserver(param0: com.mapbox.maps.OfflineRegionObserver): void;
				public static cleanNativePeer(param0: number): void;
				public setMetadata(param0: androidNative.Array<number>, param1: com.mapbox.maps.AsyncOperationResultCallback): void;
				public getMetadata(): androidNative.Array<number>;
				public purge(param0: com.mapbox.maps.AsyncOperationResultCallback): void;
				public getTilePyramidDefinition(): com.mapbox.maps.OfflineRegionTilePyramidDefinition;
				public getStatus(param0: com.mapbox.maps.OfflineRegionStatusCallback): void;
				public constructor(peer: number);
				public getIdentifier(): number;
			}
			export namespace OfflineRegion {
				export class OfflineRegionPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegion.OfflineRegionPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.OfflineRegionCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.OfflineRegion>>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.OfflineRegion>>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionCallbackNative extends java.lang.Object implements com.mapbox.maps.OfflineRegionCallback {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.OfflineRegion>>): void;
			}
			export namespace OfflineRegionCallbackNative {
				export class OfflineRegionCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegionCallbackNative.OfflineRegionCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionCreateCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionCreateCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.OfflineRegionCreateCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.OfflineRegion>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.OfflineRegion>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionCreateCallbackNative extends java.lang.Object implements com.mapbox.maps.OfflineRegionCreateCallback {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionCreateCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.OfflineRegion>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace OfflineRegionCreateCallbackNative {
				export class OfflineRegionCreateCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegionCreateCallbackNative.OfflineRegionCreateCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionDownloadState {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionDownloadState>;
				public static INACTIVE: com.mapbox.maps.OfflineRegionDownloadState;
				public static ACTIVE: com.mapbox.maps.OfflineRegionDownloadState;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.OfflineRegionDownloadState;
				public static values(): androidNative.Array<com.mapbox.maps.OfflineRegionDownloadState>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionError>;
				public getType(): com.mapbox.maps.OfflineRegionErrorType;
				public constructor(type: com.mapbox.maps.OfflineRegionErrorType, message: string, isFatal: boolean, retryAfter: java.util.Date);
				public hashCode(): number;
				public getRetryAfter(): java.util.Date;
				public getIsFatal(): boolean;
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionErrorType {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionErrorType>;
				public static NOT_FOUND: com.mapbox.maps.OfflineRegionErrorType;
				public static SERVER: com.mapbox.maps.OfflineRegionErrorType;
				public static CONNECTION: com.mapbox.maps.OfflineRegionErrorType;
				public static RATE_LIMIT: com.mapbox.maps.OfflineRegionErrorType;
				public static DISK_FULL: com.mapbox.maps.OfflineRegionErrorType;
				public static TILE_COUNT_LIMIT_EXCEEDED: com.mapbox.maps.OfflineRegionErrorType;
				public static OTHER: com.mapbox.maps.OfflineRegionErrorType;
				public static values(): androidNative.Array<com.mapbox.maps.OfflineRegionErrorType>;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.OfflineRegionErrorType;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionGeometryDefinition extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionGeometryDefinition>;
				public getStyleURL(): string;
				public getPixelRatio(): number;
				public getGeometry(): com.mapbox.geojson.Geometry;
				public getGlyphsRasterizationMode(): com.mapbox.maps.GlyphsRasterizationMode;
				public hashCode(): number;
				public toString(): string;
				public toBuilder(): com.mapbox.maps.OfflineRegionGeometryDefinition.Builder;
				public getMaxZoom(): number;
				public equals(object: any): boolean;
				public getMinZoom(): number;
			}
			export namespace OfflineRegionGeometryDefinition {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegionGeometryDefinition.Builder>;
					public glyphsRasterizationMode(glyphs_22e: com.mapbox.maps.GlyphsRasterizationMode): com.mapbox.maps.OfflineRegionGeometryDefinition.Builder;
					public minZoom(minZoom: number): com.mapbox.maps.OfflineRegionGeometryDefinition.Builder;
					public constructor();
					public maxZoom(maxZoom: number): com.mapbox.maps.OfflineRegionGeometryDefinition.Builder;
					public pixelRatio(pixelRatio: number): com.mapbox.maps.OfflineRegionGeometryDefinition.Builder;
					public geometry(geometry: com.mapbox.geojson.Geometry): com.mapbox.maps.OfflineRegionGeometryDefinition.Builder;
					public build(): com.mapbox.maps.OfflineRegionGeometryDefinition;
					public styleURL(styleURL: string): com.mapbox.maps.OfflineRegionGeometryDefinition.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionManager extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionManager>;
				public peer: number;
				public mergeOfflineDatabase(param0: string, param1: com.mapbox.maps.OfflineDatabaseMergeCallback): void;
				public static cleanNativePeer(param0: number): void;
				public getOfflineRegions(param0: com.mapbox.maps.OfflineRegionCallback): void;
				public setOfflineMapboxTileCountLimit(param0: number): void;
				public constructor(peer: number);
				public createOfflineRegion(param0: com.mapbox.maps.OfflineRegionTilePyramidDefinition, param1: com.mapbox.maps.OfflineRegionCreateCallback): void;
				public constructor();
				public createOfflineRegion(param0: com.mapbox.maps.OfflineRegionGeometryDefinition, param1: com.mapbox.maps.OfflineRegionCreateCallback): void;
			}
			export namespace OfflineRegionManager {
				export class OfflineRegionManagerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegionManager.OfflineRegionManagerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionObserver extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionObserver>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.OfflineRegionObserver interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					statusChanged(param0: com.mapbox.maps.OfflineRegionStatus): void;
					errorOccurred(param0: com.mapbox.maps.OfflineRegionError): void;
				});
				public constructor();
				public statusChanged(param0: com.mapbox.maps.OfflineRegionStatus): void;
				public errorOccurred(param0: com.mapbox.maps.OfflineRegionError): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionObserverNative extends java.lang.Object implements com.mapbox.maps.OfflineRegionObserver {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionObserverNative>;
				public peer: number;
				public statusChanged(param0: com.mapbox.maps.OfflineRegionStatus): void;
				public errorOccurred(param0: com.mapbox.maps.OfflineRegionError): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
			}
			export namespace OfflineRegionObserverNative {
				export class OfflineRegionObserverPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegionObserverNative.OfflineRegionObserverPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionStatus extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionStatus>;
				public getCompletedTileSize(): number;
				public getCompletedTileCount(): number;
				public hashCode(): number;
				public getCompletedResourceCount(): number;
				public getRequiredResourceCountIsPrecise(): boolean;
				public constructor(downlo_95a: com.mapbox.maps.OfflineRegionDownloadState, comple_3d1: number, comple_463: number, comple_725: number, requir_86b: number, comple_517: number, requir_7eb: number, requir_b1c: boolean);
				public getCompletedResourceSize(): number;
				public toString(): string;
				public getRequiredResourceCount(): number;
				public getDownloadState(): com.mapbox.maps.OfflineRegionDownloadState;
				public equals(object: any): boolean;
				public getRequiredTileCount(): number;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionStatusCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionStatusCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.OfflineRegionStatusCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.OfflineRegionStatus>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.OfflineRegionStatus>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionStatusCallbackNative extends java.lang.Object implements com.mapbox.maps.OfflineRegionStatusCallback {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionStatusCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.OfflineRegionStatus>): void;
			}
			export namespace OfflineRegionStatusCallbackNative {
				export class OfflineRegionStatusCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegionStatusCallbackNative.OfflineRegionStatusCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class OfflineRegionTilePyramidDefinition extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.OfflineRegionTilePyramidDefinition>;
				public getStyleURL(): string;
				public getPixelRatio(): number;
				public toBuilder(): com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder;
				public getGlyphsRasterizationMode(): com.mapbox.maps.GlyphsRasterizationMode;
				public hashCode(): number;
				public getBounds(): com.mapbox.maps.CoordinateBounds;
				public toString(): string;
				public getMaxZoom(): number;
				public equals(object: any): boolean;
				public getMinZoom(): number;
			}
			export namespace OfflineRegionTilePyramidDefinition {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder>;
					public build(): com.mapbox.maps.OfflineRegionTilePyramidDefinition;
					public minZoom(minZoom: number): com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder;
					public styleURL(styleURL: string): com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder;
					public glyphsRasterizationMode(glyphs_22e: com.mapbox.maps.GlyphsRasterizationMode): com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder;
					public constructor();
					public bounds(bounds: com.mapbox.maps.CoordinateBounds): com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder;
					public pixelRatio(pixelRatio: number): com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder;
					public maxZoom(maxZoom: number): com.mapbox.maps.OfflineRegionTilePyramidDefinition.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PerFrameRenderingStatistics extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.PerFrameRenderingStatistics>;
				public getUploadDurationStatistics(): com.mapbox.maps.DurationStatistics;
				public hashCode(): number;
				public constructor(topRen_d24: java.util.List<com.mapbox.maps.GroupPerformanceStatistics>, topRen_dce: java.util.List<com.mapbox.maps.GroupPerformanceStatistics>, shadow_9fa: com.mapbox.maps.DurationStatistics, upload_5e7: com.mapbox.maps.DurationStatistics);
				public getShadowMapDurationStatistics(): com.mapbox.maps.DurationStatistics;
				public getTopRenderLayers(): java.util.List<com.mapbox.maps.GroupPerformanceStatistics>;
				public toString(): string;
				public getTopRenderGroups(): java.util.List<com.mapbox.maps.GroupPerformanceStatistics>;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PerformanceSamplerOptions {
				public static class: java.lang.Class<com.mapbox.maps.PerformanceSamplerOptions>;
				public static CUMULATIVE_RENDERING_STATS: com.mapbox.maps.PerformanceSamplerOptions;
				public static PER_FRAME_RENDERING_STATS: com.mapbox.maps.PerformanceSamplerOptions;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.PerformanceSamplerOptions;
				public static values(): androidNative.Array<com.mapbox.maps.PerformanceSamplerOptions>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PerformanceStatistics extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.PerformanceStatistics>;
				public hashCode(): number;
				public getCollectionDurationMillis(): number;
				public getCumulativeStatistics(): com.mapbox.maps.CumulativeRenderingStatistics;
				public getMapRenderDurationStatistics(): com.mapbox.maps.DurationStatistics;
				public toString(): string;
				public getPerFrameStatistics(): com.mapbox.maps.PerFrameRenderingStatistics;
				public constructor(collec_52b: number, mapRen_996: com.mapbox.maps.DurationStatistics, cumula_1bd: com.mapbox.maps.CumulativeRenderingStatistics, perFra_52e: com.mapbox.maps.PerFrameRenderingStatistics);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PerformanceStatisticsCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.PerformanceStatisticsCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.PerformanceStatisticsCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.PerformanceStatistics): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.PerformanceStatistics): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PerformanceStatisticsCallbackNative extends java.lang.Object implements com.mapbox.maps.PerformanceStatisticsCallback {
				public static class: java.lang.Class<com.mapbox.maps.PerformanceStatisticsCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.PerformanceStatistics): void;
			}
			export namespace PerformanceStatisticsCallbackNative {
				export class PerformanceStatisticsCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.PerformanceStatisticsCallbackNative.PerformanceStatisticsCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PerformanceStatisticsOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.PerformanceStatisticsOptions>;
				public getSamplingDurationMillis(): number;
				public hashCode(): number;
				public toBuilder(): com.mapbox.maps.PerformanceStatisticsOptions.Builder;
				public getSamplerOptions(): java.util.List<com.mapbox.maps.PerformanceSamplerOptions>;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace PerformanceStatisticsOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.PerformanceStatisticsOptions.Builder>;
					public samplerOptions(sample_2cb: java.util.List<com.mapbox.maps.PerformanceSamplerOptions>): com.mapbox.maps.PerformanceStatisticsOptions.Builder;
					public constructor();
					public build(): com.mapbox.maps.PerformanceStatisticsOptions;
					public samplingDurationMillis(sampli_6ee: number): com.mapbox.maps.PerformanceStatisticsOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PlatformEventInfo extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.PlatformEventInfo>;
				public constructor(type: com.mapbox.maps.PlatformEventType, screen_b07: com.mapbox.maps.ScreenCoordinate);
				public getScreenCoordinate(): com.mapbox.maps.ScreenCoordinate;
				public hashCode(): number;
				public toString(): string;
				public getType(): com.mapbox.maps.PlatformEventType;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PlatformEventType {
				public static class: java.lang.Class<com.mapbox.maps.PlatformEventType>;
				public static CLICK: com.mapbox.maps.PlatformEventType;
				public static LONG_CLICK: com.mapbox.maps.PlatformEventType;
				public static DRAG_BEGIN: com.mapbox.maps.PlatformEventType;
				public static DRAG: com.mapbox.maps.PlatformEventType;
				public static DRAG_END: com.mapbox.maps.PlatformEventType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.PlatformEventType;
				public static values(): androidNative.Array<com.mapbox.maps.PlatformEventType>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PlaybackFinished extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.PlaybackFinished>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.PlaybackFinished interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(): void;
				});
				public constructor();
				public run(): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class PlaybackFinishedNative extends java.lang.Object implements com.mapbox.maps.PlaybackFinished {
				public static class: java.lang.Class<com.mapbox.maps.PlaybackFinishedNative>;
				public run(): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace PlaybackFinishedNative {
				export class PlaybackFinishedPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.PlaybackFinishedNative.PlaybackFinishedPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ProjectedMeters extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ProjectedMeters>;
				public constructor(northing: number, easting: number);
				public hashCode(): number;
				public getNorthing(): number;
				public getEasting(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Projection extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.Projection>;
				public peer: number;
				public static getMetersPerPixelAtLatitude(param0: number, param1: number): number;
				public static coordinateForProjectedMeters(param0: com.mapbox.maps.ProjectedMeters): com.mapbox.geojson.Point;
				public static worldSize(param0: number): number;
				public static unproject(param0: com.mapbox.maps.MercatorCoordinate, param1: number): com.mapbox.geojson.Point;
				public static cleanNativePeer(param0: number): void;
				public static latLngToMercatorXY(param0: com.mapbox.geojson.Point): com.mapbox.maps.Vec2;
				public static projectedMetersForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ProjectedMeters;
				public constructor(peer: number);
				public static project(param0: com.mapbox.geojson.Point, param1: number): com.mapbox.maps.MercatorCoordinate;
				public static getLatitudeScale(param0: number): number;
			}
			export namespace Projection {
				export class ProjectionPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.Projection.ProjectionPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueriedFeature extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.QueriedFeature>;
				public constructor(feature: com.mapbox.geojson.Feature, source: string, source_c2d: string, state: com.mapbox.bindgen.Value, featur_332: com.mapbox.maps.FeaturesetFeatureId);
				public getFeaturesetFeatureId(): com.mapbox.maps.FeaturesetFeatureId;
				public hashCode(): number;
				public getFeature(): com.mapbox.geojson.Feature;
				public getSource(): string;
				public getState(): com.mapbox.bindgen.Value;
				public toString(): string;
				public getSourceLayer(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueriedRenderedFeature extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.QueriedRenderedFeature>;
				public constructor(querie_fc4: com.mapbox.maps.QueriedFeature, layers: java.util.List<string>, targets: java.util.List<com.mapbox.maps.FeaturesetQueryTarget>);
				public hashCode(): number;
				public getQueriedFeature(): com.mapbox.maps.QueriedFeature;
				public getLayers(): java.util.List<string>;
				public getTargets(): java.util.List<com.mapbox.maps.FeaturesetQueryTarget>;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueriedSourceFeature extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.QueriedSourceFeature>;
				public constructor(querie_fc4: com.mapbox.maps.QueriedFeature, target: com.mapbox.maps.FeaturesetQueryTarget);
				public hashCode(): number;
				public getQueriedFeature(): com.mapbox.maps.QueriedFeature;
				public toString(): string;
				public getTarget(): com.mapbox.maps.FeaturesetQueryTarget;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueryFeatureExtensionCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.QueryFeatureExtensionCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.QueryFeatureExtensionCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.FeatureExtensionValue>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.FeatureExtensionValue>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueryFeatureExtensionCallbackNative extends java.lang.Object implements com.mapbox.maps.QueryFeatureExtensionCallback {
				public static class: java.lang.Class<com.mapbox.maps.QueryFeatureExtensionCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.FeatureExtensionValue>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace QueryFeatureExtensionCallbackNative {
				export class QueryFeatureExtensionCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.QueryFeatureExtensionCallbackNative.QueryFeatureExtensionCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueryFeatureStateCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.QueryFeatureStateCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.QueryFeatureStateCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueryFeatureStateCallbackNative extends java.lang.Object implements com.mapbox.maps.QueryFeatureStateCallback {
				public static class: java.lang.Class<com.mapbox.maps.QueryFeatureStateCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>): void;
			}
			export namespace QueryFeatureStateCallbackNative {
				export class QueryFeatureStateCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.QueryFeatureStateCallbackNative.QueryFeatureStateCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueryRenderedFeaturesCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.QueryRenderedFeaturesCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.QueryRenderedFeaturesCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.QueriedRenderedFeature>>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.QueriedRenderedFeature>>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QueryRenderedFeaturesCallbackNative extends java.lang.Object implements com.mapbox.maps.QueryRenderedFeaturesCallback {
				public static class: java.lang.Class<com.mapbox.maps.QueryRenderedFeaturesCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.QueriedRenderedFeature>>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace QueryRenderedFeaturesCallbackNative {
				export class QueryRenderedFeaturesCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.QueryRenderedFeaturesCallbackNative.QueryRenderedFeaturesCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QuerySourceFeaturesCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.QuerySourceFeaturesCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.QuerySourceFeaturesCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.QueriedSourceFeature>>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.QueriedSourceFeature>>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class QuerySourceFeaturesCallbackNative extends java.lang.Object implements com.mapbox.maps.QuerySourceFeaturesCallback {
				public static class: java.lang.Class<com.mapbox.maps.QuerySourceFeaturesCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<string,java.util.List<com.mapbox.maps.QueriedSourceFeature>>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace QuerySourceFeaturesCallbackNative {
				export class QuerySourceFeaturesCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.QuerySourceFeaturesCallbackNative.QuerySourceFeaturesCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderFrameFinished extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.RenderFrameFinished>;
				public getNeedsRepaint(): boolean;
				public hashCode(): number;
				public constructor(renderMode: com.mapbox.maps.RenderModeType, needsR_d05: boolean, placem_bd4: boolean, timeIn_3e5: com.mapbox.maps.EventTimeInterval);
				public getRenderMode(): com.mapbox.maps.RenderModeType;
				public toString(): string;
				public equals(object: any): boolean;
				public getPlacementChanged(): boolean;
				public getTimeInterval(): com.mapbox.maps.EventTimeInterval;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderFrameFinishedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.RenderFrameFinishedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.RenderFrameFinishedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.RenderFrameFinished): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.RenderFrameFinished): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderFrameFinishedCallbackNative extends java.lang.Object implements com.mapbox.maps.RenderFrameFinishedCallback {
				public static class: java.lang.Class<com.mapbox.maps.RenderFrameFinishedCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.RenderFrameFinished): void;
			}
			export namespace RenderFrameFinishedCallbackNative {
				export class RenderFrameFinishedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.RenderFrameFinishedCallbackNative.RenderFrameFinishedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderFrameStarted extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.RenderFrameStarted>;
				public getTimestamp(): java.util.Date;
				public hashCode(): number;
				public toString(): string;
				public constructor(timestamp: java.util.Date);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderFrameStartedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.RenderFrameStartedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.RenderFrameStartedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.RenderFrameStarted): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.RenderFrameStarted): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderFrameStartedCallbackNative extends java.lang.Object implements com.mapbox.maps.RenderFrameStartedCallback {
				public static class: java.lang.Class<com.mapbox.maps.RenderFrameStartedCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.RenderFrameStarted): void;
			}
			export namespace RenderFrameStartedCallbackNative {
				export class RenderFrameStartedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.RenderFrameStartedCallbackNative.RenderFrameStartedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderModeType {
				public static class: java.lang.Class<com.mapbox.maps.RenderModeType>;
				public static PARTIAL: com.mapbox.maps.RenderModeType;
				public static FULL: com.mapbox.maps.RenderModeType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.RenderModeType;
				public static values(): androidNative.Array<com.mapbox.maps.RenderModeType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderedQueryGeometry extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.RenderedQueryGeometry>;
				public constructor(value: com.mapbox.maps.ScreenCoordinate);
				public static valueOf(value: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.RenderedQueryGeometry;
				public isList(): boolean;
				public getScreenCoordinate(): com.mapbox.maps.ScreenCoordinate;
				public static valueOf(value: java.util.List<com.mapbox.maps.ScreenCoordinate>): com.mapbox.maps.RenderedQueryGeometry;
				public getScreenBox(): com.mapbox.maps.ScreenBox;
				public toString(): string;
				public isScreenCoordinate(): boolean;
				public getList(): java.util.List<com.mapbox.maps.ScreenCoordinate>;
				public static valueOf(value: com.mapbox.maps.ScreenBox): com.mapbox.maps.RenderedQueryGeometry;
				public constructor(value: java.util.List<com.mapbox.maps.ScreenCoordinate>);
				public isScreenBox(): boolean;
				public constructor(value: com.mapbox.maps.ScreenBox);
				public getTypeInfo(): com.mapbox.maps.RenderedQueryGeometry.Type;
			}
			export namespace RenderedQueryGeometry {
				export class Type {
					public static class: java.lang.Class<com.mapbox.maps.RenderedQueryGeometry.Type>;
					public static SCREEN_BOX: com.mapbox.maps.RenderedQueryGeometry.Type;
					public static SCREEN_COORDINATE: com.mapbox.maps.RenderedQueryGeometry.Type;
					public static LIST: com.mapbox.maps.RenderedQueryGeometry.Type;
					public static valueOf(name: string): com.mapbox.maps.RenderedQueryGeometry.Type;
					public static values(): androidNative.Array<com.mapbox.maps.RenderedQueryGeometry.Type>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RenderedQueryOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.RenderedQueryOptions>;
				public constructor(layerIds: java.util.List<string>, filter: com.mapbox.bindgen.Value);
				public getLayerIds(): java.util.List<string>;
				public getFilter(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RequestDataSourceType {
				public static class: java.lang.Class<com.mapbox.maps.RequestDataSourceType>;
				public static ASSET: com.mapbox.maps.RequestDataSourceType;
				public static DATABASE: com.mapbox.maps.RequestDataSourceType;
				public static FILE_SYSTEM: com.mapbox.maps.RequestDataSourceType;
				public static NETWORK: com.mapbox.maps.RequestDataSourceType;
				public static RESOURCE_LOADER: com.mapbox.maps.RequestDataSourceType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.RequestDataSourceType;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.maps.RequestDataSourceType>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RequestErrorType {
				public static class: java.lang.Class<com.mapbox.maps.RequestErrorType>;
				public static SUCCESS: com.mapbox.maps.RequestErrorType;
				public static NOT_FOUND: com.mapbox.maps.RequestErrorType;
				public static SERVER: com.mapbox.maps.RequestErrorType;
				public static CONNECTION: com.mapbox.maps.RequestErrorType;
				public static RATE_LIMIT: com.mapbox.maps.RequestErrorType;
				public static IN_OFFLINE_MODE: com.mapbox.maps.RequestErrorType;
				public static OTHER: com.mapbox.maps.RequestErrorType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.RequestErrorType;
				public static values(): androidNative.Array<com.mapbox.maps.RequestErrorType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RequestInfo extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.RequestInfo>;
				public getLoadingMethod(): java.util.List<com.mapbox.maps.RequestLoadingMethodType>;
				public hashCode(): number;
				public getUrl(): string;
				public constructor(url: string, resource: com.mapbox.maps.RequestResourceType, priority: com.mapbox.maps.RequestPriorityType, loadin_05e: java.util.List<com.mapbox.maps.RequestLoadingMethodType>);
				public getResource(): com.mapbox.maps.RequestResourceType;
				public getPriority(): com.mapbox.maps.RequestPriorityType;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RequestLoadingMethodType {
				public static class: java.lang.Class<com.mapbox.maps.RequestLoadingMethodType>;
				public static NETWORK: com.mapbox.maps.RequestLoadingMethodType;
				public static CACHE: com.mapbox.maps.RequestLoadingMethodType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.RequestLoadingMethodType>;
				public static valueOf(name: string): com.mapbox.maps.RequestLoadingMethodType;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RequestPriorityType {
				public static class: java.lang.Class<com.mapbox.maps.RequestPriorityType>;
				public static REGULAR: com.mapbox.maps.RequestPriorityType;
				public static LOW: com.mapbox.maps.RequestPriorityType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.RequestPriorityType>;
				public static valueOf(name: string): com.mapbox.maps.RequestPriorityType;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RequestResourceType {
				public static class: java.lang.Class<com.mapbox.maps.RequestResourceType>;
				public static UNKNOWN: com.mapbox.maps.RequestResourceType;
				public static STYLE: com.mapbox.maps.RequestResourceType;
				public static SOURCE: com.mapbox.maps.RequestResourceType;
				public static TILE: com.mapbox.maps.RequestResourceType;
				public static GLYPHS: com.mapbox.maps.RequestResourceType;
				public static SPRITE_IMAGE: com.mapbox.maps.RequestResourceType;
				public static SPRITE_JSON: com.mapbox.maps.RequestResourceType;
				public static IMAGE: com.mapbox.maps.RequestResourceType;
				public static MODEL: com.mapbox.maps.RequestResourceType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.RequestResourceType>;
				public static valueOf(name: string): com.mapbox.maps.RequestResourceType;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ResourceRequest extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ResourceRequest>;
				public getSource(): com.mapbox.maps.RequestDataSourceType;
				public getCancelled(): boolean;
				public hashCode(): number;
				public getRequest(): com.mapbox.maps.RequestInfo;
				public toString(): string;
				public getResponse(): com.mapbox.maps.ResponseInfo;
				public constructor(source: com.mapbox.maps.RequestDataSourceType, request: com.mapbox.maps.RequestInfo, response: com.mapbox.maps.ResponseInfo, cancelled: boolean, timeIn_3e5: com.mapbox.maps.EventTimeInterval);
				public equals(object: any): boolean;
				public getTimeInterval(): com.mapbox.maps.EventTimeInterval;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ResourceRequestCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.ResourceRequestCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.ResourceRequestCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.ResourceRequest): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.ResourceRequest): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ResourceRequestCallbackNative extends java.lang.Object implements com.mapbox.maps.ResourceRequestCallback {
				public static class: java.lang.Class<com.mapbox.maps.ResourceRequestCallbackNative>;
				public run(param0: com.mapbox.maps.ResourceRequest): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace ResourceRequestCallbackNative {
				export class ResourceRequestCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.ResourceRequestCallbackNative.ResourceRequestCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ResourceRequestError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ResourceRequestError>;
				public constructor(reason: com.mapbox.maps.RequestErrorType, message: string);
				public hashCode(): number;
				public getMessage(): string;
				public toString(): string;
				public equals(object: any): boolean;
				public getReason(): com.mapbox.maps.RequestErrorType;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ResponseInfo extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ResponseInfo>;
				public constructor(noContent: boolean, notMod_331: boolean, mustRe_c1f: boolean, source: com.mapbox.maps.ResponseSourceType, size: number, modified: java.util.Date, expires: java.util.Date, etag: string, error: com.mapbox.maps.ResourceRequestError);
				public getMustRevalidate(): boolean;
				public toString(): string;
				public getExpires(): java.util.Date;
				public getError(): com.mapbox.maps.ResourceRequestError;
				public equals(object: any): boolean;
				public getSource(): com.mapbox.maps.ResponseSourceType;
				public getNoContent(): boolean;
				public getModified(): java.util.Date;
				public getNotModified(): boolean;
				public getSize(): number;
				public hashCode(): number;
				public getEtag(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ResponseSourceType {
				public static class: java.lang.Class<com.mapbox.maps.ResponseSourceType>;
				public static NETWORK: com.mapbox.maps.ResponseSourceType;
				public static CACHE: com.mapbox.maps.ResponseSourceType;
				public static TILE_STORE: com.mapbox.maps.ResponseSourceType;
				public static LOCAL_FILE: com.mapbox.maps.ResponseSourceType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.ResponseSourceType;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.maps.ResponseSourceType>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class RuntimeStylingOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.RuntimeStylingOptions>;
				public getCompletedCallback(): com.mapbox.maps.StyleManagerCallback;
				public getErrorCallback(): com.mapbox.maps.StyleManagerErrorCallback;
				public hashCode(): number;
				public getLayersCallback(): com.mapbox.maps.StyleManagerCallback;
				public getCanceledCallback(): com.mapbox.maps.StyleManagerCallback;
				public toBuilder(): com.mapbox.maps.RuntimeStylingOptions.Builder;
				public getSourcesCallback(): com.mapbox.maps.StyleManagerCallback;
				public toString(): string;
				public getImagesCallback(): com.mapbox.maps.StyleManagerCallback;
				public equals(object: any): boolean;
			}
			export namespace RuntimeStylingOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.RuntimeStylingOptions.Builder>;
					public constructor();
					public canceledCallback(cancel_efd: com.mapbox.maps.StyleManagerCallback): com.mapbox.maps.RuntimeStylingOptions.Builder;
					public layersCallback(layers_548: com.mapbox.maps.StyleManagerCallback): com.mapbox.maps.RuntimeStylingOptions.Builder;
					public completedCallback(comple_825: com.mapbox.maps.StyleManagerCallback): com.mapbox.maps.RuntimeStylingOptions.Builder;
					public imagesCallback(images_534: com.mapbox.maps.StyleManagerCallback): com.mapbox.maps.RuntimeStylingOptions.Builder;
					public errorCallback(errorC_552: com.mapbox.maps.StyleManagerErrorCallback): com.mapbox.maps.RuntimeStylingOptions.Builder;
					public sourcesCallback(source_5f2: com.mapbox.maps.StyleManagerCallback): com.mapbox.maps.RuntimeStylingOptions.Builder;
					public build(): com.mapbox.maps.RuntimeStylingOptions;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ScreenBox extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ScreenBox>;
				public hashCode(): number;
				public toString(): string;
				public constructor(min: com.mapbox.maps.ScreenCoordinate, max: com.mapbox.maps.ScreenCoordinate);
				public getMin(): com.mapbox.maps.ScreenCoordinate;
				public getMax(): com.mapbox.maps.ScreenCoordinate;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ScreenCoordinate extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ScreenCoordinate>;
				public constructor(x: number, y: number);
				public getX(): number;
				public hashCode(): number;
				public getY(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Size extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.Size>;
				public getWidth(): number;
				public getHeight(): number;
				public hashCode(): number;
				public constructor(width: number, height: number);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SnapshotCompleteCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotCompleteCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.SnapshotCompleteCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.MapSnapshot>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.MapSnapshot>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SnapshotCompleteCallbackNative extends java.lang.Object implements com.mapbox.maps.SnapshotCompleteCallback {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotCompleteCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<string,com.mapbox.maps.MapSnapshot>): void;
			}
			export namespace SnapshotCompleteCallbackNative {
				export class SnapshotCompleteCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.SnapshotCompleteCallbackNative.SnapshotCompleteCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export abstract class SnapshotOverlay extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotOverlay>;
				public screenCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
				public getCanvas(): globalAndroid.graphics.Canvas;
				public coordinate(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
				public getAttributions(): java.util.List<string>;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SnapshotOverlayCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotOverlayCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.SnapshotOverlayCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onSnapshotOverlay(param0: com.mapbox.maps.SnapshotOverlay): void;
				});
				public constructor();
				public onSnapshotOverlay(param0: com.mapbox.maps.SnapshotOverlay): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SnapshotOverlayOptions extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotOverlayOptions>;
				public copy(showLogo: boolean, showAt_95d: boolean): com.mapbox.maps.SnapshotOverlayOptions;
				public component2(): boolean;
				public equals(other: any): boolean;
				public hashCode(): number;
				public constructor(showLogo: boolean, showAt_95d: boolean);
				public component1(): boolean;
				public getShowAttributes(): boolean;
				public toString(): string;
				public constructor(showLogo: boolean);
				public getShowLogo(): boolean;
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SnapshotResultCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotResultCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.SnapshotResultCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onSnapshotResult(param0: globalAndroid.graphics.Bitmap, param1: string): void;
				});
				public constructor();
				public onSnapshotResult(param0: globalAndroid.graphics.Bitmap, param1: string): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SnapshotStyleListener extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotStyleListener>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.SnapshotStyleListener interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onDidFinishLoadingStyle(param0: com.mapbox.maps.Style): void;
					onDidFullyLoadStyle(param0: com.mapbox.maps.Style): void;
					onDidFailLoadingStyle(param0: string): void;
					onStyleImageMissing(param0: string): void;
				});
				public constructor();
				public onDidFailLoadingStyle(param0: string): void;
				public onStyleImageMissing(param0: string): void;
				public onDidFinishLoadingStyle(param0: com.mapbox.maps.Style): void;
				public onDidFullyLoadStyle(param0: com.mapbox.maps.Style): void;
			}
			export namespace SnapshotStyleListener {
				export class DefaultImpls extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.SnapshotStyleListener.DefaultImpls>;
					public static onDidFailLoadingStyle(this_: com.mapbox.maps.SnapshotStyleListener, message: string): void;
					public static onDidFullyLoadStyle(this_: com.mapbox.maps.SnapshotStyleListener, style: com.mapbox.maps.Style): void;
					public static onStyleImageMissing(this_: com.mapbox.maps.SnapshotStyleListener, imageId: string): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Snapshotter extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.Snapshotter>;
				public constructor(this_: globalAndroid.content.Context, context: com.mapbox.maps.MapSnapshotOptions, options: com.mapbox.maps.SnapshotOverlayOptions);
				public setStyleJson(styleJson: string): void;
				public getStyleUri(): string;
				public coordinateBoundsForCamera(options: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
				public getStyleJson(): string;
				public setStyleUri(styleUri: string): void;
				public setSize(size: com.mapbox.maps.Size): void;
				public setCamera(camera_b60: com.mapbox.maps.CameraOptions): void;
				public start(overla_afc: com.mapbox.maps.SnapshotOverlayCallback, result_10f: com.mapbox.maps.SnapshotResultCallback): void;
				public constructor(context: globalAndroid.content.Context, options: com.mapbox.maps.MapSnapshotOptions);
				public static clearData(callback: com.mapbox.maps.AsyncOperationResultCallback): void;
				public cameraForCoordinates(this_c_df6: java.util.List<com.mapbox.geojson.Point>, i_f_ca_e37: com.mapbox.maps.EdgeInsets, this_: java.lang.Double, coordi_628: java.lang.Double): com.mapbox.maps.CameraOptions;
				public destroy(): void;
				public setStyleListener(listener: com.mapbox.maps.SnapshotStyleListener): void;
				public tileCover(tileCo_1fa: com.mapbox.maps.TileCoverOptions, camera_b60: com.mapbox.maps.CameraOptions): java.util.List<com.mapbox.maps.CanonicalTileID>;
				public cancel(): void;
				public getCameraState(): com.mapbox.maps.CameraState;
				public getSize(): com.mapbox.maps.Size;
			}
			export namespace Snapshotter {
				export namespace Snapshotter {
					export namespace Companion {
						function clearData(callback: com.mapbox.maps.AsyncOperationResultCallback): void;
						function clearData(callback: com.mapbox.maps.AsyncOperationResultCallback): void;
					}
				}
				export class Logo extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.Snapshotter.Logo>;
					public toString(): string;
					public getSmall(): globalAndroid.graphics.Bitmap;
					public component3(): number;
					public copy(large: globalAndroid.graphics.Bitmap, small: globalAndroid.graphics.Bitmap, scale: number): com.mapbox.maps.Snapshotter.Logo;
					public component1(): globalAndroid.graphics.Bitmap;
					public equals(other: any): boolean;
					public component2(): globalAndroid.graphics.Bitmap;
					public getScale(): number;
					public hashCode(): number;
					public getLarge(): globalAndroid.graphics.Bitmap;
					public constructor(large: globalAndroid.graphics.Bitmap, small: globalAndroid.graphics.Bitmap, scale: number);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SnapshotterDestroyedException extends java.lang.IllegalStateException {
				public static class: java.lang.Class<com.mapbox.maps.SnapshotterDestroyedException>;
				public constructor(s: string);
				public constructor(cause: java.lang.Throwable);
				public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				public constructor(message: string, cause: java.lang.Throwable);
				public constructor();
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceAdded extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.SourceAdded>;
				public constructor(sourceId: string, timestamp: java.util.Date);
				public getTimestamp(): java.util.Date;
				public hashCode(): number;
				public getSourceId(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceAddedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SourceAddedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.SourceAddedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.SourceAdded): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.SourceAdded): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceAddedCallbackNative extends java.lang.Object implements com.mapbox.maps.SourceAddedCallback {
				public static class: java.lang.Class<com.mapbox.maps.SourceAddedCallbackNative>;
				public run(param0: com.mapbox.maps.SourceAdded): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace SourceAddedCallbackNative {
				export class SourceAddedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.SourceAddedCallbackNative.SourceAddedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceDataLoaded extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.SourceDataLoaded>;
				public constructor(sourceId: string, type: com.mapbox.maps.SourceDataLoadedType, loaded: java.lang.Boolean, tileId: com.mapbox.maps.CanonicalTileID, dataId: string, timeIn_3e5: com.mapbox.maps.EventTimeInterval);
				public getType(): com.mapbox.maps.SourceDataLoadedType;
				public getDataId(): string;
				public hashCode(): number;
				public getSourceId(): string;
				public getTileId(): com.mapbox.maps.CanonicalTileID;
				public getLoaded(): java.lang.Boolean;
				public toString(): string;
				public equals(object: any): boolean;
				public getTimeInterval(): com.mapbox.maps.EventTimeInterval;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceDataLoadedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SourceDataLoadedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.SourceDataLoadedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.SourceDataLoaded): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.SourceDataLoaded): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceDataLoadedCallbackNative extends java.lang.Object implements com.mapbox.maps.SourceDataLoadedCallback {
				public static class: java.lang.Class<com.mapbox.maps.SourceDataLoadedCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.SourceDataLoaded): void;
			}
			export namespace SourceDataLoadedCallbackNative {
				export class SourceDataLoadedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.SourceDataLoadedCallbackNative.SourceDataLoadedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceDataLoadedType {
				public static class: java.lang.Class<com.mapbox.maps.SourceDataLoadedType>;
				public static METADATA: com.mapbox.maps.SourceDataLoadedType;
				public static TILE: com.mapbox.maps.SourceDataLoadedType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.SourceDataLoadedType;
				public static values(): androidNative.Array<com.mapbox.maps.SourceDataLoadedType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceQueryOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.SourceQueryOptions>;
				public constructor(source_ef1: java.util.List<string>, filter: com.mapbox.bindgen.Value);
				public getFilter(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public toString(): string;
				public getSourceLayerIds(): java.util.List<string>;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceRemoved extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.SourceRemoved>;
				public constructor(sourceId: string, timestamp: java.util.Date);
				public getTimestamp(): java.util.Date;
				public hashCode(): number;
				public getSourceId(): string;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceRemovedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.SourceRemovedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.SourceRemovedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.SourceRemoved): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.SourceRemoved): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class SourceRemovedCallbackNative extends java.lang.Object implements com.mapbox.maps.SourceRemovedCallback {
				public static class: java.lang.Class<com.mapbox.maps.SourceRemovedCallbackNative>;
				public run(param0: com.mapbox.maps.SourceRemoved): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace SourceRemovedCallbackNative {
				export class SourceRemovedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.SourceRemovedCallbackNative.SourceRemovedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Style extends com.mapbox.maps.MapboxStyleManager {
				public static class: java.lang.Class<com.mapbox.maps.Style>;
				public static STANDARD: string; // "mapbox://styles/mapbox/standard"
				public static STANDARD_SATELLITE: string; // "mapbox://styles/mapbox/standard-satellite"
				public static MAPBOX_STREETS: string; // "mapbox://styles/mapbox/streets-v12"
				public static OUTDOORS: string; // "mapbox://styles/mapbox/outdoors-v12"
				public static LIGHT: string; // "mapbox://styles/mapbox/light-v11"
				public static DARK: string; // "mapbox://styles/mapbox/dark-v11"
				public static SATELLITE: string; // "mapbox://styles/mapbox/satellite-v9"
				public static SATELLITE_STREETS: string; // "mapbox://styles/mapbox/satellite-streets-v12"
				public static TRAFFIC_DAY: string; // "mapbox://styles/mapbox/traffic-day-v2"
				public static TRAFFIC_NIGHT: string; // "mapbox://styles/mapbox/traffic-night-v2"
				public removeStyleSource(sourceId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleLayer(layerId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImportConfigProperties(importId: string): com.mapbox.bindgen.Expected<string,java.util.HashMap<string,com.mapbox.maps.StylePropertyValue>>;
				public getStyleImportConfigProperty(importId: string, config: string): com.mapbox.bindgen.Expected<string,com.mapbox.maps.StylePropertyValue>;
				public addPersistentStyleLayer(properties: com.mapbox.bindgen.Value, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleImportFromURI(importId: string, uri: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>, import_c87: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public hasStyleImage(imageId: string): boolean;
				public setStyleLayerProperties(layerId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLights(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setStyleCustomRasterSourceTileData(sourceId: string, tiles: java.util.List<com.mapbox.maps.CustomRasterSourceTileData>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleCustomGeometrySourceTileData(sourceId: string, tileId: com.mapbox.maps.CanonicalTileID, featur_b09: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSourceProperty(sourceId: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleImportFromJSON(importId: string, json: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>, import_c87: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public moveStyleLayer(layerId: string, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleTransition(transi_54c: com.mapbox.maps.TransitionOptions): void;
				public getStyleSlots(): java.util.List<string>;
				public getStyleImage(imageId: string): com.mapbox.maps.Image;
				public isStyleLayerPersistent(layerId: string): com.mapbox.bindgen.Expected<string,java.lang.Boolean>;
				public isStyleLoaded(): boolean;
				public removeStyleImport(importId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getFeaturesets(): java.util.List<com.mapbox.maps.FeaturesetDescriptor>;
				public addPersistentStyleCustomLayer(layerId: string, layerHost: com.mapbox.maps.CustomLayerHost, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSourceProperties(sourceId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleAtmosphereProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public getStyleURI(): string;
				public getStyleProjectionProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleImportConfigProperties(importId: string, configs: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public styleSourceExists(sourceId: string): boolean;
				public setStyleAtmosphereProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public hasStyleModel(modelId: string): boolean;
				public styleLayerExists(layerId: string): boolean;
				public getStyleSources(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setImportColorTheme(importId: string, colorTheme: com.mapbox.maps.ColorTheme): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public markInvalid$maps_sdk_release(): void;
				public addStyleModel(modelId: string, modelUri: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateGeoJSONSourceFeatures(sourceId: string, dataId: string, features: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleColorTheme(image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleDefaultCamera(): com.mapbox.maps.CameraOptions;
				public setStyleColorTheme(colorTheme: com.mapbox.maps.ColorTheme): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleColorTheme(base64: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleLights(lights: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleLayer(parameters: com.mapbox.bindgen.Value, position: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImportWithURI(importId: string, uri: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public invalidateStyleCustomGeometrySourceTile(sourceId: string, tileId: com.mapbox.maps.CanonicalTileID): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleModel(modelId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public constructor(styleM_755: com.mapbox.maps.StyleManager, pixelRatio: number, mapLoa_62c: com.mapbox.maps.MapLoadingErrorDelegate);
				public addStyleCustomLayer(layerId: string, layerHost: com.mapbox.maps.CustomLayerHost, layerP_541: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImports(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setStyleProjection(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleTerrain(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleTransition(): com.mapbox.maps.TransitionOptions;
				public invalidateStyleCustomGeometrySourceRegion(sourceId: string, coordi_d26: com.mapbox.maps.CoordinateBounds): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleProjectionProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addGeoJSONSourceFeatures(sourceId: string, dataId: string, features: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleJSON(): string;
				public setStyleTerrainProperty(property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleImportConfigProperty(importId: string, config: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleGlyphURL(): string;
				public setImportColorTheme(importId: string, bitmap: globalAndroid.graphics.Bitmap): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleTerrainProperty(property: string): com.mapbox.maps.StylePropertyValue;
				public getStyleLightProperty(id: string, property: string): com.mapbox.maps.StylePropertyValue;
				public setImportColorTheme(importId: string, base64: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImageSourceImage(sourceId: string, image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImportWithJSON(importId: string, json: string, config: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public moveStyleImport(importId: string, import_c87: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleImage(imageId: string, scale: number, image: com.mapbox.maps.Image, sdf: boolean, stretchX: java.util.List<com.mapbox.maps.ImageStretches>, stretchY: java.util.List<com.mapbox.maps.ImageStretches>, content: com.mapbox.maps.ImageContent): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleCustomGeometrySource(sourceId: string, options: com.mapbox.maps.CustomGeometrySourceOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public isValid(): boolean;
				public removeGeoJSONSourceFeatures(sourceId: string, dataId: string, featureIds: java.util.List<string>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleCustomRasterSource(sourceId: string, options: com.mapbox.maps.CustomRasterSourceOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleSource(sourceId: string, properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setImportColorTheme(importId: string, image: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSourceProperty(sourceId: string, property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleGeoJSONSourceData(sourceId: string, dataId: string, data: com.mapbox.maps.GeoJSONSourceData): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImportSchema(importId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public getStyleLayerProperty(layerId: string, property: string): com.mapbox.maps.StylePropertyValue;
				public setStyleLightProperty(id: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLayers(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setStyleGlyphURL(url: string): void;
				public setStyleColorTheme(bitmap: globalAndroid.graphics.Bitmap): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleAtmosphere(properties: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleLayerProperty(layerId: string, property: string, value: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleImage(imageId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSourceProperties(sourceId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public getStyleLayerProperties(layerId: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
			}
			export namespace Style {
				export namespace Style {
					export namespace Companion {
					}
				}
				export class OnStyleLoaded extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.Style.OnStyleLoaded>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.Style$OnStyleLoaded interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onStyleLoaded(param0: com.mapbox.maps.Style): void;
					});
					public constructor();
					public onStyleLoaded(param0: com.mapbox.maps.Style): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleDataLoaded extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StyleDataLoaded>;
				public constructor(type: com.mapbox.maps.StyleDataLoadedType, timeIn_3e5: com.mapbox.maps.EventTimeInterval);
				public getType(): com.mapbox.maps.StyleDataLoadedType;
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
				public getTimeInterval(): com.mapbox.maps.EventTimeInterval;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleDataLoadedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StyleDataLoadedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StyleDataLoadedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.StyleDataLoaded): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.StyleDataLoaded): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleDataLoadedCallbackNative extends java.lang.Object implements com.mapbox.maps.StyleDataLoadedCallback {
				public static class: java.lang.Class<com.mapbox.maps.StyleDataLoadedCallbackNative>;
				public run(param0: com.mapbox.maps.StyleDataLoaded): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace StyleDataLoadedCallbackNative {
				export class StyleDataLoadedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StyleDataLoadedCallbackNative.StyleDataLoadedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleDataLoadedType {
				public static class: java.lang.Class<com.mapbox.maps.StyleDataLoadedType>;
				public static STYLE: com.mapbox.maps.StyleDataLoadedType;
				public static SPRITE: com.mapbox.maps.StyleDataLoadedType;
				public static SOURCES: com.mapbox.maps.StyleDataLoadedType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.StyleDataLoadedType;
				public static values(): androidNative.Array<com.mapbox.maps.StyleDataLoadedType>;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleImageMissing extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StyleImageMissing>;
				public getTimestamp(): java.util.Date;
				public getImageId(): string;
				public hashCode(): number;
				public constructor(imageId: string, timestamp: java.util.Date);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleImageMissingCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StyleImageMissingCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StyleImageMissingCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.StyleImageMissing): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.StyleImageMissing): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleImageMissingCallbackNative extends java.lang.Object implements com.mapbox.maps.StyleImageMissingCallback {
				public static class: java.lang.Class<com.mapbox.maps.StyleImageMissingCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.StyleImageMissing): void;
			}
			export namespace StyleImageMissingCallbackNative {
				export class StyleImageMissingCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StyleImageMissingCallbackNative.StyleImageMissingCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleImageRemoveUnused extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StyleImageRemoveUnused>;
				public getTimestamp(): java.util.Date;
				public getImageId(): string;
				public hashCode(): number;
				public constructor(imageId: string, timestamp: java.util.Date);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleImageRemoveUnusedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StyleImageRemoveUnusedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StyleImageRemoveUnusedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.StyleImageRemoveUnused): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.StyleImageRemoveUnused): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleImageRemoveUnusedCallbackNative extends java.lang.Object implements com.mapbox.maps.StyleImageRemoveUnusedCallback {
				public static class: java.lang.Class<com.mapbox.maps.StyleImageRemoveUnusedCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.StyleImageRemoveUnused): void;
			}
			export namespace StyleImageRemoveUnusedCallbackNative {
				export class StyleImageRemoveUnusedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StyleImageRemoveUnusedCallbackNative.StyleImageRemoveUnusedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleLoaded extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StyleLoaded>;
				public constructor(timeIn_3e5: com.mapbox.maps.EventTimeInterval);
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
				public getTimeInterval(): com.mapbox.maps.EventTimeInterval;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleLoadedCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StyleLoadedCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StyleLoadedCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.StyleLoaded): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.StyleLoaded): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleLoadedCallbackNative extends java.lang.Object implements com.mapbox.maps.StyleLoadedCallback {
				public static class: java.lang.Class<com.mapbox.maps.StyleLoadedCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.StyleLoaded): void;
			}
			export namespace StyleLoadedCallbackNative {
				export class StyleLoadedCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StyleLoadedCallbackNative.StyleLoadedCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleManager extends com.mapbox.maps.Observable {
				public static class: java.lang.Class<com.mapbox.maps.StyleManager>;
				public getStyleAtmosphereProperty(param0: string): com.mapbox.maps.StylePropertyValue;
				public moveStyleLayer(param0: string, param1: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleModel(param0: string, param1: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLights(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setStyleLayerProperties(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleJSON(param0: string, param1: com.mapbox.maps.RuntimeStylingOptions): void;
				public setStyleLayerProperty(param0: string, param1: string, param2: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public isStyleLayerPersistent(param0: string): com.mapbox.bindgen.Expected<string,java.lang.Boolean>;
				public setStyleTransition(param0: com.mapbox.maps.TransitionOptions): void;
				public setStyleRain(param0: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImage(param0: string): com.mapbox.maps.Image;
				public getStyleSlots(): java.util.List<string>;
				public hasStyleModel(param0: string): boolean;
				public updateStyleImportWithJSON(param0: string, param1: string, param2: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImportSchema(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public addStyleImportFromJSON(param0: string, param1: string, param2: java.util.HashMap<string,com.mapbox.bindgen.Value>, param3: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public isStyleLoaded(): boolean;
				public getStyleImportConfigProperties(param0: string): com.mapbox.bindgen.Expected<string,java.util.HashMap<string,com.mapbox.maps.StylePropertyValue>>;
				public getStyleURI(): string;
				public static getStyleSourcePropertyDefaultValue(param0: string, param1: string): com.mapbox.maps.StylePropertyValue;
				public moveStyleImport(param0: string, param1: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleSource(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleLayerPropertyAsync(param0: string, param1: string, param2: com.mapbox.bindgen.Value, param3: com.mapbox.maps.AsyncOperationResultCallback): com.mapbox.common.Cancelable;
				public setStyleSourceProperties(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleLayer(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSources(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public getStyleFeaturesets(): java.util.List<com.mapbox.maps.FeaturesetDescriptor>;
				public setStyleCustomRasterSourceTileData(param0: string, param1: java.util.List<com.mapbox.maps.CustomRasterSourceTileData>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleURI(param0: string): void;
				public setStyleGlyphURL(param0: string): void;
				public addStyleImage(param0: string, param1: number, param2: com.mapbox.maps.Image, param3: boolean, param4: java.util.List<com.mapbox.maps.ImageStretches>, param5: java.util.List<com.mapbox.maps.ImageStretches>, param6: com.mapbox.maps.ImageContent): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSnowProperty(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleLayer(param0: com.mapbox.bindgen.Value, param1: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleSourceUnchecked(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLightProperty(param0: string, param1: string): com.mapbox.maps.StylePropertyValue;
				public setStyleTerrain(param0: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleProjectionProperty(param0: string): com.mapbox.maps.StylePropertyValue;
				public getStyleLayerProperty(param0: string, param1: string): com.mapbox.maps.StylePropertyValue;
				public cancelStyleLoading(): void;
				public setStyleImportConfigProperty(param0: string, param1: string, param2: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateGeoJSONSourceFeatures(param0: string, param1: string, param2: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleDefaultCamera(): com.mapbox.maps.CameraOptions;
				public setStyleColorTheme(param0: com.mapbox.maps.ColorTheme): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleImport(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeStyleModel(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public static getStyleLayerPropertyDefaultValue(param0: string, param1: string): com.mapbox.maps.StylePropertyValue;
				public styleSourceExists(param0: string): boolean;
				public setStyleLayerPropertiesAsync(param0: string, param1: com.mapbox.bindgen.Value, param2: com.mapbox.maps.AsyncOperationResultCallback): com.mapbox.common.Cancelable;
				public setStyleAtmosphereProperty(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public invalidateStyleCustomGeometrySourceRegion(param0: string, param1: com.mapbox.maps.CoordinateBounds): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public styleLayerExists(param0: string): boolean;
				public addGeoJSONSourceFeatures(param0: string, param1: string, param2: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImportWithURI(param0: string, param1: string, param2: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLayerProperties(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public addStyleCustomGeometrySource(param0: string, param1: com.mapbox.maps.CustomGeometrySourceOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleURI(param0: string, param1: com.mapbox.maps.RuntimeStylingOptions): void;
				public setImportColorTheme(param0: string, param1: com.mapbox.maps.ColorTheme): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addStyleSource(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleImports(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public getStyleTransition(): com.mapbox.maps.TransitionOptions;
				public setStyleJSON(param0: string): void;
				public hasStyleImage(param0: string): boolean;
				public addStyleCustomRasterSource(param0: string, param1: com.mapbox.maps.CustomRasterSourceOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public addPersistentStyleLayer(param0: com.mapbox.bindgen.Value, param1: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleRainProperty(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleProjectionProperty(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleJSON(): string;
				public getStyleGlyphURL(): string;
				public addStyleImportFromURI(param0: string, param1: string, param2: java.util.HashMap<string,com.mapbox.bindgen.Value>, param3: com.mapbox.maps.ImportPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleGeoJSONSourceData(param0: string, param1: string, param2: com.mapbox.maps.GeoJSONSourceData): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleImportConfigProperties(param0: string, param1: java.util.HashMap<string,com.mapbox.bindgen.Value>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleSnowProperty(param0: string): com.mapbox.maps.StylePropertyValue;
				public setStyleCustomGeometrySourceTileData(param0: string, param1: com.mapbox.maps.CanonicalTileID, param2: java.util.List<com.mapbox.geojson.Feature>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public removeGeoJSONSourceFeatures(param0: string, param1: string, param2: java.util.List<string>): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleLightProperty(param0: string, param1: string, param2: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setInitialStyleColorTheme(): void;
				public getStyleSourceProperty(param0: string, param1: string): com.mapbox.maps.StylePropertyValue;
				public getStyleSourceProperties(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.Value>;
				public removeStyleImage(param0: string): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public isStyleLoadingFinished(): boolean;
				public constructor(peer: number);
				public getStyleImportConfigProperty(param0: string, param1: string): com.mapbox.bindgen.Expected<string,com.mapbox.maps.StylePropertyValue>;
				public addPersistentStyleCustomLayer(param0: string, param1: com.mapbox.maps.CustomLayerHost, param2: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSnow(param0: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleSourceProperty(param0: string, param1: string, param2: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleProjection(param0: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleRainProperty(param0: string): com.mapbox.maps.StylePropertyValue;
				public setStyleLights(param0: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleLayers(): java.util.List<com.mapbox.maps.StyleObjectInfo>;
				public setStyleTerrainProperty(param0: string, param1: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public setStyleAtmosphere(param0: com.mapbox.bindgen.Value): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public updateStyleImageSourceImage(param0: string, param1: com.mapbox.maps.Image): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public static cleanNativePeer(param0: number): void;
				public invalidateStyleCustomGeometrySourceTile(param0: string, param1: com.mapbox.maps.CanonicalTileID): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
				public getStyleTerrainProperty(param0: string): com.mapbox.maps.StylePropertyValue;
				public addStyleCustomLayer(param0: string, param1: com.mapbox.maps.CustomLayerHost, param2: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
			}
			export namespace StyleManager {
				export class StyleManagerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StyleManager.StyleManagerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleManagerCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StyleManagerCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StyleManagerCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.StyleManager): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.StyleManager): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleManagerCallbackNative extends java.lang.Object implements com.mapbox.maps.StyleManagerCallback {
				public static class: java.lang.Class<com.mapbox.maps.StyleManagerCallbackNative>;
				public run(param0: com.mapbox.maps.StyleManager): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace StyleManagerCallbackNative {
				export class StyleManagerCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StyleManagerCallbackNative.StyleManagerCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleManagerErrorCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StyleManagerErrorCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StyleManagerErrorCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.StyleManager, param1: com.mapbox.maps.MapLoadingError): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.StyleManager, param1: com.mapbox.maps.MapLoadingError): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleManagerErrorCallbackNative extends java.lang.Object implements com.mapbox.maps.StyleManagerErrorCallback {
				public static class: java.lang.Class<com.mapbox.maps.StyleManagerErrorCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.StyleManager, param1: com.mapbox.maps.MapLoadingError): void;
			}
			export namespace StyleManagerErrorCallbackNative {
				export class StyleManagerErrorCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StyleManagerErrorCallbackNative.StyleManagerErrorCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleObjectInfo extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StyleObjectInfo>;
				public constructor(id: string, type: string);
				public getType(): string;
				public getId(): string;
				public hashCode(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StyleObserver extends java.lang.Object implements com.mapbox.maps.StyleLoadedCallback, com.mapbox.maps.MapLoadingErrorCallback, com.mapbox.maps.StyleDataLoadedCallback {
				public static class: java.lang.Class<com.mapbox.maps.StyleObserver>;
				public static TAG: string; // "Mbgl-StyleObserver"
				public constructor(this_i_12e: com.mapbox.maps.StyleManager, this_: com.mapbox.maps.Style.OnStyleLoaded, styleM_755: com.mapbox.maps.NativeObserver, styleL_1f7: number, native_dfc: com.mapbox.maps.MapLoadingErrorDelegate);
				public addGetStyleListener(loaded_138: com.mapbox.maps.Style.OnStyleLoaded): void;
				public run(eventData: com.mapbox.maps.MapLoadingError): void;
				public run(param0: com.mapbox.maps.MapLoadingError): void;
				public setLoadStyleListener(userOn_df1: com.mapbox.maps.Style.OnStyleLoaded, styleD_e96: com.mapbox.maps.Style.OnStyleLoaded, styleD_315: com.mapbox.maps.Style.OnStyleLoaded, styleD_bf1: com.mapbox.maps.Style.OnStyleLoaded): void;
				public run(it: com.mapbox.maps.StyleLoaded): void;
				public run(param0: com.mapbox.maps.StyleDataLoaded): void;
				public getCancelableList(): java.util.concurrent.CopyOnWriteArraySet<com.mapbox.common.Cancelable>;
				public onDestroy(): void;
				public run(it: com.mapbox.maps.StyleDataLoaded): void;
				public run(param0: com.mapbox.maps.StyleLoaded): void;
			}
			export namespace StyleObserver {
				export namespace StyleObserver {
					export namespace Companion {
					}
				}
				export class WhenMappings extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.StyleObserver.WhenMappings>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePack extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StylePack>;
				public getGlyphsRasterizationMode(): com.mapbox.maps.GlyphsRasterizationMode;
				public hashCode(): number;
				public getExtraData(): com.mapbox.bindgen.Value;
				public getCompletedResourceCount(): number;
				public getStyleURI(): string;
				public getCompletedResourceSize(): number;
				public toString(): string;
				public getRequiredResourceCount(): number;
				public getExpires(): java.util.Date;
				public constructor(styleURI: string, glyphs_22e: com.mapbox.maps.GlyphsRasterizationMode, requir_7eb: number, comple_3d1: number, comple_463: number, expires: java.util.Date, extraData: com.mapbox.bindgen.Value);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StylePackCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StylePackCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,com.mapbox.maps.StylePack>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,com.mapbox.maps.StylePack>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackCallbackNative extends java.lang.Object implements com.mapbox.maps.StylePackCallback {
				public static class: java.lang.Class<com.mapbox.maps.StylePackCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,com.mapbox.maps.StylePack>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace StylePackCallbackNative {
				export class StylePackCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StylePackCallbackNative.StylePackCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackError extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StylePackError>;
				public hashCode(): number;
				public constructor(type: com.mapbox.maps.StylePackErrorType, message: string);
				public getMessage(): string;
				public toString(): string;
				public getType(): com.mapbox.maps.StylePackErrorType;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackErrorType {
				public static class: java.lang.Class<com.mapbox.maps.StylePackErrorType>;
				public static CANCELED: com.mapbox.maps.StylePackErrorType;
				public static DOES_NOT_EXIST: com.mapbox.maps.StylePackErrorType;
				public static DISK_FULL: com.mapbox.maps.StylePackErrorType;
				public static OTHER: com.mapbox.maps.StylePackErrorType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.StylePackErrorType;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.maps.StylePackErrorType>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackLoadOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StylePackLoadOptions>;
				public getExtraOptions(): com.mapbox.bindgen.Value;
				public getGlyphsRasterizationMode(): com.mapbox.maps.GlyphsRasterizationMode;
				public hashCode(): number;
				public toBuilder(): com.mapbox.maps.StylePackLoadOptions.Builder;
				public getAcceptExpired(): boolean;
				public getMetadata(): com.mapbox.bindgen.Value;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace StylePackLoadOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.StylePackLoadOptions.Builder>;
					public build(): com.mapbox.maps.StylePackLoadOptions;
					public constructor();
					public extraOptions(extraO_f11: com.mapbox.bindgen.Value): com.mapbox.maps.StylePackLoadOptions.Builder;
					public glyphsRasterizationMode(glyphs_22e: com.mapbox.maps.GlyphsRasterizationMode): com.mapbox.maps.StylePackLoadOptions.Builder;
					public metadata(metadata: com.mapbox.bindgen.Value): com.mapbox.maps.StylePackLoadOptions.Builder;
					public acceptExpired(accept_e36: boolean): com.mapbox.maps.StylePackLoadOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackLoadProgress extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StylePackLoadProgress>;
				public getLoadedResourceCount(): number;
				public getLoadedResourceSize(): number;
				public hashCode(): number;
				public getErroredResourceCount(): number;
				public getCompletedResourceCount(): number;
				public getCompletedResourceSize(): number;
				public toString(): string;
				public getRequiredResourceCount(): number;
				public constructor(comple_3d1: number, comple_463: number, errore_d93: number, requir_7eb: number, loaded_04b: number, loaded_4cd: number);
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackLoadProgressCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StylePackLoadProgressCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StylePackLoadProgressCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.StylePackLoadProgress): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.StylePackLoadProgress): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackLoadProgressCallbackNative extends java.lang.Object implements com.mapbox.maps.StylePackLoadProgressCallback {
				public static class: java.lang.Class<com.mapbox.maps.StylePackLoadProgressCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.StylePackLoadProgress): void;
			}
			export namespace StylePackLoadProgressCallbackNative {
				export class StylePackLoadProgressCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StylePackLoadProgressCallbackNative.StylePackLoadProgressCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackMetadataCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StylePackMetadataCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StylePackMetadataCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,com.mapbox.bindgen.Value>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,com.mapbox.bindgen.Value>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePackMetadataCallbackNative extends java.lang.Object implements com.mapbox.maps.StylePackMetadataCallback {
				public static class: java.lang.Class<com.mapbox.maps.StylePackMetadataCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,com.mapbox.bindgen.Value>): void;
			}
			export namespace StylePackMetadataCallbackNative {
				export class StylePackMetadataCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StylePackMetadataCallbackNative.StylePackMetadataCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePacksCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.StylePacksCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.StylePacksCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,java.util.List<com.mapbox.maps.StylePack>>): void;
				});
				public constructor();
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,java.util.List<com.mapbox.maps.StylePack>>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePacksCallbackNative extends java.lang.Object implements com.mapbox.maps.StylePacksCallback {
				public static class: java.lang.Class<com.mapbox.maps.StylePacksCallbackNative>;
				public run(param0: com.mapbox.bindgen.Expected<com.mapbox.maps.StylePackError,java.util.List<com.mapbox.maps.StylePack>>): void;
				public static cleanNativePeer(param0: number): void;
			}
			export namespace StylePacksCallbackNative {
				export class StylePacksCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.StylePacksCallbackNative.StylePacksCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePropertyValue extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.StylePropertyValue>;
				public getValue(): com.mapbox.bindgen.Value;
				public hashCode(): number;
				public constructor(value: com.mapbox.bindgen.Value, kind: com.mapbox.maps.StylePropertyValueKind);
				public getKind(): com.mapbox.maps.StylePropertyValueKind;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class StylePropertyValueKind {
				public static class: java.lang.Class<com.mapbox.maps.StylePropertyValueKind>;
				public static UNDEFINED: com.mapbox.maps.StylePropertyValueKind;
				public static CONSTANT: com.mapbox.maps.StylePropertyValueKind;
				public static EXPRESSION: com.mapbox.maps.StylePropertyValueKind;
				public static TRANSITION: com.mapbox.maps.StylePropertyValueKind;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.StylePropertyValueKind>;
				public static valueOf(name: string): com.mapbox.maps.StylePropertyValueKind;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ThreadChecker extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.ThreadChecker>;
				public static INSTANCE: com.mapbox.maps.ThreadChecker;
				public throwIfNotMainThread(): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileCacheBudget extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.TileCacheBudget>;
				public getTileCacheBudgetInTiles(): com.mapbox.maps.TileCacheBudgetInTiles;
				public static valueOf(value: com.mapbox.maps.TileCacheBudgetInTiles): com.mapbox.maps.TileCacheBudget;
				public getTypeInfo(): com.mapbox.maps.TileCacheBudget.Type;
				public isTileCacheBudgetInTiles(): boolean;
				public getTileCacheBudgetInMegabytes(): com.mapbox.maps.TileCacheBudgetInMegabytes;
				public constructor(value: com.mapbox.maps.TileCacheBudgetInMegabytes);
				public isTileCacheBudgetInMegabytes(): boolean;
				public toString(): string;
				public constructor(value: com.mapbox.maps.TileCacheBudgetInTiles);
				public static valueOf(value: com.mapbox.maps.TileCacheBudgetInMegabytes): com.mapbox.maps.TileCacheBudget;
			}
			export namespace TileCacheBudget {
				export class Type {
					public static class: java.lang.Class<com.mapbox.maps.TileCacheBudget.Type>;
					public static TILE_CACHE_BUDGET_IN_MEGABYTES: com.mapbox.maps.TileCacheBudget.Type;
					public static TILE_CACHE_BUDGET_IN_TILES: com.mapbox.maps.TileCacheBudget.Type;
					public static values(): androidNative.Array<com.mapbox.maps.TileCacheBudget.Type>;
					public static valueOf(name: string): com.mapbox.maps.TileCacheBudget.Type;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileCacheBudgetInMegabytes extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.TileCacheBudgetInMegabytes>;
				public getSize(): number;
				public hashCode(): number;
				public constructor(size: number);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileCacheBudgetInTiles extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.TileCacheBudgetInTiles>;
				public getSize(): number;
				public hashCode(): number;
				public constructor(size: number);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileCoverOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.TileCoverOptions>;
				public getMinZoom(): java.lang.Byte;
				public getTileSize(): java.lang.Short;
				public hashCode(): number;
				public toBuilder(): com.mapbox.maps.TileCoverOptions.Builder;
				public getRoundZoom(): java.lang.Boolean;
				public toString(): string;
				public getMaxZoom(): java.lang.Byte;
				public equals(object: any): boolean;
			}
			export namespace TileCoverOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.TileCoverOptions.Builder>;
					public tileSize(tileSize: java.lang.Short): com.mapbox.maps.TileCoverOptions.Builder;
					public build(): com.mapbox.maps.TileCoverOptions;
					public constructor();
					public roundZoom(roundZoom: java.lang.Boolean): com.mapbox.maps.TileCoverOptions.Builder;
					public maxZoom(maxZoom: java.lang.Byte): com.mapbox.maps.TileCoverOptions.Builder;
					public minZoom(minZoom: java.lang.Byte): com.mapbox.maps.TileCoverOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileFunctionCallback extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.TileFunctionCallback>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.TileFunctionCallback interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					run(param0: com.mapbox.maps.CanonicalTileID): void;
				});
				public constructor();
				public run(param0: com.mapbox.maps.CanonicalTileID): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileFunctionCallbackNative extends java.lang.Object implements com.mapbox.maps.TileFunctionCallback {
				public static class: java.lang.Class<com.mapbox.maps.TileFunctionCallbackNative>;
				public static cleanNativePeer(param0: number): void;
				public run(param0: com.mapbox.maps.CanonicalTileID): void;
			}
			export namespace TileFunctionCallbackNative {
				export class TileFunctionCallbackPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.TileFunctionCallbackNative.TileFunctionCallbackPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.TileOptions>;
				public getTolerance(): number;
				public getBuffer(): number;
				public toBuilder(): com.mapbox.maps.TileOptions.Builder;
				public hashCode(): number;
				public getClip(): boolean;
				public getTileSize(): number;
				public getWrap(): boolean;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace TileOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.TileOptions.Builder>;
					public tolerance(tolerance: number): com.mapbox.maps.TileOptions.Builder;
					public build(): com.mapbox.maps.TileOptions;
					public clip(clip: boolean): com.mapbox.maps.TileOptions.Builder;
					public constructor();
					public buffer(buffer: number): com.mapbox.maps.TileOptions.Builder;
					public wrap(wrap: boolean): com.mapbox.maps.TileOptions.Builder;
					public tileSize(tileSize: number): com.mapbox.maps.TileOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TileStoreUsageMode {
				public static class: java.lang.Class<com.mapbox.maps.TileStoreUsageMode>;
				public static DISABLED: com.mapbox.maps.TileStoreUsageMode;
				public static READ_ONLY: com.mapbox.maps.TileStoreUsageMode;
				public static READ_AND_UPDATE: com.mapbox.maps.TileStoreUsageMode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.TileStoreUsageMode>;
				public static valueOf(name: string): com.mapbox.maps.TileStoreUsageMode;
				public toString(): string;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TilesetDescriptorOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.TilesetDescriptorOptions>;
				public getExtraOptions(): com.mapbox.bindgen.Value;
				public getPixelRatio(): number;
				public getTilesets(): java.util.List<string>;
				public hashCode(): number;
				public toBuilder(): com.mapbox.maps.TilesetDescriptorOptions.Builder;
				public getStylePackOptions(): com.mapbox.maps.StylePackLoadOptions;
				public getStyleURI(): string;
				public toString(): string;
				public getMaxZoom(): number;
				public equals(object: any): boolean;
				public getMinZoom(): number;
			}
			export namespace TilesetDescriptorOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.TilesetDescriptorOptions.Builder>;
					public styleURI(styleURI: string): com.mapbox.maps.TilesetDescriptorOptions.Builder;
					public minZoom(minZoom: number): com.mapbox.maps.TilesetDescriptorOptions.Builder;
					public constructor();
					public tilesets(tilesets: java.util.List<string>): com.mapbox.maps.TilesetDescriptorOptions.Builder;
					public build(): com.mapbox.maps.TilesetDescriptorOptions;
					public extraOptions(extraO_f11: com.mapbox.bindgen.Value): com.mapbox.maps.TilesetDescriptorOptions.Builder;
					public maxZoom(maxZoom: number): com.mapbox.maps.TilesetDescriptorOptions.Builder;
					public pixelRatio(pixelRatio: number): com.mapbox.maps.TilesetDescriptorOptions.Builder;
					public stylePackOptions(styleP_0cb: com.mapbox.maps.StylePackLoadOptions): com.mapbox.maps.TilesetDescriptorOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Tracing extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.Tracing>;
				public peer: number;
				public static setTracingBackendType(param0: com.mapbox.maps.TracingBackendType): void;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getTracingBackendType(): com.mapbox.maps.TracingBackendType;
			}
			export namespace Tracing {
				export class TracingPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.Tracing.TracingPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TracingBackendType {
				public static class: java.lang.Class<com.mapbox.maps.TracingBackendType>;
				public static NOOP: com.mapbox.maps.TracingBackendType;
				public static PLATFORM: com.mapbox.maps.TracingBackendType;
				public static LOGGER: com.mapbox.maps.TracingBackendType;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.TracingBackendType;
				public toString(): string;
				public static values(): androidNative.Array<com.mapbox.maps.TracingBackendType>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class TransitionOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.TransitionOptions>;
				public toBuilder(): com.mapbox.maps.TransitionOptions.Builder;
				public getDelay(): java.lang.Long;
				public hashCode(): number;
				public getEnablePlacementTransitions(): java.lang.Boolean;
				public toString(): string;
				public getDuration(): java.lang.Long;
				public equals(object: any): boolean;
			}
			export namespace TransitionOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.TransitionOptions.Builder>;
					public enablePlacementTransitions(enable_2f7: java.lang.Boolean): com.mapbox.maps.TransitionOptions.Builder;
					public constructor();
					public delay(delay: java.lang.Long): com.mapbox.maps.TransitionOptions.Builder;
					public duration(duration: java.lang.Long): com.mapbox.maps.TransitionOptions.Builder;
					public build(): com.mapbox.maps.TransitionOptions;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Vec2 extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.Vec2>;
				public constructor(x: number, y: number);
				public getX(): number;
				public hashCode(): number;
				public getY(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Vec3 extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.Vec3>;
				public constructor(x: number, y: number, z: number);
				public getX(): number;
				public hashCode(): number;
				public getY(): number;
				public getZ(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Vec4 extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.Vec4>;
				public getW(): number;
				public getX(): number;
				public hashCode(): number;
				public getY(): number;
				public getZ(): number;
				public constructor(x: number, y: number, z: number, w: number);
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class Version extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.Version>;
				public peer: number;
				public static getVersionString(): string;
				public static getRevisionString(): string;
				public static cleanNativePeer(param0: number): void;
				public constructor(peer: number);
				public static getMinorVersion(): number;
				public static getMajorVersion(): number;
				public static getPatchVersion(): number;
			}
			export namespace Version {
				export class VersionPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.Version.VersionPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ViewAnnotationAnchor {
				public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationAnchor>;
				public static CENTER: com.mapbox.maps.ViewAnnotationAnchor;
				public static TOP: com.mapbox.maps.ViewAnnotationAnchor;
				public static LEFT: com.mapbox.maps.ViewAnnotationAnchor;
				public static BOTTOM: com.mapbox.maps.ViewAnnotationAnchor;
				public static RIGHT: com.mapbox.maps.ViewAnnotationAnchor;
				public static TOP_LEFT: com.mapbox.maps.ViewAnnotationAnchor;
				public static BOTTOM_RIGHT: com.mapbox.maps.ViewAnnotationAnchor;
				public static TOP_RIGHT: com.mapbox.maps.ViewAnnotationAnchor;
				public static BOTTOM_LEFT: com.mapbox.maps.ViewAnnotationAnchor;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static values(): androidNative.Array<com.mapbox.maps.ViewAnnotationAnchor>;
				public static valueOf(name: string): com.mapbox.maps.ViewAnnotationAnchor;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ViewAnnotationAnchorConfig extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationAnchorConfig>;
				public getAnchor(): com.mapbox.maps.ViewAnnotationAnchor;
				public getOffsetX(): number;
				public toBuilder(): com.mapbox.maps.ViewAnnotationAnchorConfig.Builder;
				public hashCode(): number;
				public getOffsetY(): number;
				public toString(): string;
				public equals(object: any): boolean;
			}
			export namespace ViewAnnotationAnchorConfig {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationAnchorConfig.Builder>;
					public offsetX(offsetX: number): com.mapbox.maps.ViewAnnotationAnchorConfig.Builder;
					public constructor();
					public anchor(anchor: com.mapbox.maps.ViewAnnotationAnchor): com.mapbox.maps.ViewAnnotationAnchorConfig.Builder;
					public offsetY(offsetY: number): com.mapbox.maps.ViewAnnotationAnchorConfig.Builder;
					public build(): com.mapbox.maps.ViewAnnotationAnchorConfig;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ViewAnnotationOptions extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationOptions>;
				public getWidth(): java.lang.Double;
				public getAllowOverlapWithPuck(): java.lang.Boolean;
				public getHeight(): java.lang.Double;
				public getPriority(): java.lang.Long;
				public toString(): string;
				public getMinZoom(): java.lang.Float;
				public getIgnoreCameraPadding(): java.lang.Boolean;
				public equals(object: any): boolean;
				public getVariableAnchors(): java.util.List<com.mapbox.maps.ViewAnnotationAnchorConfig>;
				public getAllowOverlap(): java.lang.Boolean;
				public hashCode(): number;
				public getAnnotatedFeature(): com.mapbox.maps.AnnotatedFeature;
				public getMaxZoom(): java.lang.Float;
				public getVisible(): java.lang.Boolean;
				public toBuilder(): com.mapbox.maps.ViewAnnotationOptions.Builder;
				/** @deprecated */
				public getSelected(): java.lang.Boolean;
				public getAllowZElevate(): java.lang.Boolean;
			}
			export namespace ViewAnnotationOptions {
				export class Builder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationOptions.Builder>;
					public width(width: java.lang.Double): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public allowZElevate(allowZ_e7a: java.lang.Boolean): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public priority(priority: java.lang.Long): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public minZoom(minZoom: java.lang.Float): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public height(height: java.lang.Double): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public build(): com.mapbox.maps.ViewAnnotationOptions;
					public annotatedFeature(annota_0fb: com.mapbox.maps.AnnotatedFeature): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public allowOverlapWithPuck(allowO_c28: java.lang.Boolean): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public variableAnchors(variab_c25: java.util.List<com.mapbox.maps.ViewAnnotationAnchorConfig>): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public maxZoom(maxZoom: java.lang.Float): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public constructor();
					/** @deprecated */
					public selected(selected: java.lang.Boolean): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public allowOverlap(allowO_65d: java.lang.Boolean): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public visible(visible: java.lang.Boolean): com.mapbox.maps.ViewAnnotationOptions.Builder;
					public ignoreCameraPadding(ignore_231: java.lang.Boolean): com.mapbox.maps.ViewAnnotationOptions.Builder;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ViewAnnotationPositionDescriptor extends java.lang.Object implements java.io.Serializable {
				public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationPositionDescriptor>;
				public constructor(identifier: string, width: number, height: number, leftTo_a8d: com.mapbox.maps.ScreenCoordinate, anchor_5ea: com.mapbox.geojson.Point, anchor_192: com.mapbox.maps.ViewAnnotationAnchorConfig);
				public getWidth(): number;
				public getHeight(): number;
				public getAnchorConfig(): com.mapbox.maps.ViewAnnotationAnchorConfig;
				public getLeftTopCoordinate(): com.mapbox.maps.ScreenCoordinate;
				public hashCode(): number;
				public getIdentifier(): string;
				public getAnchorCoordinate(): com.mapbox.geojson.Point;
				public toString(): string;
				public equals(object: any): boolean;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ViewAnnotationPositionsUpdateListener extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationPositionsUpdateListener>;
				/**
				 * Constructs a new instance of the com.mapbox.maps.ViewAnnotationPositionsUpdateListener interface with the provided implementation.
				 * An empty constructor exists calling super().
				 */
				public constructor(implementation: {
					onViewAnnotationPositionsUpdate(param0: java.util.List<com.mapbox.maps.ViewAnnotationPositionDescriptor>): void;
				});
				public constructor();
				public onViewAnnotationPositionsUpdate(param0: java.util.List<com.mapbox.maps.ViewAnnotationPositionDescriptor>): void;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ViewAnnotationPositionsUpdateListenerNative extends java.lang.Object implements com.mapbox.maps.ViewAnnotationPositionsUpdateListener {
				public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationPositionsUpdateListenerNative>;
				public peer: number;
				public static cleanNativePeer(param0: number): void;
				public onViewAnnotationPositionsUpdate(param0: java.util.List<com.mapbox.maps.ViewAnnotationPositionDescriptor>): void;
				public constructor(peer: number);
			}
			export namespace ViewAnnotationPositionsUpdateListenerNative {
				export class ViewAnnotationPositionsUpdateListenerPeerCleaner extends java.lang.Object implements java.lang.Runnable {
					public static class: java.lang.Class<com.mapbox.maps.ViewAnnotationPositionsUpdateListenerNative.ViewAnnotationPositionsUpdateListenerPeerCleaner>;
					public constructor(peer: number);
					public run(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export class ViewportMode {
				public static class: java.lang.Class<com.mapbox.maps.ViewportMode>;
				public static DEFAULT: com.mapbox.maps.ViewportMode;
				public static FLIPPED_Y: com.mapbox.maps.ViewportMode;
				public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				public static valueOf(name: string): com.mapbox.maps.ViewportMode;
				public static values(): androidNative.Array<com.mapbox.maps.ViewportMode>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace assets {
				export class AssetManagerProvider extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.assets.AssetManagerProvider>;
					public initialize(param0: globalAndroid.content.res.AssetManager): void;
					public constructor();
					public finalize(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace attribution {
				export class AttributionLayout extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionLayout>;
					public copy(logo: globalAndroid.graphics.Bitmap, anchor_f4a: globalAndroid.graphics.PointF, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
					public toString(): string;
					public getLogo(): globalAndroid.graphics.Bitmap;
					public constructor(logo: globalAndroid.graphics.Bitmap, anchor_f4a: globalAndroid.graphics.PointF, isShor_f9e: boolean);
					public component1(): globalAndroid.graphics.Bitmap;
					public equals(other: any): boolean;
					public component2(): globalAndroid.graphics.PointF;
					public component3(): boolean;
					public hashCode(): number;
					public getAnchorPoint(): globalAndroid.graphics.PointF;
					public isShortText(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace attribution {
				export class AttributionMeasure extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure>;
					public getTextView(): globalAndroid.widget.TextView;
					public constructor(snapshot: globalAndroid.graphics.Bitmap, logo: globalAndroid.graphics.Bitmap, logoSmall: globalAndroid.graphics.Bitmap, textView: globalAndroid.widget.TextView, textVi_2f7: globalAndroid.widget.TextView, margin: number);
					public measure(): com.mapbox.maps.attribution.AttributionLayout;
				}
				export namespace AttributionMeasure {
					export class Chain extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.Chain>;
						public start(attrib_9b0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public setCommands(commands: java.util.List<any>): void;
						public getCommands(): java.util.List<com.mapbox.maps.attribution.AttributionMeasure.Command>;
						public constructor(this_0: androidNative.Array<com.mapbox.maps.attribution.AttributionMeasure.Command>);
					}
					export class Command extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.Command>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.attribution.AttributionMeasure$Command interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
							execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						});
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
					export namespace Command {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.Command.DefaultImpls>;
							public static execute(this_: com.mapbox.maps.attribution.AttributionMeasure.Command, measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						}
					}
					export namespace AttributionMeasure {
						export namespace Companion {
						}
					}
					export class FullLogoLongTextCommand extends java.lang.Object implements com.mapbox.maps.attribution.AttributionMeasure.Command {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.FullLogoLongTextCommand>;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(this_: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
					export class FullLogoShortTextCommand extends java.lang.Object implements com.mapbox.maps.attribution.AttributionMeasure.Command {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.FullLogoShortTextCommand>;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(this_: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
					export class LongTextCommand extends java.lang.Object implements com.mapbox.maps.attribution.AttributionMeasure.Command {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.LongTextCommand>;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(this_: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
					export class NoTextCommand extends java.lang.Object implements com.mapbox.maps.attribution.AttributionMeasure.Command {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.NoTextCommand>;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
					export class ShortTextCommand extends java.lang.Object implements com.mapbox.maps.attribution.AttributionMeasure.Command {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.ShortTextCommand>;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(this_: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
					export class SmallLogoLongTextCommand extends java.lang.Object implements com.mapbox.maps.attribution.AttributionMeasure.Command {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.SmallLogoLongTextCommand>;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(this_: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
					export class SmallLogoShortTextCommand extends java.lang.Object implements com.mapbox.maps.attribution.AttributionMeasure.Command {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionMeasure.SmallLogoShortTextCommand>;
						public execute(measure: com.mapbox.maps.attribution.AttributionMeasure, width: number, maxSize: number, logo: globalAndroid.graphics.Bitmap, isShor_f9e: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public constructor();
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure, param1: number, param2: number, param3: globalAndroid.graphics.Bitmap, param4: boolean): com.mapbox.maps.attribution.AttributionLayout;
						public execute(this_: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
						public execute(param0: com.mapbox.maps.attribution.AttributionMeasure): com.mapbox.maps.attribution.AttributionLayout;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace attribution {
				export class AttributionParser extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionParser>;
					public createAttributionString(string_c9f: boolean): string;
					public createAttributionString(): string;
					public parse(): void;
					public constructor(context: java.lang.ref.WeakReference<globalAndroid.content.Context>, attrib_ad6: string, withIm_cb7: boolean, withCo_a7f: boolean, withTe_249: boolean, withMa_0cb: boolean, withMa_5ac: boolean, withMa_04f: boolean, extraA_0e3: java.util.List<com.mapbox.maps.plugin.attribution.Attribution>);
					public getAttributions(): java.util.Set<com.mapbox.maps.plugin.attribution.Attribution>;
				}
				export namespace AttributionParser {
					export namespace AttributionParser {
						export namespace Companion {
							function getIMPROVE_MAP_URLS(): java.util.List<string>;
							function getIMPROVE_MAP_URLS(): java.util.List<string>;
						}
					}
					export class Options extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.attribution.AttributionParser.Options>;
						public static HTML_STYLE_REGEX: string; // "<(\"[^\"]*\"|\'[^\']*\'|[^\'\">])*>"
						public withMapboxGeofencingConsent(this_w_527: boolean): com.mapbox.maps.attribution.AttributionParser.Options;
						public withExtraAttributions(this_w_e24: java.util.List<com.mapbox.maps.plugin.attribution.Attribution>): com.mapbox.maps.attribution.AttributionParser.Options;
						public build(): com.mapbox.maps.attribution.AttributionParser;
						public withTelemetryAttribution(withTe_249: boolean): com.mapbox.maps.attribution.AttributionParser.Options;
						public withAttributionData(attrib_ad6: androidNative.Array<string>): com.mapbox.maps.attribution.AttributionParser.Options;
						public withMapboxPrivacyPolicy(withMa_5ac: boolean): com.mapbox.maps.attribution.AttributionParser.Options;
						public withCopyrightSign(withCo_a7f: boolean): com.mapbox.maps.attribution.AttributionParser.Options;
						public withMapboxAttribution(withMa_0cb: boolean): com.mapbox.maps.attribution.AttributionParser.Options;
						public withImproveMap(withIm_cb7: boolean): com.mapbox.maps.attribution.AttributionParser.Options;
						public constructor(context: globalAndroid.content.Context);
					}
					export namespace Options {
						export namespace Options {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace base {
				export class BuildConfig extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.base.BuildConfig>;
					public static DEBUG: boolean; // 0
					public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.base"
					public static BUILD_TYPE: string; // "release"
					public static MAPBOX_SDK_IDENTIFIER: string; // "mapbox-maps-android"
					public static MAPBOX_SDK_VERSION: string; // "11.15.3"
					public static MAPBOX_VERSION_STRING: string; // "Mapbox/11.15.3"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace core {
				export class BuildConfig extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.core.BuildConfig>;
					public static DEBUG: boolean; // 0
					public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.core"
					public static BUILD_TYPE: string; // "release"
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace debugoptions {
				export class CameraDebugView {
					public static class: java.lang.Class<com.mapbox.maps.debugoptions.CameraDebugView>;
					public constructor(it: globalAndroid.content.Context, padding: globalAndroid.util.AttributeSet, leftMargin: number);
					public update(this_u_226: com.mapbox.maps.CameraState): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace debugoptions {
				export class CrossView extends globalAndroid.view.View {
					public static class: java.lang.Class<com.mapbox.maps.debugoptions.CrossView>;
					public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
					public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet);
					public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
					public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
					public constructor(this_g_e85: globalAndroid.content.Context, this_: globalAndroid.util.AttributeSet, context: number);
					public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet, defSty_ebe: number, defSty_f75: number);
					public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
					public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
					public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
					public constructor(context: globalAndroid.content.Context);
					public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
					public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public onDraw(midY: globalAndroid.graphics.Canvas): void;
					public unscheduleDrawable(who: globalAndroid.graphics.drawable.Drawable): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace debugoptions {
				export class DebugOptionsController extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.debugoptions.DebugOptionsController>;
					public getOptions(): java.util.Set<com.mapbox.maps.debugoptions.MapViewDebugOptions>;
					public setStarted(started: boolean): void;
					public setOptions(newValue: java.util.Set<com.mapbox.maps.debugoptions.MapViewDebugOptions>): void;
					public constructor(mapView: globalAndroid.widget.FrameLayout, mapboxMap: com.mapbox.maps.MapboxMap);
					public getStarted(): boolean;
					public constructor(this_iv: globalAndroid.widget.FrameLayout, initia_d8b: com.mapbox.maps.MapboxMap, this_: any, mapView: any);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace debugoptions {
				export class MapViewDebugOptions extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.debugoptions.MapViewDebugOptions>;
					public static TILE_BORDERS: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static PARSE_STATUS: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static TIMESTAMPS: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static COLLISION: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static OVERDRAW: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static STENCIL_CLIP: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static DEPTH_BUFFER: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static MODEL_BOUNDS: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static TERRAIN_WIREFRAME: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static LAYERS2_DWIREFRAME: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static LAYERS3_DWIREFRAME: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static LIGHT: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static CAMERA: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public static PADDING: com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public getName$maps_sdk_release(): string;
					public component1$maps_sdk_release(): string;
					public toString(): string;
					public constructor(name: string);
					public equals(other: any): boolean;
					public copy(name: string): com.mapbox.maps.debugoptions.MapViewDebugOptions;
					public hashCode(): number;
				}
				export namespace MapViewDebugOptions {
					export namespace MapViewDebugOptions {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace debugoptions {
				export class PaddingDebugView extends globalAndroid.widget.FrameLayout {
					public static class: java.lang.Class<com.mapbox.maps.debugoptions.PaddingDebugView>;
					public focusableViewAvailable(param0: globalAndroid.view.View): void;
					public createContextMenu(param0: globalAndroid.view.ContextMenu): void;
					public isLayoutRequested(): boolean;
					public focusSearch(direction: number): globalAndroid.view.View;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
					public focusSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
					public keyboardNavigationClusterSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
					public onNestedPreFling(param0: globalAndroid.view.View, param1: number, param2: number): boolean;
					public recomputeViewAttributes(param0: globalAndroid.view.View): void;
					public unscheduleDrawable(who: globalAndroid.graphics.drawable.Drawable): void;
					public clearChildFocus(param0: globalAndroid.view.View): void;
					public constructor(it: globalAndroid.content.Context, i_a_al_ca3: globalAndroid.util.AttributeSet, it_1: number);
					/** @deprecated */
					public invalidateChildInParent(param0: androidNative.Array<number>, param1: globalAndroid.graphics.Rect): globalAndroid.view.ViewParent;
					public onNestedScroll(param0: globalAndroid.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public getLayoutDirection(): number;
					/** @deprecated */
					public invalidateChild(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect): void;
					public getChildVisibleRect(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: globalAndroid.graphics.Point): boolean;
					public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback, param2: number): globalAndroid.view.ActionMode;
					public bringChildToFront(param0: globalAndroid.view.View): void;
					public showContextMenuForChild(param0: globalAndroid.view.View, param1: number, param2: number): boolean;
					public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
					public requestTransparentRegion(param0: globalAndroid.view.View): void;
					public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
					public childDrawableStateChanged(param0: globalAndroid.view.View): void;
					public constructor(context: globalAndroid.content.Context);
					public getTextDirection(): number;
					public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
					public requestFitSystemWindows(): void;
					public notifySubtreeAccessibilityStateChanged(param0: globalAndroid.view.View, param1: globalAndroid.view.View, param2: number): void;
					public getParent(): globalAndroid.view.ViewParent;
					public isTextAlignmentResolved(): boolean;
					public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback): globalAndroid.view.ActionMode;
					public canResolveTextAlignment(): boolean;
					public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet);
					public childHasTransientStateChanged(param0: globalAndroid.view.View, param1: boolean): void;
					public addView(child: globalAndroid.view.View): void;
					public canResolveTextDirection(): boolean;
					public updateViewLayout(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
					public requestChildFocus(param0: globalAndroid.view.View, param1: globalAndroid.view.View): void;
					public onStartNestedScroll(param0: globalAndroid.view.View, param1: globalAndroid.view.View, param2: number): boolean;
					public onNestedFling(param0: globalAndroid.view.View, param1: number, param2: number, param3: boolean): boolean;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onNestedPreScroll(param0: globalAndroid.view.View, param1: number, param2: number, param3: androidNative.Array<number>): void;
					public addView(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
					public sendAccessibilityEvent(param0: number): void;
					public findOnBackInvokedDispatcherForChild(child: globalAndroid.view.View, requester: globalAndroid.view.View): globalAndroid.window.OnBackInvokedDispatcher;
					public requestLayout(): void;
					public getParentForAccessibility(): globalAndroid.view.ViewParent;
					public requestSendAccessibilityEvent(param0: globalAndroid.view.View, param1: globalAndroid.view.accessibility.AccessibilityEvent): boolean;
					public addView(child: globalAndroid.view.View, index: number, params: globalAndroid.view.ViewGroup.LayoutParams): void;
					public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
					public canResolveLayoutDirection(): boolean;
					public getTextAlignment(): number;
					public onDescendantInvalidated(child: globalAndroid.view.View, target: globalAndroid.view.View): void;
					public onNestedScrollAccepted(param0: globalAndroid.view.View, param1: globalAndroid.view.View, param2: number): void;
					public startActionModeForChild(origin_77b: globalAndroid.view.View, callback: globalAndroid.view.ActionMode.Callback, type: number): globalAndroid.view.ActionMode;
					public showContextMenuForChild(param0: globalAndroid.view.View): boolean;
					public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
					public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
					public removeView(param0: globalAndroid.view.View): void;
					public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet, defSty_ebe: number, defSty_f75: number);
					public onStopNestedScroll(param0: globalAndroid.view.View): void;
					public addView(child: globalAndroid.view.View, width: number, height: number): void;
					public onNestedPrePerformAccessibilityAction(param0: globalAndroid.view.View, param1: number, param2: globalAndroid.os.Bundle): boolean;
					public addView(child: globalAndroid.view.View, index: number): void;
					public showContextMenuForChild(origin_77b: globalAndroid.view.View, x: number, y: number): boolean;
					public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
					public update(this_u_093: com.mapbox.maps.EdgeInsets): void;
					public requestChildRectangleOnScreen(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: boolean): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace exception {
				export class WorkerThreadException extends java.lang.RuntimeException {
					public static class: java.lang.Class<com.mapbox.maps.exception.WorkerThreadException>;
					public constructor(message: string);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace localization {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.extension.localization.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.extension.localization"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class CameraChangedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.CameraChangedEventData>;
							public getBegin(): number;
							public component1(): number;
							public constructor(begin: number, end: java.lang.Long);
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toString(): string;
							public component2(): java.lang.Long;
							public copy(begin: number, end: java.lang.Long): com.mapbox.maps.extension.observable.eventdata.CameraChangedEventData;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class MapIdleEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.MapIdleEventData>;
							public getBegin(): number;
							public copy(begin: number, end: java.lang.Long): com.mapbox.maps.extension.observable.eventdata.MapIdleEventData;
							public component1(): number;
							public constructor(begin: number, end: java.lang.Long);
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toString(): string;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class MapLoadedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.MapLoadedEventData>;
							public getBegin(): number;
							public component1(): number;
							public constructor(begin: number, end: java.lang.Long);
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toString(): string;
							public copy(begin: number, end: java.lang.Long): com.mapbox.maps.extension.observable.eventdata.MapLoadedEventData;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class MapLoadingErrorEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.MapLoadingErrorEventData>;
							public getBegin(): number;
							public hashCode(): number;
							public toString(): string;
							public component5(): string;
							public component2(): java.lang.Long;
							public component1(): number;
							public getEnd(): java.lang.Long;
							public getTileId(): com.mapbox.maps.extension.observable.model.TileID;
							public equals(other: any): boolean;
							public component3(): com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public constructor(begin: number, end: java.lang.Long, type: com.mapbox.maps.extension.observable.model.MapLoadErrorType, message: string, sourceId: string, tileId: com.mapbox.maps.extension.observable.model.TileID);
							public getType(): com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public component4(): string;
							public component6(): com.mapbox.maps.extension.observable.model.TileID;
							public getSourceId(): string;
							public getMessage(): string;
							public copy(begin: number, end: java.lang.Long, type: com.mapbox.maps.extension.observable.model.MapLoadErrorType, message: string, sourceId: string, tileId: com.mapbox.maps.extension.observable.model.TileID): com.mapbox.maps.extension.observable.eventdata.MapLoadingErrorEventData;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class RenderFrameFinishedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.RenderFrameFinishedEventData>;
							public getBegin(): number;
							public component3(): com.mapbox.maps.extension.observable.model.RenderMode;
							public component5(): boolean;
							public hashCode(): number;
							public constructor(begin: number, end: java.lang.Long, renderMode: com.mapbox.maps.extension.observable.model.RenderMode, needsR_d05: boolean, placem_bd4: boolean);
							public toString(): string;
							public getPlacementChanged(): boolean;
							public component2(): java.lang.Long;
							public component1(): number;
							public copy(begin: number, end: java.lang.Long, renderMode: com.mapbox.maps.extension.observable.model.RenderMode, needsR_d05: boolean, placem_bd4: boolean): com.mapbox.maps.extension.observable.eventdata.RenderFrameFinishedEventData;
							public getRenderMode(): com.mapbox.maps.extension.observable.model.RenderMode;
							public getEnd(): java.lang.Long;
							public equals(other: any): boolean;
							public getNeedsRepaint(): boolean;
							public component4(): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class RenderFrameStartedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.RenderFrameStartedEventData>;
							public getBegin(): number;
							public component1(): number;
							public constructor(begin: number, end: java.lang.Long);
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public copy(begin: number, end: java.lang.Long): com.mapbox.maps.extension.observable.eventdata.RenderFrameStartedEventData;
							public equals(other: any): boolean;
							public toString(): string;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class ResourceEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.ResourceEventData>;
							public getBegin(): number;
							public getCancelled(): boolean;
							public hashCode(): number;
							public component6(): boolean;
							public copy(begin: number, end: java.lang.Long, dataSource: com.mapbox.maps.extension.observable.model.DataSourceType, request: com.mapbox.maps.extension.observable.model.Request, response: com.mapbox.maps.extension.observable.model.Response, cancelled: boolean): com.mapbox.maps.extension.observable.eventdata.ResourceEventData;
							public getResponse(): com.mapbox.maps.extension.observable.model.Response;
							public toString(): string;
							public getRequest(): com.mapbox.maps.extension.observable.model.Request;
							public component2(): java.lang.Long;
							public component3(): com.mapbox.maps.extension.observable.model.DataSourceType;
							public component4(): com.mapbox.maps.extension.observable.model.Request;
							public component1(): number;
							public getDataSource(): com.mapbox.maps.extension.observable.model.DataSourceType;
							public getEnd(): java.lang.Long;
							public component5(): com.mapbox.maps.extension.observable.model.Response;
							public equals(other: any): boolean;
							public constructor(begin: number, end: java.lang.Long, dataSource: com.mapbox.maps.extension.observable.model.DataSourceType, request: com.mapbox.maps.extension.observable.model.Request, response: com.mapbox.maps.extension.observable.model.Response, cancelled: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class SourceAddedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.SourceAddedEventData>;
							public constructor(begin: number, end: java.lang.Long, id: string);
							public getBegin(): number;
							public component1(): number;
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public getId(): string;
							public equals(other: any): boolean;
							public toString(): string;
							public copy(begin: number, end: java.lang.Long, id: string): com.mapbox.maps.extension.observable.eventdata.SourceAddedEventData;
							public component3(): string;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class SourceDataLoadedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.SourceDataLoadedEventData>;
							public getBegin(): number;
							public getTileID(): com.mapbox.maps.extension.observable.model.TileID;
							public hashCode(): number;
							public getId(): string;
							public getType(): com.mapbox.maps.extension.observable.model.SourceDataType;
							public constructor(begin: number, end: java.lang.Long, id: string, type: com.mapbox.maps.extension.observable.model.SourceDataType, loaded: java.lang.Boolean, tileID: com.mapbox.maps.extension.observable.model.TileID);
							public toString(): string;
							public component3(): string;
							public component2(): java.lang.Long;
							public component1(): number;
							public getEnd(): java.lang.Long;
							public equals(other: any): boolean;
							public component4(): com.mapbox.maps.extension.observable.model.SourceDataType;
							public getLoaded(): java.lang.Boolean;
							public component6(): com.mapbox.maps.extension.observable.model.TileID;
							public component5(): java.lang.Boolean;
							public copy(begin: number, end: java.lang.Long, id: string, type: com.mapbox.maps.extension.observable.model.SourceDataType, loaded: java.lang.Boolean, tileID: com.mapbox.maps.extension.observable.model.TileID): com.mapbox.maps.extension.observable.eventdata.SourceDataLoadedEventData;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class SourceRemovedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.SourceRemovedEventData>;
							public constructor(begin: number, end: java.lang.Long, id: string);
							public getBegin(): number;
							public component1(): number;
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public getId(): string;
							public equals(other: any): boolean;
							public copy(begin: number, end: java.lang.Long, id: string): com.mapbox.maps.extension.observable.eventdata.SourceRemovedEventData;
							public toString(): string;
							public component3(): string;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class StyleDataLoadedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.StyleDataLoadedEventData>;
							public getBegin(): number;
							public component1(): number;
							public component3(): com.mapbox.maps.extension.observable.model.StyleDataType;
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public equals(other: any): boolean;
							public constructor(begin: number, end: java.lang.Long, type: com.mapbox.maps.extension.observable.model.StyleDataType);
							public toString(): string;
							public getType(): com.mapbox.maps.extension.observable.model.StyleDataType;
							public copy(begin: number, end: java.lang.Long, type: com.mapbox.maps.extension.observable.model.StyleDataType): com.mapbox.maps.extension.observable.eventdata.StyleDataLoadedEventData;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class StyleImageMissingEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.StyleImageMissingEventData>;
							public constructor(begin: number, end: java.lang.Long, id: string);
							public getBegin(): number;
							public component1(): number;
							public copy(begin: number, end: java.lang.Long, id: string): com.mapbox.maps.extension.observable.eventdata.StyleImageMissingEventData;
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public getId(): string;
							public equals(other: any): boolean;
							public toString(): string;
							public component3(): string;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class StyleImageUnusedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.StyleImageUnusedEventData>;
							public constructor(begin: number, end: java.lang.Long, id: string);
							public getBegin(): number;
							public component1(): number;
							public getEnd(): java.lang.Long;
							public copy(begin: number, end: java.lang.Long, id: string): com.mapbox.maps.extension.observable.eventdata.StyleImageUnusedEventData;
							public hashCode(): number;
							public getId(): string;
							public equals(other: any): boolean;
							public toString(): string;
							public component3(): string;
							public component2(): java.lang.Long;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace eventdata {
						export class StyleLoadedEventData extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.eventdata.StyleLoadedEventData>;
							public getBegin(): number;
							public component1(): number;
							public constructor(begin: number, end: java.lang.Long);
							public getEnd(): java.lang.Long;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toString(): string;
							public component2(): java.lang.Long;
							public copy(begin: number, end: java.lang.Long): com.mapbox.maps.extension.observable.eventdata.StyleLoadedEventData;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class DataSourceType {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.DataSourceType>;
							public static RESOURCE_LOADER: com.mapbox.maps.extension.observable.model.DataSourceType;
							public static NETWORK: com.mapbox.maps.extension.observable.model.DataSourceType;
							public static DATABASE: com.mapbox.maps.extension.observable.model.DataSourceType;
							public static ASSET: com.mapbox.maps.extension.observable.model.DataSourceType;
							public static FILE_SYSTEM: com.mapbox.maps.extension.observable.model.DataSourceType;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.DataSourceType>;
							public getValue(): string;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.DataSourceType;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class Error extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.Error>;
							public constructor(reason: com.mapbox.maps.extension.observable.model.ResponseErrorReason, message: string);
							public component2(): string;
							public hashCode(): number;
							public equals(other: any): boolean;
							public getReason(): com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public copy(reason: com.mapbox.maps.extension.observable.model.ResponseErrorReason, message: string): com.mapbox.maps.extension.observable.model.Error;
							public toString(): string;
							public getMessage(): string;
							public component1(): com.mapbox.maps.extension.observable.model.ResponseErrorReason;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class MapLoadErrorType {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.MapLoadErrorType>;
							public static STYLE: com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public static SPRITE: com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public static SOURCE: com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public static TILE: com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public static GLYPHS: com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.MapLoadErrorType>;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.MapLoadErrorType;
							public getValue(): string;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class RenderMode {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.RenderMode>;
							public static PARTIAL: com.mapbox.maps.extension.observable.model.RenderMode;
							public static FULL: com.mapbox.maps.extension.observable.model.RenderMode;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.RenderMode>;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.RenderMode;
							public getValue(): string;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class Request extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.Request>;
							public getPriority(): com.mapbox.maps.extension.observable.model.RequestPriority;
							public component2(): string;
							public copy(loadin_05e: java.util.List<string>, url: string, kind: com.mapbox.maps.extension.observable.model.RequestType, priority: com.mapbox.maps.extension.observable.model.RequestPriority): com.mapbox.maps.extension.observable.model.Request;
							public hashCode(): number;
							public component3(): com.mapbox.maps.extension.observable.model.RequestType;
							public getLoadingMethod(): java.util.List<string>;
							public component4(): com.mapbox.maps.extension.observable.model.RequestPriority;
							public toString(): string;
							public component1(): java.util.List<string>;
							public getKind(): com.mapbox.maps.extension.observable.model.RequestType;
							public getUrl(): string;
							public equals(other: any): boolean;
							public constructor(loadin_05e: java.util.List<string>, url: string, kind: com.mapbox.maps.extension.observable.model.RequestType, priority: com.mapbox.maps.extension.observable.model.RequestPriority);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class RequestPriority {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.RequestPriority>;
							public static REGULAR: com.mapbox.maps.extension.observable.model.RequestPriority;
							public static LOW: com.mapbox.maps.extension.observable.model.RequestPriority;
							public getValue(): string;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.RequestPriority;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.RequestPriority>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class RequestType {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.RequestType>;
							public static UNKNOWN: com.mapbox.maps.extension.observable.model.RequestType;
							public static STYLE: com.mapbox.maps.extension.observable.model.RequestType;
							public static SOURCE: com.mapbox.maps.extension.observable.model.RequestType;
							public static TILE: com.mapbox.maps.extension.observable.model.RequestType;
							public static GLYPHS: com.mapbox.maps.extension.observable.model.RequestType;
							public static SPRITE_IMAGE: com.mapbox.maps.extension.observable.model.RequestType;
							public static SPRITE_JSON: com.mapbox.maps.extension.observable.model.RequestType;
							public static IMAGE: com.mapbox.maps.extension.observable.model.RequestType;
							public getValue(): string;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.RequestType>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.RequestType;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class Response extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.Response>;
							public component3(): boolean;
							public constructor(eTag: string, mustRe_c1f: boolean, noContent: boolean, modified: string, source: com.mapbox.maps.extension.observable.model.ResponseSourceType, notMod_331: boolean, expires: string, size: number, error: com.mapbox.maps.extension.observable.model.Error);
							public component7(): string;
							public getNoContent(): boolean;
							public getModified(): string;
							public component9(): com.mapbox.maps.extension.observable.model.Error;
							public component5(): com.mapbox.maps.extension.observable.model.ResponseSourceType;
							public hashCode(): number;
							public component2(): boolean;
							public component6(): boolean;
							public getError(): com.mapbox.maps.extension.observable.model.Error;
							public toString(): string;
							public getETag(): string;
							public component1(): string;
							public copy(eTag: string, mustRe_c1f: boolean, noContent: boolean, modified: string, source: com.mapbox.maps.extension.observable.model.ResponseSourceType, notMod_331: boolean, expires: string, size: number, error: com.mapbox.maps.extension.observable.model.Error): com.mapbox.maps.extension.observable.model.Response;
							public getMustRevalidate(): boolean;
							public getNotModified(): boolean;
							public getSize(): number;
							public getSource(): com.mapbox.maps.extension.observable.model.ResponseSourceType;
							public component8(): number;
							public equals(other: any): boolean;
							public component4(): string;
							public getExpires(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class ResponseErrorReason {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.ResponseErrorReason>;
							public static SUCCESS: com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public static NOT_FOUND: com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public static SERVER: com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public static CONNECTION: com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public static RATE_LIMIT: com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public static IN_OFFLINE_MODE: com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public static OTHER: com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.ResponseErrorReason;
							public getValue(): string;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.ResponseErrorReason>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class ResponseSourceType {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.ResponseSourceType>;
							public static NETWORK: com.mapbox.maps.extension.observable.model.ResponseSourceType;
							public static CACHE: com.mapbox.maps.extension.observable.model.ResponseSourceType;
							public static TILE_STORE: com.mapbox.maps.extension.observable.model.ResponseSourceType;
							public static LOCAL_FILE: com.mapbox.maps.extension.observable.model.ResponseSourceType;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.ResponseSourceType;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.ResponseSourceType>;
							public getValue(): string;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class SourceDataType {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.SourceDataType>;
							public static METADATA: com.mapbox.maps.extension.observable.model.SourceDataType;
							public static TILE: com.mapbox.maps.extension.observable.model.SourceDataType;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.SourceDataType>;
							public getValue(): string;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.SourceDataType;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class StyleDataType {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.StyleDataType>;
							public static STYLE: com.mapbox.maps.extension.observable.model.StyleDataType;
							public static SPRITE: com.mapbox.maps.extension.observable.model.StyleDataType;
							public static SOURCES: com.mapbox.maps.extension.observable.model.StyleDataType;
							public static values(): androidNative.Array<com.mapbox.maps.extension.observable.model.StyleDataType>;
							public getValue(): string;
							public static valueOf(value: string): com.mapbox.maps.extension.observable.model.StyleDataType;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace observable {
					export namespace model {
						export class TileID extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.observable.model.TileID>;
							public getY(): number;
							public component1(): number;
							public hashCode(): number;
							public component2(): number;
							public equals(other: any): boolean;
							public constructor(zoom: number, x: number, y: number);
							public component3(): number;
							public toString(): string;
							public getX(): number;
							public copy(zoom: number, x: number, y: number): com.mapbox.maps.extension.observable.model.TileID;
							public getZoom(): number;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.extension.style.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.extension.style"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export class StyleContract extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
					export namespace StyleContract {
						export class StyleAtmosphereExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleAtmosphereExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleAtmosphereExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getStyle(): string;
								getSources(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension>;
								getImages(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleImageExtension>;
								getModels(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleModelExtension>;
								getLayers(): java.util.List<any>;
								getFlatLight(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
								getDynamicLight(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
								getTerrain(): com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension;
								getAtmosphere(): com.mapbox.maps.extension.style.StyleContract.StyleAtmosphereExtension;
								getProjection(): com.mapbox.maps.extension.style.StyleContract.StyleProjectionExtension;
								getTransition(): com.mapbox.maps.TransitionOptions;
								getRain(): com.mapbox.maps.extension.style.StyleContract.StyleRainExtension;
								getSnow(): com.mapbox.maps.extension.style.StyleContract.StyleSnowExtension;
								getColorTheme(): com.mapbox.maps.ColorTheme;
							});
							public constructor();
							public getProjection(): com.mapbox.maps.extension.style.StyleContract.StyleProjectionExtension;
							public getModels(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleModelExtension>;
							public getAtmosphere(): com.mapbox.maps.extension.style.StyleContract.StyleAtmosphereExtension;
							public getColorTheme(): com.mapbox.maps.ColorTheme;
							public getFlatLight(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
							public getTransition(): com.mapbox.maps.TransitionOptions;
							public getStyle(): string;
							public getSources(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension>;
							public getSnow(): com.mapbox.maps.extension.style.StyleContract.StyleSnowExtension;
							public getTerrain(): com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension;
							public getImages(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleImageExtension>;
							public getLayers(): java.util.List<any>;
							public getDynamicLight(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
							public getRain(): com.mapbox.maps.extension.style.StyleContract.StyleRainExtension;
						}
						export namespace StyleExtension {
							export class DefaultImpls extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleExtension.DefaultImpls>;
							}
						}
						export class StyleImageExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleImageExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleImageExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleLayerExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleLayerExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
						}
						export namespace StyleLayerExtension {
							export class DefaultImpls extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension.DefaultImpls>;
							}
						}
						export class StyleLightExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleLightExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleLightExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleModelExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleModelExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleModelExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleProjectionExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleProjectionExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleProjectionExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleRainExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleRainExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleRainExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleSnowExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleSnowExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleSnowExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleSourceExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleSourceExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export class StyleTerrainExtension extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.StyleContract$StyleTerrainExtension interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							});
							public constructor();
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export class StyleExtensionImpl extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleExtension {
						public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleExtensionImpl>;
						public getModels(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleModelExtension>;
						public getFlatLight(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
						public getColorTheme(): com.mapbox.maps.ColorTheme;
						public getStyle(): string;
						public getTerrain(): com.mapbox.maps.extension.style.terrain.generated.Terrain;
						public getRain(): com.mapbox.maps.extension.style.StyleContract.StyleRainExtension;
						public getTerrain(): com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension;
						public getImages(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleImageExtension>;
						public getTransition(): com.mapbox.maps.TransitionOptions;
						public getSources(): java.util.List<com.mapbox.maps.extension.style.sources.Source>;
						public getProjection(): com.mapbox.maps.extension.style.projection.generated.Projection;
						public getLayers(): java.util.List<any>;
						public getAtmosphere(): com.mapbox.maps.extension.style.StyleContract.StyleAtmosphereExtension;
						public getDynamicLight(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
						public getAtmosphere(): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
						public getSnow(): com.mapbox.maps.extension.style.StyleContract.StyleSnowExtension;
						public getSources(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension>;
						public getLayers(): java.util.List<any>;
						public getProjection(): com.mapbox.maps.extension.style.StyleContract.StyleProjectionExtension;
					}
					export namespace StyleExtensionImpl {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.StyleExtensionImpl.Builder>;
							public getAtmosphere$extension_style_release(): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
							public addSource(this_u_d28: com.mapbox.maps.extension.style.sources.Source): void;
							public setProjection(this_u_d28: com.mapbox.maps.extension.style.projection.generated.Projection): void;
							public setTransition$extension_style_release(transi_ed3: com.mapbox.maps.TransitionOptions): void;
							public setLight(this_u_d28: com.mapbox.maps.extension.style.light.DynamicLight): void;
							public layerAtPosition(layer: com.mapbox.maps.extension.style.layers.Layer, above: string, below: string): any;
							public layerAtPosition(layer: com.mapbox.maps.extension.style.layers.Layer, above: string, below: string, at: java.lang.Integer): any;
							public setSnow$extension_style_release(snow_e_0a3: com.mapbox.maps.extension.style.precipitations.generated.Snow): void;
							public getSources$extension_style_release(): java.util.List<com.mapbox.maps.extension.style.sources.Source>;
							public getDynamicLight$extension_style_release(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
							public setColorTheme$extension_style_release(colorT_9f4: com.mapbox.maps.ColorTheme): void;
							public setAtmosphere(this_u_d28: com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere): void;
							public addLayerAtPosition(this_u_d28: any): void;
							public setTerrain(this_u_d28: com.mapbox.maps.extension.style.terrain.generated.Terrain): void;
							public setColorTheme(this_u_d28: com.mapbox.maps.ColorTheme): void;
							public getSnow$extension_style_release(): com.mapbox.maps.extension.style.precipitations.generated.Snow;
							public build(): com.mapbox.maps.extension.style.StyleContract.StyleExtension;
							public addImage(this_u_d28: com.mapbox.maps.extension.style.image.ImageExtensionImpl): void;
							public layerAtPosition(layer: com.mapbox.maps.extension.style.layers.Layer, above: string): any;
							public setAtmosphere$extension_style_release(atmosp_d5c: com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere): void;
							public getTransition$extension_style_release(): com.mapbox.maps.TransitionOptions;
							public setRain(this_u_d28: com.mapbox.maps.extension.style.precipitations.generated.Rain): void;
							public addImage9Patch(this_u_d28: com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl): void;
							public setProjection$extension_style_release(projec_61d: com.mapbox.maps.extension.style.projection.generated.Projection): void;
							public getColorTheme$extension_style_release(): com.mapbox.maps.ColorTheme;
							public setTransition(this_u_d28: com.mapbox.maps.TransitionOptions): void;
							public getRain$extension_style_release(): com.mapbox.maps.extension.style.precipitations.generated.Rain;
							public setSnow(this_u_d28: com.mapbox.maps.extension.style.precipitations.generated.Snow): void;
							public setTerrain$extension_style_release(terrai_d4f: com.mapbox.maps.extension.style.terrain.generated.Terrain): void;
							public getProjection$extension_style_release(): com.mapbox.maps.extension.style.projection.generated.Projection;
							public getLayers$extension_style_release(): java.util.List<any>;
							public setDynamicLight$extension_style_release(dynami_fa3: com.mapbox.maps.extension.style.StyleContract.StyleLightExtension): void;
							public setLight(this_u_d28: com.mapbox.maps.extension.style.light.generated.FlatLight): void;
							public getStyle(): string;
							public getTerrain$extension_style_release(): com.mapbox.maps.extension.style.terrain.generated.Terrain;
							public layerAtPosition(layer: com.mapbox.maps.extension.style.layers.Layer): any;
							public constructor(style: string);
							public addModel(this_u_d28: com.mapbox.maps.extension.style.model.ModelExtensionImpl): void;
							public setFlatLight$extension_style_release(flatLi_49f: com.mapbox.maps.extension.style.StyleContract.StyleLightExtension): void;
							public addLayer(this_u_d28: com.mapbox.maps.extension.style.layers.Layer): void;
							public getImages$extension_style_release(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleImageExtension>;
							public getModels$extension_style_release(): java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleModelExtension>;
							public getFlatLight$extension_style_release(): com.mapbox.maps.extension.style.StyleContract.StyleLightExtension;
							public setRain$extension_style_release(rain_e_f16: com.mapbox.maps.extension.style.precipitations.generated.Rain): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace atmosphere {
						export namespace generated {
							export class Atmosphere extends java.lang.Object implements com.mapbox.maps.extension.style.atmosphere.generated.AtmosphereDslReceiver, com.mapbox.maps.extension.style.StyleContract.StyleAtmosphereExtension {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere>;
								public highColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public rangeTransition(this_r_33b: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getHighColorAsColorInt(): java.lang.Integer;
								public highColorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public spaceColor(this_s_287: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getSpaceColorAsColorInt(): java.lang.Integer;
								public highColor(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getHighColor(): string;
								public highColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public range(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public color(proper_a59: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensity(this_s_cbd: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColor(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getSpaceColorUseTheme(): string;
								public highColor(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getHighColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public spaceColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public colorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public getVerticalRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getStarIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public highColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getStarIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getHighColorUseTheme(): string;
								public getHorizonBlend(): java.lang.Double;
								public color(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlendTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getColorAsColorInt(): java.lang.Integer;
								public getSpaceColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public horizonBlend(this_h_5be: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getVerticalRange(): java.util.List<java.lang.Double>;
								public rangeTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColor(this_h_ac5: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getColorUseTheme(): string;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRange(this_v_d06: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColor(proper_a59: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensity(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getColor(): string;
								public horizonBlendTransition(this_h_527: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getStarIntensity(): java.lang.Double;
								public horizonBlendTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public range(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRangeTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getHighColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHorizonBlendTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlendTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public verticalRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensityTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public constructor();
								public color(this_c_414: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public rangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getHighColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRangeTransition(this_v_f33: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorTransition(this_h_cc4: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getSpaceColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public spaceColorTransition(this_s_a77: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColor(proper_a59: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
								public horizonBlend(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getSpaceColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
								public spaceColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public color(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRangeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public color(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public range(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlend(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getHorizonBlendAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public verticalRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getVerticalRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSpaceColor(): string;
								public rangeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
								public spaceColor(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public getRange(): java.util.List<java.lang.Double>;
								public getRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public range(this_r_fee: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorTransition(this_c_6df: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensityTransition(this_s_5e3: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlend(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
							}
							export namespace Atmosphere {
								export namespace Atmosphere {
									export namespace Companion {
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace atmosphere {
						export namespace generated {
							export class AtmosphereDslReceiver extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.atmosphere.generated.AtmosphereDslReceiver>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.atmosphere.generated.AtmosphereDslReceiver interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									color(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									color(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									colorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									colorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									highColor(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									highColor(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									highColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									highColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									highColorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									highColorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									highColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									horizonBlend(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									horizonBlend(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									horizonBlendTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									horizonBlendTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									range(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									range(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									rangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									rangeTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									spaceColor(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									spaceColor(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									spaceColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									spaceColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									spaceColorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									spaceColorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									spaceColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									starIntensity(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									starIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									starIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									starIntensityTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									verticalRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									verticalRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									verticalRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
									verticalRangeTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								});
								public constructor();
								public highColor(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensity(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public color(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public range(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlend(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public range(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRangeTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public color(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlendTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlendTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public verticalRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensityTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public highColor(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public rangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColor(param0: number): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public starIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public rangeTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColor(param0: string): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public spaceColorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public horizonBlend(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
							}
							export namespace AtmosphereDslReceiver {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.atmosphere.generated.AtmosphereDslReceiver.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace atmosphere {
						export namespace generated {
							export class AtmosphereUtils extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.atmosphere.generated.AtmosphereUtils>;
								public static removeAtmosphere(this_r_4c5: com.mapbox.maps.MapboxStyleManager): void;
								public static getAtmosphere(i_a_al_b2a: com.mapbox.maps.MapboxStyleManager): com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere;
								public static setAtmosphere(this_s_45f: com.mapbox.maps.MapboxStyleManager, atmosphere: com.mapbox.maps.extension.style.StyleContract.StyleAtmosphereExtension): void;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace expressions {
						export namespace generated {
							export class Expression extends com.mapbox.bindgen.Value {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression>;
								public static numberFormat(value: number, block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static distanceFromCenter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static gte(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static ln(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static random(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static ln(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static featureState(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static interpolate(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(p0: androidNative.Array<androidNative.Array<number>>);
								public static sum(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static number(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static log10(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static collator(caseSe_72b: com.mapbox.maps.extension.style.expressions.generated.Expression, diacri_93f: com.mapbox.maps.extension.style.expressions.generated.Expression, locale: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static sum(double_: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static upcase(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static sin(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static subtract(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static tan(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static toString(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static cubicBezier(x1: com.mapbox.maps.extension.style.expressions.generated.Expression, x2: com.mapbox.maps.extension.style.expressions.generated.Expression, x3: com.mapbox.maps.extension.style.expressions.generated.Expression, x4: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static accumulated(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static gt(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static measureLight(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static skyRadialProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static distance(geojson: com.mapbox.geojson.GeoJson): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static letExpression(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static tan(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static e(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static lineProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static upcase(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static array(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static has(string: string, expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static literal(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static hsla(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static rasterParticleSpeed(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static typeofExpression(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static slice(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static product(double_: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(array: java.util.List<com.mapbox.bindgen.Value>);
								public static indexOf(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static inExpression(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static exponentialInterpolator(base: com.mapbox.maps.extension.style.expressions.generated.Expression, input: com.mapbox.maps.extension.style.expressions.generated.Expression, stops: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static rasterValue(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static resolvedLocale(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public toString(): string;
								public static abs(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static format(format_19a: androidNative.Array<com.mapbox.maps.extension.style.expressions.types.FormatSection>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static concat(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static step(input: com.mapbox.maps.extension.style.expressions.generated.Expression, output: com.mapbox.maps.extension.style.expressions.generated.Expression, stops: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static exponential(expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static ceil(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static id(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static subtract(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static geometryType(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static not(bool: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static get(key: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(l: number);
								public static acos(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static concat(values: androidNative.Array<string>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static numberFormat(number: com.mapbox.maps.extension.style.expressions.generated.Expression, locale: com.mapbox.maps.extension.style.expressions.generated.Expression, currency: com.mapbox.maps.extension.style.expressions.generated.Expression, minFra_b13: com.mapbox.maps.extension.style.expressions.generated.Expression, maxFra_579: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static log2(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static pow(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static activeAnchor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static properties(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static toNumber(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static heatmapDensity(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static lte(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static all(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static hsl(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static isSupportedScript(script: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static switchCase(stops: androidNative.Array<any>, fallback: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static asin(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(it: java.util.List<any>);
								public static min(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static subtract(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static switchCase(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static division(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static length(string: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static max(values: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(d: number);
								public static floor(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static literal$extension_style_release(value: java.util.List<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static split(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static within(geometry: com.mapbox.geojson.Geometry): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static collator(caseSe_72b: boolean, diacri_93f: boolean, locale: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static cubicBezierInterpolator(x1: number, y1: number, x2: number, y2: number, input: com.mapbox.maps.extension.style.expressions.generated.Expression, stops: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static inExpression(needle: number, haystack: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static color(intColor: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static min(values: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static cubicBezierInterpolator(x1: com.mapbox.maps.extension.style.expressions.generated.Expression, y1: com.mapbox.maps.extension.style.expressions.generated.Expression, x2: com.mapbox.maps.extension.style.expressions.generated.Expression, y2: com.mapbox.maps.extension.style.expressions.generated.Expression, input: com.mapbox.maps.extension.style.expressions.generated.Expression, stops: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static literal(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static zoom(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static toRgba(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static match(input: com.mapbox.maps.extension.style.expressions.generated.Expression, stops: androidNative.Array<any>, fallback: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static at(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(value: java.util.HashMap<string,com.mapbox.bindgen.Value>);
								public static exponentialInterpolator(base: number, input: com.mapbox.maps.extension.style.expressions.generated.Expression, stops: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static mod(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static isSupportedScript(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static downcase(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static round(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static mod(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static toHsla(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static ceil(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static pow(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static toColor(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static config(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static acos(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static coalesce(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static abs(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static product(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static collator(caseSe_72b: boolean, diacri_93f: boolean, locale: java.util.Locale): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static cos(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(str: string);
								public static eq(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static image(image: com.mapbox.maps.extension.style.expressions.generated.Expression, options: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static rgb(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(map: java.util.HashMap<string,com.mapbox.bindgen.Value>);
								public static has(string: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static literal$extension_style_release(value: java.util.HashMap<string,any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static get(key: string, expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static sin(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static varExpression(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static toBoolean(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static log10(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static rgb(red: number, green: number, blue: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static fromRaw(expression: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static lt(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static atan(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static linearInterpolator(input: com.mapbox.maps.extension.style.expressions.generated.Expression, stops: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static atInterpolated(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static exponential(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static match(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static neq(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static boolean(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static ln2(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static sqrt(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static step(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static inExpression(needle: string, haystack: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static atan(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static at(index: number, array: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static get(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static division(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static rgba(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static log2(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static worldview(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static any(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static not(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static floor(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static objectExpression(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static string(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public isLiteral(): boolean;
								public static round(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static image(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static image(image: com.mapbox.maps.extension.style.expressions.generated.Expression, options: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>, image2: com.mapbox.maps.extension.style.expressions.generated.Expression, options2: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static downcase(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(b: boolean);
								public static length(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static linear(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static cubicBezier(x1: number, x2: number, x3: number, x4: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static pitch(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static varExpression(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLiteralValue(): any;
								public static has(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static rgba(red: number, green: number, blue: number, alpha: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static sqrt(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static asin(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static cos(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static max(expres_c48: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static literal(value: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public static pi(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							}
							export namespace Expression {
								export abstract class Builder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.Builder>;
									public getOperator$extension_style_release(): string;
									public build(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									public getArguments$extension_style_release(): java.util.ArrayList<com.mapbox.maps.extension.style.expressions.generated.Expression>;
									public constructor(operator: string);
									public contents$extension_style_release(): java.util.List<com.mapbox.bindgen.Value>;
								}
								export class CollatorBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder>;
									public locale(this_l_d84: string): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public constructor();
									public caseSensitive(this_c_0f0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public constructor(operator: string);
									public diacriticSensitive(this_d_3e8: any): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public build(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									public diacriticSensitive(this_d_eed: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public locale(locale_70d: java.util.Locale): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public locale(this_l_dc6: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public diacriticSensitive(this_d_57b: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public caseSensitive(this_c_416: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public caseSensitive(this_c_283: any): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
									public locale(this_l_f59: any): com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder;
								}
								export namespace Expression {
									export namespace Companion {
										function fromRaw(err_iv: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function not(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function not(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function neq(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function neq(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function product(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function product(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function division(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function division(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function mod(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function mod(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pow(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pow(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sum(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sum(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lt(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lt(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lte(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lte(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function eq(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function eq(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gt(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gt(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gte(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gte(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function abs(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function abs(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function accumulated(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function acos(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function acos(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function activeAnchor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function all(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function all(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function any(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function any(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function array(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function array(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function asin(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function asin(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function at(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function at(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atInterpolated(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atInterpolated(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atan(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atan(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function boolean(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function boolean(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function switchCase(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function switchCase(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ceil(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ceil(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function coalesce(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function coalesce(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(caseSe_72b: boolean, diacri_93f: boolean, locale: java.util.Locale): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(caseSe_72b: boolean, diacri_93f: boolean, locale: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(caseSe_72b: com.mapbox.maps.extension.style.expressions.generated.Expression, diacri_93f: com.mapbox.maps.extension.style.expressions.generated.Expression, locale: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function concat(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function concat(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function config(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function config(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cos(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cos(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function distance(it: com.mapbox.geojson.GeoJson): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function distanceFromCenter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function downcase(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function downcase(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function e(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function featureState(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function featureState(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function floor(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function floor(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function format(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.types.FormatSection>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function format(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function geometryType(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function heatmapDensity(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsl(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsl(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsla(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsla(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function id(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(it: com.mapbox.maps.extension.style.expressions.generated.Expression, item_iv_iv: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(it: com.mapbox.maps.extension.style.expressions.generated.Expression, item_iv_iv: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>, i_f_mapTo: com.mapbox.maps.extension.style.expressions.generated.Expression, this_m_d96: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function indexOf(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function indexOf(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function interpolate(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function interpolate(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function isSupportedScript(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function isSupportedScript(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function length(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function length(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function letExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function letExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lineProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal$extension_style_release(value: java.util.List<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal$extension_style_release(v: java.util.HashMap<string,any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln2(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log10(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log10(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log2(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log2(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function match(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function match(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function max(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function max(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function measureLight(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function measureLight(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function min(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function min(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function number(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function number(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function numberFormat(it: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_le_e06: com.mapbox.maps.extension.style.expressions.generated.Expression, it_1: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_le_f99: com.mapbox.maps.extension.style.expressions.generated.Expression, it_2: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function numberFormat(number: com.mapbox.maps.extension.style.expressions.generated.Expression, block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function objectExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function objectExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pi(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pitch(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function properties(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function random(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function random(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rasterParticleSpeed(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rasterValue(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function resolvedLocale(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function resolvedLocale(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgb(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgb(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgba(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgba(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function round(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function round(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sin(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sin(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function skyRadialProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function slice(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function slice(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function split(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function split(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sqrt(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sqrt(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function step(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function step(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function string(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function string(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function tan(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function tan(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toBoolean(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toBoolean(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toColor(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toColor(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toHsla(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toHsla(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toNumber(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toNumber(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toRgba(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toRgba(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toString(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toString(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function typeofExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function typeofExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function upcase(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function upcase(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function varExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function varExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function within(it: com.mapbox.geojson.Geometry): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function worldview(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function worldview(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function zoom(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgb(red: number, green: number, blue: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgba(red: number, green: number, blue: number, alpha: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function step(it: com.mapbox.maps.extension.style.expressions.generated.Expression, element_iv: com.mapbox.maps.extension.style.expressions.generated.Expression, i_f_fo_4ca: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function switchCase(it: androidNative.Array<any>, element_iv: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function match(it: com.mapbox.maps.extension.style.expressions.generated.Expression, element_iv: androidNative.Array<any>, i_f_fo_4ca: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function linearInterpolator(this_l_2bf: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_fo_d0e: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponentialInterpolator(this_e_f8d: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_fo_f86: com.mapbox.maps.extension.style.expressions.generated.Expression, it: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponentialInterpolator(this_e_61b: number, i_a_fo_df3: com.mapbox.maps.extension.style.expressions.generated.Expression, it: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezierInterpolator(this_c_a6b: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_fo_570: com.mapbox.maps.extension.style.expressions.generated.Expression, it: com.mapbox.maps.extension.style.expressions.generated.Expression, element_iv: com.mapbox.maps.extension.style.expressions.generated.Expression, i_f_fo_4ca: com.mapbox.maps.extension.style.expressions.generated.Expression, this_f_85c: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezierInterpolator(this_c_745: number, i_a_fo_a29: number, it: number, element_iv: number, i_f_fo_4ca: com.mapbox.maps.extension.style.expressions.generated.Expression, this_f_85c: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function linear(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponential(expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponential(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponential(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezier(x1: com.mapbox.maps.extension.style.expressions.generated.Expression, x2: com.mapbox.maps.extension.style.expressions.generated.Expression, x3: com.mapbox.maps.extension.style.expressions.generated.Expression, x4: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezier(x1: number, x2: number, x3: number, x4: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezier(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function color(this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(key: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(key: string, expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function not(bool: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function at(index: number, array: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(needle: string, haystack: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(needle: number, haystack: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(string: string, expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(string: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function length(string: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sum(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function product(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function division(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function mod(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pow(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sqrt(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log10(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log2(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sin(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cos(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function tan(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function asin(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function acos(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atan(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function min(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function max(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function round(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function abs(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ceil(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function floor(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function isSupportedScript(script: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function upcase(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function downcase(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function concat(expres_b7a: androidNative.Array<string>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function numberFormat(value: number, block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function varExpression(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function fromRaw(err_iv: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function not(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function not(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function neq(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function neq(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function product(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function product(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function division(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function division(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function mod(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function mod(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pow(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pow(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sum(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sum(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lt(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lt(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lte(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lte(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function eq(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function eq(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gt(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gt(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gte(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function gte(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function abs(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function abs(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function accumulated(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function acos(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function acos(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function activeAnchor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function all(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function all(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function any(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function any(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function array(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function array(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function asin(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function asin(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function at(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function at(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atInterpolated(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atInterpolated(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atan(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atan(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function boolean(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function boolean(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function switchCase(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function switchCase(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ceil(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ceil(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function coalesce(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function coalesce(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(caseSe_72b: boolean, diacri_93f: boolean, locale: java.util.Locale): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(caseSe_72b: boolean, diacri_93f: boolean, locale: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(caseSe_72b: com.mapbox.maps.extension.style.expressions.generated.Expression, diacri_93f: com.mapbox.maps.extension.style.expressions.generated.Expression, locale: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function collator(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function concat(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function concat(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function config(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function config(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cos(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cos(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function distance(it: com.mapbox.geojson.GeoJson): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function distanceFromCenter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function downcase(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function downcase(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function e(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function featureState(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function featureState(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function floor(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function floor(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function format(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.types.FormatSection>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function format(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function geometryType(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function heatmapDensity(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsl(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsl(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsla(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function hsla(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function id(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(it: com.mapbox.maps.extension.style.expressions.generated.Expression, item_iv_iv: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(it: com.mapbox.maps.extension.style.expressions.generated.Expression, item_iv_iv: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>, i_f_mapTo: com.mapbox.maps.extension.style.expressions.generated.Expression, this_m_d96: java.util.Map<string,com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function image(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function indexOf(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function indexOf(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function interpolate(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function interpolate(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function isSupportedScript(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function isSupportedScript(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function length(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function length(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function letExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function letExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function lineProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal$extension_style_release(value: java.util.List<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function literal$extension_style_release(v: java.util.HashMap<string,any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln2(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log10(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log10(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log2(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log2(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function match(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function match(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function max(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function max(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function measureLight(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function measureLight(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function min(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function min(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function number(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function number(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function numberFormat(it: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_le_e06: com.mapbox.maps.extension.style.expressions.generated.Expression, it_1: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_le_f99: com.mapbox.maps.extension.style.expressions.generated.Expression, it_2: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function numberFormat(number: com.mapbox.maps.extension.style.expressions.generated.Expression, block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function objectExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function objectExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pi(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pitch(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function properties(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function random(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function random(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rasterParticleSpeed(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rasterValue(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function resolvedLocale(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function resolvedLocale(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgb(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgb(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgba(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgba(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function round(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function round(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sin(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sin(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function skyRadialProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function slice(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function slice(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function split(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function split(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sqrt(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sqrt(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function step(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function step(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function string(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function string(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function tan(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function tan(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toBoolean(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toBoolean(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toColor(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toColor(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toHsla(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toHsla(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toNumber(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toNumber(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toRgba(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toRgba(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toString(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function toString(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function typeofExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function typeofExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function upcase(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function upcase(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function varExpression(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function varExpression(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function within(it: com.mapbox.geojson.Geometry): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function worldview(it: androidNative.Array<com.mapbox.maps.extension.style.expressions.generated.Expression>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function worldview(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function zoom(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgb(red: number, green: number, blue: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function rgba(red: number, green: number, blue: number, alpha: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function step(it: com.mapbox.maps.extension.style.expressions.generated.Expression, element_iv: com.mapbox.maps.extension.style.expressions.generated.Expression, i_f_fo_4ca: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function switchCase(it: androidNative.Array<any>, element_iv: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function match(it: com.mapbox.maps.extension.style.expressions.generated.Expression, element_iv: androidNative.Array<any>, i_f_fo_4ca: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function linearInterpolator(this_l_2bf: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_fo_d0e: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponentialInterpolator(this_e_f8d: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_fo_f86: com.mapbox.maps.extension.style.expressions.generated.Expression, it: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponentialInterpolator(this_e_61b: number, i_a_fo_df3: com.mapbox.maps.extension.style.expressions.generated.Expression, it: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezierInterpolator(this_c_a6b: com.mapbox.maps.extension.style.expressions.generated.Expression, i_a_fo_570: com.mapbox.maps.extension.style.expressions.generated.Expression, it: com.mapbox.maps.extension.style.expressions.generated.Expression, element_iv: com.mapbox.maps.extension.style.expressions.generated.Expression, i_f_fo_4ca: com.mapbox.maps.extension.style.expressions.generated.Expression, this_f_85c: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezierInterpolator(this_c_745: number, i_a_fo_a29: number, it: number, element_iv: number, i_f_fo_4ca: com.mapbox.maps.extension.style.expressions.generated.Expression, this_f_85c: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function linear(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponential(expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponential(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function exponential(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezier(x1: com.mapbox.maps.extension.style.expressions.generated.Expression, x2: com.mapbox.maps.extension.style.expressions.generated.Expression, x3: com.mapbox.maps.extension.style.expressions.generated.Expression, x4: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezier(x1: number, x2: number, x3: number, x4: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cubicBezier(block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function color(this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(key: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function get(key: string, expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function not(bool: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function at(index: number, array: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(needle: string, haystack: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function inExpression(needle: number, haystack: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(string: string, expression: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function has(string: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function length(string: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sum(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function product(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function subtract(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function division(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function mod(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function pow(first: number, second: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sqrt(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log10(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ln(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function log2(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function sin(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function cos(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function tan(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function asin(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function acos(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function atan(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function min(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function max(expres_b7a: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function round(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function abs(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function ceil(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function floor(value: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function isSupportedScript(script: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function upcase(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function downcase(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function concat(expres_b7a: androidNative.Array<string>): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function numberFormat(value: number, block: any): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function varExpression(value: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
								export class ExpressionBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder>;
									public ceil(this_c_23e: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public pi(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public resolvedLocale(this_r_013: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public tan(this_t_0fb: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public hsla(this_h_633: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public string(this_s_ef7: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public has(this_h_c08: string, this_: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public atan(this_a_7da: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public lte(this_l_a7e: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public all(this_a_29a: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public literal(this_l_60f: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public split(this_s_0ff: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public max(this_m_b2e: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public isSupportedScript(this_i_5b2: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public skyRadialProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public varExpression(this_v_18a: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public acos(this_a_1e8: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public accumulated(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public atan(this_a_f7b: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public featureState(this_f_5a3: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public ln(this_l_92d: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public literal(this_l_47c: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public min(this_m_1aa: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public stop(this_s_d3b: number, this_: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public format(this_f_1a9: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public sum(this_s_c28: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public asin(this_a_420: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public rasterParticleSpeed(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public image(this_i_b2c: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public floor(this_f_10e: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public any(this_a_bec: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public at(this_a_1df: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public switchCase(this_s_4ce: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public addArgument(this_a_918: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public mod(this_m_5fa: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public coalesce(this_c_9f7: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public random(this_r_c51: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public round(this_r_a1b: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public inExpression(this_i_6b8: number, this_: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public sqrt(this_s_8ab: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public toHsla(this_t_01e: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public numberFormat(this_n_2f7: com.mapbox.maps.extension.style.expressions.generated.Expression, this_: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public sum(this_s_da5: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public number(this_n_3de: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public division(this_d_847: number, this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public rgba(this_r_eca: number, this_: number, red: number, green: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public not(this_n_33f: boolean): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public activeAnchor(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public numberFormat(this_n_bc1: number, this_: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public concat(this_c_05a: androidNative.Array<string>): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public id(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public toColor(this_t_2ee: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public mod(this_m_aad: number, this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public not(this_n_f95: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public upcase(this_u_2d3: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public isSupportedScript(this_i_d7f: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public ln2(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public constructor(operator: string);
									public array(this_a_8d3: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public has(this_h_ce2: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public log10(this_l_2c0: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public division(this_d_4d4: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public rgba(this_r_2fc: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public asin(this_a_426: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public interpolate(this_i_a42: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public stop(this_s_882: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public subtract(this_s_681: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public concat(this_c_b05: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public sin(this_s_740: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public subtract(this_s_768: number, this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public subtract(this_s_c21: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public max(this_m_3cb: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public step(this_s_841: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public e(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public objectExpression(this_o_deb: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public within(this_w_b07: com.mapbox.geojson.Geometry): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public literal(this_l_bad: java.util.List<any>): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public has(this_h_d9b: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public product(this_p_7ed: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public rasterValue(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public varExpression(this_v_4bb: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public inExpression(this_i_bff: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public properties(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public get(this_g_ca3: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public slice(this_s_806: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public product(this_p_50c: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public log2(this_l_298: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public pow(this_p_9e0: number, this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public collator(this_c_569: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public sqrt(this_s_bae: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public gt(this_g_90e: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public downcase(this_d_c4a: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public stop(this_s_ece: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public indexOf(this_i_8c2: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public rgb(this_r_618: number, this_: number, red: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public abs(this_a_e55: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public letExpression(this_l_fb7: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public toNumber(this_t_43a: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public literal(this_l_f81: java.util.HashMap<string,any>): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public get(this_g_b81: string, this_: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public min(this_m_466: androidNative.Array<number>): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public sin(this_s_7ae: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public acos(this_a_293: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public lineProgress(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public eq(this_e_60e: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public zoom(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public ceil(this_c_a60: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public abs(this_a_e4b: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public typeofExpression(this_t_27e: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public log10(this_l_b35: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public cos(this_c_752: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public neq(this_n_b15: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public cos(this_c_1be: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public lt(this_l_885: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public worldview(this_w_2a8: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public round(this_r_8d8: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public toBoolean(this_t_9ae: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public ln(this_l_6b5: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public toRgba(this_t_2d8: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public atInterpolated(this_a_bb9: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public measureLight(this_m_df1: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public at(this_a_456: number, this_: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public pow(this_p_293: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public distanceFromCenter(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public floor(this_f_49d: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public heatmapDensity(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public length(this_l_c1c: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public literal(this_l_935: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public toString(this_t_d38: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public downcase(this_d_be1: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public geometryType(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public rgb(this_r_617: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public distance(this_d_6eb: com.mapbox.geojson.GeoJson): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public length(this_l_241: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public color(this_c_53e: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public toString(): string;
									public stop(this_s_a15: number, this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public upcase(this_u_847: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public config(this_c_f4c: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public inExpression(this_i_84b: string, this_: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public log2(this_l_428: number): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public gte(this_g_b8e: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public boolean(this_b_d4d: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public pitch(): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public get(this_g_9ee: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public hsl(this_h_d87: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public match(this_m_358: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public literal(this_l_dee: string): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public tan(this_t_784: any): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
									public stop(this_s_ba8: com.mapbox.maps.extension.style.expressions.generated.Expression, this_: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder;
								}
								export class FormatBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder>;
									public constructor();
									public build(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									public formatSection(this_f_6da: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder;
									public formatSection(this_f_547: string, this_: any): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder;
									public constructor(operator: string);
									public formatSection(this_f_86d: com.mapbox.maps.extension.style.expressions.generated.Expression, this_: any): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder;
									public formatSection(this_f_3b4: string): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder;
								}
								export class FormatSectionBuilder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder>;
									public textColor(this_t_444: number): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public textColor(this_t_486: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public constructor(content: com.mapbox.maps.extension.style.expressions.generated.Expression);
									public fontScale(this_f_537: number): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public textColor(this_t_5d7: string): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public textFont(this_t_59d: java.util.List<string>): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public build(): java.util.List<com.mapbox.maps.extension.style.expressions.generated.Expression>;
									public textFont(this_t_a98: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public textFont(this_t_c2b: any): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public textColor(this_t_619: any): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public fontScale(this_f_3a4: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
									public fontScale(this_f_85d: any): com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder;
								}
								export class ImageBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.ImageBuilder>;
									public constructor();
									public imageOptions(this_i_019: androidNative.Array<any>): com.mapbox.maps.extension.style.expressions.generated.Expression.ImageBuilder;
									public constructor(operator: string);
								}
								export class InterpolatorBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder>;
									public cubicBezier(this_c_007: any): com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder;
									public cubicBezier(this_c_32d: number, this_: number, x1: number, x2: number): com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder;
									public exponential(this_e_efa: any): com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder;
									public linear(): com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder;
									public exponential(this_e_d67: number): com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder;
									public exponential(this_e_bd4: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder;
									public constructor(operator: string);
									public cubicBezier(this_c_e74: com.mapbox.maps.extension.style.expressions.generated.Expression, this_: com.mapbox.maps.extension.style.expressions.generated.Expression, x1: com.mapbox.maps.extension.style.expressions.generated.Expression, x2: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder;
								}
								export class NumberFormatBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder>;
									public currency(this_c_df4: any): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public locale(this_l_412: any): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public constructor(input: com.mapbox.maps.extension.style.expressions.generated.Expression);
									public locale(this_l_0ec: string): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public maxFractionDigits(this_m_5a8: any): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public maxFractionDigits(this_m_73b: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public constructor(operator: string);
									public minFractionDigits(this_m_70a: number): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public currency(this_c_ace: string): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public build(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									public minFractionDigits(this_m_100: any): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public minFractionDigits(this_m_89d: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public locale(this_l_27f: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public currency(this_c_f87: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
									public maxFractionDigits(this_m_921: number): com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace expressions {
						export namespace types {
							export class FormatSection extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.expressions.types.FormatSection>;
								public setTextFont(textFont: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
								public toString(): string;
								public copy(content: com.mapbox.maps.extension.style.expressions.generated.Expression, fontScale: com.mapbox.maps.extension.style.expressions.generated.Expression, textFont: com.mapbox.maps.extension.style.expressions.generated.Expression, textColor: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.expressions.types.FormatSection;
								public component2(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public component3(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(content: com.mapbox.maps.extension.style.expressions.generated.Expression, fontScale: com.mapbox.maps.extension.style.expressions.generated.Expression, textFont: com.mapbox.maps.extension.style.expressions.generated.Expression);
								public constructor(content: com.mapbox.maps.extension.style.expressions.generated.Expression, fontScale: com.mapbox.maps.extension.style.expressions.generated.Expression);
								public getFontScale(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public setFontScale(fontScale: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
								public component1(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getContent(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public component4(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public equals(other: any): boolean;
								public getTextFont(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(content: com.mapbox.maps.extension.style.expressions.generated.Expression, fontScale: com.mapbox.maps.extension.style.expressions.generated.Expression, textFont: com.mapbox.maps.extension.style.expressions.generated.Expression, textColor: com.mapbox.maps.extension.style.expressions.generated.Expression);
								public setTextColor(textColor: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
								public hashCode(): number;
								public getTextColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(content: com.mapbox.maps.extension.style.expressions.generated.Expression);
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace image {
						export class ImageExtensionImpl extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleImageExtension {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.image.ImageExtensionImpl>;
							public constructor(builder: com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder);
							public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export namespace ImageExtensionImpl {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder>;
								public internalImage: com.mapbox.maps.Image;
								public setSdf$extension_style_release(sdf_ex_539: boolean): void;
								public setStretchX$extension_style_release(stretc_af7: java.util.List<com.mapbox.maps.ImageStretches>): void;
								/** @deprecated */
								public image(this_i_9df: com.mapbox.maps.Image): com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder;
								/** @deprecated */
								public bitmap(this_b_418: globalAndroid.graphics.Bitmap): com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder;
								public build(): com.mapbox.maps.extension.style.image.ImageExtensionImpl;
								public getInternalImage$extension_style_release(): com.mapbox.maps.Image;
								public getContent$extension_style_release(): com.mapbox.maps.ImageContent;
								public scale(this_s_d38: number): com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder;
								public stretchY(this_s_425: java.util.List<com.mapbox.maps.ImageStretches>): com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder;
								public sdf(this_s_528: boolean): com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder;
								public content(this_c_0c1: com.mapbox.maps.ImageContent): com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder;
								public getSdf$extension_style_release(): boolean;
								public constructor(imageId: string, image: com.mapbox.maps.Image);
								public setScale$extension_style_release(scale__598: java.lang.Float): void;
								public getStretchX$extension_style_release(): java.util.List<com.mapbox.maps.ImageStretches>;
								public setStretchY$extension_style_release(stretc_d10: java.util.List<com.mapbox.maps.ImageStretches>): void;
								public getScale$extension_style_release(): java.lang.Float;
								public setInternalImage$extension_style_release(intern_f04: com.mapbox.maps.Image): void;
								public getImageId(): string;
								public getStretchY$extension_style_release(): java.util.List<com.mapbox.maps.ImageStretches>;
								/** @deprecated */
								public constructor(imageId: string);
								public setContent$extension_style_release(conten_533: com.mapbox.maps.ImageContent): void;
								public constructor(imageId: string, bitmap: globalAndroid.graphics.Bitmap);
								public stretchX(this_s_6c7: java.util.List<com.mapbox.maps.ImageStretches>): com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace image {
						export class ImageNinePatchExtensionImpl extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleImageExtension {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl>;
							public constructor(builder: com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder);
							public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export namespace ImageNinePatchExtensionImpl {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder>;
								public setSdf$extension_style_release(sdf_ex_539: boolean): void;
								public setStretchX$extension_style_release(stretc_af7: java.util.List<com.mapbox.maps.ImageStretches>): void;
								public getInternalImage$extension_style_release(): com.mapbox.maps.Image;
								public getContent$extension_style_release(): com.mapbox.maps.ImageContent;
								public build(): com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl;
								public getSdf$extension_style_release(): boolean;
								public setScale$extension_style_release(scale__598: java.lang.Float): void;
								public getStretchX$extension_style_release(): java.util.List<com.mapbox.maps.ImageStretches>;
								public setStretchY$extension_style_release(stretc_d10: java.util.List<com.mapbox.maps.ImageStretches>): void;
								public sdf(this_s_6bb: boolean): com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder;
								public getScale$extension_style_release(): java.lang.Float;
								public setInternalImage$extension_style_release(intern_f04: com.mapbox.maps.Image): void;
								public getImageId(): string;
								public getStretchY$extension_style_release(): java.util.List<com.mapbox.maps.ImageStretches>;
								public getBitmap(): globalAndroid.graphics.Bitmap;
								public setContent$extension_style_release(conten_533: com.mapbox.maps.ImageContent): void;
								public scale(this_s_1f1: number): com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder;
								public constructor(it: string, this_: globalAndroid.graphics.Bitmap);
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace image {
						export class ImageUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.image.ImageUtils>;
							public static image(imageId: string, image: com.mapbox.maps.Image, block: any): com.mapbox.maps.extension.style.image.ImageExtensionImpl;
							public static addImage9Patch(this_a_a9e: com.mapbox.maps.MapboxStyleManager, image: com.mapbox.maps.extension.style.StyleContract.StyleImageExtension): void;
							public static image(imageId: string, bitmap: globalAndroid.graphics.Bitmap, block: any): com.mapbox.maps.extension.style.image.ImageExtensionImpl;
							public static image9Patch(i_a_le_72d: string, it: globalAndroid.graphics.Bitmap, imageId: any): com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl;
							public static addImage(this_a_4b9: com.mapbox.maps.MapboxStyleManager, image: com.mapbox.maps.extension.style.StyleContract.StyleImageExtension): void;
							/** @deprecated */
							public static image(imageId: string, block: any): com.mapbox.maps.extension.style.image.ImageExtensionImpl;
							public static image9Patch(imageId: string, bitmap: globalAndroid.graphics.Bitmap): com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace image {
						export class NinePatchImage extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.image.NinePatchImage>;
							public component4(): com.mapbox.maps.ImageContent;
							public hashCode(): number;
							public constructor(intern_ebd: com.mapbox.maps.Image, stretchX: java.util.List<com.mapbox.maps.ImageStretches>, stretchY: java.util.List<com.mapbox.maps.ImageStretches>, imageC_0f3: com.mapbox.maps.ImageContent);
							public getImageContent(): com.mapbox.maps.ImageContent;
							public component1(): com.mapbox.maps.Image;
							public toString(): string;
							public component2(): java.util.List<com.mapbox.maps.ImageStretches>;
							public getStretchY(): java.util.List<com.mapbox.maps.ImageStretches>;
							public getInternalImage(): com.mapbox.maps.Image;
							public component3(): java.util.List<com.mapbox.maps.ImageStretches>;
							public getStretchX(): java.util.List<com.mapbox.maps.ImageStretches>;
							public equals(other: any): boolean;
							public copy(intern_ebd: com.mapbox.maps.Image, stretchX: java.util.List<com.mapbox.maps.ImageStretches>, stretchY: java.util.List<com.mapbox.maps.ImageStretches>, imageC_0f3: com.mapbox.maps.ImageContent): com.mapbox.maps.extension.style.image.NinePatchImage;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace image {
						export class NinePatchUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.image.NinePatchUtils>;
							public static parse9PatchBitmap(this_p_ee0: globalAndroid.graphics.Bitmap): com.mapbox.maps.extension.style.image.NinePatchImage;
							public static addImage9Patch(ninePa_2fe: com.mapbox.maps.MapboxStyleManager, this_a_a9e: string, imageId: globalAndroid.graphics.Bitmap, bitmap: number, scale: boolean): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public static addImage9Patch(this_a_a9e: com.mapbox.maps.MapboxStyleManager, imageId: string, bitmap: globalAndroid.graphics.Bitmap, scale: number): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public static addImage9Patch(this_a_a9e: com.mapbox.maps.MapboxStyleManager, imageId: string, bitmap: globalAndroid.graphics.Bitmap): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export class CustomLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.CustomLayerDsl {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.CustomLayer>;
							public getMaxZoom(): java.lang.Double;
							public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
							public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
							public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public addLayer(this_: com.mapbox.maps.MapboxStyleManager, delegate: com.mapbox.bindgen.Value, proper_8f5: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.CustomLayer;
							public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.CustomLayer;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
							public getSlot(): string;
							public getMinZoom(): java.lang.Double;
							public constructor();
							public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.CustomLayer;
							public slot(param0: string): com.mapbox.maps.extension.style.layers.CustomLayer;
							public getType$extension_style_release(): string;
							public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.CustomLayer;
							public constructor(layerId: string, host: com.mapbox.maps.CustomLayerHost);
							public getLayerId(): string;
							public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.CustomLayer;
							public maxZoom(param: number): com.mapbox.maps.extension.style.layers.CustomLayer;
							public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
							public minZoom(param0: number): com.mapbox.maps.extension.style.layers.CustomLayer;
							public addPersistentLayer(this_: com.mapbox.maps.MapboxStyleManager, delegate: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
							public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
							public minZoom(param: number): com.mapbox.maps.extension.style.layers.CustomLayer;
							public slot(param: string): com.mapbox.maps.extension.style.layers.CustomLayer;
							public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
							public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
						}
						export namespace CustomLayer {
							export namespace CustomLayer {
								export namespace Companion {
									function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
									function getDefaultMinZoom(): java.lang.Double;
									function getDefaultMaxZoom(): java.lang.Double;
									function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
									function getDefaultMinZoom(): java.lang.Double;
									function getDefaultMaxZoom(): java.lang.Double;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export class CustomLayerDsl extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.CustomLayerDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.CustomLayerDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								slot(param0: string): com.mapbox.maps.extension.style.layers.CustomLayer;
								visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.CustomLayer;
								visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.CustomLayer;
								minZoom(param0: number): com.mapbox.maps.extension.style.layers.CustomLayer;
								maxZoom(param0: number): com.mapbox.maps.extension.style.layers.CustomLayer;
							});
							public constructor();
							public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.CustomLayer;
							public slot(param0: string): com.mapbox.maps.extension.style.layers.CustomLayer;
							public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.CustomLayer;
							public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.CustomLayer;
							public minZoom(param0: number): com.mapbox.maps.extension.style.layers.CustomLayer;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export abstract class Layer extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.Layer>;
							public getMaxZoom(): java.lang.Double;
							public setAppliedLayerPropertiesValue$extension_style_release(applie_992: com.mapbox.bindgen.Value): void;
							public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
							public addLayer(delegate: com.mapbox.maps.MapboxStyleManager, proper_8f5: com.mapbox.bindgen.Value, position: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public bindPersistentlyTo$extension_style_release(it: com.mapbox.maps.MapboxStyleManager, expected: com.mapbox.maps.LayerPosition): void;
							public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
							public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
							public bindTo(it: com.mapbox.maps.MapboxStyleManager, i_a_fi_8d8: com.mapbox.maps.LayerPosition): void;
							public toString(): string;
							public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public setInternalSourceId$extension_style_release(intern_07d: string): void;
							public getAppliedLayerPropertiesValue$extension_style_release(): com.mapbox.bindgen.Value;
							public getInternalSourceId$extension_style_release(): string;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
							public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
							public getSlot(): string;
							public getMinZoom(): java.lang.Double;
							public constructor();
							public getPropertyValueAsExpressionOrLiteralExpression$extension_style_release(i_a_le_7b2: string): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public getType$extension_style_release(): string;
							public getLayerId(): string;
							public addPersistentLayer(delegate: com.mapbox.maps.MapboxStyleManager, position: com.mapbox.maps.LayerPosition): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
							public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
							public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
							public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
							public setProperty$extension_style_release(property: com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>): void;
							public getCachedLayerProperties(): com.mapbox.bindgen.Value;
							public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
						}
						export namespace Layer {
							export namespace Layer {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export class LayerUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.LayerUtils>;
							public static TAG: string; // "Mbgl-LayerUtils"
							public static addLayerAbove(this_a_23e: com.mapbox.maps.MapboxStyleManager, layer: com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension, above: string): void;
							public static addLayer(this_a_d79: com.mapbox.maps.MapboxStyleManager, layer: com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension): void;
							public static addPersistentLayer(this_a_4c2: com.mapbox.maps.MapboxStyleManager, layer: com.mapbox.maps.extension.style.layers.Layer): void;
							public static addLayerAt(this_a_dd4: com.mapbox.maps.MapboxStyleManager, layer: com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension, index: java.lang.Integer): void;
							public static isPersistent(this_i_518: com.mapbox.maps.extension.style.layers.Layer): java.lang.Boolean;
							public static getLayer(e_iv: com.mapbox.maps.MapboxStyleManager, i_f_si_8a6: string): com.mapbox.maps.extension.style.layers.Layer;
							public static addPersistentLayer(this_a_4c2: com.mapbox.maps.MapboxStyleManager, layer: com.mapbox.maps.extension.style.layers.Layer, position: com.mapbox.maps.LayerPosition): void;
							public static addLayerBelow(this_a_4de: com.mapbox.maps.MapboxStyleManager, layer: com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension, below: string): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class BackgroundLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.BackgroundLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.BackgroundLayer>;
								public backgroundColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getLayerId(): string;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
								public getBackgroundPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getType$extension_style_release(): string;
								public backgroundPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorTransition(this_b_54b: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColor(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public backgroundOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPattern(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public getBackgroundEmissiveStrength(): java.lang.Double;
								public backgroundOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public backgroundOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public constructor();
								public backgroundColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrengthTransition(this_b_bbe: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public getBackgroundEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public backgroundOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public backgroundColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundOpacityTransition(this_b_5aa: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundColor(): string;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public getBackgroundEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public backgroundOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getBackgroundOpacity(): java.lang.Double;
								public backgroundColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public backgroundColor(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundColorUseTheme(): string;
								public backgroundPitchAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundPattern(): string;
								public getMaxZoom(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public backgroundColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getMinZoom(): java.lang.Double;
								public backgroundPitchAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public constructor(layerId: string);
								public backgroundColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getBackgroundColorAsColorInt(): java.lang.Integer;
								public getBackgroundColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public backgroundOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPattern(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public getSlot(): string;
								public backgroundEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
							}
							export namespace BackgroundLayer {
								export namespace BackgroundLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultBackgroundColor(): string;
										function getDefaultBackgroundColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundColorAsColorInt(): java.lang.Integer;
										function getDefaultBackgroundColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBackgroundColorUseTheme(): string;
										function getDefaultBackgroundColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundEmissiveStrength(): java.lang.Double;
										function getDefaultBackgroundEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBackgroundOpacity(): java.lang.Double;
										function getDefaultBackgroundOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBackgroundPattern(): string;
										function getDefaultBackgroundPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
										function getDefaultBackgroundPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultBackgroundColor(): string;
										function getDefaultBackgroundColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundColorAsColorInt(): java.lang.Integer;
										function getDefaultBackgroundColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBackgroundColorUseTheme(): string;
										function getDefaultBackgroundColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundEmissiveStrength(): java.lang.Double;
										function getDefaultBackgroundEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBackgroundOpacity(): java.lang.Double;
										function getDefaultBackgroundOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBackgroundPattern(): string;
										function getDefaultBackgroundPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBackgroundPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
										function getDefaultBackgroundPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class BackgroundLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.BackgroundLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.BackgroundLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundColor(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundColor(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
									backgroundPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								});
								public constructor();
								public backgroundOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColor(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundColor(param0: string): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
								public backgroundPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
							}
							export namespace BackgroundLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.BackgroundLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class CircleLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.CircleLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.CircleLayer>;
								public circleSortKey(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getCircleStrokeOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getCircleStrokeColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrengthTransition(this_c_218: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getType$extension_style_release(): string;
								public getCircleRadius(): java.lang.Double;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public circleTranslateTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleStrokeWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public circleBlurTransition(this_c_248: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public circleStrokeOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleColor(): string;
								public getCircleTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getCircleStrokeOpacity(): java.lang.Double;
								public circleEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchScale(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public circleRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidthTransition(this_c_254: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
								public circleSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleStrokeWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public circleTranslateTransition(this_c_4d6: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleBlur(): java.lang.Double;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCirclePitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
								public getCircleOpacity(): java.lang.Double;
								public circleStrokeColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchScale(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public circleTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleStrokeColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleStrokeWidth(): java.lang.Double;
								public circleStrokeColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getCircleTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circlePitchScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public constructor(layerId: string, sourceId: string);
								public getCircleStrokeColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circlePitchAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getMaxZoom(): java.lang.Double;
								public circleColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleBlur(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getMinZoom(): java.lang.Double;
								public getCircleTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getCircleOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleColor(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlurTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleStrokeColorUseTheme(): string;
								public circlePitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleSortKey(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleElevationReference(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public circleOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleStrokeColor(): string;
								public getCirclePitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleStrokeColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getLayerId(): string;
								public circleStrokeOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleStrokeColorAsColorInt(): java.lang.Integer;
								public circleStrokeWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleStrokeWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchScale(param0: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleElevationReference(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCirclePitchScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
								public getCircleColorUseTheme(): string;
								public circleColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public constructor();
								public circleTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColor(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleStrokeOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacityTransition(this_c_9fd: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacityTransition(this_c_fb4: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public getSourceLayer(): string;
								public getCircleTranslate(): java.util.List<java.lang.Double>;
								public circleRadiusTransition(this_c_ff5: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleStrokeWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getCircleColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getCircleEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleStrokeColor(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorTransition(this_c_712: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public circleTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleEmissiveStrength(): java.lang.Double;
								public circleStrokeColor(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorTransition(this_c_528: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getSourceId(): string;
								public getCircleSortKey(): java.lang.Double;
								public getCircleElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getCircleColorAsColorInt(): java.lang.Integer;
								public getCirclePitchScale(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
								public getCircleStrokeColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public circleBlur(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslate(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public getSlot(): string;
								public circleRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
							}
							export namespace CircleLayer {
								export namespace CircleLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultCircleElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
										function getDefaultCircleElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleSortKey(): java.lang.Double;
										function getDefaultCircleSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleBlur(): java.lang.Double;
										function getDefaultCircleBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleColor(): string;
										function getDefaultCircleColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleColorAsColorInt(): java.lang.Integer;
										function getDefaultCircleColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleColorUseTheme(): string;
										function getDefaultCircleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleEmissiveStrength(): java.lang.Double;
										function getDefaultCircleEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleOpacity(): java.lang.Double;
										function getDefaultCircleOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCirclePitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
										function getDefaultCirclePitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCirclePitchScale(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
										function getDefaultCirclePitchScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleRadius(): java.lang.Double;
										function getDefaultCircleRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleStrokeColor(): string;
										function getDefaultCircleStrokeColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeColorAsColorInt(): java.lang.Integer;
										function getDefaultCircleStrokeColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleStrokeColorUseTheme(): string;
										function getDefaultCircleStrokeColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeOpacity(): java.lang.Double;
										function getDefaultCircleStrokeOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleStrokeWidth(): java.lang.Double;
										function getDefaultCircleStrokeWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleTranslate(): java.util.List<java.lang.Double>;
										function getDefaultCircleTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
										function getDefaultCircleTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultCircleElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
										function getDefaultCircleElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleSortKey(): java.lang.Double;
										function getDefaultCircleSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleBlur(): java.lang.Double;
										function getDefaultCircleBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleColor(): string;
										function getDefaultCircleColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleColorAsColorInt(): java.lang.Integer;
										function getDefaultCircleColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleColorUseTheme(): string;
										function getDefaultCircleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleEmissiveStrength(): java.lang.Double;
										function getDefaultCircleEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleOpacity(): java.lang.Double;
										function getDefaultCircleOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCirclePitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
										function getDefaultCirclePitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCirclePitchScale(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
										function getDefaultCirclePitchScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleRadius(): java.lang.Double;
										function getDefaultCircleRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleStrokeColor(): string;
										function getDefaultCircleStrokeColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeColorAsColorInt(): java.lang.Integer;
										function getDefaultCircleStrokeColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleStrokeColorUseTheme(): string;
										function getDefaultCircleStrokeColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeOpacity(): java.lang.Double;
										function getDefaultCircleStrokeOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleStrokeWidth(): java.lang.Double;
										function getDefaultCircleStrokeWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleStrokeWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleTranslate(): java.util.List<java.lang.Double>;
										function getDefaultCircleTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultCircleTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultCircleTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
										function getDefaultCircleTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class CircleLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.CircleLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.CircleLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleColor(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleColor(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circlePitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circlePitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circlePitchScale(param0: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circlePitchScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeColor(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeColor(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleStrokeWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
									circleTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								});
								public constructor();
								public circleStrokeOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchScale(param0: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColor(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColor(param0: string): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeColor(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleColor(param0: number): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleStrokeOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circlePitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
								public circleRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.CircleLayer;
							}
							export namespace CircleLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.CircleLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class ClipLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.ClipLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.ClipLayer>;
								public clipLayerTypes(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public clipLayerTypes(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public getClipLayerTypes(): java.util.List<string>;
								public getLayerId(): string;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public getSourceLayer(): string;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public getType$extension_style_release(): string;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getClipLayerTypesAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public constructor(layerId: string, sourceId: string);
								public clipLayerScope(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public getClipLayerScopeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public clipLayerScope(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public clipLayerScope(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public getMaxZoom(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public clipLayerScope(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public clipLayerTypes(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public getMinZoom(): java.lang.Double;
								public constructor();
								public getSourceId(): string;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public getSlot(): string;
								public getClipLayerScope(): java.util.List<string>;
								public clipLayerTypes(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
							}
							export namespace ClipLayer {
								export namespace ClipLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultClipLayerScope(): java.util.List<string>;
										function getDefaultClipLayerScopeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultClipLayerTypes(): java.util.List<string>;
										function getDefaultClipLayerTypesAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultClipLayerScope(): java.util.List<string>;
										function getDefaultClipLayerScopeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultClipLayerTypes(): java.util.List<string>;
										function getDefaultClipLayerTypesAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class ClipLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.ClipLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.ClipLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									clipLayerScope(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									clipLayerScope(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									clipLayerTypes(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
									clipLayerTypes(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								});
								public constructor();
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public clipLayerTypes(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public clipLayerScope(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public clipLayerScope(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
								public clipLayerTypes(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.ClipLayer;
							}
							export namespace ClipLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.ClipLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class FillExtrusionLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer>;
								public fillExtrusionFloodLightGroundAttenuation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightColorUseTheme(): string;
								public getFillExtrusionFloodLightColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillExtrusionPattern(): string;
								public getFillExtrusionEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionAmbientOcclusionRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getType$extension_style_release(): string;
								public fillExtrusionAmbientOcclusionGroundAttenuation(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalGradient(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionGroundAttenuationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillExtrusionColor(): string;
								public fillExtrusionFloodLightGroundAttenuation(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightWallRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public fillExtrusionFloodLightGroundAttenuationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundAttenuationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionRoundedRoof(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionVerticalGradient(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public fillExtrusionFloodLightGroundRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionHeightAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
								public fillExtrusionAmbientOcclusionGroundRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScaleTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionBaseAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillExtrusionColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionAmbientOcclusionGroundRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionOpacity(): java.lang.Double;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public fillExtrusionAmbientOcclusionWallRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionVerticalGradient(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionAmbientOcclusionGroundRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionCutoffFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeight(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionAmbientOcclusionGroundRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorTransition(this_f_ec0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getMinZoom(): java.lang.Double;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionCutoffFadeRange(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionBaseTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionLineWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensityTransition(this_f_102: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionLineWidthTransition(this_f_c94: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightGroundRadius(): java.lang.Double;
								public fillExtrusionAmbientOcclusionWallRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionEdgeRadius(): java.lang.Double;
								public fillExtrusionBaseTransition(this_f_368: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEdgeRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionCutoffFadeRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundAttenuationTransition(this_f_c27: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPatternCrossFade(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionWallRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionAmbientOcclusionWallRadiusTransition(this_f_099: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionHeightAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillExtrusionTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionAmbientOcclusionRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionAmbientOcclusionGroundAttenuation(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBase(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScaleTransition(this_f_dd4: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorTransition(this_f_cf6: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBase(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionVerticalGradient(): java.lang.Boolean;
								public fillExtrusionPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillExtrusionVerticalGradientAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionHeightTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionBaseAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillExtrusionFloodLightGroundAttenuationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionAmbientOcclusionGroundRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillExtrusionLineWidth(): java.lang.Double;
								public fillExtrusionTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEdgeRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateTransition(this_f_4df: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionLineWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSourceId(): string;
								public fillExtrusionAmbientOcclusionGroundAttenuation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionHeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionRoundedRoof(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getFillExtrusionFloodLightGroundRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionAmbientOcclusionIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensityTransition(this_f_31e: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundAttenuation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundAttenuationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getSlot(): string;
								public getFillExtrusionColorUseTheme(): string;
								public fillExtrusionColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionTranslate(): java.util.List<java.lang.Double>;
								public getFillExtrusionColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionFloodLightColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScale(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionPatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionTranslate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionCutoffFadeRange(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionWallRadius(): java.lang.Double;
								public getFillExtrusionBase(): java.lang.Double;
								public getFillExtrusionRoundedRoof(): java.lang.Boolean;
								public fillExtrusionAmbientOcclusionWallRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionIntensity(): java.lang.Double;
								public getFillExtrusionFloodLightColor(): string;
								public fillExtrusionFloodLightGroundAttenuation(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundRadiusTransition(this_f_6d7: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionFloodLightWallRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionGroundAttenuationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionAmbientOcclusionGroundAttenuationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionBaseAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
								public fillExtrusionPatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionHeight(): java.lang.Double;
								public getFillExtrusionTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionAmbientOcclusionGroundRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightGroundRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionFloodLightGroundAttenuation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScaleTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public getFillExtrusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionFloodLightWallRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightTransition(this_f_f33: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionHeightTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getFillExtrusionAmbientOcclusionGroundRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(layerId: string, sourceId: string);
								public getFillExtrusionFloodLightColorAsColorInt(): java.lang.Integer;
								public fillExtrusionColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeight(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightWallRadius(): java.lang.Double;
								public getFillExtrusionAmbientOcclusionIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getMaxZoom(): java.lang.Double;
								public fillExtrusionAmbientOcclusionGroundAttenuationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionVerticalScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadiusTransition(this_f_e4d: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionGroundAttenuation(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundAttenuationTransition(this_f_685: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPattern(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScale(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeight(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightGroundAttenuation(): java.lang.Double;
								public getFillExtrusionRoundedRoofAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLayerId(): string;
								public fillExtrusionBase(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadiusTransition(this_f_e2f: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionEdgeRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionOpacityTransition(this_f_b3c: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadiusTransition(this_f_073: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightWallRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionGroundRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionPattern(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionFloodLightGroundAttenuationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionPatternCrossFade(): java.lang.Double;
								public fillExtrusionEdgeRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionVerticalScale(): java.lang.Double;
								public getFillExtrusionColorAsColorInt(): java.lang.Integer;
								public fillExtrusionPatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionRoundedRoof(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public constructor();
								public fillExtrusionTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionVerticalScaleTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionCutoffFadeRange(): java.lang.Double;
								public getFillExtrusionFloodLightIntensity(): java.lang.Double;
								public fillExtrusionFloodLightGroundRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrengthTransition(this_f_ee6: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionRoundedRoof(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionEmissiveStrength(): java.lang.Double;
								public fillExtrusionAmbientOcclusionIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundAttenuationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public fillExtrusionHeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getSourceLayer(): string;
								public fillExtrusionFloodLightColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionCutoffFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionEdgeRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionRadius(): java.lang.Double;
								public fillExtrusionBase(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionAmbientOcclusionWallRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScale(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslate(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public getFillExtrusionVerticalScaleTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillExtrusionLineWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillExtrusionFloodLightColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPatternCrossFade(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public getFillExtrusionLineWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getFillExtrusionAmbientOcclusionGroundRadius(): java.lang.Double;
								public fillExtrusionEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
							}
							export namespace FillExtrusionLayer {
								export namespace FillExtrusionLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultFillExtrusionEdgeRadius(): java.lang.Double;
										function getDefaultFillExtrusionEdgeRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionGroundAttenuation(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionGroundAttenuationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionGroundAttenuationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionGroundRadius(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionGroundRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionGroundRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionIntensity(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionRadius(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionWallRadius(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionWallRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionWallRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionBase(): java.lang.Double;
										function getDefaultFillExtrusionBaseAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionBaseTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionBaseAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
										function getDefaultFillExtrusionBaseAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionColor(): string;
										function getDefaultFillExtrusionColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionColorAsColorInt(): java.lang.Integer;
										function getDefaultFillExtrusionColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionColorUseTheme(): string;
										function getDefaultFillExtrusionColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionCutoffFadeRange(): java.lang.Double;
										function getDefaultFillExtrusionCutoffFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionEmissiveStrength(): java.lang.Double;
										function getDefaultFillExtrusionEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightColor(): string;
										function getDefaultFillExtrusionFloodLightColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightColorAsColorInt(): java.lang.Integer;
										function getDefaultFillExtrusionFloodLightColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightColorUseTheme(): string;
										function getDefaultFillExtrusionFloodLightColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightGroundAttenuation(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightGroundAttenuationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightGroundAttenuationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightGroundRadius(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightGroundRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightGroundRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightIntensity(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightWallRadius(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightWallRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightWallRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionHeight(): java.lang.Double;
										function getDefaultFillExtrusionHeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionHeightTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionHeightAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
										function getDefaultFillExtrusionHeightAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionLineWidth(): java.lang.Double;
										function getDefaultFillExtrusionLineWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionLineWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionOpacity(): java.lang.Double;
										function getDefaultFillExtrusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionPattern(): string;
										function getDefaultFillExtrusionPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionPatternCrossFade(): java.lang.Double;
										function getDefaultFillExtrusionPatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionRoundedRoof(): java.lang.Boolean;
										function getDefaultFillExtrusionRoundedRoofAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionTranslate(): java.util.List<java.lang.Double>;
										function getDefaultFillExtrusionTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
										function getDefaultFillExtrusionTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionVerticalGradient(): java.lang.Boolean;
										function getDefaultFillExtrusionVerticalGradientAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionVerticalScale(): java.lang.Double;
										function getDefaultFillExtrusionVerticalScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionVerticalScaleTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultFillExtrusionEdgeRadius(): java.lang.Double;
										function getDefaultFillExtrusionEdgeRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionGroundAttenuation(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionGroundAttenuationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionGroundAttenuationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionGroundRadius(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionGroundRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionGroundRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionIntensity(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionRadius(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionAmbientOcclusionWallRadius(): java.lang.Double;
										function getDefaultFillExtrusionAmbientOcclusionWallRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionAmbientOcclusionWallRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionBase(): java.lang.Double;
										function getDefaultFillExtrusionBaseAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionBaseTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionBaseAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
										function getDefaultFillExtrusionBaseAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionColor(): string;
										function getDefaultFillExtrusionColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionColorAsColorInt(): java.lang.Integer;
										function getDefaultFillExtrusionColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionColorUseTheme(): string;
										function getDefaultFillExtrusionColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionCutoffFadeRange(): java.lang.Double;
										function getDefaultFillExtrusionCutoffFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionEmissiveStrength(): java.lang.Double;
										function getDefaultFillExtrusionEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightColor(): string;
										function getDefaultFillExtrusionFloodLightColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightColorAsColorInt(): java.lang.Integer;
										function getDefaultFillExtrusionFloodLightColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightColorUseTheme(): string;
										function getDefaultFillExtrusionFloodLightColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightGroundAttenuation(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightGroundAttenuationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightGroundAttenuationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightGroundRadius(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightGroundRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightGroundRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightIntensity(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionFloodLightWallRadius(): java.lang.Double;
										function getDefaultFillExtrusionFloodLightWallRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionFloodLightWallRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionHeight(): java.lang.Double;
										function getDefaultFillExtrusionHeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionHeightTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionHeightAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
										function getDefaultFillExtrusionHeightAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionLineWidth(): java.lang.Double;
										function getDefaultFillExtrusionLineWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionLineWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionOpacity(): java.lang.Double;
										function getDefaultFillExtrusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionPattern(): string;
										function getDefaultFillExtrusionPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionPatternCrossFade(): java.lang.Double;
										function getDefaultFillExtrusionPatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionRoundedRoof(): java.lang.Boolean;
										function getDefaultFillExtrusionRoundedRoofAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionTranslate(): java.util.List<java.lang.Double>;
										function getDefaultFillExtrusionTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillExtrusionTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
										function getDefaultFillExtrusionTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionVerticalGradient(): java.lang.Boolean;
										function getDefaultFillExtrusionVerticalGradientAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionVerticalScale(): java.lang.Double;
										function getDefaultFillExtrusionVerticalScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillExtrusionVerticalScaleTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class FillExtrusionLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionEdgeRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionEdgeRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundAttenuation(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundAttenuation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundAttenuationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundAttenuationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionGroundRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionWallRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionWallRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionWallRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionAmbientOcclusionWallRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionBase(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionBase(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionBaseTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionBaseTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionBaseAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionBaseAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionCutoffFadeRange(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionCutoffFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundAttenuation(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundAttenuation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundAttenuationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundAttenuationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightGroundRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightWallRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightWallRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightWallRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionFloodLightWallRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionHeight(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionHeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionHeightTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionHeightTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionHeightAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionHeightAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionLineWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionLineWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionLineWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionLineWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionPatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionPatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionRoundedRoof(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionRoundedRoof(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionVerticalGradient(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionVerticalGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionVerticalScale(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionVerticalScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionVerticalScaleTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
									fillExtrusionVerticalScaleTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								});
								public constructor();
								public fillExtrusionVerticalScale(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionCutoffFadeRange(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundAttenuationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundAttenuationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionRoundedRoof(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundAttenuation(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundAttenuationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundAttenuation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScaleTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalGradient(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionCutoffFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeight(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBaseAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEdgeRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionWallRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionVerticalScaleTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundAttenuation(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBase(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightGroundAttenuationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionEdgeRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionHeightTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionBase(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightWallRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionLineWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionGroundAttenuation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionRoundedRoof(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionAmbientOcclusionIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
								public fillExtrusionFloodLightColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
							}
							export namespace FillExtrusionLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class FillLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.FillLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.FillLayer>;
								public fillPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillAntialias(): java.lang.Boolean;
								public getType$extension_style_release(): string;
								public fillAntialias(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOutlineColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillPattern(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillConstructBridgeGuardRail(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillAntialiasAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillOutlineColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public fillConstructBridgeGuardRail(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public getFillColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillBridgeGuardRailColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillSortKey(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillTunnelStructureColor(): string;
								public fillEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public fillEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillConstructBridgeGuardRailAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillBridgeGuardRailColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillBridgeGuardRailColor(): string;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorTransition(this_f_07d: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillBridgeGuardRailColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillTunnelStructureColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getMinZoom(): java.lang.Double;
								public getFillBridgeGuardRailColorUseTheme(): string;
								public fillColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillTunnelStructureColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillAntialias(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOutlineColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillTunnelStructureColorUseTheme(): string;
								public fillColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOpacity(): java.lang.Double;
								public getFillTunnelStructureColorAsColorInt(): java.lang.Integer;
								public fillTunnelStructureColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOutlineColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillBridgeGuardRailColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getFillColor(): string;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillZOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getFillOutlineColorAsColorInt(): java.lang.Integer;
								public fillPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillBridgeGuardRailColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
								public getFillTunnelStructureColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillOutlineColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillPatternCrossFade(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillPattern(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillConstructBridgeGuardRail(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillPattern(): string;
								public fillTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOutlineColorUseTheme(): string;
								public fillTranslateTransition(this_f_9e0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillAntialias(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillElevationReference(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillConstructBridgeGuardRail(): java.lang.Boolean;
								public fillZOffset(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getSourceId(): string;
								public fillOutlineColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getSlot(): string;
								public fillZOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillElevationReference(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillColorUseTheme(): string;
								public fillPatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorTransition(this_f_3ab: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillOpacityTransition(this_f_ae0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
								public fillColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffsetTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public fillTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public getFillSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillTunnelStructureColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillOutlineColor(): string;
								public fillOutlineColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public constructor(layerId: string, sourceId: string);
								public fillOutlineColorTransition(this_f_6cc: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getMaxZoom(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillAntialias(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillTunnelStructureColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillConstructBridgeGuardRail(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getLayerId(): string;
								public getFillPatternCrossFade(): java.lang.Double;
								public getFillPatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public fillTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrengthTransition(this_f_d76: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillBridgeGuardRailColorAsColorInt(): java.lang.Integer;
								public fillZOffsetTransition(this_f_6d7: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public constructor();
								public fillBridgeGuardRailColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillEmissiveStrength(): java.lang.Double;
								public fillEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillSortKey(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillColorAsColorInt(): java.lang.Integer;
								public fillTranslate(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorTransition(this_f_e3a: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillSortKey(): java.lang.Double;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public getFillTunnelStructureColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getSourceLayer(): string;
								public fillOutlineColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillPatternCrossFade(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillTranslate(): java.util.List<java.lang.Double>;
								public fillEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public getFillZOffset(): java.lang.Double;
								public fillTunnelStructureColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillPatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
							}
							export namespace FillLayer {
								export namespace FillLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultFillConstructBridgeGuardRail(): java.lang.Boolean;
										function getDefaultFillConstructBridgeGuardRailAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
										function getDefaultFillElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillSortKey(): java.lang.Double;
										function getDefaultFillSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillAntialias(): java.lang.Boolean;
										function getDefaultFillAntialiasAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillBridgeGuardRailColor(): string;
										function getDefaultFillBridgeGuardRailColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillBridgeGuardRailColorAsColorInt(): java.lang.Integer;
										function getDefaultFillBridgeGuardRailColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillBridgeGuardRailColorUseTheme(): string;
										function getDefaultFillBridgeGuardRailColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillColor(): string;
										function getDefaultFillColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillColorAsColorInt(): java.lang.Integer;
										function getDefaultFillColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillColorUseTheme(): string;
										function getDefaultFillColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillEmissiveStrength(): java.lang.Double;
										function getDefaultFillEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillOpacity(): java.lang.Double;
										function getDefaultFillOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillOutlineColor(): string;
										function getDefaultFillOutlineColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillOutlineColorAsColorInt(): java.lang.Integer;
										function getDefaultFillOutlineColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillOutlineColorUseTheme(): string;
										function getDefaultFillOutlineColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillPattern(): string;
										function getDefaultFillPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillPatternCrossFade(): java.lang.Double;
										function getDefaultFillPatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTranslate(): java.util.List<java.lang.Double>;
										function getDefaultFillTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
										function getDefaultFillTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTunnelStructureColor(): string;
										function getDefaultFillTunnelStructureColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTunnelStructureColorAsColorInt(): java.lang.Integer;
										function getDefaultFillTunnelStructureColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillTunnelStructureColorUseTheme(): string;
										function getDefaultFillTunnelStructureColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillZOffset(): java.lang.Double;
										function getDefaultFillZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillZOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultFillConstructBridgeGuardRail(): java.lang.Boolean;
										function getDefaultFillConstructBridgeGuardRailAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
										function getDefaultFillElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillSortKey(): java.lang.Double;
										function getDefaultFillSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillAntialias(): java.lang.Boolean;
										function getDefaultFillAntialiasAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillBridgeGuardRailColor(): string;
										function getDefaultFillBridgeGuardRailColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillBridgeGuardRailColorAsColorInt(): java.lang.Integer;
										function getDefaultFillBridgeGuardRailColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillBridgeGuardRailColorUseTheme(): string;
										function getDefaultFillBridgeGuardRailColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillColor(): string;
										function getDefaultFillColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillColorAsColorInt(): java.lang.Integer;
										function getDefaultFillColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillColorUseTheme(): string;
										function getDefaultFillColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillEmissiveStrength(): java.lang.Double;
										function getDefaultFillEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillOpacity(): java.lang.Double;
										function getDefaultFillOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillOutlineColor(): string;
										function getDefaultFillOutlineColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillOutlineColorAsColorInt(): java.lang.Integer;
										function getDefaultFillOutlineColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillOutlineColorUseTheme(): string;
										function getDefaultFillOutlineColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillPattern(): string;
										function getDefaultFillPatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillPatternCrossFade(): java.lang.Double;
										function getDefaultFillPatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTranslate(): java.util.List<java.lang.Double>;
										function getDefaultFillTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
										function getDefaultFillTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTunnelStructureColor(): string;
										function getDefaultFillTunnelStructureColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillTunnelStructureColorAsColorInt(): java.lang.Integer;
										function getDefaultFillTunnelStructureColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultFillTunnelStructureColorUseTheme(): string;
										function getDefaultFillTunnelStructureColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillZOffset(): java.lang.Double;
										function getDefaultFillZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultFillZOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class FillLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.FillLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.FillLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillConstructBridgeGuardRail(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillConstructBridgeGuardRail(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillAntialias(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillAntialias(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillBridgeGuardRailColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillBridgeGuardRailColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillBridgeGuardRailColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillBridgeGuardRailColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillBridgeGuardRailColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillBridgeGuardRailColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillBridgeGuardRailColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOutlineColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOutlineColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOutlineColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOutlineColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOutlineColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOutlineColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillOutlineColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillPatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillPatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTunnelStructureColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTunnelStructureColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTunnelStructureColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTunnelStructureColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTunnelStructureColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTunnelStructureColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillTunnelStructureColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillZOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
									fillZOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								});
								public constructor();
								public fillPattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillConstructBridgeGuardRail(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillPattern(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillPatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillAntialias(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillAntialias(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillPatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillTunnelStructureColor(param0: string): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillConstructBridgeGuardRail(param0: boolean): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillOutlineColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.FillLayer;
								public fillBridgeGuardRailColor(param0: number): com.mapbox.maps.extension.style.layers.generated.FillLayer;
							}
							export namespace FillLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.FillLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class HeatmapLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.HeatmapLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.HeatmapLayer>;
								public heatmapOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapRadius(): java.lang.Double;
								public getLayerId(): string;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getType$extension_style_release(): string;
								public heatmapOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapWeight(): java.lang.Double;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public heatmapIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHeatmapOpacity(): java.lang.Double;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public constructor();
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapWeight(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapWeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHeatmapIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public heatmapRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapIntensityTransition(this_h_b0d: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHeatmapIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHeatmapOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public heatmapIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getSourceLayer(): string;
								public heatmapWeight(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public heatmapOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public heatmapOpacityTransition(this_h_601: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapIntensity(): java.lang.Double;
								public heatmapColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapWeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public constructor(layerId: string, sourceId: string);
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public heatmapIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getMaxZoom(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public heatmapOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapWeight(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapColorUseTheme(): string;
								public heatmapOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getMinZoom(): java.lang.Double;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadiusTransition(this_h_869: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getSourceId(): string;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapIntensity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getSlot(): string;
								public heatmapIntensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public getHeatmapRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
							}
							export namespace HeatmapLayer {
								export namespace HeatmapLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultHeatmapColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapColorUseTheme(): string;
										function getDefaultHeatmapColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapIntensity(): java.lang.Double;
										function getDefaultHeatmapIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHeatmapOpacity(): java.lang.Double;
										function getDefaultHeatmapOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHeatmapRadius(): java.lang.Double;
										function getDefaultHeatmapRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHeatmapWeight(): java.lang.Double;
										function getDefaultHeatmapWeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultHeatmapColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapColorUseTheme(): string;
										function getDefaultHeatmapColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapIntensity(): java.lang.Double;
										function getDefaultHeatmapIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHeatmapOpacity(): java.lang.Double;
										function getDefaultHeatmapOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHeatmapRadius(): java.lang.Double;
										function getDefaultHeatmapRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHeatmapRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHeatmapWeight(): java.lang.Double;
										function getDefaultHeatmapWeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class HeatmapLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.HeatmapLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.HeatmapLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapWeight(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
									heatmapWeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								});
								public constructor();
								public heatmapIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapWeight(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapWeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
								public heatmapIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
							}
							export namespace HeatmapLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.HeatmapLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class HillshadeLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.HillshadeLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.HillshadeLayer>;
								public hillshadeIlluminationAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeEmissiveStrengthTransition(this_h_d7b: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getType$extension_style_release(): string;
								public hillshadeIlluminationDirection(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeIlluminationAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
								public hillshadeEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public hillshadeIlluminationAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public hillshadeAccentColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeAccentColor(): string;
								public hillshadeIlluminationAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeHighlightColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeIlluminationDirection(): java.lang.Double;
								public getHillshadeExaggerationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public hillshadeShadowColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorTransition(this_h_bad: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public hillshadeAccentColorTransition(this_h_964: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeIlluminationDirectionAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public hillshadeEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggerationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggerationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public hillshadeHighlightColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeIlluminationDirection(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeEmissiveStrength(): java.lang.Double;
								public hillshadeHighlightColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public constructor(layerId: string, sourceId: string);
								public hillshadeEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeIlluminationAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public hillshadeExaggeration(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getMaxZoom(): java.lang.Double;
								public hillshadeAccentColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getMinZoom(): java.lang.Double;
								public hillshadeShadowColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeShadowColorAsColorInt(): java.lang.Integer;
								public hillshadeShadowColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeHighlightColorAsColorInt(): java.lang.Integer;
								public hillshadeHighlightColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggeration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getLayerId(): string;
								public getHillshadeHighlightColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHillshadeShadowColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getHillshadeHighlightColorUseTheme(): string;
								public hillshadeAccentColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeShadowColorUseTheme(): string;
								public hillshadeHighlightColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public hillshadeEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorTransition(this_h_e5f: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeIlluminationAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeAccentColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeIlluminationDirection(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeHighlightColor(): string;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeAccentColorUseTheme(): string;
								public hillshadeHighlightColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public constructor();
								public getHillshadeExaggerationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHillshadeShadowColor(): string;
								public hillshadeShadowColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeShadowColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getHillshadeExaggeration(): java.lang.Double;
								public getHillshadeAccentColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public hillshadeEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeIlluminationDirection(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggeration(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggerationTransition(this_h_0aa: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeShadowColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getSourceLayer(): string;
								public hillshadeAccentColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggeration(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggerationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeAccentColorAsColorInt(): java.lang.Integer;
								public getHillshadeEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public hillshadeHighlightColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public hillshadeEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getSourceId(): string;
								public hillshadeAccentColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getHillshadeHighlightColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getHillshadeAccentColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public hillshadeAccentColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public getSlot(): string;
							}
							export namespace HillshadeLayer {
								export namespace HillshadeLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultHillshadeAccentColor(): string;
										function getDefaultHillshadeAccentColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeAccentColorAsColorInt(): java.lang.Integer;
										function getDefaultHillshadeAccentColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeAccentColorUseTheme(): string;
										function getDefaultHillshadeAccentColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeEmissiveStrength(): java.lang.Double;
										function getDefaultHillshadeEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeExaggeration(): java.lang.Double;
										function getDefaultHillshadeExaggerationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeExaggerationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeHighlightColor(): string;
										function getDefaultHillshadeHighlightColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeHighlightColorAsColorInt(): java.lang.Integer;
										function getDefaultHillshadeHighlightColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeHighlightColorUseTheme(): string;
										function getDefaultHillshadeHighlightColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeIlluminationAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
										function getDefaultHillshadeIlluminationAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeIlluminationDirection(): java.lang.Double;
										function getDefaultHillshadeIlluminationDirectionAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeShadowColor(): string;
										function getDefaultHillshadeShadowColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeShadowColorAsColorInt(): java.lang.Integer;
										function getDefaultHillshadeShadowColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeShadowColorUseTheme(): string;
										function getDefaultHillshadeShadowColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultHillshadeAccentColor(): string;
										function getDefaultHillshadeAccentColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeAccentColorAsColorInt(): java.lang.Integer;
										function getDefaultHillshadeAccentColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeAccentColorUseTheme(): string;
										function getDefaultHillshadeAccentColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeEmissiveStrength(): java.lang.Double;
										function getDefaultHillshadeEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeExaggeration(): java.lang.Double;
										function getDefaultHillshadeExaggerationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeExaggerationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeHighlightColor(): string;
										function getDefaultHillshadeHighlightColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeHighlightColorAsColorInt(): java.lang.Integer;
										function getDefaultHillshadeHighlightColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeHighlightColorUseTheme(): string;
										function getDefaultHillshadeHighlightColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeIlluminationAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
										function getDefaultHillshadeIlluminationAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeIlluminationDirection(): java.lang.Double;
										function getDefaultHillshadeIlluminationDirectionAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeShadowColor(): string;
										function getDefaultHillshadeShadowColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultHillshadeShadowColorAsColorInt(): java.lang.Integer;
										function getDefaultHillshadeShadowColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultHillshadeShadowColorUseTheme(): string;
										function getDefaultHillshadeShadowColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class HillshadeLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.HillshadeLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.HillshadeLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeAccentColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeAccentColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeAccentColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeAccentColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeAccentColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeAccentColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeAccentColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeExaggeration(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeExaggeration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeExaggerationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeExaggerationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeHighlightColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeHighlightColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeHighlightColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeHighlightColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeHighlightColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeHighlightColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeHighlightColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeIlluminationAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeIlluminationAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeIlluminationDirection(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeIlluminationDirection(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeShadowColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeShadowColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeShadowColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeShadowColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeShadowColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeShadowColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
									hillshadeShadowColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								});
								public constructor();
								public hillshadeIlluminationAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggerationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggeration(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeIlluminationDirection(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggerationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeIlluminationAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColor(param0: number): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeIlluminationDirection(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeShadowColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeAccentColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeExaggeration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
								public hillshadeHighlightColor(param0: string): com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
							}
							export namespace HillshadeLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.HillshadeLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class LineLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.LineLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.LineLayer>;
								public lineMiterLimit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineBorderColorUseTheme(): string;
								public getLineTrimFadeRange(): java.util.List<java.lang.Double>;
								public lineOcclusionOpacityTransition(this_l_47d: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorTransition(this_l_acb: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOpacity(): java.lang.Double;
								public getLineElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
								public getType$extension_style_release(): string;
								public lineZOffset(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public lineOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimOffset(): java.util.List<java.lang.Double>;
								public lineTrimColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineCutoutWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOcclusionOpacity(): java.lang.Double;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public getLineRoundLimit(): java.lang.Double;
								public lineTrimColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineSortKey(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineBorderColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineCutoutWidth(): java.lang.Double;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public lineCutoutWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getLineTrimColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffset(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthUnit(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineJoin(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlur(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacityTransition(this_l_deb: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineCrossSlope(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineMiterLimit(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateTransition(this_l_0be: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineJoin(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineGapWidth(): java.lang.Double;
								public getLineDasharray(): java.util.List<java.lang.Double>;
								public getLineCrossSlopeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineCutoutOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineTrimOffset(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineGapWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineColor(): string;
								public getMinZoom(): java.lang.Double;
								public lineGradientUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDasharray(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineWidthUnit(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGradientUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthUnit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGradientUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimFadeRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlurTransition(this_l_68d: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePatternCrossFade(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineJoin(): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
								public getLineOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineCutoutWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineRoundLimit(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineMiterLimit(): java.lang.Double;
								public lineTrimColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCap(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public linePattern(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePatternCrossFade(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCrossSlope(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorTransition(this_l_687: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffsetTransition(this_l_26f: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineTrimColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLinePatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidthTransition(this_l_7f8: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineCutoutOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineWidthTransition(this_l_459: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineDepthOcclusionFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlur(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineBorderColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineBorderColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineGapWidthTransition(this_l_458: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineCutoutOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineCap(): com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
								public lineOcclusionOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineDepthOcclusionFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineJoin(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineColorAsColorInt(): java.lang.Integer;
								public lineColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrengthTransition(this_l_d1b: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimColorAsColorInt(): java.lang.Integer;
								public lineCap(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineCap): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineElevationReference(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimColor(): string;
								public getSourceId(): string;
								public lineTranslate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineBorderWidth(): java.lang.Double;
								public lineBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLinePatternCrossFade(): java.lang.Double;
								public getLineBorderWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getSlot(): string;
								public getLineEmissiveStrength(): java.lang.Double;
								public getLineRoundLimitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineDasharray(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineRoundLimit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineCutoutWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineBorderWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineElevationReference(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineColorUseTheme(): string;
								public linePattern(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslate(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGradientUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineOffsetTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimColorUseTheme(): string;
								public lineTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineBorderColorAsColorInt(): java.lang.Integer;
								public lineColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineBorderColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorTransition(this_l_19b: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacityTransition(this_l_8a0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineDepthOcclusionFactor(): java.lang.Double;
								public lineMiterLimit(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineWidthUnit(): com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
								public lineZOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public lineJoin(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthUnit(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactorTransition(this_l_60c: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineDasharray(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public constructor(layerId: string, sourceId: string);
								public getLineBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineCutoutOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineCrossSlope(): java.lang.Double;
								public lineTrimColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCap(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.LineCap): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getMaxZoom(): java.lang.Double;
								public lineTrimColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlurTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineGapWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getLineBorderWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineCutoutOpacity(): java.lang.Double;
								public lineWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineGradient(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineWidth(): java.lang.Double;
								public lineElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
								public lineTrimFadeRange(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimFadeRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLayerId(): string;
								public getLineDasharrayAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineDasharray(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineMiterLimit(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineSortKey(): java.lang.Double;
								public lineBorderColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineRoundLimit(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineWidthUnitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public constructor();
								public lineCrossSlope(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePattern(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTranslate(): java.util.List<java.lang.Double>;
								public getLineZOffset(): java.lang.Double;
								public getLineDepthOcclusionFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineBorderWidthTransition(this_l_cfe: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public getSourceLayer(): string;
								public lineCutoutOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineGradientUseTheme(): string;
								public lineColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineBorderColor(): string;
								public getLineBorderColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineDepthOcclusionFactor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineGradientUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public linePatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineRoundLimit(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineBlur(): java.lang.Double;
								public lineDepthOcclusionFactor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLinePattern(): string;
								public lineCrossSlope(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineOffset(): java.lang.Double;
								public getLineJoinAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineDepthOcclusionFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLinePatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public lineColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineSortKey(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineGradient(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineCapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getLineMiterLimitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public lineColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public getLineTrimColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public linePatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
							}
							export namespace LineLayer {
								export namespace LineLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultLineCap(): com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
										function getDefaultLineCapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCrossSlope(): java.lang.Double;
										function getDefaultLineCrossSlopeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCutoutOpacity(): java.lang.Double;
										function getDefaultLineCutoutOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCutoutOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineCutoutWidth(): java.lang.Double;
										function getDefaultLineCutoutWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCutoutWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
										function getDefaultLineElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineJoin(): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
										function getDefaultLineJoinAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineMiterLimit(): java.lang.Double;
										function getDefaultLineMiterLimitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineRoundLimit(): java.lang.Double;
										function getDefaultLineRoundLimitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineSortKey(): java.lang.Double;
										function getDefaultLineSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineWidthUnit(): com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
										function getDefaultLineWidthUnitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineZOffset(): java.lang.Double;
										function getDefaultLineZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBlur(): java.lang.Double;
										function getDefaultLineBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineBorderColor(): string;
										function getDefaultLineBorderColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBorderColorAsColorInt(): java.lang.Integer;
										function getDefaultLineBorderColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineBorderColorUseTheme(): string;
										function getDefaultLineBorderColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBorderWidth(): java.lang.Double;
										function getDefaultLineBorderWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBorderWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineColor(): string;
										function getDefaultLineColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineColorAsColorInt(): java.lang.Integer;
										function getDefaultLineColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineColorUseTheme(): string;
										function getDefaultLineColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineDasharray(): java.util.List<java.lang.Double>;
										function getDefaultLineDasharrayAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineDepthOcclusionFactor(): java.lang.Double;
										function getDefaultLineDepthOcclusionFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineDepthOcclusionFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineEmissiveStrength(): java.lang.Double;
										function getDefaultLineEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineGapWidth(): java.lang.Double;
										function getDefaultLineGapWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineGapWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineGradientUseTheme(): string;
										function getDefaultLineGradientUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOcclusionOpacity(): java.lang.Double;
										function getDefaultLineOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineOffset(): java.lang.Double;
										function getDefaultLineOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineOpacity(): java.lang.Double;
										function getDefaultLineOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLinePattern(): string;
										function getDefaultLinePatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLinePatternCrossFade(): java.lang.Double;
										function getDefaultLinePatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTranslate(): java.util.List<java.lang.Double>;
										function getDefaultLineTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
										function getDefaultLineTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimColor(): string;
										function getDefaultLineTrimColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimColorAsColorInt(): java.lang.Integer;
										function getDefaultLineTrimColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineTrimColorUseTheme(): string;
										function getDefaultLineTrimColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimFadeRange(): java.util.List<java.lang.Double>;
										function getDefaultLineTrimFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimOffset(): java.util.List<java.lang.Double>;
										function getDefaultLineTrimOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineWidth(): java.lang.Double;
										function getDefaultLineWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultLineCap(): com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
										function getDefaultLineCapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCrossSlope(): java.lang.Double;
										function getDefaultLineCrossSlopeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCutoutOpacity(): java.lang.Double;
										function getDefaultLineCutoutOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCutoutOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineCutoutWidth(): java.lang.Double;
										function getDefaultLineCutoutWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineCutoutWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
										function getDefaultLineElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineJoin(): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
										function getDefaultLineJoinAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineMiterLimit(): java.lang.Double;
										function getDefaultLineMiterLimitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineRoundLimit(): java.lang.Double;
										function getDefaultLineRoundLimitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineSortKey(): java.lang.Double;
										function getDefaultLineSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineWidthUnit(): com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
										function getDefaultLineWidthUnitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineZOffset(): java.lang.Double;
										function getDefaultLineZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBlur(): java.lang.Double;
										function getDefaultLineBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineBorderColor(): string;
										function getDefaultLineBorderColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBorderColorAsColorInt(): java.lang.Integer;
										function getDefaultLineBorderColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineBorderColorUseTheme(): string;
										function getDefaultLineBorderColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBorderWidth(): java.lang.Double;
										function getDefaultLineBorderWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineBorderWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineColor(): string;
										function getDefaultLineColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineColorAsColorInt(): java.lang.Integer;
										function getDefaultLineColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineColorUseTheme(): string;
										function getDefaultLineColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineDasharray(): java.util.List<java.lang.Double>;
										function getDefaultLineDasharrayAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineDepthOcclusionFactor(): java.lang.Double;
										function getDefaultLineDepthOcclusionFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineDepthOcclusionFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineEmissiveStrength(): java.lang.Double;
										function getDefaultLineEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineGapWidth(): java.lang.Double;
										function getDefaultLineGapWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineGapWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineGradientUseTheme(): string;
										function getDefaultLineGradientUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOcclusionOpacity(): java.lang.Double;
										function getDefaultLineOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineOffset(): java.lang.Double;
										function getDefaultLineOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineOpacity(): java.lang.Double;
										function getDefaultLineOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLinePattern(): string;
										function getDefaultLinePatternAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLinePatternCrossFade(): java.lang.Double;
										function getDefaultLinePatternCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTranslate(): java.util.List<java.lang.Double>;
										function getDefaultLineTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
										function getDefaultLineTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimColor(): string;
										function getDefaultLineTrimColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimColorAsColorInt(): java.lang.Integer;
										function getDefaultLineTrimColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLineTrimColorUseTheme(): string;
										function getDefaultLineTrimColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimFadeRange(): java.util.List<java.lang.Double>;
										function getDefaultLineTrimFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineTrimOffset(): java.util.List<java.lang.Double>;
										function getDefaultLineTrimOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineWidth(): java.lang.Double;
										function getDefaultLineWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLineWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class LineLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.LineLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.LineLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCap(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineCap): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCrossSlope(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCrossSlope(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineCutoutWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineJoin(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineJoin(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineMiterLimit(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineMiterLimit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineRoundLimit(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineRoundLimit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineWidthUnit(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineWidthUnit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineBorderWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineDasharray(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineDasharray(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineDepthOcclusionFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineDepthOcclusionFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineDepthOcclusionFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineDepthOcclusionFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineGapWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineGapWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineGapWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineGapWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineGradientUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineGradientUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									linePattern(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									linePattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									linePatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									linePatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimFadeRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineTrimOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
									lineWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								});
								public constructor();
								public lineMiterLimit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDasharray(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineRoundLimit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePattern(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineJoin(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCrossSlope(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineJoin(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineMiterLimit(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDasharray(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGradientUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthUnit(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGradientUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthUnit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimFadeRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineRoundLimit(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePattern(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTrimColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePatternCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCrossSlope(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCutoutOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineDepthOcclusionFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineCap(param0: com.mapbox.maps.extension.style.layers.properties.generated.LineCap): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineGapWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public lineBorderColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LineLayer;
								public linePatternCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LineLayer;
							}
							export namespace LineLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.LineLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class LocationIndicatorLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer>;
								public locationIndicatorOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSizeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusBorderColor(): string;
								public getTopImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getType$extension_style_release(): string;
								public emphasisCircleColorTransition(this_e_1f6: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public location(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getLocationIndicatorOpacity(): java.lang.Double;
								public accuracyRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadiusTransition(this_e_16c: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public locationIndicatorOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getBearingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public emphasisCircleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public topImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getTopImageSize(): java.lang.Double;
								public emphasisCircleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getShadowImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public getEmphasisCircleGlowRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public accuracyRadiusBorderColorTransition(this_a_624: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSize(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSize(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleColor(): string;
								public emphasisCircleGlowRangeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearing(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getBearingImage(): string;
								public accuracyRadiusColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImage(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public perspectiveCompensation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusColorUseTheme(): string;
								public bearingImageSize(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getMinZoom(): java.lang.Double;
								public location(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorTransition(this_a_b10: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public imagePitchDisplacement(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleRadius(): java.lang.Double;
								public bearingImageSizeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getPerspectiveCompensation(): java.lang.Double;
								public shadowImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImage(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public imagePitchDisplacement(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImage(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleColorUseTheme(): string;
								public shadowImageSizeTransition(this_s_12e: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getLocationIndicatorOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public accuracyRadiusColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getTopImage(): string;
								public getBearingImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public locationIndicatorOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getLocation(): java.util.List<java.lang.Double>;
								public getTopImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public perspectiveCompensation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImage(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public location(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusBorderColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getEmphasisCircleColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public accuracyRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public bearingImageSize(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getLocationIndicatorOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public bearingImageSizeTransition(this_b_c7d: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getPerspectiveCompensationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getShadowImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public bearingImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getBearingImageSize(): java.lang.Double;
								public getShadowImage(): string;
								public emphasisCircleColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public perspectiveCompensation(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getSlot(): string;
								public accuracyRadiusColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getBearingTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public shadowImageSize(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRangeTransition(this_e_1fa: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public imagePitchDisplacement(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getLocationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public accuracyRadiusColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getLocationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public locationIndicatorOpacityTransition(this_l_2c2: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getShadowImageSize(): java.lang.Double;
								public getAccuracyRadiusBorderColorAsColorInt(): java.lang.Integer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearing(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getAccuracyRadiusBorderColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getAccuracyRadiusBorderColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public emphasisCircleGlowRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public imagePitchDisplacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRange(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public getTopImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public perspectiveCompensation(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getShadowImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public topImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusBorderColorUseTheme(): string;
								public getMaxZoom(): java.lang.Double;
								public topImageSizeTransition(this_t_4e7: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getImagePitchDisplacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor(layerId: string);
								public getEmphasisCircleGlowRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getImagePitchDisplacement(): java.lang.Double;
								public getBearingImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public accuracyRadiusTransition(this_a_111: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getBearing(): java.lang.Double;
								public topImageSizeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getLayerId(): string;
								public accuracyRadiusBorderColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusColorAsColorInt(): java.lang.Integer;
								public getEmphasisCircleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public accuracyRadiusBorderColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public location(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadius(): java.lang.Double;
								public emphasisCircleColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public accuracyRadiusBorderColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getAccuracyRadiusColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getAccuracyRadiusColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public bearingImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRangeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public constructor();
								public getAccuracyRadiusColor(): string;
								public accuracyRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImage(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingTransition(this_b_851: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleGlowRange(): java.util.List<java.lang.Double>;
								public bearingTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public emphasisCircleGlowRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getBearingImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public locationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleColorAsColorInt(): java.lang.Integer;
								public bearingTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImage(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearing(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSize(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public topImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationTransition(this_l_738: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public getEmphasisCircleRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public emphasisCircleColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
							}
							export namespace LocationIndicatorLayer {
								export namespace LocationIndicatorLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultAccuracyRadius(): java.lang.Double;
										function getDefaultAccuracyRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultAccuracyRadiusBorderColor(): string;
										function getDefaultAccuracyRadiusBorderColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusBorderColorAsColorInt(): java.lang.Integer;
										function getDefaultAccuracyRadiusBorderColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultAccuracyRadiusBorderColorUseTheme(): string;
										function getDefaultAccuracyRadiusBorderColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusColor(): string;
										function getDefaultAccuracyRadiusColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusColorAsColorInt(): java.lang.Integer;
										function getDefaultAccuracyRadiusColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultAccuracyRadiusColorUseTheme(): string;
										function getDefaultAccuracyRadiusColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearing(): java.lang.Double;
										function getDefaultBearingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearingTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBearingImage(): string;
										function getDefaultBearingImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearingImageSize(): java.lang.Double;
										function getDefaultBearingImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearingImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultEmphasisCircleColor(): string;
										function getDefaultEmphasisCircleColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleColorAsColorInt(): java.lang.Integer;
										function getDefaultEmphasisCircleColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultEmphasisCircleColorUseTheme(): string;
										function getDefaultEmphasisCircleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleGlowRange(): java.util.List<java.lang.Double>;
										function getDefaultEmphasisCircleGlowRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleGlowRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultEmphasisCircleRadius(): java.lang.Double;
										function getDefaultEmphasisCircleRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultImagePitchDisplacement(): java.lang.Double;
										function getDefaultImagePitchDisplacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLocation(): java.util.List<java.lang.Double>;
										function getDefaultLocationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLocationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLocationIndicatorOpacity(): java.lang.Double;
										function getDefaultLocationIndicatorOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLocationIndicatorOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultPerspectiveCompensation(): java.lang.Double;
										function getDefaultPerspectiveCompensationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultShadowImage(): string;
										function getDefaultShadowImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultShadowImageSize(): java.lang.Double;
										function getDefaultShadowImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultShadowImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTopImage(): string;
										function getDefaultTopImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTopImageSize(): java.lang.Double;
										function getDefaultTopImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTopImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultAccuracyRadius(): java.lang.Double;
										function getDefaultAccuracyRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultAccuracyRadiusBorderColor(): string;
										function getDefaultAccuracyRadiusBorderColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusBorderColorAsColorInt(): java.lang.Integer;
										function getDefaultAccuracyRadiusBorderColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultAccuracyRadiusBorderColorUseTheme(): string;
										function getDefaultAccuracyRadiusBorderColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusColor(): string;
										function getDefaultAccuracyRadiusColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultAccuracyRadiusColorAsColorInt(): java.lang.Integer;
										function getDefaultAccuracyRadiusColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultAccuracyRadiusColorUseTheme(): string;
										function getDefaultAccuracyRadiusColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearing(): java.lang.Double;
										function getDefaultBearingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearingTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultBearingImage(): string;
										function getDefaultBearingImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearingImageSize(): java.lang.Double;
										function getDefaultBearingImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultBearingImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultEmphasisCircleColor(): string;
										function getDefaultEmphasisCircleColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleColorAsColorInt(): java.lang.Integer;
										function getDefaultEmphasisCircleColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultEmphasisCircleColorUseTheme(): string;
										function getDefaultEmphasisCircleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleGlowRange(): java.util.List<java.lang.Double>;
										function getDefaultEmphasisCircleGlowRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleGlowRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultEmphasisCircleRadius(): java.lang.Double;
										function getDefaultEmphasisCircleRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultEmphasisCircleRadiusTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultImagePitchDisplacement(): java.lang.Double;
										function getDefaultImagePitchDisplacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLocation(): java.util.List<java.lang.Double>;
										function getDefaultLocationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLocationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultLocationIndicatorOpacity(): java.lang.Double;
										function getDefaultLocationIndicatorOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultLocationIndicatorOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultPerspectiveCompensation(): java.lang.Double;
										function getDefaultPerspectiveCompensationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultShadowImage(): string;
										function getDefaultShadowImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultShadowImageSize(): java.lang.Double;
										function getDefaultShadowImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultShadowImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTopImage(): string;
										function getDefaultTopImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTopImageSize(): java.lang.Double;
										function getDefaultTopImageSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTopImageSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class LocationIndicatorLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusBorderColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusBorderColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusBorderColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusBorderColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusBorderColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusBorderColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusBorderColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									accuracyRadiusColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearing(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									bearingImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleGlowRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleGlowRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleGlowRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleGlowRangeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									emphasisCircleRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									imagePitchDisplacement(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									imagePitchDisplacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									location(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									location(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									locationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									locationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									locationIndicatorOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									locationIndicatorOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									locationIndicatorOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									locationIndicatorOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									perspectiveCompensation(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									perspectiveCompensation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									shadowImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									shadowImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									shadowImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									shadowImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									shadowImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									shadowImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									topImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									topImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									topImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									topImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									topImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
									topImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								});
								public constructor();
								public accuracyRadiusBorderColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public imagePitchDisplacement(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public imagePitchDisplacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public perspectiveCompensation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleGlowRangeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public location(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public perspectiveCompensation(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearing(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImageSize(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusBorderColor(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public locationIndicatorOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImageSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public location(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImageSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleColor(param0: number): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public topImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImage(param0: string): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public emphasisCircleRadiusTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public accuracyRadiusColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public bearingImageSizeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
								public shadowImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer;
							}
							export namespace LocationIndicatorLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class ModelLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.ModelLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.ModelLayer>;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelScaleMode(): com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
								public modelReceiveShadows(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getType$extension_style_release(): string;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public modelScaleMode(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelType(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelType(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelType): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplier(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorMixIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public modelCutoffFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelRoughnessTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public modelTranslationTransition(this_m_64b: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelColorUseTheme(): string;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public modelTranslation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplier(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotation(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelColorMixIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCastShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelScaleModeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelId(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelTranslationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getModelColor(): string;
								public modelType(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getMinZoom(): java.lang.Double;
								public modelCutoffFadeRange(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplier(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelReceiveShadows(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelCutoffFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelColorMixIntensity(): java.lang.Double;
								public getModelEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public modelColorMixIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelHeightBasedEmissiveStrengthMultiplier(): java.util.List<java.lang.Double>;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelRotationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getModelType(): com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
								public getModelCastShadowsAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelHeightBasedEmissiveStrengthMultiplierTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelReceiveShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScale(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleMode(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScale(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorMixIntensityTransition(this_m_09c: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCastShadows(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleMode(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelReceiveShadows(param0: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelTranslation(): java.util.List<java.lang.Double>;
								public modelCastShadows(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughnessTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getSourceId(): string;
								public getModelHeightBasedEmissiveStrengthMultiplierAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelColorMixIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplierTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelIdAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelOpacityTransition(this_m_809: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getSlot(): string;
								public getModelAmbientOcclusionIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public modelOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelScale(): java.util.List<java.lang.Double>;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelTranslationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getModelReceiveShadowsAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getModelReceiveShadows(): java.lang.Boolean;
								public modelColorMixIntensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelRoughness(): java.lang.Double;
								public modelEmissiveStrengthTransition(this_m_633: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelCutoffFadeRange(): java.lang.Double;
								public getModelOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelEmissiveStrength(): java.lang.Double;
								public modelColor(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelAmbientOcclusionIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelRoughness(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughness(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslation(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelRoughnessAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelAmbientOcclusionIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelId(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScale(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelId(): string;
								public modelColorMixIntensity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorMixIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelScaleTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public modelScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelAmbientOcclusionIntensity(): java.lang.Double;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public modelRotation(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelElevationReference(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public constructor(layerId: string, sourceId: string);
								public modelScaleTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelColorAsColorInt(): java.lang.Integer;
								public modelRoughness(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getMaxZoom(): java.lang.Double;
								public modelTranslation(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelElevationReference(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelColorMixIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getModelOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public modelAmbientOcclusionIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelCastShadows(): java.lang.Boolean;
								public modelRoughnessTransition(this_m_87b: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getLayerId(): string;
								public modelColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplier(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplierTransition(this_m_343: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelColorMixIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getModelColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public modelOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelOpacity(): java.lang.Double;
								public modelOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleMode(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleTransition(this_m_74e: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelHeightBasedEmissiveStrengthMultiplierTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getModelScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelRoughnessTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelRotation(): java.util.List<java.lang.Double>;
								public getModelElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
								public modelColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public constructor();
								public modelRotation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughnessTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelAmbientOcclusionIntensity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelRotationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelColor(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelTypeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public modelColorTransition(this_m_155: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCutoffFadeRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensityTransition(this_m_880: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelId(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotationTransition(this_m_6a7: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public modelRotationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getSourceLayer(): string;
								public modelRotationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelId(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCutoffFadeRange(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughness(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public getModelElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public modelAmbientOcclusionIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelType(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.ModelType): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplierTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCastShadows(param0: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
							}
							export namespace ModelLayer {
								export namespace ModelLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultModelId(): string;
										function getDefaultModelIdAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelAmbientOcclusionIntensity(): java.lang.Double;
										function getDefaultModelAmbientOcclusionIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelAmbientOcclusionIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelCastShadows(): java.lang.Boolean;
										function getDefaultModelCastShadowsAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColor(): string;
										function getDefaultModelColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColorAsColorInt(): java.lang.Integer;
										function getDefaultModelColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelColorUseTheme(): string;
										function getDefaultModelColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColorMixIntensity(): java.lang.Double;
										function getDefaultModelColorMixIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColorMixIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelCutoffFadeRange(): java.lang.Double;
										function getDefaultModelCutoffFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
										function getDefaultModelElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelEmissiveStrength(): java.lang.Double;
										function getDefaultModelEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelHeightBasedEmissiveStrengthMultiplier(): java.util.List<java.lang.Double>;
										function getDefaultModelHeightBasedEmissiveStrengthMultiplierAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelHeightBasedEmissiveStrengthMultiplierTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelOpacity(): java.lang.Double;
										function getDefaultModelOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelReceiveShadows(): java.lang.Boolean;
										function getDefaultModelReceiveShadowsAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelRotation(): java.util.List<java.lang.Double>;
										function getDefaultModelRotationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelRotationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelRoughness(): java.lang.Double;
										function getDefaultModelRoughnessAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelRoughnessTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelScale(): java.util.List<java.lang.Double>;
										function getDefaultModelScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelScaleTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelScaleMode(): com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
										function getDefaultModelScaleModeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelTranslation(): java.util.List<java.lang.Double>;
										function getDefaultModelTranslationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelTranslationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelType(): com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
										function getDefaultModelTypeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultModelId(): string;
										function getDefaultModelIdAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelAmbientOcclusionIntensity(): java.lang.Double;
										function getDefaultModelAmbientOcclusionIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelAmbientOcclusionIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelCastShadows(): java.lang.Boolean;
										function getDefaultModelCastShadowsAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColor(): string;
										function getDefaultModelColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColorAsColorInt(): java.lang.Integer;
										function getDefaultModelColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelColorUseTheme(): string;
										function getDefaultModelColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColorMixIntensity(): java.lang.Double;
										function getDefaultModelColorMixIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelColorMixIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelCutoffFadeRange(): java.lang.Double;
										function getDefaultModelCutoffFadeRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
										function getDefaultModelElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelEmissiveStrength(): java.lang.Double;
										function getDefaultModelEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelHeightBasedEmissiveStrengthMultiplier(): java.util.List<java.lang.Double>;
										function getDefaultModelHeightBasedEmissiveStrengthMultiplierAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelHeightBasedEmissiveStrengthMultiplierTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelOpacity(): java.lang.Double;
										function getDefaultModelOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelReceiveShadows(): java.lang.Boolean;
										function getDefaultModelReceiveShadowsAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelRotation(): java.util.List<java.lang.Double>;
										function getDefaultModelRotationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelRotationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelRoughness(): java.lang.Double;
										function getDefaultModelRoughnessAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelRoughnessTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelScale(): java.util.List<java.lang.Double>;
										function getDefaultModelScaleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelScaleTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelScaleMode(): com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
										function getDefaultModelScaleModeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelTranslation(): java.util.List<java.lang.Double>;
										function getDefaultModelTranslationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultModelTranslationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultModelType(): com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
										function getDefaultModelTypeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class ModelLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.ModelLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.ModelLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelId(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelId(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelAmbientOcclusionIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelAmbientOcclusionIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelAmbientOcclusionIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelAmbientOcclusionIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelCastShadows(param0: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelCastShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColor(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColor(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorMixIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorMixIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorMixIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelColorMixIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelCutoffFadeRange(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelCutoffFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelHeightBasedEmissiveStrengthMultiplier(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelHeightBasedEmissiveStrengthMultiplier(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelHeightBasedEmissiveStrengthMultiplierTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelHeightBasedEmissiveStrengthMultiplierTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelReceiveShadows(param0: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelReceiveShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRotation(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRotation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRotationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRotationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRoughness(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRoughness(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRoughnessTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelRoughnessTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelScale(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelScaleTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelScaleTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelScaleMode(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelScaleMode(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelTranslation(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelTranslation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelTranslationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelTranslationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelType(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelType): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
									modelType(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								});
								public constructor();
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplier(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleMode(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughnessTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelType(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColor(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelType(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelType): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorMixIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCutoffFadeRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughness(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelReceiveShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslation(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScale(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleMode(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColor(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelId(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorMixIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScale(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotation(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorMixIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCutoffFadeRange(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCastShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelId(param0: string): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelScaleTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelReceiveShadows(param0: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughness(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplierTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRoughnessTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplier(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelColorMixIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelHeightBasedEmissiveStrengthMultiplierTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelAmbientOcclusionIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelCastShadows(param0: boolean): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelRotationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
								public modelTranslationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.ModelLayer;
							}
							export namespace ModelLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.ModelLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class RasterLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.RasterLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.RasterLayer>;
								public getRasterColorMix(): java.util.List<java.lang.Double>;
								public rasterColorMix(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotate(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getType$extension_style_release(): string;
								public rasterSaturation(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMinTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterArrayBandAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterSaturation(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMin(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMin(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMixTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public getRasterSaturation(): java.lang.Double;
								public rasterElevation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMax(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMinTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterFadeDuration(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public rasterHueRotateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterResampling(param0: com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRangeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterFadeDuration(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterBrightnessMin(): java.lang.Double;
								public rasterBrightnessMaxTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMix(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrast(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public rasterBrightnessMax(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterElevationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterElevationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterColorRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterColorMix(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMixTransition(this_r_154: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public getRasterResamplingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterHueRotate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMaxTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrengthTransition(this_r_1a6: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterColorMixTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterElevation(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public constructor(layerId: string, sourceId: string);
								public getRasterBrightnessMaxTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevationTransition(this_r_58b: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getMaxZoom(): java.lang.Double;
								public rasterResampling(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMaxTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRangeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getMinZoom(): java.lang.Double;
								public rasterEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterBrightnessMinAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getRasterSaturationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterFadeDurationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterArrayBand(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getRasterColorMixAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterContrastTransition(this_r_796: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturationTransition(this_r_7b0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterArrayBand(): string;
								public rasterBrightnessMax(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterHueRotate(): java.lang.Double;
								public getLayerId(): string;
								public rasterOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterFadeDuration(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMinTransition(this_r_c12: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterArrayBand(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotateTransition(this_r_db2: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterBrightnessMaxAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterColorRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterBrightnessMax(): java.lang.Double;
								public getRasterColorRange(): java.util.List<java.lang.Double>;
								public getRasterColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterFadeDuration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRangeTransition(this_r_437: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterFadeDuration(): java.lang.Double;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterElevationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterResampling(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrast(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public constructor();
								public rasterOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrast(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMax(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterColorRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterContrastTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterContrastTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterElevation(): java.lang.Double;
								public rasterHueRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMixTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getRasterColorUseTheme(): string;
								public rasterColorMixTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public rasterSaturationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMix(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterContrastTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getSourceLayer(): string;
								public rasterColorRange(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterResampling(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevation(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterHueRotateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterColorRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterBrightnessMinTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getRasterHueRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterSaturationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMin(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterContrastAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterArrayBand(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getRasterSaturationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterBrightnessMin(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterResampling(): com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
								public rasterHueRotateTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMaxTransition(this_r_c18: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacityTransition(this_r_02e: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterArrayBand(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrastTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterContrast(): java.lang.Double;
								public getRasterOpacity(): java.lang.Double;
								public getRasterOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSourceId(): string;
								public rasterContrast(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getRasterEmissiveStrength(): java.lang.Double;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMinTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public getSlot(): string;
							}
							export namespace RasterLayer {
								export namespace RasterLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultRasterArrayBand(): string;
										function getDefaultRasterArrayBandAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterBrightnessMax(): java.lang.Double;
										function getDefaultRasterBrightnessMaxAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterBrightnessMaxTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterBrightnessMin(): java.lang.Double;
										function getDefaultRasterBrightnessMinAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterBrightnessMinTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterColorUseTheme(): string;
										function getDefaultRasterColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterColorMix(): java.util.List<java.lang.Double>;
										function getDefaultRasterColorMixAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterColorMixTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterColorRange(): java.util.List<java.lang.Double>;
										function getDefaultRasterColorRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterColorRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterContrast(): java.lang.Double;
										function getDefaultRasterContrastAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterContrastTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterElevation(): java.lang.Double;
										function getDefaultRasterElevationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterElevationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterEmissiveStrength(): java.lang.Double;
										function getDefaultRasterEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterFadeDuration(): java.lang.Double;
										function getDefaultRasterFadeDurationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterHueRotate(): java.lang.Double;
										function getDefaultRasterHueRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterHueRotateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterOpacity(): java.lang.Double;
										function getDefaultRasterOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterResampling(): com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
										function getDefaultRasterResamplingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterSaturation(): java.lang.Double;
										function getDefaultRasterSaturationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterSaturationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultRasterArrayBand(): string;
										function getDefaultRasterArrayBandAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterBrightnessMax(): java.lang.Double;
										function getDefaultRasterBrightnessMaxAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterBrightnessMaxTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterBrightnessMin(): java.lang.Double;
										function getDefaultRasterBrightnessMinAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterBrightnessMinTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterColorUseTheme(): string;
										function getDefaultRasterColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterColorMix(): java.util.List<java.lang.Double>;
										function getDefaultRasterColorMixAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterColorMixTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterColorRange(): java.util.List<java.lang.Double>;
										function getDefaultRasterColorRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterColorRangeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterContrast(): java.lang.Double;
										function getDefaultRasterContrastAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterContrastTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterElevation(): java.lang.Double;
										function getDefaultRasterElevationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterElevationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterEmissiveStrength(): java.lang.Double;
										function getDefaultRasterEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterFadeDuration(): java.lang.Double;
										function getDefaultRasterFadeDurationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterHueRotate(): java.lang.Double;
										function getDefaultRasterHueRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterHueRotateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterOpacity(): java.lang.Double;
										function getDefaultRasterOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterResampling(): com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
										function getDefaultRasterResamplingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterSaturation(): java.lang.Double;
										function getDefaultRasterSaturationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterSaturationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class RasterLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.RasterLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.RasterLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterArrayBand(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterArrayBand(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMax(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMax(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMaxTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMaxTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMin(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMin(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMinTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterBrightnessMinTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorMix(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorMix(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorMixTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorMixTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterColorRangeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterContrast(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterContrast(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterContrastTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterContrastTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterElevation(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterElevation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterElevationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterElevationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterFadeDuration(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterFadeDuration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterHueRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterHueRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterHueRotateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterHueRotateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterResampling(param0: com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterResampling(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterSaturation(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterSaturation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterSaturationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
									rasterSaturationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								});
								public constructor();
								public rasterBrightnessMax(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMix(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMinTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterArrayBand(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturation(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMin(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMixTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterFadeDuration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMinTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterFadeDuration(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterResampling(param0: com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrast(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMax(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMaxTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrastTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterHueRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMixTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorMix(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRangeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMaxTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterElevation(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterArrayBand(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterBrightnessMin(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterSaturation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterResampling(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterColorRangeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrastTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
								public rasterContrast(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterLayer;
							}
							export namespace RasterLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.RasterLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class RasterParticleLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.RasterParticleLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer>;
								public rasterParticleArrayBand(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getLayerId(): string;
								public rasterParticleCount(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getType$extension_style_release(): string;
								public rasterParticleCount(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleFadeOpacityFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterParticleResetRateFactor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactorTransition(this_r_194: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleMaxSpeedAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getRasterParticleSpeedFactor(): java.lang.Double;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleArrayBand(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleArrayBand(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterParticleMaxSpeed(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public constructor();
								public getRasterParticleArrayBand(): string;
								public getRasterParticleColorUseTheme(): string;
								public rasterParticleFadeOpacityFactorTransition(this_r_c50: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterParticleColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public getRasterParticleSpeedFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterParticleArrayBand(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleArrayBandAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public rasterParticleSpeedFactor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getSourceLayer(): string;
								public rasterParticleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public rasterParticleCount(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleFadeOpacityFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getRasterParticleMaxSpeed(): java.lang.Double;
								public rasterParticleMaxSpeed(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public constructor(layerId: string, sourceId: string);
								public getRasterParticleFadeOpacityFactor(): java.lang.Double;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterParticleMaxSpeed(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleSpeedFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public rasterParticleCount(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleResetRateFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleMaxSpeed(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getMaxZoom(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public rasterParticleSpeedFactorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getMinZoom(): java.lang.Double;
								public getRasterParticleResetRateFactor(): java.lang.Double;
								public getRasterParticleCountAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public rasterParticleFadeOpacityFactorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getSourceId(): string;
								public rasterParticleResetRateFactor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getRasterParticleCount(): java.lang.Long;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleResetRateFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public getSlot(): string;
								public rasterParticleResetRateFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
							}
							export namespace RasterParticleLayer {
								export namespace RasterParticleLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultRasterParticleArrayBand(): string;
										function getDefaultRasterParticleArrayBandAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleColorUseTheme(): string;
										function getDefaultRasterParticleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleCount(): java.lang.Long;
										function getDefaultRasterParticleCountAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleFadeOpacityFactor(): java.lang.Double;
										function getDefaultRasterParticleFadeOpacityFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleFadeOpacityFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterParticleMaxSpeed(): java.lang.Double;
										function getDefaultRasterParticleMaxSpeedAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleResetRateFactor(): java.lang.Double;
										function getDefaultRasterParticleResetRateFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleSpeedFactor(): java.lang.Double;
										function getDefaultRasterParticleSpeedFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleSpeedFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultRasterParticleArrayBand(): string;
										function getDefaultRasterParticleArrayBandAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleColor(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleColorUseTheme(): string;
										function getDefaultRasterParticleColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleCount(): java.lang.Long;
										function getDefaultRasterParticleCountAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleFadeOpacityFactor(): java.lang.Double;
										function getDefaultRasterParticleFadeOpacityFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleFadeOpacityFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultRasterParticleMaxSpeed(): java.lang.Double;
										function getDefaultRasterParticleMaxSpeedAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleResetRateFactor(): java.lang.Double;
										function getDefaultRasterParticleResetRateFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleSpeedFactor(): java.lang.Double;
										function getDefaultRasterParticleSpeedFactorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultRasterParticleSpeedFactorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class RasterParticleLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.RasterParticleLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.RasterParticleLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleArrayBand(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleArrayBand(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleCount(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleCount(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleFadeOpacityFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleFadeOpacityFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleFadeOpacityFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleFadeOpacityFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleMaxSpeed(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleMaxSpeed(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleResetRateFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleResetRateFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleSpeedFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleSpeedFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleSpeedFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
									rasterParticleSpeedFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								});
								public constructor();
								public rasterParticleArrayBand(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleCount(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleMaxSpeed(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleMaxSpeed(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleCount(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleArrayBand(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleResetRateFactor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleSpeedFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleResetRateFactor(param0: number): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
								public rasterParticleFadeOpacityFactorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.RasterParticleLayer;
							}
							export namespace RasterParticleLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.RasterParticleLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class SkyLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.SkyLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SkyLayer>;
								public getSkyTypeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyAtmosphereSunIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientRadius(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getType$extension_style_release(): string;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public skyAtmosphereSun(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public skyGradient(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyGradientUseTheme(): string;
								public skyGradientCenter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereSun(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public skyAtmosphereColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyOpacityTransition(this_s_12b: any): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyGradientCenter(): java.util.List<java.lang.Double>;
								public skyOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyGradientUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSkyAtmosphereHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyAtmosphereColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public skyAtmosphereColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientRadius(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyGradientCenterAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyAtmosphereColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyType(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.SkyType): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getMaxZoom(): java.lang.Double;
								public skyGradientCenter(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getMinZoom(): java.lang.Double;
								public skyAtmosphereHaloColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereSunIntensity(): java.lang.Double;
								public getSkyAtmosphereSunIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public constructor(layerId: string);
								public getSkyAtmosphereColor(): string;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereSun(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereHaloColorUseTheme(): string;
								public skyAtmosphereSun(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereHaloColorAsColorInt(): java.lang.Integer;
								public skyOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getLayerId(): string;
								public getSkyAtmosphereHaloColor(): string;
								public skyAtmosphereHaloColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyGradientRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyGradientRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyType(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyAtmosphereSunIntensity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public constructor();
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyType(): com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
								public skyAtmosphereHaloColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyGradientRadius(): java.lang.Double;
								public skyGradientCenter(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereColorAsColorInt(): java.lang.Integer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public getSkyOpacity(): java.lang.Double;
								public skyAtmosphereSunIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyType(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyGradientUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public skyAtmosphereColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereSunAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSkyOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyAtmosphereSunIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyType(param0: com.mapbox.maps.extension.style.layers.properties.generated.SkyType): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereColorUseTheme(): string;
								public getSkyGradient(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public skyGradientCenter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSkyAtmosphereSun(): java.util.List<java.lang.Double>;
								public skyAtmosphereColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public getSlot(): string;
							}
							export namespace SkyLayer {
								export namespace SkyLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultSkyAtmosphereColor(): string;
										function getDefaultSkyAtmosphereColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereColorAsColorInt(): java.lang.Integer;
										function getDefaultSkyAtmosphereColorUseTheme(): string;
										function getDefaultSkyAtmosphereColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereHaloColor(): string;
										function getDefaultSkyAtmosphereHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereHaloColorAsColorInt(): java.lang.Integer;
										function getDefaultSkyAtmosphereHaloColorUseTheme(): string;
										function getDefaultSkyAtmosphereHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereSun(): java.util.List<java.lang.Double>;
										function getDefaultSkyAtmosphereSunAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereSunIntensity(): java.lang.Double;
										function getDefaultSkyAtmosphereSunIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradient(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradientUseTheme(): string;
										function getDefaultSkyGradientUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradientCenter(): java.util.List<java.lang.Double>;
										function getDefaultSkyGradientCenterAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradientRadius(): java.lang.Double;
										function getDefaultSkyGradientRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyOpacity(): java.lang.Double;
										function getDefaultSkyOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultSkyType(): com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
										function getDefaultSkyTypeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultSkyAtmosphereColor(): string;
										function getDefaultSkyAtmosphereColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereColorAsColorInt(): java.lang.Integer;
										function getDefaultSkyAtmosphereColorUseTheme(): string;
										function getDefaultSkyAtmosphereColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereHaloColor(): string;
										function getDefaultSkyAtmosphereHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereHaloColorAsColorInt(): java.lang.Integer;
										function getDefaultSkyAtmosphereHaloColorUseTheme(): string;
										function getDefaultSkyAtmosphereHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereSun(): java.util.List<java.lang.Double>;
										function getDefaultSkyAtmosphereSunAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyAtmosphereSunIntensity(): java.lang.Double;
										function getDefaultSkyAtmosphereSunIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradient(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradientUseTheme(): string;
										function getDefaultSkyGradientUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradientCenter(): java.util.List<java.lang.Double>;
										function getDefaultSkyGradientCenterAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyGradientRadius(): java.lang.Double;
										function getDefaultSkyGradientRadiusAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyOpacity(): java.lang.Double;
										function getDefaultSkyOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSkyOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultSkyType(): com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
										function getDefaultSkyTypeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class SkyLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SkyLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.SkyLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereSun(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereSun(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereSunIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyAtmosphereSunIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyGradientUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyGradientUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyGradientCenter(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyGradientCenter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyGradientRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyGradientRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyType(param0: com.mapbox.maps.extension.style.layers.properties.generated.SkyType): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
									skyType(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								});
								public constructor();
								public skyAtmosphereSun(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereSunIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereSunIntensity(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientRadius(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyType(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientRadius(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereSun(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientCenter(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyType(param0: com.mapbox.maps.extension.style.layers.properties.generated.SkyType): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientCenter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyAtmosphereColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradient(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
								public skyGradientUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SkyLayer;
							}
							export namespace SkyLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SkyLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class SlotLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.SlotLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SlotLayer>;
								public visibility(visibility: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
								public getMaxZoom(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(minZoom: number): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
								public getLayerId(): string;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public visibility(visibility: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public getMinZoom(): java.lang.Double;
								public constructor();
								public getType$extension_style_release(): string;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public constructor(layerId: string);
								public maxZoom(maxZoom: number): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
								public getSlot(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class SlotLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SlotLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.SlotLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
								});
								public constructor();
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SlotLayer;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class SymbolLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.SymbolLayerDsl {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SymbolLayer>;
								public textEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconRotationAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolAvoidEdges(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextEmissiveStrength(): java.lang.Double;
								public textTransform(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
								public textIgnorePlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZElevate(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotate(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextRadialOffset(): java.lang.Double;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.Layer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public iconOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextKeepUpright(): java.lang.Boolean;
								public iconHaloColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextOcclusionOpacity(): java.lang.Double;
								public getIconAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
								public textTranslateTransition(this_t_a6f: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSize(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextLineHeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconColorSaturationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textJustify(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLetterSpacing(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconIgnorePlacement(): java.lang.Boolean;
								public getSymbolZOffset(): java.lang.Double;
								public textPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextMaxAngleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconTextFit(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public iconOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextIgnorePlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconHaloWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public visibility(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSizeScaleRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public slot(param: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotationAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextWritingMode(): java.util.List<string>;
								public getIconOptionalAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconRotationAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconRotate(): java.lang.Double;
								public textMaxAngle(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFadeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSizeScaleRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslate(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getMinZoom(): java.lang.Double;
								public symbolSpacing(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconTextFit(): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
								public iconOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFit(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloColor(): string;
								public iconKeepUpright(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffsetTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public visibility(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textWritingMode(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotationAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconKeepUpright(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconIgnorePlacement(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textIgnorePlacement(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextSizeScaleRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconAllowOverlap(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextOpacity(): java.lang.Double;
								public symbolAvoidEdges(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextJustifyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textWritingMode(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImage(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolZOrderAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textIgnorePlacement(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSizeScaleRange(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolAvoidEdgesAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextOptional(): java.lang.Boolean;
								public getTextRotationAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconImage(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolPlacement(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textVariableAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getVisibilityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textVariableAnchor(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconHaloColor(): string;
								public getTextOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconIgnorePlacement(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconTextFitPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPitchAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSourceId(): string;
								public iconPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconColorUseTheme(): string;
								public textOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRadialOffset(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrengthTransition(this_t_8a4: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSize(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textIgnorePlacement(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public minZoom(param: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloColorUseTheme(): string;
								public textColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextField(): com.mapbox.maps.extension.style.types.Formatted;
								public getIconColorSaturationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getTextEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getIconAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconTextFitPadding(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPadding(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPitchAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorTransition(this_t_bd6: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolElevationReference(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLineHeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAllowOverlap(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSortKey(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolPlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloWidth(): java.lang.Double;
								public symbolZOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSortKey(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPadding(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrength(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textFont(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextFieldAsString(): string;
								public getTextRadialOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconSizeScaleRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotationAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconSizeScaleRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconRotationAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPadding(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public constructor(layerId: string, sourceId: string);
								public textPitchAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOptional(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAllowOverlap(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getMaxZoom(): java.lang.Double;
								public iconAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxWidth(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextRotate(): java.lang.Double;
								public textMaxWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textJustify(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotationAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRadialOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextFont(): java.util.List<string>;
								public iconHaloBlurTransition(this_i_02c: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPitchAlignment(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextTranslate(): java.util.List<java.lang.Double>;
								public getIconEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public iconHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconTextFitPadding(): java.util.List<java.lang.Double>;
								public symbolElevationReference(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFitPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public symbolSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconColor(): string;
								public getLayerId(): string;
								public getTextAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textOptional(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconImage(): string;
								public symbolZOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconSizeScaleRange(): java.util.List<java.lang.Double>;
								public textVariableAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconOffset(): java.util.List<java.lang.Double>;
								public getTextMaxWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconOcclusionOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconSize(): java.lang.Double;
								public textColorTransition(this_t_509: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFit(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
								public iconOptional(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconTextFitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textOcclusionOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidthTransition(this_t_fce: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolSpacing(): java.lang.Double;
								public textEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textFont(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconKeepUpright(): java.lang.Boolean;
								public iconTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImage(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconKeepUpright(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextVariableAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
								public textLetterSpacing(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAllowOverlap(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textKeepUpright(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textKeepUpright(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconColorAsColorInt(): java.lang.Integer;
								public iconTextFitPadding(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxAngle(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslate(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconIgnorePlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextSizeScaleRange(): java.util.List<java.lang.Double>;
								public iconSizeScaleRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textFont(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textMaxWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextLetterSpacingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextMaxAngle(): java.lang.Double;
								public iconColorSaturationTransition(this_i_9fd: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlur(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolZOrder(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
								public getIconPadding(): java.lang.Double;
								public textTranslateTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLineHeight(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacityTransition(this_i_ee6: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getType$extension_style_release(): string;
								public iconEmissiveStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolZElevate(): java.lang.Boolean;
								public iconPadding(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public textAllowOverlap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOrder(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloColorUseTheme(): string;
								public symbolZOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSize(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconRotationAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloBlur(): java.lang.Double;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.Layer;
								public getIconOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconHaloColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public iconSize(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextAllowOverlapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextOptionalAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textPadding(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager, param1: com.mapbox.maps.LayerPosition): void;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotate(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSpacing(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorTransition(this_i_1cc: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public filter(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOptional(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
								public getFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextLineHeight(): java.lang.Double;
								public textOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFadeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(this_t_963: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextTransform(): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
								public iconImageCrossFadeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolAvoidEdges(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFade(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public textHaloColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconTranslate(): java.util.List<java.lang.Double>;
								public textRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSize(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconColorSaturationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextHaloWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public textHaloBlurTransition(this_t_d01: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconImageCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconImageCrossFade(): java.lang.Double;
								public getTextColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconIgnorePlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidth(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconKeepUprightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAllowOverlap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolZElevateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSymbolPlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconHaloBlur(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
								public textOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textWritingMode(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconOcclusionOpacity(): java.lang.Double;
								public getTextSize(): java.lang.Double;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAllowOverlap(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacity(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSize(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacityTransition(this_t_82a: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconKeepUpright(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorUseTheme(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacityTransition(this_i_5f8: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTransform(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAllowOverlap(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getTextAllowOverlap(): java.lang.Boolean;
								public getIconHaloWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public iconHaloWidthTransition(this_i_4d7: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTransform(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZElevate(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffset(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextColor(): string;
								public getIconPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconHaloBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOffset(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextColorUseTheme(): string;
								public iconOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextIgnorePlacement(): java.lang.Boolean;
								public textHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textJustify(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextOffset(): java.util.List<java.lang.Double>;
								public getTextEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textLetterSpacing(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAnchor(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSymbolAvoidEdges(): java.lang.Boolean;
								public symbolSpacing(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlur(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOrder(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolSpacingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textWritingMode(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSlot(): string;
								public textHaloWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextJustify(): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
								public textField(proper_a59: com.mapbox.maps.extension.style.types.Formatted): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolPlacement(proper_a59: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacityTransition(this_t_f96: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public iconIgnorePlacement(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolAvoidEdges(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRadialOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconTextFitPadding(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextTransformAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textHaloColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextPadding(): java.lang.Double;
								public getIconColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public iconOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloColorAsColorInt(): java.lang.Integer;
								public symbolPlacement(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturation(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconOptional(): java.lang.Boolean;
								public symbolZOrder(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.Layer;
								public iconOptional(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFade(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSizeScaleRange(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSizeScaleRange(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLetterSpacing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLineHeight(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextKeepUprightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturation(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorTransition(this_i_70b: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSpacing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getIconTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getIconColorSaturation(): java.lang.Double;
								public getIconImageCrossFadeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public iconHaloColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
								public textLineHeight(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFadeTransition(this_i_b47: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPadding(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textFont(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloBlur(): java.lang.Double;
								public iconHaloBlurTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(param0: com.mapbox.maps.extension.style.types.Formatted): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateAnchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconHaloBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getTextHaloWidth(): java.lang.Double;
								public textHaloColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconOpacity(): java.lang.Double;
								public iconOffset(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
								public iconTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZElevate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public textSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotationAlignment(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOptional(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSymbolSortKey(): java.lang.Double;
								public textVariableAnchor(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextColorAsColorInt(): java.lang.Integer;
								public getTextRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
								public iconHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextFontAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public constructor();
								public iconOffset(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxAngle(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textKeepUpright(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrengthTransition(this_i_bcf: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextMaxWidth(): java.lang.Double;
								public getIconTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public symbolZElevate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSymbolSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textTransform(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxAngle(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOptional(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOptional(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSizeScaleRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								public textHaloBlurTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getSourceLayer(): string;
								public getIconAllowOverlap(): java.lang.Boolean;
								public getTextHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconEmissiveStrength(): java.lang.Double;
								public textKeepUpright(proper_a59: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public maxZoom(param: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public textTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlur(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOrder(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateTransition(this_i_761: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColor(proper_a59: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextLetterSpacing(): java.lang.Double;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.Layer;
								public getTextVariableAnchor(): java.util.List<string>;
								public textField(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextFieldAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSymbolPlacement(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
								public symbolZOffsetTransition(this_s_13c: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotate(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textJustify(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public textOcclusionOpacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextWritingModeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public iconColorSaturation(proper_a59: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getIconImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getIconAllowOverlapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getSymbolZOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public sourceLayer(param: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public getTextHaloColorAsColorInt(): java.lang.Integer;
								public textRadialOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
							}
							export namespace SymbolLayer {
								export namespace SymbolLayer {
									export namespace Companion {
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultIconAllowOverlap(): java.lang.Boolean;
										function getDefaultIconAllowOverlapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
										function getDefaultIconAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconIgnorePlacement(): java.lang.Boolean;
										function getDefaultIconIgnorePlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconImage(): string;
										function getDefaultIconImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconKeepUpright(): java.lang.Boolean;
										function getDefaultIconKeepUprightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOffset(): java.util.List<java.lang.Double>;
										function getDefaultIconOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOptional(): java.lang.Boolean;
										function getDefaultIconOptionalAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconPadding(): java.lang.Double;
										function getDefaultIconPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
										function getDefaultIconPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconRotate(): java.lang.Double;
										function getDefaultIconRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
										function getDefaultIconRotationAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconSize(): java.lang.Double;
										function getDefaultIconSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconSizeScaleRange(): java.util.List<java.lang.Double>;
										function getDefaultIconSizeScaleRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconTextFit(): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
										function getDefaultIconTextFitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconTextFitPadding(): java.util.List<java.lang.Double>;
										function getDefaultIconTextFitPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolAvoidEdges(): java.lang.Boolean;
										function getDefaultSymbolAvoidEdgesAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
										function getDefaultSymbolElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolPlacement(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
										function getDefaultSymbolPlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolSortKey(): java.lang.Double;
										function getDefaultSymbolSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolSpacing(): java.lang.Double;
										function getDefaultSymbolSpacingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZElevate(): java.lang.Boolean;
										function getDefaultSymbolZElevateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZOrder(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
										function getDefaultSymbolZOrderAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextAllowOverlap(): java.lang.Boolean;
										function getDefaultTextAllowOverlapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
										function getDefaultTextAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextField(): com.mapbox.maps.extension.style.types.Formatted;
										function getDefaultTextFieldAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextFieldAsString(): string;
										function getDefaultTextFont(): java.util.List<string>;
										function getDefaultTextFontAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextIgnorePlacement(): java.lang.Boolean;
										function getDefaultTextIgnorePlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextJustify(): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
										function getDefaultTextJustifyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextKeepUpright(): java.lang.Boolean;
										function getDefaultTextKeepUprightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextLetterSpacing(): java.lang.Double;
										function getDefaultTextLetterSpacingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextLineHeight(): java.lang.Double;
										function getDefaultTextLineHeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextMaxAngle(): java.lang.Double;
										function getDefaultTextMaxAngleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextMaxWidth(): java.lang.Double;
										function getDefaultTextMaxWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOffset(): java.util.List<java.lang.Double>;
										function getDefaultTextOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOptional(): java.lang.Boolean;
										function getDefaultTextOptionalAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextPadding(): java.lang.Double;
										function getDefaultTextPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
										function getDefaultTextPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextRadialOffset(): java.lang.Double;
										function getDefaultTextRadialOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextRotate(): java.lang.Double;
										function getDefaultTextRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
										function getDefaultTextRotationAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextSize(): java.lang.Double;
										function getDefaultTextSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextSizeScaleRange(): java.util.List<java.lang.Double>;
										function getDefaultTextSizeScaleRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextTransform(): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
										function getDefaultTextTransformAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextVariableAnchor(): java.util.List<string>;
										function getDefaultTextVariableAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextWritingMode(): java.util.List<string>;
										function getDefaultTextWritingModeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColor(): string;
										function getDefaultIconColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColorAsColorInt(): java.lang.Integer;
										function getDefaultIconColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconColorUseTheme(): string;
										function getDefaultIconColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColorSaturation(): java.lang.Double;
										function getDefaultIconColorSaturationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColorSaturationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconEmissiveStrength(): java.lang.Double;
										function getDefaultIconEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconHaloBlur(): java.lang.Double;
										function getDefaultIconHaloBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconHaloColor(): string;
										function getDefaultIconHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloColorAsColorInt(): java.lang.Integer;
										function getDefaultIconHaloColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconHaloColorUseTheme(): string;
										function getDefaultIconHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloWidth(): java.lang.Double;
										function getDefaultIconHaloWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconImageCrossFade(): java.lang.Double;
										function getDefaultIconImageCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconImageCrossFadeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconOcclusionOpacity(): java.lang.Double;
										function getDefaultIconOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconOpacity(): java.lang.Double;
										function getDefaultIconOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconTranslate(): java.util.List<java.lang.Double>;
										function getDefaultIconTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
										function getDefaultIconTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZOffset(): java.lang.Double;
										function getDefaultSymbolZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextColor(): string;
										function getDefaultTextColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextColorAsColorInt(): java.lang.Integer;
										function getDefaultTextColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextColorUseTheme(): string;
										function getDefaultTextColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextEmissiveStrength(): java.lang.Double;
										function getDefaultTextEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextHaloBlur(): java.lang.Double;
										function getDefaultTextHaloBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextHaloColor(): string;
										function getDefaultTextHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloColorAsColorInt(): java.lang.Integer;
										function getDefaultTextHaloColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextHaloColorUseTheme(): string;
										function getDefaultTextHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloWidth(): java.lang.Double;
										function getDefaultTextHaloWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextOcclusionOpacity(): java.lang.Double;
										function getDefaultTextOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextOpacity(): java.lang.Double;
										function getDefaultTextOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextTranslate(): java.util.List<java.lang.Double>;
										function getDefaultTextTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
										function getDefaultTextTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultVisibility(): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										function getDefaultMinZoom(): java.lang.Double;
										function getDefaultMaxZoom(): java.lang.Double;
										function getDefaultIconAllowOverlap(): java.lang.Boolean;
										function getDefaultIconAllowOverlapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
										function getDefaultIconAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconIgnorePlacement(): java.lang.Boolean;
										function getDefaultIconIgnorePlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconImage(): string;
										function getDefaultIconImageAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconKeepUpright(): java.lang.Boolean;
										function getDefaultIconKeepUprightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOffset(): java.util.List<java.lang.Double>;
										function getDefaultIconOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOptional(): java.lang.Boolean;
										function getDefaultIconOptionalAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconPadding(): java.lang.Double;
										function getDefaultIconPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
										function getDefaultIconPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconRotate(): java.lang.Double;
										function getDefaultIconRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
										function getDefaultIconRotationAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconSize(): java.lang.Double;
										function getDefaultIconSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconSizeScaleRange(): java.util.List<java.lang.Double>;
										function getDefaultIconSizeScaleRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconTextFit(): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
										function getDefaultIconTextFitAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconTextFitPadding(): java.util.List<java.lang.Double>;
										function getDefaultIconTextFitPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolAvoidEdges(): java.lang.Boolean;
										function getDefaultSymbolAvoidEdgesAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
										function getDefaultSymbolElevationReferenceAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolPlacement(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
										function getDefaultSymbolPlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolSortKey(): java.lang.Double;
										function getDefaultSymbolSortKeyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolSpacing(): java.lang.Double;
										function getDefaultSymbolSpacingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZElevate(): java.lang.Boolean;
										function getDefaultSymbolZElevateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZOrder(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
										function getDefaultSymbolZOrderAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextAllowOverlap(): java.lang.Boolean;
										function getDefaultTextAllowOverlapAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
										function getDefaultTextAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextField(): com.mapbox.maps.extension.style.types.Formatted;
										function getDefaultTextFieldAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextFieldAsString(): string;
										function getDefaultTextFont(): java.util.List<string>;
										function getDefaultTextFontAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextIgnorePlacement(): java.lang.Boolean;
										function getDefaultTextIgnorePlacementAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextJustify(): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
										function getDefaultTextJustifyAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextKeepUpright(): java.lang.Boolean;
										function getDefaultTextKeepUprightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextLetterSpacing(): java.lang.Double;
										function getDefaultTextLetterSpacingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextLineHeight(): java.lang.Double;
										function getDefaultTextLineHeightAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextMaxAngle(): java.lang.Double;
										function getDefaultTextMaxAngleAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextMaxWidth(): java.lang.Double;
										function getDefaultTextMaxWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOffset(): java.util.List<java.lang.Double>;
										function getDefaultTextOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOptional(): java.lang.Boolean;
										function getDefaultTextOptionalAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextPadding(): java.lang.Double;
										function getDefaultTextPaddingAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
										function getDefaultTextPitchAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextRadialOffset(): java.lang.Double;
										function getDefaultTextRadialOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextRotate(): java.lang.Double;
										function getDefaultTextRotateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
										function getDefaultTextRotationAlignmentAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextSize(): java.lang.Double;
										function getDefaultTextSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextSizeScaleRange(): java.util.List<java.lang.Double>;
										function getDefaultTextSizeScaleRangeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextTransform(): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
										function getDefaultTextTransformAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextVariableAnchor(): java.util.List<string>;
										function getDefaultTextVariableAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextWritingMode(): java.util.List<string>;
										function getDefaultTextWritingModeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColor(): string;
										function getDefaultIconColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColorAsColorInt(): java.lang.Integer;
										function getDefaultIconColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconColorUseTheme(): string;
										function getDefaultIconColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColorSaturation(): java.lang.Double;
										function getDefaultIconColorSaturationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconColorSaturationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconEmissiveStrength(): java.lang.Double;
										function getDefaultIconEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconHaloBlur(): java.lang.Double;
										function getDefaultIconHaloBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconHaloColor(): string;
										function getDefaultIconHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloColorAsColorInt(): java.lang.Integer;
										function getDefaultIconHaloColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconHaloColorUseTheme(): string;
										function getDefaultIconHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloWidth(): java.lang.Double;
										function getDefaultIconHaloWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconHaloWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconImageCrossFade(): java.lang.Double;
										function getDefaultIconImageCrossFadeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconImageCrossFadeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconOcclusionOpacity(): java.lang.Double;
										function getDefaultIconOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconOpacity(): java.lang.Double;
										function getDefaultIconOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconTranslate(): java.util.List<java.lang.Double>;
										function getDefaultIconTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultIconTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultIconTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
										function getDefaultIconTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZOffset(): java.lang.Double;
										function getDefaultSymbolZOffsetAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultSymbolZOffsetTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextColor(): string;
										function getDefaultTextColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextColorAsColorInt(): java.lang.Integer;
										function getDefaultTextColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextColorUseTheme(): string;
										function getDefaultTextColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextEmissiveStrength(): java.lang.Double;
										function getDefaultTextEmissiveStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextEmissiveStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextHaloBlur(): java.lang.Double;
										function getDefaultTextHaloBlurAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloBlurTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextHaloColor(): string;
										function getDefaultTextHaloColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloColorAsColorInt(): java.lang.Integer;
										function getDefaultTextHaloColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextHaloColorUseTheme(): string;
										function getDefaultTextHaloColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloWidth(): java.lang.Double;
										function getDefaultTextHaloWidthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextHaloWidthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextOcclusionOpacity(): java.lang.Double;
										function getDefaultTextOcclusionOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOcclusionOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextOpacity(): java.lang.Double;
										function getDefaultTextOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextTranslate(): java.util.List<java.lang.Double>;
										function getDefaultTextTranslateAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
										function getDefaultTextTranslateTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
										function getDefaultTextTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
										function getDefaultTextTranslateAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace generated {
							export class SymbolLayerDsl extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SymbolLayerDsl>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.generated.SymbolLayerDsl interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconAllowOverlap(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconAllowOverlap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconIgnorePlacement(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconIgnorePlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconImage(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconKeepUpright(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconKeepUpright(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOptional(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOptional(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconPadding(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconRotationAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconRotationAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconSize(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconSizeScaleRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconSizeScaleRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTextFit(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTextFit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTextFitPadding(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTextFitPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolAvoidEdges(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolAvoidEdges(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolPlacement(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolPlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolSpacing(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolSpacing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZElevate(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZElevate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZOrder(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZOrder(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textAllowOverlap(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textAllowOverlap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textField(param0: com.mapbox.maps.extension.style.types.Formatted): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textField(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textField(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textField(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textFont(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textFont(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textIgnorePlacement(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textIgnorePlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textJustify(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textJustify(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textKeepUpright(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textKeepUpright(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textLetterSpacing(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textLetterSpacing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textLineHeight(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textLineHeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textMaxAngle(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textMaxAngle(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textMaxWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textMaxWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOptional(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOptional(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textPadding(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textRadialOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textRadialOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textRotationAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textRotationAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textSize(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textSizeScaleRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textSizeScaleRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTransform(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTransform(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textVariableAnchor(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textVariableAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textWritingMode(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textWritingMode(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorSaturation(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorSaturation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorSaturationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconColorSaturationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconHaloWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconImageCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconImageCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconImageCrossFadeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconImageCrossFadeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									iconTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									symbolZOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textHaloWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
									textTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								});
								public constructor();
								public textEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLineHeight(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPadding(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTransform(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturationTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAllowOverlap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textIgnorePlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturation(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOrder(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolAvoidEdges(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRadialOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSize(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLineHeight(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textJustify(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLetterSpacing(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAllowOverlap(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPadding(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolPlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public sourceLayer(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolPlacement(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffsetTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFade(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textFont(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOrder(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSizeScaleRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotationAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOptional(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSizeScaleRange(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacity(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotationAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textLetterSpacing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotationAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public filter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOptional(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFadeTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturation(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSpacing(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFadeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSizeScaleRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxWidth(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImage(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorSaturationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslateAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPitchAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSpacing(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRotate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSize(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFit(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconKeepUpright(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public visibility(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(param0: com.mapbox.maps.extension.style.types.Formatted): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFitPadding(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSortKey(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotationAlignment(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOptional(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconKeepUpright(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffsetTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public maxZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAllowOverlap(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textIgnorePlacement(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOffset(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolElevationReference(param0: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textWritingMode(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloBlur(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public minZoom(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconColor(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlurTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOcclusionOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZElevate(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public visibility(param0: com.mapbox.maps.extension.style.layers.properties.generated.Visibility): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidth(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxAngle(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOptional(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTransform(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolAvoidEdges(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textFont(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconSizeScaleRange(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOcclusionOpacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlurTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolZElevate(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconAllowOverlap(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImage(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textKeepUpright(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolSortKey(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textKeepUpright(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconHaloBlur(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public symbolElevationReference(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textVariableAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public slot(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFitPadding(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconOpacityTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textVariableAnchor(param0: java.util.List<string>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTranslate(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textMaxAngle(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textTranslateAnchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrengthTransition(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconIgnorePlacement(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textEmissiveStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloColorUseTheme(param0: string): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textField(param0: any): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconIgnorePlacement(param0: boolean): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconEmissiveStrength(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textJustify(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconPitchAlignment(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOffset(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textOpacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconRotate(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconImageCrossFade(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textAnchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textRadialOffset(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textColor(param0: number): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public iconTextFit(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textWritingMode(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
								public textHaloWidthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
							}
							export namespace SymbolLayerDsl {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.generated.SymbolLayerDsl.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export class PropertyValue<T>  extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
								public getColorInt(): java.lang.Integer;
								public toString(): string;
								public getValue(): T;
								public getPropertyName(): string;
								public constructor(this_: string, proper_98b: T);
								public getPropertyValue(): T;
								public getValue(): com.mapbox.bindgen.Value;
								public isExpression(): boolean;
								public isTransition(): boolean;
								public isValue(): boolean;
							}
							export namespace PropertyValue {
								export namespace PropertyValue {
									export namespace Companion {
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class Anchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.Anchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.Anchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.Anchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.Anchor;
									public toString(): string;
								}
								export namespace Anchor {
									export namespace Anchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.Anchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.Anchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class BackgroundPitchAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
									public getValue(): string;
									public toString(): string;
								}
								export namespace BackgroundPitchAlignment {
									export namespace BackgroundPitchAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.BackgroundPitchAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class CircleElevationReference extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference>;
									public static NONE: com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
									public static HD_ROAD_MARKUP: com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
									public toString(): string;
								}
								export namespace CircleElevationReference {
									export namespace CircleElevationReference {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class CirclePitchAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
									public toString(): string;
								}
								export namespace CirclePitchAlignment {
									export namespace CirclePitchAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class CirclePitchScale extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
									public getValue(): string;
									public toString(): string;
								}
								export namespace CirclePitchScale {
									export namespace CirclePitchScale {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class CircleTranslateAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
									public toString(): string;
								}
								export namespace CircleTranslateAnchor {
									export namespace CircleTranslateAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class ClipLayerTypes extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.ClipLayerTypes>;
									public static MODEL: com.mapbox.maps.extension.style.layers.properties.generated.ClipLayerTypes;
									public static SYMBOL: com.mapbox.maps.extension.style.layers.properties.generated.ClipLayerTypes;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ClipLayerTypes;
								}
								export namespace ClipLayerTypes {
									export namespace ClipLayerTypes {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ClipLayerTypes;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ClipLayerTypes;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class FillElevationReference extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference>;
									public static NONE: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
									public static HD_ROAD_BASE: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
									public static HD_ROAD_MARKUP: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
								}
								export namespace FillElevationReference {
									export namespace FillElevationReference {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class FillExtrusionBaseAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment>;
									public static TERRAIN: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
									public static FLAT: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
									public getValue(): string;
									public toString(): string;
								}
								export namespace FillExtrusionBaseAlignment {
									export namespace FillExtrusionBaseAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionBaseAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class FillExtrusionHeightAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment>;
									public static TERRAIN: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
									public static FLAT: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
									public toString(): string;
								}
								export namespace FillExtrusionHeightAlignment {
									export namespace FillExtrusionHeightAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionHeightAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class FillExtrusionTranslateAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
									public getValue(): string;
									public toString(): string;
								}
								export namespace FillExtrusionTranslateAnchor {
									export namespace FillExtrusionTranslateAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class FillTranslateAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
									public getValue(): string;
									public toString(): string;
								}
								export namespace FillTranslateAnchor {
									export namespace FillTranslateAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class HillshadeIlluminationAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
								}
								export namespace HillshadeIlluminationAnchor {
									export namespace HillshadeIlluminationAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class IconAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor>;
									public static CENTER: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static LEFT: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static RIGHT: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static TOP: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static BOTTOM: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static TOP_LEFT: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static TOP_RIGHT: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static BOTTOM_LEFT: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public static BOTTOM_RIGHT: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
									public getValue(): string;
									public toString(): string;
								}
								export namespace IconAnchor {
									export namespace IconAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class IconPitchAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
									public static AUTO: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
									public getValue(): string;
									public toString(): string;
								}
								export namespace IconPitchAlignment {
									export namespace IconPitchAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class IconRotationAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
									public static AUTO: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
									public toString(): string;
								}
								export namespace IconRotationAlignment {
									export namespace IconRotationAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class IconTextFit extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit>;
									public static NONE: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
									public static WIDTH: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
									public static HEIGHT: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
									public static BOTH: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
									public hashCode(): number;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
								}
								export namespace IconTextFit {
									export namespace IconTextFit {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class IconTranslateAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
								}
								export namespace IconTranslateAnchor {
									export namespace IconTranslateAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class LayerProperty extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty>;
									/**
									 * Constructs a new instance of the com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty interface with the provided implementation.
									 * An empty constructor exists calling super().
									 */
									public constructor(implementation: {
										getValue(): string;
									});
									public constructor();
									public getValue(): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class LineCap extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.LineCap>;
									public static BUTT: com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
									public static ROUND: com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
									public static SQUARE: com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
									public toString(): string;
								}
								export namespace LineCap {
									export namespace LineCap {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class LineElevationReference extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference>;
									public static NONE: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
									public static SEA: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
									public static GROUND: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
									public static HD_ROAD_MARKUP: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
									public getValue(): string;
									public toString(): string;
								}
								export namespace LineElevationReference {
									export namespace LineElevationReference {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class LineJoin extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.LineJoin>;
									public static BEVEL: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
									public static ROUND: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
									public static MITER: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
									public static NONE: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
									public toString(): string;
								}
								export namespace LineJoin {
									export namespace LineJoin {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class LineTranslateAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
									public getValue(): string;
									public toString(): string;
								}
								export namespace LineTranslateAnchor {
									export namespace LineTranslateAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class LineWidthUnit extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit>;
									public static PIXELS: com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
									public static METERS: com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
								}
								export namespace LineWidthUnit {
									export namespace LineWidthUnit {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class ModelElevationReference extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference>;
									public static SEA: com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
									public static GROUND: com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
								}
								export namespace ModelElevationReference {
									export namespace ModelElevationReference {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelElevationReference;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class ModelScaleMode extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
									public getValue(): string;
									public toString(): string;
								}
								export namespace ModelScaleMode {
									export namespace ModelScaleMode {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelScaleMode;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class ModelType extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.ModelType>;
									public static COMMON_3D: com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
									public static LOCATION_INDICATOR: com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
									public toString(): string;
								}
								export namespace ModelType {
									export namespace ModelType {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ModelType;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class ProjectionName extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName>;
									public static MERCATOR: com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName;
									public static GLOBE: com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName;
									public getValue(): string;
									public toString(): string;
								}
								export namespace ProjectionName {
									export namespace ProjectionName {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class RasterResampling extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling>;
									public static LINEAR: com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
									public static NEAREST: com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
								}
								export namespace RasterResampling {
									export namespace RasterResampling {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class SkyType extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.SkyType>;
									public static GRADIENT: com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
									public static ATMOSPHERE: com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
									public toString(): string;
								}
								export namespace SkyType {
									export namespace SkyType {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SkyType;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class SymbolElevationReference extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference>;
									public static SEA: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
									public static GROUND: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
									public static HD_ROAD_MARKUP: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
									public toString(): string;
								}
								export namespace SymbolElevationReference {
									export namespace SymbolElevationReference {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class SymbolPlacement extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement>;
									public static POINT: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
									public static LINE: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
									public static LINE_CENTER: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
									public toString(): string;
								}
								export namespace SymbolPlacement {
									export namespace SymbolPlacement {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class SymbolZOrder extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder>;
									public static AUTO: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
									public static VIEWPORT_Y: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
									public static SOURCE: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
								}
								export namespace SymbolZOrder {
									export namespace SymbolZOrder {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class TextAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor>;
									public static CENTER: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static LEFT: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static RIGHT: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static TOP: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static BOTTOM: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static TOP_LEFT: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static TOP_RIGHT: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static BOTTOM_LEFT: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public static BOTTOM_RIGHT: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
								}
								export namespace TextAnchor {
									export namespace TextAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class TextJustify extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.TextJustify>;
									public static AUTO: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
									public static LEFT: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
									public static CENTER: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
									public static RIGHT: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
									public getValue(): string;
									public toString(): string;
								}
								export namespace TextJustify {
									export namespace TextJustify {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class TextPitchAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
									public static AUTO: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
								}
								export namespace TextPitchAlignment {
									export namespace TextPitchAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class TextRotationAlignment extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
									public static AUTO: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
									public getValue(): string;
									public toString(): string;
								}
								export namespace TextRotationAlignment {
									export namespace TextRotationAlignment {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class TextTransform extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.TextTransform>;
									public static NONE: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
									public static UPPERCASE: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
									public static LOWERCASE: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
									public toString(): string;
								}
								export namespace TextTransform {
									export namespace TextTransform {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class TextTranslateAnchor extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor>;
									public static MAP: com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
									public static VIEWPORT: com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
									public hashCode(): number;
									public equals(other: any): boolean;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
									public getValue(): string;
									public toString(): string;
								}
								export namespace TextTranslateAnchor {
									export namespace TextTranslateAnchor {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class TextWritingMode extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode>;
									public static HORIZONTAL: com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode;
									public static VERTICAL: com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode;
								}
								export namespace TextWritingMode {
									export namespace TextWritingMode {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace layers {
						export namespace properties {
							export namespace generated {
								export class Visibility extends java.lang.Object implements com.mapbox.maps.extension.style.layers.properties.generated.LayerProperty {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.layers.properties.generated.Visibility>;
									public static VISIBLE: com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
									public static NONE: com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
									public hashCode(): number;
									public equals(other: any): boolean;
									public getValue(): string;
									public toString(): string;
									public static valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
								}
								export namespace Visibility {
									export namespace Visibility {
										export namespace Companion {
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
											function valueOf(value: string): com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export class DynamicLight extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleLightExtension {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.light.DynamicLight>;
							public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
							public constructor(ambien_455: com.mapbox.maps.extension.style.light.generated.AmbientLight, direct_041: com.mapbox.maps.extension.style.light.generated.DirectionalLight);
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export abstract class Light extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.light.Light>;
							public constructor();
							public getInternalLightProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.bindgen.Value>;
							public getType$extension_style_release(): string;
							public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
							public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
							public setProperty$extension_style_release(property: com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>): void;
							public toString(): string;
							public getLightProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
							public getTransitionProperty$extension_style_release(duration: string): com.mapbox.maps.extension.style.types.StyleTransition;
							public getLightId(): string;
						}
						export namespace Light {
							export namespace Light {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export class LightPosition extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.light.LightPosition>;
							public copy(radial_f50: number, azimut_989: number, polarAngle: number): com.mapbox.maps.extension.style.light.LightPosition;
							public hashCode(): number;
							public toDoubleArray(): androidNative.Array<number>;
							public equals(other: any): boolean;
							public toValue(): com.mapbox.bindgen.Value;
							public toString(): string;
							public constructor(radial_f50: number, azimut_989: number, polarAngle: number);
							public toList(): java.util.List<java.lang.Double>;
						}
						export namespace LightPosition {
							export namespace LightPosition {
								export namespace Companion {
									function fromArray(positi_cab: androidNative.Array<number>): com.mapbox.maps.extension.style.light.LightPosition;
									function fromList(positi_a66: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.light.LightPosition;
									function fromArray(positi_cab: androidNative.Array<number>): com.mapbox.maps.extension.style.light.LightPosition;
									function fromList(positi_a66: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.light.LightPosition;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export class LightUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.light.LightUtils>;
							public static TAG: string; // "Mbgl-LightUtils"
							public static LIGHT_PROPERTIES: string; // "properties"
							public static setLight(i_a_ap_012: com.mapbox.maps.MapboxStyleManager, this_s_bca: com.mapbox.maps.extension.style.light.generated.AmbientLight, i_a_ap_75e: com.mapbox.maps.extension.style.light.generated.DirectionalLight): void;
							public static dynamicLight(ambien_455: com.mapbox.maps.extension.style.light.generated.AmbientLight, direct_041: com.mapbox.maps.extension.style.light.generated.DirectionalLight): com.mapbox.maps.extension.style.light.DynamicLight;
							public static setLight(i_a_ap_0e1: com.mapbox.maps.MapboxStyleManager, this_s_a37: com.mapbox.maps.extension.style.light.generated.FlatLight): void;
							public static getLight(i_a_fi_6fd: com.mapbox.maps.MapboxStyleManager, it: string): com.mapbox.maps.extension.style.light.Light;
							public static setLights(i_a_ap_878: com.mapbox.maps.MapboxStyleManager, this_s_df0: java.util.List<any>): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export namespace generated {
							export class AmbientLight extends com.mapbox.maps.extension.style.light.Light implements com.mapbox.maps.extension.style.light.generated.AmbientLightDslReceiver {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.AmbientLight>;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public color(proper_a59: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorUseTheme(this_c_df6: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public intensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public getIntensity(): java.lang.Double;
								public getType$extension_style_release(): string;
								public intensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public getIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorTransition(this_c_a05: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public getColor(): string;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public intensity(param0: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public constructor(lightId: string);
								public intensity(this_i_997: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public color(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public getColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public color(this_c_414: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public getLightId(): string;
								public getColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public color(param0: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public getIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getColorAsColorInt(): java.lang.Integer;
								public constructor();
								public intensityTransition(this_i_8ce: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public color(param0: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public getColorUseTheme(): string;
								public colorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export namespace generated {
							export class AmbientLightDslReceiver extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.AmbientLightDslReceiver>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.light.generated.AmbientLightDslReceiver interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									color(param0: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									color(param0: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									intensity(param0: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
									colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								});
								public constructor();
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public color(param0: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public intensity(param0: number): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public color(param0: string): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.AmbientLight;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.AmbientLight;
							}
							export namespace AmbientLightDslReceiver {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.AmbientLightDslReceiver.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export namespace generated {
							export class DirectionalLight extends com.mapbox.maps.extension.style.light.Light implements com.mapbox.maps.extension.style.light.generated.DirectionalLightDslReceiver {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.DirectionalLight>;
								public colorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public direction(this_d_18a: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getType$extension_style_release(): string;
								public getIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getShadowIntensity(): java.lang.Double;
								public getShadowIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getColor(): string;
								public direction(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public constructor(lightId: string);
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getLightId(): string;
								public directionTransition(this_d_7aa: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensity(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public color(proper_a59: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensity(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public shadowIntensityTransition(this_s_e07: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public castShadows(this_c_9fc: boolean): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public intensityTransition(this_i_a59: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public constructor();
								public getCastShadowsAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public shadowIntensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorTransition(this_c_f06: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public color(this_c_dc8: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getDirectionAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public directionTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getIntensity(): java.lang.Double;
								public shadowIntensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public castShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public colorUseTheme(this_c_ab0: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensity(this_s_88f: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public castShadows(param0: boolean): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public directionTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public intensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensity(this_i_53c: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public castShadows(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getColorAsColorInt(): java.lang.Integer;
								public getDirection(): java.util.List<java.lang.Double>;
								public getCastShadows(): java.lang.Boolean;
								public getShadowIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getDirectionTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public color(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public getColorUseTheme(): string;
								public colorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public color(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public color(param0: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export namespace generated {
							export class DirectionalLightDslReceiver extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.DirectionalLightDslReceiver>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.light.generated.DirectionalLightDslReceiver interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									castShadows(param0: boolean): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									castShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									color(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									color(param0: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									directionTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									intensity(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									shadowIntensity(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									shadowIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									shadowIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									shadowIntensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
									colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								});
								public constructor();
								public direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensity(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensity(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public castShadows(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public castShadows(param0: boolean): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public directionTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public color(param0: number): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public shadowIntensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
								public color(param0: string): com.mapbox.maps.extension.style.light.generated.DirectionalLight;
							}
							export namespace DirectionalLightDslReceiver {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.DirectionalLightDslReceiver.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export namespace generated {
							export class FlatLight extends com.mapbox.maps.extension.style.light.Light implements com.mapbox.maps.extension.style.light.generated.FlatLightDslReceiver, com.mapbox.maps.extension.style.StyleContract.StyleLightExtension {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.FlatLight>;
								public positionTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getPositionAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public positionTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getType$extension_style_release(): string;
								public getIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public anchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.Anchor): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getColor(): string;
								public constructor(lightId: string);
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(param0: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getPositionTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getLightId(): string;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public position(this_p_52c: com.mapbox.maps.extension.style.light.LightPosition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorUseTheme(this_c_44c: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getAnchorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public constructor();
								public position(this_p_6bf: number, this_: number, radial_f50: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public anchor(this_a_4f6: com.mapbox.maps.extension.style.layers.properties.generated.Anchor): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorTransition(this_c_d73: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(param0: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getIntensity(): java.lang.Double;
								public positionTransition(this_p_782: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
								public colorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public intensityTransition(this_i_aa3: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(this_c_c35: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getPosition(): com.mapbox.maps.extension.style.light.LightPosition;
								public intensity(param0: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public color(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public intensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public positionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public position(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public position(param0: number, param1: number, param2: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public position(param0: com.mapbox.maps.extension.style.light.LightPosition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getColorAsColorInt(): java.lang.Integer;
								public anchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public position(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.Anchor;
								public anchor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public intensity(this_i_68d: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(proper_a59: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public getColorUseTheme(): string;
								public intensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace light {
						export namespace generated {
							export class FlatLightDslReceiver extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.FlatLightDslReceiver>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.light.generated.FlatLightDslReceiver interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									anchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.Anchor): com.mapbox.maps.extension.style.light.generated.FlatLight;
									anchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
									color(param0: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
									color(param0: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
									color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
									colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
									colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
									intensity(param0: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
									intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
									intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
									intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
									position(param0: number, param1: number, param2: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
									position(param0: com.mapbox.maps.extension.style.light.LightPosition): com.mapbox.maps.extension.style.light.generated.FlatLight;
									position(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
									positionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
									positionTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
									colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
									colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								});
								public constructor();
								public position(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public position(param0: number, param1: number, param2: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public position(param0: com.mapbox.maps.extension.style.light.LightPosition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public positionTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(param0: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public anchor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public anchor(param0: com.mapbox.maps.extension.style.layers.properties.generated.Anchor): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public intensity(param0: number): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public color(param0: string): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.light.generated.FlatLight;
								public positionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.light.generated.FlatLight;
							}
							export namespace FlatLightDslReceiver {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.light.generated.FlatLightDslReceiver.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace model {
						export class ModelExtensionImpl extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleModelExtension {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.model.ModelExtensionImpl>;
							public constructor(builder: com.mapbox.maps.extension.style.model.ModelExtensionImpl.Builder);
							public bindTo(delegate: com.mapbox.maps.MapboxStyleManager): void;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
						export namespace ModelExtensionImpl {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.model.ModelExtensionImpl.Builder>;
								public uri(this_u_70a: string): com.mapbox.maps.extension.style.model.ModelExtensionImpl.Builder;
								public build(): com.mapbox.maps.extension.style.model.ModelExtensionImpl;
								public getUri$extension_style_release(): string;
								public constructor(modelId: string);
								public getModelId(): string;
								public setUri$extension_style_release(uri_ex_9c4: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace model {
						export class ModelUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.model.ModelUtils>;
							public static addModel(this_a_c89: com.mapbox.maps.MapboxStyleManager, model: com.mapbox.maps.extension.style.StyleContract.StyleModelExtension): void;
							public static model(modelId: string, block: any): com.mapbox.maps.extension.style.model.ModelExtensionImpl;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace precipitations {
						export namespace generated {
							export class Rain extends java.lang.Object implements com.mapbox.maps.extension.style.precipitations.generated.RainDslReceiver, com.mapbox.maps.extension.style.StyleContract.StyleRainExtension {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.Rain>;
								public opacity(this_o_739: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinning(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(proper_a59: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignette(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinningTransition(this_c_995: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getCenterThinningAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public opacity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensity(this_i_59e: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorUseTheme(this_v_08b: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteTransition(this_v_138: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacityTransition(this_o_5e8: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorUseTheme(this_c_611: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensityTransition(this_i_676: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignette(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSize(this_d_16a: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getVignetteColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public color(proper_a59: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getVignetteColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public centerThinningTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignette(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinningTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public densityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public directionTransition(this_d_156: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(this_v_873: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSize(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrength(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getCenterThinning(): java.lang.Double;
								public densityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDropletSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public vignetteColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public dropletSizeTransition(this_d_2ff: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorTransition(this_v_c4f: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDistortionStrength(): java.lang.Double;
								public getColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public vignetteColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinning(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSizeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public directionTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrength(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getColorAsColorInt(): java.lang.Integer;
								public getDistortionStrengthAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public intensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public densityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public densityTransition(this_d_2a0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(this_c_aa2: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getColorUseTheme(): string;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public distortionStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrengthTransition(this_d_121: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignette(this_v_dd5: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public direction(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDistortionStrengthTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public vignetteTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getVignetteColorAsColorInt(): java.lang.Integer;
								public getDropletSize(): java.util.List<java.lang.Double>;
								public intensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getColor(): string;
								public getOpacity(): java.lang.Double;
								public vignetteColor(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinningTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public density(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public vignetteColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public constructor();
								public dropletSize(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getVignetteAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinning(this_c_4ea: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public directionTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDirectionAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
								public centerThinning(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
								public getDropletSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public distortionStrengthTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getIntensity(): java.lang.Double;
								public direction(this_d_d9f: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getVignetteColorUseTheme(): string;
								public distortionStrengthTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getVignetteColor(): string;
								public vignetteColorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getVignetteColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public colorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getVignetteTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public dropletSizeTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrength(this_d_930: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
								public getDirection(): java.util.List<java.lang.Double>;
								public dropletSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getCenterThinningTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getDensity(): java.lang.Double;
								public density(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getVignette(): java.lang.Double;
								public colorTransition(this_c_f06: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public getDirectionTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public density(this_d_465: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public density(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
							}
							export namespace Rain {
								export namespace Rain {
									export namespace Companion {
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace precipitations {
						export namespace generated {
							export class RainDslReceiver extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.RainDslReceiver>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.precipitations.generated.RainDslReceiver interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									centerThinning(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									centerThinning(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									centerThinningTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									centerThinningTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									color(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									color(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									colorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									density(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									density(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									densityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									densityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									directionTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									distortionStrength(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									distortionStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									distortionStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									distortionStrengthTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									dropletSize(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									dropletSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									dropletSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									dropletSizeTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									intensity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									intensityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									opacity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									opacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									opacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									opacityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignette(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignette(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteColor(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteColor(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteColorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									colorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteColorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
									vignetteColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								});
								public constructor();
								public centerThinning(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrengthTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignette(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSize(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public densityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinningTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSizeTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignette(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public density(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrength(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public color(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public opacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinningTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public densityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public density(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public dropletSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public directionTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrengthTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public intensity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public centerThinning(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public vignetteColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
								public distortionStrength(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Rain;
							}
							export namespace RainDslReceiver {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.RainDslReceiver.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace precipitations {
						export namespace generated {
							export class RainUtils extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.RainUtils>;
								public static setRain(this_s_7f1: com.mapbox.maps.MapboxStyleManager, rain: com.mapbox.maps.extension.style.StyleContract.StyleRainExtension): void;
								public static removeRain(this_r_1e3: com.mapbox.maps.MapboxStyleManager): void;
								public static getRain(i_a_al_d0a: com.mapbox.maps.MapboxStyleManager): com.mapbox.maps.extension.style.precipitations.generated.Rain;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace precipitations {
						export namespace generated {
							export class Snow extends java.lang.Object implements com.mapbox.maps.extension.style.precipitations.generated.SnowDslReceiver, com.mapbox.maps.extension.style.StyleContract.StyleSnowExtension {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.Snow>;
								public flakeSizeTransition(this_f_221: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public color(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public directionTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getCenterThinningAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public colorTransition(this_c_f06: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public densityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(this_v_831: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensity(this_i_5e0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignette(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(proper_a59: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getVignetteColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getVignetteColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public opacity(this_o_1b2: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignette(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorTransition(this_v_478: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinningTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public color(proper_a59: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public directionTransition(this_d_156: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinning(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensityTransition(this_i_3f5: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getColorAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public flakeSize(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getCenterThinning(): java.lang.Double;
								public vignetteColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignette(this_v_600: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public flakeSize(this_f_230: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public color(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public direction(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getColorAsColorInt(): java.lang.Integer;
								public opacity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public densityTransition(this_d_2a0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorUseTheme(this_c_81e: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public color(this_c_aa2: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getColorUseTheme(): string;
								public getDensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacityTransition(this_o_f5a: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinning(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public density(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinning(this_c_4ea: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getIntensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public getVignetteColorAsColorInt(): java.lang.Integer;
								public getFlakeSize(): java.lang.Double;
								public opacityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getColor(): string;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getOpacity(): java.lang.Double;
								public vignetteColorUseTheme(this_v_719: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getColorTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getIntensityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public densityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getOpacityTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public constructor();
								public densityTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getVignetteAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public vignetteTransition(this_v_941: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getDirectionAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public directionTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
								public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
								public color(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public flakeSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinningTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignette(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public flakeSizeTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getIntensity(): java.lang.Double;
								public getFlakeSizeTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public vignetteColorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getVignetteColorUseTheme(): string;
								public intensity(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getVignetteColor(): string;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getVignetteColorUseThemeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getOpacityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public flakeSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public direction(this_d_d9f: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinningTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getDensityAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public vignetteColor(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getVignetteTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public colorUseTheme(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinning(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public flakeSize(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
								public getDirection(): java.util.List<java.lang.Double>;
								public getCenterThinningTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public getDensity(): java.lang.Double;
								public getVignette(): java.lang.Double;
								public centerThinningTransition(this_c_995: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public density(this_d_465: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getFlakeSizeAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public density(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public density(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public getDirectionTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public flakeSizeTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
							}
							export namespace Snow {
								export namespace Snow {
									export namespace Companion {
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace precipitations {
						export namespace generated {
							export class SnowDslReceiver extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.SnowDslReceiver>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.precipitations.generated.SnowDslReceiver interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									centerThinning(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									centerThinning(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									centerThinningTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									centerThinningTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									color(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									color(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									colorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									density(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									density(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									densityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									densityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									directionTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									flakeSize(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									flakeSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									flakeSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									flakeSizeTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									intensity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									intensityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									opacity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									opacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									opacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									opacityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignette(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignette(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteColor(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteColor(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteColorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									colorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteColorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
									vignetteColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								});
								public constructor();
								public color(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public flakeSizeTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinningTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignette(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public flakeSizeTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public density(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public densityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public directionTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public flakeSize(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public color(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensity(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public direction(param0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public flakeSize(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinningTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignette(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public color(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinning(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorUseTheme(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public densityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public opacityTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensity(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public density(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public directionTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public direction(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public centerThinning(param0: number): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public intensityTransition(param0: any): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public vignetteColor(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.precipitations.generated.Snow;
								public colorUseTheme(param0: string): com.mapbox.maps.extension.style.precipitations.generated.Snow;
							}
							export namespace SnowDslReceiver {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.SnowDslReceiver.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace precipitations {
						export namespace generated {
							export class SnowUtils extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.precipitations.generated.SnowUtils>;
								public static removeSnow(this_r_a22: com.mapbox.maps.MapboxStyleManager): void;
								public static setSnow(this_s_0f0: com.mapbox.maps.MapboxStyleManager, snow: com.mapbox.maps.extension.style.StyleContract.StyleSnowExtension): void;
								public static getSnow(i_a_al_83c: com.mapbox.maps.MapboxStyleManager): com.mapbox.maps.extension.style.precipitations.generated.Snow;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace projection {
						export namespace generated {
							export class Projection extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleProjectionExtension {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.projection.generated.Projection>;
								public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public constructor(name: com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName);
								public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
								public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
								public getName(): com.mapbox.maps.extension.style.layers.properties.generated.ProjectionName;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace projection {
						export namespace generated {
							export class StyleProjectionUtils extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.projection.generated.StyleProjectionUtils>;
								public static getProjection(i_a_ap_049: com.mapbox.maps.MapboxStyleManager): com.mapbox.maps.extension.style.projection.generated.Projection;
								public static setProjection(this_s_f5e: com.mapbox.maps.MapboxStyleManager, projection: com.mapbox.maps.extension.style.projection.generated.Projection): void;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export class CustomGeometrySource extends com.mapbox.maps.extension.style.sources.Source {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.CustomGeometrySource>;
							public constructor(id: string, options: com.mapbox.maps.CustomGeometrySourceOptions);
							public setMaxOverscaleFactorForParentTiles(value: number): void;
							public getType$extension_style_release(): string;
							public getTileCacheBudget(): com.mapbox.maps.TileCacheBudget;
							public invalidateRegion(coordi_d26: com.mapbox.maps.CoordinateBounds): void;
							public invalidateTile(tileID: com.mapbox.maps.CanonicalTileID): void;
							public getMaxOverscaleFactorForParentTiles(): java.lang.Long;
							public setTileData(tileID: com.mapbox.maps.CanonicalTileID, featur_b09: java.util.List<com.mapbox.geojson.Feature>): void;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							public constructor(sourceId: string);
							public addSource(style: com.mapbox.maps.MapboxStyleManager): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							/** @deprecated */
							public invalidRegion(coordi_d26: com.mapbox.maps.CoordinateBounds): void;
							/** @deprecated */
							public invalidTile(tileID: com.mapbox.maps.CanonicalTileID): void;
							public setTileCacheBudget(value: com.mapbox.maps.TileCacheBudget): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export class CustomRasterSource extends com.mapbox.maps.extension.style.sources.Source {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.CustomRasterSource>;
							public setMaxOverscaleFactorForParentTiles(value: number): void;
							public constructor(sourceId: string);
							public getType$extension_style_release(): string;
							public constructor(id: string, options: com.mapbox.maps.CustomRasterSourceOptions);
							public addSource(style: com.mapbox.maps.MapboxStyleManager): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public setTileData(tileData: java.util.List<com.mapbox.maps.CustomRasterSourceTileData>): void;
							public getMaxOverscaleFactorForParentTiles(): java.lang.Long;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export class GeoJsonSourceUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.GeoJsonSourceUtils>;
							public static updateGeoJSONSourceFeatures(i_a_le_070: com.mapbox.maps.extension.style.sources.generated.GeoJsonSource, style: java.util.List<com.mapbox.geojson.Feature>, this_u_045: string): void;
							public static removeGeoJSONSourceFeatures(i_a_le_073: com.mapbox.maps.extension.style.sources.generated.GeoJsonSource, style: java.util.List<string>, this_r_8b6: string): void;
							public static addGeoJSONSourceFeatures(i_a_le_f74: com.mapbox.maps.extension.style.sources.generated.GeoJsonSource, style: java.util.List<com.mapbox.geojson.Feature>, this_a_3d5: string): void;
							public static addGeoJSONSourceFeatures(this_a_3d5: com.mapbox.maps.extension.style.sources.generated.GeoJsonSource, features: java.util.List<com.mapbox.geojson.Feature>): void;
							public static removeGeoJSONSourceFeatures(this_r_8b6: com.mapbox.maps.extension.style.sources.generated.GeoJsonSource, featureIds: java.util.List<string>): void;
							public static updateGeoJSONSourceFeatures(this_u_045: com.mapbox.maps.extension.style.sources.generated.GeoJsonSource, features: java.util.List<com.mapbox.geojson.Feature>): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export abstract class Source extends java.lang.Object implements com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.Source>;
							public getType$extension_style_release(): string;
							public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
							public setVolatileProperty$extension_style_release(property: com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>): void;
							public getVolatileSourceProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
							public getSourceProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
							public toString(): string;
							public setProperty$extension_style_release(property: com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>, throwR_1d2: boolean): void;
							public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
							public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
							public constructor(sourceId: string);
							public addSource(style: com.mapbox.maps.MapboxStyleManager): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
							public getSourceId(): string;
						}
						export namespace Source {
							export namespace Source {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export class SourceUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.SourceUtils>;
							public static addSource(this_a_529: com.mapbox.maps.MapboxStyleManager, source: com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension): void;
							public static getSource(e_iv: com.mapbox.maps.MapboxStyleManager, i_f_si_8a6: string): com.mapbox.maps.extension.style.sources.Source;
						}
						export namespace SourceUtils {
							export class WhenMappings extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.SourceUtils.WhenMappings>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export class TileSet extends java.util.HashMap<string,com.mapbox.bindgen.Value> {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.TileSet>;
							public get(param0: any): any;
							public remove(param0: any): any;
							public containsKey(key: string): boolean;
							public computeIfPresent(key: any, remapp_192: any): any;
							public forEach(action: any): void;
							public putIfAbsent(key: any, value: any): any;
							public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any, k6: any, v6: any, k7: any, v7: any, k8: any, v8: any): java.util.Map<any,any>;
							public values(): java.util.Collection<any>;
							public getOrDefault(key: any, defaul_4bf: com.mapbox.bindgen.Value): com.mapbox.bindgen.Value;
							public remove(key: any): any;
							public static of(k1: any, v1: any): java.util.Map<any,any>;
							public getKeys(): java.util.Set<string>;
							public put(param0: any, param1: any): any;
							public static of(): java.util.Map<any,any>;
							public getOrDefault(key: any, defaul_4bf: any): any;
							public containsValue(value: com.mapbox.bindgen.Value): boolean;
							public containsKey(param0: any): boolean;
							public remove(key: any, value: any): boolean;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any, k6: any, v6: any, k7: any, v7: any, k8: any, v8: any, k9: any, v9: any, k10: any, v10: any): java.util.Map<any,any>;
							public computeIfAbsent(key: any, mappin_a29: any): any;
							public static entry(k: any, v: any): java.util.Map.Entry<any,any>;
							public containsValue(value: any): boolean;
							public remove(key: string): com.mapbox.bindgen.Value;
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
							public static ofEntries(entries: androidNative.Array<java.util.Map.Entry<any,any>>): java.util.Map<any,any>;
							public merge(key: any, value: any, remapp_192: any): any;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any, k6: any, v6: any, k7: any, v7: any, k8: any, v8: any, k9: any, v9: any): java.util.Map<any,any>;
							public putAll(param0: java.util.Map<any,any>): void;
							public size(): number;
							public hashCode(): number;
							public values(): java.util.Collection<com.mapbox.bindgen.Value>;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any, k6: any, v6: any): java.util.Map<any,any>;
							public entrySet(): java.util.Set<java.util.Map.Entry<string,com.mapbox.bindgen.Value>>;
							public getValues(): java.util.Collection<com.mapbox.bindgen.Value>;
							public getSize(): number;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): java.util.Map<any,any>;
							public containsKey(key: any): boolean;
							public static of(k1: any, v1: any, k2: any, v2: any): java.util.Map<any,any>;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): java.util.Map<any,any>;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any, k6: any, v6: any, k7: any, v7: any): java.util.Map<any,any>;
							public remove(key: string, value: com.mapbox.bindgen.Value): boolean;
							public compute(key: any, remapp_192: any): any;
							public get(key: string): com.mapbox.bindgen.Value;
							public clear(): void;
							public get(key: any): any;
							public keySet(): java.util.Set<any>;
							public replace(key: any, oldValue: any, newValue: any): boolean;
							public remove(key: any): com.mapbox.bindgen.Value;
							public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): java.util.Map<any,any>;
							public get(key: any): com.mapbox.bindgen.Value;
							public replaceAll(function_: any): void;
							public replace(key: any, value: any): any;
							public getOrDefault(key: string, defaul_4bf: com.mapbox.bindgen.Value): com.mapbox.bindgen.Value;
							public keySet(): java.util.Set<string>;
							public static copyOf(map: java.util.Map<any,any>): java.util.Map<any,any>;
							public getEntries(): java.util.Set<java.util.Map.Entry<string,com.mapbox.bindgen.Value>>;
							public containsValue(param0: any): boolean;
						}
						export namespace TileSet {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.TileSet.Builder>;
								public getTiles(): java.util.List<string>;
								public description(this_d_c89: string): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public minZoom(this_m_7f1: number): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public bounds(p0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public name(this_n_aab: string): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public center(p0: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public getTilejson(): string;
								public legend(this_l_902: string): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public template(this_t_8fc: string): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public scheme(this_s_381: com.mapbox.maps.extension.style.sources.generated.Scheme): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public data(p0: java.util.List<string>): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public grids(p0: java.util.List<string>): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public maxZoom(this_m_8d6: number): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public version(this_v_422: string): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public build(): com.mapbox.maps.extension.style.sources.TileSet;
								public constructor(p0: string, item_iv_iv: java.util.List<string>);
								public attribution(this_a_7be: string): com.mapbox.maps.extension.style.sources.TileSet.Builder;
								public getParameters$extension_style_release(): java.util.HashMap<string,com.mapbox.bindgen.Value>;
							}
							export class RasterDemBuilder extends com.mapbox.maps.extension.style.sources.TileSet.Builder {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.TileSet.RasterDemBuilder>;
								public encoding(this_e_f95: com.mapbox.maps.extension.style.sources.generated.Encoding): com.mapbox.maps.extension.style.sources.TileSet.RasterDemBuilder;
								public constructor(tilejson: string, tiles: java.util.List<string>);
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class Encoding extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.Encoding>;
								public static TERRARIUM: com.mapbox.maps.extension.style.sources.generated.Encoding;
								public static MAPBOX: com.mapbox.maps.extension.style.sources.generated.Encoding;
								public toString(): string;
								public static valueOf(value: string): com.mapbox.maps.extension.style.sources.generated.Encoding;
								public hashCode(): number;
								public equals(other: any): boolean;
								public getValue(): string;
							}
							export namespace Encoding {
								export namespace Encoding {
									export namespace Companion {
										function valueOf(value: string): com.mapbox.maps.extension.style.sources.generated.Encoding;
										function valueOf(value: string): com.mapbox.maps.extension.style.sources.generated.Encoding;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class GeoJsonSource extends com.mapbox.maps.extension.style.sources.Source {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.GeoJsonSource>;
								public getPromoteId(): com.mapbox.maps.extension.style.types.PromoteId;
								public prefetchZoomDelta(this_p_8ed: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								/** @deprecated */
								public url(this_u_6b2: string, this_: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public featureCollection(value: com.mapbox.geojson.FeatureCollection): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public feature(value: com.mapbox.geojson.Feature): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public getType$extension_style_release(): string;
								public getTolerance(): java.lang.Double;
								public geometry(value: com.mapbox.geojson.Geometry): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public getTileCacheBudget(): com.mapbox.maps.TileCacheBudget;
								public data(this_d_8d0: string, this_: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public data(value: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public featureCollection(value: com.mapbox.geojson.FeatureCollection, dataId: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public getClusterMaxZoom(): java.lang.Long;
								public feature(value: com.mapbox.geojson.Feature, dataId: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public getAutoMaxZoom(): java.lang.Boolean;
								public getPrefetchZoomDelta(): java.lang.Long;
								public getData(): string;
								public getAttribution(): string;
								public getBuffer(): java.lang.Long;
								public getMaxzoom(): java.lang.Long;
								public getWorkerHandler$extension_style_release(): globalAndroid.os.Handler;
								public getClusterProperties(): java.util.HashMap<string,any>;
								public geometry(value: com.mapbox.geojson.Geometry, dataId: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public getClusterMinPoints(): java.lang.Long;
								public getLineMetrics(): java.lang.Boolean;
								public tileCacheBudget(this_t_e02: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								/** @deprecated */
								public url(value: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
								public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
								public getCluster(): java.lang.Boolean;
								public getClusterRadius(): java.lang.Long;
								public getGenerateId(): java.lang.Boolean;
							}
							export namespace GeoJsonSource {
								export class Builder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder>;
									public clusterProperty(options: string, proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public data(this_d_242: string, this_: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public prefetchZoomDelta(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public autoMaxZoom(proper_a59: boolean): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public featureCollection(this_f_100: com.mapbox.geojson.FeatureCollection, this_: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public feature(this_f_81c: com.mapbox.geojson.Feature, this_: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public clusterMaxZoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public clusterProperties(proper_a59: java.util.HashMap<string,any>): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public getProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public setGeoJson$extension_style_release(geoJso_019: com.mapbox.geojson.GeoJson): void;
									/** @deprecated */
									public url(this_u_d40: string, this_: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public attribution(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public buffer(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public featureCollection(value: com.mapbox.geojson.FeatureCollection): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public getSourceId(): string;
									public getVolatileProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public data(value: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public clusterProperty(options: string, proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression, this_c_029: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public promoteId(proper_a59: com.mapbox.maps.extension.style.types.PromoteId): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public feature(value: com.mapbox.geojson.Feature): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public clusterMinPoints(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									/** @deprecated */
									public url(value: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public tolerance(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public generateId(proper_a59: boolean): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public lineMetrics(proper_a59: boolean): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public tileCacheBudget(proper_a59: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public geometry(value: com.mapbox.geojson.Geometry): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public geometry(this_g_77b: com.mapbox.geojson.Geometry, this_: string): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public build(): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
									public constructor(sourceId: string);
									public cluster(proper_a59: boolean): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public getData$extension_style_release(): string;
									public setDataId$extension_style_release(dataId_e3d: string): void;
									public getGeoJson$extension_style_release(): com.mapbox.geojson.GeoJson;
									public getDataId$extension_style_release(): string;
									public clusterRadius(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
									public setData$extension_style_release(data_e_bac: string): void;
									public maxzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder;
								}
								export namespace GeoJsonSource {
									export namespace Companion {
										function getWorkerThread$extension_style_release(): globalAndroid.os.HandlerThread;
										function toGeoJsonData$extension_style_release(geoJson: com.mapbox.geojson.GeoJson): com.mapbox.maps.GeoJSONSourceData;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultBuffer(): java.lang.Long;
										function getDefaultTolerance(): java.lang.Double;
										function getDefaultCluster(): java.lang.Boolean;
										function getDefaultClusterRadius(): java.lang.Long;
										function getDefaultClusterMaxZoom(): java.lang.Long;
										function getDefaultClusterMinPoints(): java.lang.Long;
										function getDefaultLineMetrics(): java.lang.Boolean;
										function getDefaultGenerateId(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getWorkerThread$extension_style_release(): globalAndroid.os.HandlerThread;
										function toGeoJsonData$extension_style_release(geoJson: com.mapbox.geojson.GeoJson): com.mapbox.maps.GeoJSONSourceData;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultBuffer(): java.lang.Long;
										function getDefaultTolerance(): java.lang.Double;
										function getDefaultCluster(): java.lang.Boolean;
										function getDefaultClusterRadius(): java.lang.Long;
										function getDefaultClusterMaxZoom(): java.lang.Long;
										function getDefaultClusterMinPoints(): java.lang.Long;
										function getDefaultLineMetrics(): java.lang.Boolean;
										function getDefaultGenerateId(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class ImageSource extends com.mapbox.maps.extension.style.sources.Source {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.ImageSource>;
								public constructor(sourceId: string);
								public constructor(builder: com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder);
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public coordinates(this_c_89a: java.util.List<any>): com.mapbox.maps.extension.style.sources.generated.ImageSource;
								public getUrl(): string;
								public getType$extension_style_release(): string;
								public prefetchZoomDelta(this_p_79c: number): com.mapbox.maps.extension.style.sources.generated.ImageSource;
								public url(this_u_ed3: string): com.mapbox.maps.extension.style.sources.generated.ImageSource;
								public getCoordinates(): java.util.List<java.util.List<java.lang.Double>>;
								public getPrefetchZoomDelta(): java.lang.Long;
							}
							export namespace ImageSource {
								export class Builder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder>;
									public constructor(sourceId: string);
									public prefetchZoomDelta(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder;
									public getSourceId(): string;
									public getVolatileProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public coordinates(proper_a59: java.util.List<any>): com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder;
									public build(): com.mapbox.maps.extension.style.sources.generated.ImageSource;
									public getProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public url(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder;
								}
								export namespace ImageSource {
									export namespace Companion {
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class RasterArraySource extends com.mapbox.maps.extension.style.sources.Source {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.RasterArraySource>;
								public getTiles(): java.util.List<string>;
								public getAttribution(): string;
								public getMinzoom(): java.lang.Long;
								public getTileSize(): java.lang.Long;
								public getUrl(): string;
								public minzoom(this_m_9e7: number): com.mapbox.maps.extension.style.sources.generated.RasterArraySource;
								public getMaxzoom(): java.lang.Long;
								public getType$extension_style_release(): string;
								public constructor(builder: com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder);
								public url(this_u_ed3: string): com.mapbox.maps.extension.style.sources.generated.RasterArraySource;
								public maxzoom(this_m_1e6: number): com.mapbox.maps.extension.style.sources.generated.RasterArraySource;
								public getTileCacheBudget(): com.mapbox.maps.TileCacheBudget;
								public constructor(sourceId: string);
								public tileCacheBudget(this_t_ae5: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.RasterArraySource;
								public tiles(this_t_d40: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.RasterArraySource;
								public getRasterLayers(): java.util.List<com.mapbox.maps.extension.style.sources.generated.RasterArraySource.RasterDataLayer>;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public getBounds(): java.util.List<java.lang.Double>;
							}
							export namespace RasterArraySource {
								export class Builder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder>;
									public getSourceId(): string;
									public getVolatileProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public build(): com.mapbox.maps.extension.style.sources.generated.RasterArraySource;
									public tileSet(name: com.mapbox.maps.extension.style.sources.TileSet): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public tileSet(name: string, value: java.util.List<string>, i_a_ap_029: any): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public tiles(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public url(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public constructor(sourceId: string);
									public attribution(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public tileSize(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public getProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public minzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public maxzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public tileCacheBudget(proper_a59: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
									public bounds(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.sources.generated.RasterArraySource.Builder;
								}
								export namespace RasterArraySource {
									export namespace Companion {
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
									}
								}
								export class RasterDataLayer extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.RasterArraySource.RasterDataLayer>;
									public hashCode(): number;
									public equals(other: any): boolean;
									public constructor(layerId: string, bands: java.util.List<string>);
									public getLayerId(): string;
									public toString(): string;
									public getBands(): java.util.List<string>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class RasterDemSource extends com.mapbox.maps.extension.style.sources.Source {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.RasterDemSource>;
								public getTiles(): java.util.List<string>;
								public getMinzoom(): java.lang.Long;
								public getTileSize(): java.lang.Long;
								public volatile(this_v_121: boolean): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public maxOverscaleFactorForParentTiles(this_m_91e: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public getType$extension_style_release(): string;
								public tiles(this_t_d40: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public getEncoding(): com.mapbox.maps.extension.style.sources.generated.Encoding;
								public getTileCacheBudget(): com.mapbox.maps.TileCacheBudget;
								public getTileNetworkRequestsDelay(): java.lang.Double;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public getBounds(): java.util.List<java.lang.Double>;
								public url(this_u_ed3: string): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public getTileRequestsDelay(): java.lang.Double;
								public getPrefetchZoomDelta(): java.lang.Long;
								public minzoom(this_m_9e7: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public getMinimumTileUpdateInterval(): java.lang.Double;
								public tileCacheBudget(this_t_62c: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public tileNetworkRequestsDelay(this_t_30b: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public getAttribution(): string;
								public prefetchZoomDelta(this_p_150: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public getUrl(): string;
								public getMaxzoom(): java.lang.Long;
								public minimumTileUpdateInterval(this_m_c84: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public maxzoom(this_m_1e6: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
								public getMaxOverscaleFactorForParentTiles(): java.lang.Long;
								public constructor(sourceId: string);
								public constructor(builder: com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder);
								public getVolatile(): java.lang.Boolean;
								public tileRequestsDelay(this_t_c58: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
							}
							export namespace RasterDemSource {
								export class Builder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder>;
									public tileNetworkRequestsDelay(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public getSourceId(): string;
									public getVolatileProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public tileCacheBudget(proper_a59: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public tileSet(name: com.mapbox.maps.extension.style.sources.TileSet): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public bounds(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public maxzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public prefetchZoomDelta(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public volatile(proper_a59: boolean): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public build(): com.mapbox.maps.extension.style.sources.generated.RasterDemSource;
									public constructor(sourceId: string);
									public url(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public tiles(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public tileSet(name: string, value: java.util.List<string>, i_a_ap_896: any): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public getProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public maxOverscaleFactorForParentTiles(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public encoding(proper_a59: com.mapbox.maps.extension.style.sources.generated.Encoding): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public minimumTileUpdateInterval(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public tileSize(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public minzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public tileRequestsDelay(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
									public attribution(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder;
								}
								export namespace RasterDemSource {
									export namespace Companion {
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultEncoding(): com.mapbox.maps.extension.style.sources.generated.Encoding;
										function getDefaultVolatile(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getDefaultMinimumTileUpdateInterval(): java.lang.Double;
										function getDefaultTileRequestsDelay(): java.lang.Double;
										function getDefaultTileNetworkRequestsDelay(): java.lang.Double;
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultEncoding(): com.mapbox.maps.extension.style.sources.generated.Encoding;
										function getDefaultVolatile(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getDefaultMinimumTileUpdateInterval(): java.lang.Double;
										function getDefaultTileRequestsDelay(): java.lang.Double;
										function getDefaultTileNetworkRequestsDelay(): java.lang.Double;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class RasterSource extends com.mapbox.maps.extension.style.sources.Source {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.RasterSource>;
								public url(this_u_ed3: string): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getTiles(): java.util.List<string>;
								public tileRequestsDelay(this_t_c58: number): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getMinzoom(): java.lang.Long;
								public getTileSize(): java.lang.Long;
								public getType$extension_style_release(): string;
								public getTileCacheBudget(): com.mapbox.maps.TileCacheBudget;
								public tileCacheBudget(this_t_62c: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getTileNetworkRequestsDelay(): java.lang.Double;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public maxzoom(this_m_1e6: number): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getBounds(): java.util.List<java.lang.Double>;
								public getTileRequestsDelay(): java.lang.Double;
								public getPrefetchZoomDelta(): java.lang.Long;
								public getMinimumTileUpdateInterval(): java.lang.Double;
								public volatile(this_v_121: boolean): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getAttribution(): string;
								public tiles(this_t_d40: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public constructor(builder: com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder);
								public getUrl(): string;
								public minimumTileUpdateInterval(this_m_c84: number): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getMaxzoom(): java.lang.Long;
								public getMaxOverscaleFactorForParentTiles(): java.lang.Long;
								public constructor(sourceId: string);
								public prefetchZoomDelta(this_p_150: number): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public minzoom(this_m_9e7: number): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public tileNetworkRequestsDelay(this_t_30b: number): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getVolatile(): java.lang.Boolean;
								public maxOverscaleFactorForParentTiles(this_m_91e: number): com.mapbox.maps.extension.style.sources.generated.RasterSource;
								public getScheme(): com.mapbox.maps.extension.style.sources.generated.Scheme;
							}
							export namespace RasterSource {
								export class Builder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder>;
									public maxzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public getSourceId(): string;
									public getVolatileProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public bounds(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public tileNetworkRequestsDelay(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public maxOverscaleFactorForParentTiles(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public minzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public attribution(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public tileCacheBudget(proper_a59: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public tileSize(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public scheme(proper_a59: com.mapbox.maps.extension.style.sources.generated.Scheme): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public tiles(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public tileSet(name: com.mapbox.maps.extension.style.sources.TileSet): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public constructor(sourceId: string);
									public minimumTileUpdateInterval(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public url(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public volatile(proper_a59: boolean): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public tileRequestsDelay(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public getProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public tileSet(name: string, value: java.util.List<string>, i_a_ap_07c: any): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
									public build(): com.mapbox.maps.extension.style.sources.generated.RasterSource;
									public prefetchZoomDelta(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder;
								}
								export namespace RasterSource {
									export namespace Companion {
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultScheme(): com.mapbox.maps.extension.style.sources.generated.Scheme;
										function getDefaultVolatile(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getDefaultMinimumTileUpdateInterval(): java.lang.Double;
										function getDefaultTileRequestsDelay(): java.lang.Double;
										function getDefaultTileNetworkRequestsDelay(): java.lang.Double;
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultScheme(): com.mapbox.maps.extension.style.sources.generated.Scheme;
										function getDefaultVolatile(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getDefaultMinimumTileUpdateInterval(): java.lang.Double;
										function getDefaultTileRequestsDelay(): java.lang.Double;
										function getDefaultTileNetworkRequestsDelay(): java.lang.Double;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class Scheme extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.Scheme>;
								public static XYZ: com.mapbox.maps.extension.style.sources.generated.Scheme;
								public static TMS: com.mapbox.maps.extension.style.sources.generated.Scheme;
								public toString(): string;
								public static valueOf(value: string): com.mapbox.maps.extension.style.sources.generated.Scheme;
								public hashCode(): number;
								public equals(other: any): boolean;
								public getValue(): string;
							}
							export namespace Scheme {
								export namespace Scheme {
									export namespace Companion {
										function valueOf(value: string): com.mapbox.maps.extension.style.sources.generated.Scheme;
										function valueOf(value: string): com.mapbox.maps.extension.style.sources.generated.Scheme;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace sources {
						export namespace generated {
							export class VectorSource extends com.mapbox.maps.extension.style.sources.Source {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.VectorSource>;
								public getTiles(): java.util.List<string>;
								public getPromoteId(): com.mapbox.maps.extension.style.types.PromoteId;
								public prefetchZoomDelta(this_p_2e3: number): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getMinzoom(): java.lang.Long;
								public tileNetworkRequestsDelay(this_t_49e: number): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public minzoom(this_m_854: number): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public url(this_u_ed3: string): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public maxOverscaleFactorForParentTiles(this_m_282: number): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getType$extension_style_release(): string;
								public tileRequestsDelay(this_t_deb: number): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getTileCacheBudget(): com.mapbox.maps.TileCacheBudget;
								public getTileNetworkRequestsDelay(): java.lang.Double;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public getBounds(): java.util.List<java.lang.Double>;
								public maxzoom(this_m_69f: number): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getTileRequestsDelay(): java.lang.Double;
								public getPrefetchZoomDelta(): java.lang.Long;
								public constructor(builder: com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder);
								public tileCacheBudget(this_t_131: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getMinimumTileUpdateInterval(): java.lang.Double;
								public tiles(this_t_d40: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getAttribution(): string;
								public getUrl(): string;
								public getMaxzoom(): java.lang.Long;
								public getMaxOverscaleFactorForParentTiles(): java.lang.Long;
								public constructor(sourceId: string);
								public minimumTileUpdateInterval(this_m_e17: number): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getVolatile(): java.lang.Boolean;
								public volatile(this_v_c68: boolean): com.mapbox.maps.extension.style.sources.generated.VectorSource;
								public getScheme(): com.mapbox.maps.extension.style.sources.generated.Scheme;
							}
							export namespace VectorSource {
								export class Builder extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder>;
									public tileRequestsDelay(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public tileSet(name: string, value: java.util.List<string>, i_a_ap_04e: any): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public getSourceId(): string;
									public getVolatileProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
									public tiles(proper_a59: java.util.List<string>): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public url(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public tileSet(name: com.mapbox.maps.extension.style.sources.TileSet): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public minimumTileUpdateInterval(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public attribution(proper_a59: string): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public volatile(proper_a59: boolean): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public promoteId(proper_a59: com.mapbox.maps.extension.style.types.PromoteId): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public maxOverscaleFactorForParentTiles(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public build(): com.mapbox.maps.extension.style.sources.generated.VectorSource;
									public scheme(proper_a59: com.mapbox.maps.extension.style.sources.generated.Scheme): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public tileCacheBudget(proper_a59: com.mapbox.maps.TileCacheBudget): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public prefetchZoomDelta(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public tileNetworkRequestsDelay(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public constructor(sourceId: string);
									public maxzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public minzoom(proper_a59: number): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public bounds(proper_a59: java.util.List<java.lang.Double>): com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder;
									public getProperties$extension_style_release(): java.util.HashMap<string,com.mapbox.maps.extension.style.layers.properties.PropertyValue<any>>;
								}
								export namespace VectorSource {
									export namespace Companion {
										function getDefaultScheme(): com.mapbox.maps.extension.style.sources.generated.Scheme;
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultVolatile(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getDefaultMinimumTileUpdateInterval(): java.lang.Double;
										function getDefaultTileRequestsDelay(): java.lang.Double;
										function getDefaultTileNetworkRequestsDelay(): java.lang.Double;
										function getDefaultScheme(): com.mapbox.maps.extension.style.sources.generated.Scheme;
										function getDefaultMinzoom(): java.lang.Long;
										function getDefaultMaxzoom(): java.lang.Long;
										function getDefaultVolatile(): java.lang.Boolean;
										function getDefaultPrefetchZoomDelta(): java.lang.Long;
										function getDefaultMinimumTileUpdateInterval(): java.lang.Double;
										function getDefaultTileRequestsDelay(): java.lang.Double;
										function getDefaultTileNetworkRequestsDelay(): java.lang.Double;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace terrain {
						export namespace generated {
							export class Terrain extends java.lang.Object implements com.mapbox.maps.extension.style.terrain.generated.TerrainDslReceiver, com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.terrain.generated.Terrain>;
								public setDelegate$extension_style_release(delega_0fb: com.mapbox.maps.MapboxStyleManager): void;
								public exaggeration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public getExaggeration(): java.lang.Double;
								public getExaggerationTransition(): com.mapbox.maps.extension.style.types.StyleTransition;
								public exaggerationTransition(proper_a59: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public exaggerationTransition(this_e_e8b: any): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public getDelegate$extension_style_release(): com.mapbox.maps.MapboxStyleManager;
								public getExaggerationAsExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
								public exaggerationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public exaggeration(proper_a59: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public constructor(sourceId: string);
								public exaggerationTransition(param0: any): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public exaggeration(this_e_3b8: number): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public bindTo(param0: com.mapbox.maps.MapboxStyleManager): void;
								public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
								public exaggeration(param0: number): com.mapbox.maps.extension.style.terrain.generated.Terrain;
							}
							export namespace Terrain {
								export namespace Terrain {
									export namespace Companion {
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace terrain {
						export namespace generated {
							export class TerrainDslReceiver extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.terrain.generated.TerrainDslReceiver>;
								/**
								 * Constructs a new instance of the com.mapbox.maps.extension.style.terrain.generated.TerrainDslReceiver interface with the provided implementation.
								 * An empty constructor exists calling super().
								 */
								public constructor(implementation: {
									exaggeration(param0: number): com.mapbox.maps.extension.style.terrain.generated.Terrain;
									exaggeration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.terrain.generated.Terrain;
									exaggerationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.terrain.generated.Terrain;
									exaggerationTransition(param0: any): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								});
								public constructor();
								public exaggeration(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public exaggerationTransition(param0: any): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public exaggeration(param0: number): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public exaggerationTransition(param0: com.mapbox.maps.extension.style.types.StyleTransition): com.mapbox.maps.extension.style.terrain.generated.Terrain;
							}
							export namespace TerrainDslReceiver {
								export class DefaultImpls extends java.lang.Object {
									public static class: java.lang.Class<com.mapbox.maps.extension.style.terrain.generated.TerrainDslReceiver.DefaultImpls>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace terrain {
						export namespace generated {
							export class TerrainUtils extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.terrain.generated.TerrainUtils>;
								public static getTerrain(i_a_al_c14: com.mapbox.maps.MapboxStyleManager, it: string): com.mapbox.maps.extension.style.terrain.generated.Terrain;
								public static removeTerrain(this_r_4fe: com.mapbox.maps.MapboxStyleManager): void;
								public static setTerrain(this_s_064: com.mapbox.maps.MapboxStyleManager, terrain: com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension): void;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class AtmosphereDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.AtmosphereDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.AtmosphereDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class ExpressionDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.ExpressionDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.ExpressionDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class Formatted extends java.util.ArrayList<com.mapbox.maps.extension.style.types.FormattedSection> {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.Formatted>;
							public subList(param0: number, param1: number): java.util.List<any>;
							public constructor(initia_597: number);
							public remove(element: com.mapbox.maps.extension.style.types.FormattedSection): boolean;
							public lastIndexOf(o: any): number;
							public add(index: number, element: any): void;
							public removeLast(): any;
							public lastIndexOf(element: com.mapbox.maps.extension.style.types.FormattedSection): number;
							public addFirst(e: any): void;
							public getTextAsString(): string;
							public stream(): java.util.stream.Stream<any>;
							public constructor(c: java.util.Collection<any>);
							public listIterator(index: number): java.util.ListIterator<any>;
							public addAll(param0: java.util.Collection<any>): boolean;
							public removeAll(param0: java.util.Collection<any>): boolean;
							public add(param0: number, param1: any): void;
							public indexOf(o: any): number;
							public retainAll(param0: java.util.Collection<any>): boolean;
							public static of(e1: any, e2: any): java.util.List<any>;
							public remove(param0: any): boolean;
							public contains(o: any): boolean;
							public get(param0: number): any;
							public toValue(): com.mapbox.bindgen.Value;
							public indexOf(param0: any): number;
							public static of(e1: any, e2: any, e3: any): java.util.List<any>;
							public contains(element: com.mapbox.maps.extension.style.types.FormattedSection): boolean;
							public addAll(param0: number, param1: java.util.Collection<any>): boolean;
							public toArray(a: androidNative.Array<any>): androidNative.Array<any>;
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
							public remove(index: number): any;
							public remove(index: number): com.mapbox.maps.extension.style.types.FormattedSection;
							public parallelStream(): java.util.stream.Stream<any>;
							public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any): java.util.List<any>;
							public addLast(e: any): void;
							public contains(param0: any): boolean;
							public remove(param0: number): any;
							public size(): number;
							public lastIndexOf(element: any): number;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public static of(elements: androidNative.Array<any>): java.util.List<any>;
							public formattedSection(section: com.mapbox.maps.extension.style.types.FormattedSection): void;
							public remove(element: any): boolean;
							public static of(): java.util.List<any>;
							public toArray(): androidNative.Array<any>;
							public listIterator(): java.util.ListIterator<any>;
							public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any, e9: any): java.util.List<any>;
							public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any, e9: any, e10: any): java.util.List<any>;
							public indexOf(element: any): number;
							public reversed(): java.util.List<any>;
							public set(param0: number, param1: any): any;
							public add(param0: any): boolean;
							public listIterator(param0: number): java.util.ListIterator<any>;
							public getSize(): number;
							public getFirst(): any;
							public removeIf(filter: any): boolean;
							public contains(element: any): boolean;
							public getLast(): any;
							public static of(e1: any, e2: any, e3: any, e4: any): java.util.List<any>;
							public removeAt(p0: number): com.mapbox.maps.extension.style.types.FormattedSection;
							public constructor();
							public static copyOf(coll: java.util.Collection<any>): java.util.List<any>;
							public removeFirst(): any;
							public containsAll(param0: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<any>;
							public lastIndexOf(param0: any): number;
							public static of(e1: any, e2: any, e3: any, e4: any, e5: any): java.util.List<any>;
							public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any): java.util.List<any>;
							public clear(): void;
							public toArray(generator: any): androidNative.Array<any>;
							public addAll(c: java.util.Collection<any>): boolean;
							public remove(o: any): boolean;
							public static of(e1: any): java.util.List<any>;
							public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any): java.util.List<any>;
							public indexOf(element: com.mapbox.maps.extension.style.types.FormattedSection): number;
							public sort(c: java.util.Comparator<any>): void;
							public formattedSection(text: string, block: any): void;
							public replaceAll(operator: any): void;
							public toArray(param0: androidNative.Array<any>): androidNative.Array<any>;
						}
						export namespace Formatted {
							export namespace Formatted {
								export namespace Companion {
									function fromExpression(this_u_1c8: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.types.Formatted;
									function fromProperty(textFo_6ed: java.util.ArrayList<any>): com.mapbox.maps.extension.style.types.Formatted;
									function fromExpression(this_u_1c8: com.mapbox.maps.extension.style.expressions.generated.Expression): com.mapbox.maps.extension.style.types.Formatted;
									function fromProperty(textFo_6ed: java.util.ArrayList<any>): com.mapbox.maps.extension.style.types.Formatted;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class FormattedSection extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.FormattedSection>;
							public getFontStack(): java.util.List<string>;
							public getText(): string;
							public getFontScale(): java.lang.Double;
							public hashCode(): number;
							public getTextColorAsInt(): number;
							public component2(): java.lang.Double;
							public toString(): string;
							public setTextColor(textColor: string): void;
							public getTextColor(): string;
							public component1(): string;
							public constructor(text: string, fontScale: java.lang.Double);
							public setFontStack(fontStack: java.util.List<string>): void;
							public component3(): java.util.List<string>;
							public constructor(text: string);
							public toValue$extension_style_release(): com.mapbox.bindgen.Value;
							public copy(text: string, fontScale: java.lang.Double, fontStack: java.util.List<string>, textColor: string): com.mapbox.maps.extension.style.types.FormattedSection;
							public equals(other: any): boolean;
							public constructor(text: string, fontScale: java.lang.Double, fontStack: java.util.List<string>);
							public component4(): string;
							public constructor(text: string, fontScale: java.lang.Double, fontStack: java.util.List<string>, textColor: string);
							public setTextColorAsInt(value: number): void;
							public setFontScale(fontScale: java.lang.Double): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class LayersDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.LayersDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.LayersDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class LightDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.LightDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.LightDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class PromoteId extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.PromoteId>;
							public constructor(this_: string, proper_98b: string);
							public component2(): string;
							public hashCode(): number;
							public copy(proper_98b: string, sourceId: string): com.mapbox.maps.extension.style.types.PromoteId;
							public constructor(proper_98b: string);
							public toString(): string;
							public getPropertyName(): string;
							public component1(): string;
							public constructor(expression: com.mapbox.maps.extension.style.expressions.generated.Expression, sourceId: string);
							public toValue$extension_style_release(): com.mapbox.bindgen.Value;
							public equals(other: any): boolean;
							public getExpression(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public getSourceId(): string;
							public constructor(expression: com.mapbox.maps.extension.style.expressions.generated.Expression);
						}
						export namespace PromoteId {
							export namespace PromoteId {
								export namespace Companion {
									function fromProperty$extension_style_release(key: any): com.mapbox.maps.extension.style.types.PromoteId;
									function fromProperty$extension_style_release(key: any): com.mapbox.maps.extension.style.types.PromoteId;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class RainDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.RainDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.RainDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class SnowDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.SnowDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.SnowDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class SourceDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.SourceDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.SourceDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class StyleTransition extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.StyleTransition>;
							public getDelay(): java.lang.Long;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toValue(): com.mapbox.bindgen.Value;
							public getDuration(): java.lang.Long;
						}
						export namespace StyleTransition {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.types.StyleTransition.Builder>;
								public build(): com.mapbox.maps.extension.style.types.StyleTransition;
								public duration(this_d_fca: number): com.mapbox.maps.extension.style.types.StyleTransition.Builder;
								public delay(this_d_9ca: number): com.mapbox.maps.extension.style.types.StyleTransition.Builder;
								public constructor();
								public getDelay(): java.lang.Long;
								public getDuration(): java.lang.Long;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace types {
						export class TerrainDsl extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.types.TerrainDsl>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.extension.style.types.TerrainDsl interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								annotationType(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace utils {
						export class ColorUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.utils.ColorUtils>;
							public static INSTANCE: com.mapbox.maps.extension.style.utils.ColorUtils;
							public rgbaToColor(m: string): java.lang.Integer;
							public colorToRgbaString(color: number): string;
							public colorIntToRgbaExpression(this_: number): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public colorToRgbaArray(color: number): androidNative.Array<number>;
							public rgbaExpressionToColorString(c: com.mapbox.maps.extension.style.expressions.generated.Expression): string;
							public colorToGlRgbaArray(color: number): androidNative.Array<number>;
							public rgbaExpressionToColorInt(m: com.mapbox.maps.extension.style.expressions.generated.Expression): java.lang.Integer;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace utils {
						export class StyleTelemetryEvents extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.utils.StyleTelemetryEvents>;
							public static INSTANCE: com.mapbox.maps.extension.style.utils.StyleTelemetryEvents;
							public getDsl(): com.mapbox.maps.module.TelemetryEvent;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace utils {
						export class TypeUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.extension.style.utils.TypeUtils>;
							public static INSTANCE: com.mapbox.maps.extension.style.utils.TypeUtils;
							public wrapToValue(i_a_re_429: any): com.mapbox.bindgen.Value;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace extension {
				export namespace style {
					export namespace utils {
						export namespace TypeUtilsKt {
							export class WhenMappings extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.extension.style.utils.TypeUtilsKt.WhenMappings>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace geofencing {
				export class MapGeofencingConsent extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.geofencing.MapGeofencingConsent>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.geofencing.MapGeofencingConsent interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						setUserConsent(param0: boolean, param1: com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback): void;
						getUserConsent(): boolean;
						shouldShowConsent(): boolean;
					});
					public constructor();
					public setUserConsent(param0: boolean, param1: com.mapbox.common.geofencing.GeofencingUtilsUserConsentResponseCallback): void;
					public getUserConsent(): boolean;
					public shouldShowConsent(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export class FeatureState extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.interactions.FeatureState>;
					public static TAG: string; // "FeatureState"
					public getInternalState(): com.mapbox.bindgen.Value;
					public getDoubleState(stateName: string): java.lang.Double;
					public getStringState(stateName: string): string;
					public toString(): string;
					public asJsonString(): string;
					public equals(other: any): boolean;
					public constructor(intern_7b5: com.mapbox.bindgen.Value);
					public hashCode(): number;
					public getBooleanState(stateName: string): java.lang.Boolean;
					public getLongState(stateName: string): java.lang.Long;
				}
				export namespace FeatureState {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.interactions.FeatureState.Builder>;
						public addDoubleState(stateName: string, value: number): com.mapbox.maps.interactions.FeatureState.Builder;
						public constructor();
						public getRawStateMap(): java.util.HashMap<string,com.mapbox.bindgen.Value>;
						public build(): com.mapbox.maps.interactions.FeatureState;
						public addLongState(stateName: string, value: number): com.mapbox.maps.interactions.FeatureState.Builder;
						public addStringState(stateName: string, value: string): com.mapbox.maps.interactions.FeatureState.Builder;
						public addBooleanState(stateName: string, value: boolean): com.mapbox.maps.interactions.FeatureState.Builder;
					}
					export namespace FeatureState {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export class FeatureStateCallback<FS>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.interactions.FeatureStateCallback<any>>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.interactions.FeatureStateCallback<any> interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onFeatureState(param0: FS): void;
					});
					public constructor();
					public onFeatureState(param0: FS): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export class FeatureStateKey<FS>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.interactions.FeatureStateKey<any>>;
					public constructor(key: string);
					public getKey(): string;
					public equals(other: any): boolean;
					public hashCode(): number;
					public static create(key: string): com.mapbox.maps.interactions.FeatureStateKey<com.mapbox.maps.interactions.FeatureState>;
				}
				export namespace FeatureStateKey {
					export namespace FeatureStateKey {
						export namespace Companion {
							function create(key: string): com.mapbox.maps.interactions.FeatureStateKey<com.mapbox.maps.interactions.FeatureState>;
							function create(key: string): com.mapbox.maps.interactions.FeatureStateKey<com.mapbox.maps.interactions.FeatureState>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export class FeaturesetFeature<FS>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.interactions.FeaturesetFeature<any>>;
					public getState(): FS;
					public getDescriptor(): com.mapbox.maps.interactions.TypedFeaturesetDescriptor<FS,any>;
					public equals(other: any): boolean;
					public constructor(id: com.mapbox.maps.FeaturesetFeatureId, descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<FS,any>, state: FS, origin_144: com.mapbox.geojson.Feature);
					public getProperties(): org.json.JSONObject;
					public getOriginalFeature$sdk_base_release(): com.mapbox.geojson.Feature;
					public getId(): com.mapbox.maps.FeaturesetFeatureId;
					public getGeometry(): com.mapbox.geojson.Geometry;
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export class QueryRenderedFeaturesetFeaturesCallback<FF>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.interactions.QueryRenderedFeaturesetFeaturesCallback<any>>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.interactions.QueryRenderedFeaturesetFeaturesCallback<any> interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onQueryRenderedFeatures(param0: java.util.List<any>): void;
					});
					public constructor();
					public onQueryRenderedFeatures(param0: java.util.List<any>): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export abstract class TypedFeaturesetDescriptor<FS, FF>  extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>>;
					public static DEFAULT_IMPORT_ID: string; // "basemap"
					public getFeaturesetFeature(param0: com.mapbox.geojson.Feature, param1: string, param2: com.mapbox.bindgen.Value): FF;
					public constructor();
					public getFeatureState(param0: com.mapbox.bindgen.Value): FS;
					public toFeaturesetDescriptor(): com.mapbox.maps.FeaturesetDescriptor;
				}
				export namespace TypedFeaturesetDescriptor {
					export namespace TypedFeaturesetDescriptor {
						export namespace Companion {
						}
					}
					export class Featureset extends com.mapbox.maps.interactions.TypedFeaturesetDescriptor<com.mapbox.maps.interactions.FeatureState,com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.FeatureState>> {
						public static class: java.lang.Class<com.mapbox.maps.interactions.TypedFeaturesetDescriptor.Featureset>;
						public toFeaturesetDescriptor(): com.mapbox.maps.FeaturesetDescriptor;
						public getFeaturesetId(): string;
						public constructor();
						public constructor(featur_586: string, importId: string);
						public equals(other: any): boolean;
						public constructor(featur_586: string);
						public getFeaturesetFeature(featureId: com.mapbox.geojson.Feature, this_: string, feature: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.FeatureState>;
						public getFeatureState(rawState: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.FeatureState;
						public hashCode(): number;
						public getImportId(): string;
					}
					export class Layer extends com.mapbox.maps.interactions.TypedFeaturesetDescriptor<com.mapbox.maps.interactions.FeatureState,com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.FeatureState>> {
						public static class: java.lang.Class<com.mapbox.maps.interactions.TypedFeaturesetDescriptor.Layer>;
						public toFeaturesetDescriptor(): com.mapbox.maps.FeaturesetDescriptor;
						public constructor();
						public constructor(layerId: string);
						public equals(other: any): boolean;
						public getFeaturesetFeature(featureId: com.mapbox.geojson.Feature, this_: string, feature: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.FeatureState>;
						public getFeatureState(rawState: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.FeatureState;
						public hashCode(): number;
						public getLayerId(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardBuildings extends com.mapbox.maps.interactions.TypedFeaturesetDescriptor<com.mapbox.maps.interactions.standard.generated.StandardBuildingsState,com.mapbox.maps.interactions.standard.generated.StandardBuildingsFeature> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardBuildings>;
							public static FEATURESET_ID: string; // "buildings"
							public constructor();
							public getFeaturesetFeature(param0: com.mapbox.geojson.Feature, param1: string, param2: com.mapbox.bindgen.Value): any;
							public hashCode(): number;
							public equals(other: any): boolean;
							public getFeatureState(rawState: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.standard.generated.StandardBuildingsState;
							public toFeaturesetDescriptor(): com.mapbox.maps.FeaturesetDescriptor;
							public getImportId(): string;
							public constructor(importId: string);
							public getFeaturesetFeature(featureId: com.mapbox.geojson.Feature, this_: string, feature: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.standard.generated.StandardBuildingsFeature;
							public getFeatureState(param0: com.mapbox.bindgen.Value): any;
						}
						export namespace StandardBuildings {
							export namespace StandardBuildings {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardBuildingsFeature extends com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.standard.generated.StandardBuildingsState> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardBuildingsFeature>;
							public constructor(id: com.mapbox.maps.FeaturesetFeatureId, descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, state: any, origin_144: com.mapbox.geojson.Feature);
							public constructor(id: com.mapbox.maps.FeaturesetFeatureId, importId: string, origin_144: com.mapbox.geojson.Feature, state: com.mapbox.maps.interactions.standard.generated.StandardBuildingsState);
							public getGroup(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardBuildingsState extends com.mapbox.maps.interactions.FeatureState {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardBuildingsState>;
							public constructor(intern_7b5: com.mapbox.bindgen.Value);
							public getHighlight(): java.lang.Boolean;
							public getSelect(): java.lang.Boolean;
							public getInternalState(): com.mapbox.bindgen.Value;
						}
						export namespace StandardBuildingsState {
							export class Builder extends com.mapbox.maps.interactions.FeatureState.Builder {
								public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardBuildingsState.Builder>;
								public build(): com.mapbox.maps.interactions.FeatureState;
								public select(select: boolean): com.mapbox.maps.interactions.standard.generated.StandardBuildingsState.Builder;
								public highlight(highlight: boolean): com.mapbox.maps.interactions.standard.generated.StandardBuildingsState.Builder;
								public build(): com.mapbox.maps.interactions.standard.generated.StandardBuildingsState;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardBuildingsStateKey extends com.mapbox.maps.interactions.FeatureStateKey<com.mapbox.maps.interactions.standard.generated.StandardBuildingsState> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardBuildingsStateKey>;
						}
						export namespace StandardBuildingsStateKey {
							export namespace StandardBuildingsStateKey {
								export namespace Companion {
									function getHIGHLIGHT(): com.mapbox.maps.interactions.standard.generated.StandardBuildingsStateKey;
									function getSELECT(): com.mapbox.maps.interactions.standard.generated.StandardBuildingsStateKey;
									function create(key: string): com.mapbox.maps.interactions.standard.generated.StandardBuildingsStateKey;
									function getHIGHLIGHT(): com.mapbox.maps.interactions.standard.generated.StandardBuildingsStateKey;
									function getSELECT(): com.mapbox.maps.interactions.standard.generated.StandardBuildingsStateKey;
									function create(key: string): com.mapbox.maps.interactions.standard.generated.StandardBuildingsStateKey;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardInteractions extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardInteractions>;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.LongClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.LongClickInteraction.Companion, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.LongClickInteraction.Companion, importId: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.LongClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.ClickInteraction.Companion, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.LongClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.ClickInteraction.Companion, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.LongClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.LongClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.LongClickInteraction.Companion, importId: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.LongClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.LongClickInteraction.Companion, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.LongClickInteraction.Companion, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.ClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.ClickInteraction.Companion, importId: string, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.ClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.LongClickInteraction.Companion, importId: string, onLong_e1e: any): com.mapbox.maps.MapInteraction;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.ClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.ClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.ClickInteraction.Companion, importId: string, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.ClickInteraction.Companion, importId: string, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardPlaceLabels(this_s_ac8: com.mapbox.maps.ClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardBuildings(this_s_3f1: com.mapbox.maps.ClickInteraction.Companion, onClick: any): com.mapbox.maps.MapInteraction;
							public static standardPoi(this_s_0fc: com.mapbox.maps.ClickInteraction.Companion, importId: string, filter: com.mapbox.bindgen.Value, radius: java.lang.Double, onClick: any): com.mapbox.maps.MapInteraction;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPlaceLabels extends com.mapbox.maps.interactions.TypedFeaturesetDescriptor<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState,com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsFeature> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabels>;
							public static FEATURESET_ID: string; // "place-labels"
							public constructor();
							public getFeaturesetFeature(featureId: com.mapbox.geojson.Feature, this_: string, feature: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsFeature;
							public getFeaturesetFeature(param0: com.mapbox.geojson.Feature, param1: string, param2: com.mapbox.bindgen.Value): any;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toFeaturesetDescriptor(): com.mapbox.maps.FeaturesetDescriptor;
							public getFeatureState(rawState: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState;
							public getImportId(): string;
							public constructor(importId: string);
							public getFeatureState(param0: com.mapbox.bindgen.Value): any;
						}
						export namespace StandardPlaceLabels {
							export namespace StandardPlaceLabels {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPlaceLabelsFeature extends com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsFeature>;
							public getClass(): java.lang.Class<any>;
							public constructor(id: com.mapbox.maps.FeaturesetFeatureId, importId: string, origin_144: com.mapbox.geojson.Feature, state: com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState);
							public getName(): string;
							public getClass(): string;
							public getGeometry(): com.mapbox.geojson.Point;
							public constructor(id: com.mapbox.maps.FeaturesetFeatureId, descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, state: any, origin_144: com.mapbox.geojson.Feature);
							public getGeometry(): com.mapbox.geojson.Geometry;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPlaceLabelsState extends com.mapbox.maps.interactions.FeatureState {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState>;
							public getHide(): java.lang.Boolean;
							public constructor(intern_7b5: com.mapbox.bindgen.Value);
							public getHighlight(): java.lang.Boolean;
							public getSelect(): java.lang.Boolean;
							public getInternalState(): com.mapbox.bindgen.Value;
						}
						export namespace StandardPlaceLabelsState {
							export class Builder extends com.mapbox.maps.interactions.FeatureState.Builder {
								public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState.Builder>;
								public build(): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState;
								public build(): com.mapbox.maps.interactions.FeatureState;
								public highlight(highlight: boolean): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState.Builder;
								public hide(hide: boolean): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState.Builder;
								public constructor();
								public select(select: boolean): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPlaceLabelsStateKey extends com.mapbox.maps.interactions.FeatureStateKey<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsState> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey>;
						}
						export namespace StandardPlaceLabelsStateKey {
							export namespace StandardPlaceLabelsStateKey {
								export namespace Companion {
									function getHIDE(): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
									function getHIGHLIGHT(): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
									function getSELECT(): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
									function create(key: string): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
									function getHIDE(): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
									function getHIGHLIGHT(): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
									function getSELECT(): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
									function create(key: string): com.mapbox.maps.interactions.standard.generated.StandardPlaceLabelsStateKey;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPoi extends com.mapbox.maps.interactions.TypedFeaturesetDescriptor<com.mapbox.maps.interactions.standard.generated.StandardPoiState,com.mapbox.maps.interactions.standard.generated.StandardPoiFeature> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPoi>;
							public static FEATURESET_ID: string; // "poi"
							public constructor();
							public getFeatureState(rawState: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.standard.generated.StandardPoiState;
							public getFeaturesetFeature(param0: com.mapbox.geojson.Feature, param1: string, param2: com.mapbox.bindgen.Value): any;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toFeaturesetDescriptor(): com.mapbox.maps.FeaturesetDescriptor;
							public getImportId(): string;
							public constructor(importId: string);
							public getFeaturesetFeature(featureId: com.mapbox.geojson.Feature, this_: string, feature: com.mapbox.bindgen.Value): com.mapbox.maps.interactions.standard.generated.StandardPoiFeature;
							public getFeatureState(param0: com.mapbox.bindgen.Value): any;
						}
						export namespace StandardPoi {
							export namespace StandardPoi {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPoiFeature extends com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.standard.generated.StandardPoiState> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPoiFeature>;
							public constructor(id: com.mapbox.maps.FeaturesetFeatureId, importId: string, origin_144: com.mapbox.geojson.Feature, state: com.mapbox.maps.interactions.standard.generated.StandardPoiState);
							public getClass(): java.lang.Class<any>;
							public getMaki(): string;
							public getTransitMode(): string;
							public getClass(): string;
							public getGeometry(): com.mapbox.geojson.Point;
							public constructor(id: com.mapbox.maps.FeaturesetFeatureId, descriptor: com.mapbox.maps.interactions.TypedFeaturesetDescriptor<any,any>, state: any, origin_144: com.mapbox.geojson.Feature);
							public getTransitNetwork(): string;
							public getGeometry(): com.mapbox.geojson.Geometry;
							public getAirportRef(): string;
							public getTransitStopType(): string;
							public getName(): string;
							public getGroup(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPoiState extends com.mapbox.maps.interactions.FeatureState {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPoiState>;
							public getHide(): java.lang.Boolean;
							public constructor(intern_7b5: com.mapbox.bindgen.Value);
							public getInternalState(): com.mapbox.bindgen.Value;
						}
						export namespace StandardPoiState {
							export class Builder extends com.mapbox.maps.interactions.FeatureState.Builder {
								public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPoiState.Builder>;
								public build(): com.mapbox.maps.interactions.FeatureState;
								public constructor();
								public hide(hide: boolean): com.mapbox.maps.interactions.standard.generated.StandardPoiState.Builder;
								public build(): com.mapbox.maps.interactions.standard.generated.StandardPoiState;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace interactions {
				export namespace standard {
					export namespace generated {
						export class StandardPoiStateKey extends com.mapbox.maps.interactions.FeatureStateKey<com.mapbox.maps.interactions.standard.generated.StandardPoiState> {
							public static class: java.lang.Class<com.mapbox.maps.interactions.standard.generated.StandardPoiStateKey>;
						}
						export namespace StandardPoiStateKey {
							export namespace StandardPoiStateKey {
								export namespace Companion {
									function getHIDE(): com.mapbox.maps.interactions.standard.generated.StandardPoiStateKey;
									function create(key: string): com.mapbox.maps.interactions.standard.generated.StandardPoiStateKey;
									function getHIDE(): com.mapbox.maps.interactions.standard.generated.StandardPoiStateKey;
									function create(key: string): com.mapbox.maps.interactions.standard.generated.StandardPoiStateKey;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace loader {
				export class MapboxMaps extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.loader.MapboxMaps>;
					public static INSTANCE: com.mapbox.maps.loader.MapboxMaps;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace loader {
				export class MapboxMapsInitializer extends com.mapbox.common.BaseMapboxInitializer<com.mapbox.maps.loader.MapboxMaps> {
					public static class: java.lang.Class<com.mapbox.maps.loader.MapboxMapsInitializer>;
					public constructor();
					public getInitializerClass(): java.lang.Class<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace loader {
				export class MapboxMapsInitializerImpl extends androidx.startup.Initializer<com.mapbox.maps.loader.MapboxMaps> {
					public static class: java.lang.Class<com.mapbox.maps.loader.MapboxMapsInitializerImpl>;
					public create(context: globalAndroid.content.Context): com.mapbox.maps.loader.MapboxMaps;
					public constructor();
					public dependencies(): java.util.List<java.lang.Class<any>>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export class MapTelemetry extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.module.MapTelemetry>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.module.MapTelemetry interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onAppUserTurnstileEvent(): void;
						setUserTelemetryRequestState(param0: boolean): void;
						disableTelemetrySession(): void;
						onPerformanceEvent(param0: globalAndroid.os.Bundle): void;
						getUserTelemetryRequestState(): boolean;
					});
					public constructor();
					public onAppUserTurnstileEvent(): void;
					public setUserTelemetryRequestState(param0: boolean): void;
					public disableTelemetrySession(): void;
					public onPerformanceEvent(param0: globalAndroid.os.Bundle): void;
					public getUserTelemetryRequestState(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export class TelemetryEvent extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.module.TelemetryEvent>;
					public increment(): void;
				}
				export namespace TelemetryEvent {
					export namespace TelemetryEvent {
						export namespace Companion {
							function create(name: string): com.mapbox.maps.module.TelemetryEvent;
							function create(name: string): com.mapbox.maps.module.TelemetryEvent;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export namespace telemetry {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.module.telemetry.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.module.telemetry"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export namespace telemetry {
					export abstract class MapBaseEvent extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.module.telemetry.MapBaseEvent>;
						public constructor(phoneState: com.mapbox.maps.module.telemetry.PhoneState);
						public getCreated(): string;
						public getEventName(): string;
						public getEvent(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export namespace telemetry {
					export class MapEventFactory extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.module.telemetry.MapEventFactory>;
						public static INSTANCE: com.mapbox.maps.module.telemetry.MapEventFactory;
						public buildPerformanceEvent(phoneState: com.mapbox.maps.module.telemetry.PhoneState, sessionId: string, data: globalAndroid.os.Bundle): com.mapbox.maps.module.telemetry.PerformanceEvent;
						public buildMapLoadEvent(this_: com.mapbox.maps.module.telemetry.PhoneState): com.mapbox.maps.module.telemetry.MapLoadEvent;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export namespace telemetry {
					export class MapLoadEvent extends com.mapbox.maps.module.telemetry.MapBaseEvent {
						public static class: java.lang.Class<com.mapbox.maps.module.telemetry.MapLoadEvent>;
						public getUserId(): string;
						public getSdkIdentifier(): string;
						public equals(this_: any): boolean;
						public constructor(userId: string, phoneState: com.mapbox.maps.module.telemetry.PhoneState);
						public hashCode(): number;
						public getCarrier(): string;
						public getOrientation(): string;
						public getBatteryLevel(): number;
						public isWifi(): boolean;
						public toString(): string;
						public getModel(): string;
						public getSdkVersion(): string;
						public getResolution(): number;
						public constructor(phoneState: com.mapbox.maps.module.telemetry.PhoneState);
						public getOperatingSystem(): string;
						public getAccessibilityFontScale(): number;
						public getEventName(): string;
						public isPluggedIn(): boolean;
						public getCellularNetworkType(): string;
					}
					export namespace MapLoadEvent {
						export namespace MapLoadEvent {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export namespace telemetry {
					export class MapTelemetryImpl extends java.lang.Object implements com.mapbox.maps.module.MapTelemetry {
						public static class: java.lang.Class<com.mapbox.maps.module.telemetry.MapTelemetryImpl>;
						public constructor(appContext: globalAndroid.content.Context, events_e77: com.mapbox.common.EventsServiceInterface, teleme_333: com.mapbox.common.TelemetryService, events_cf3: com.mapbox.common.EventsServerOptions, defaul_e6d: anyx.coroutines.CoroutineDispatcher);
						public setUserTelemetryRequestState(enabled: boolean): void;
						public onPerformanceEvent(this_: globalAndroid.os.Bundle): void;
						public constructor(appContext: globalAndroid.content.Context);
						public getUserTelemetryRequestState(): boolean;
						public setUserTelemetryRequestState(param0: boolean): void;
						public onAppUserTurnstileEvent(): void;
						public disableTelemetrySession(): void;
						public onPerformanceEvent(param0: globalAndroid.os.Bundle): void;
					}
					export namespace MapTelemetryImpl {
						export namespace MapTelemetryImpl {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export namespace telemetry {
					export class PerformanceEvent extends com.mapbox.maps.module.telemetry.MapBaseEvent {
						public static class: java.lang.Class<com.mapbox.maps.module.telemetry.PerformanceEvent>;
						public getAttributes(): java.util.List<com.mapbox.maps.module.telemetry.PerformanceEvent.PerformanceAttribute<string>>;
						public getCounters(): java.util.List<com.mapbox.maps.module.telemetry.PerformanceEvent.PerformanceAttribute<java.lang.Double>>;
						public equals(this_: any): boolean;
						public constructor(phoneState: com.mapbox.maps.module.telemetry.PhoneState);
						public getEventName(): string;
						public constructor(phoneState: com.mapbox.maps.module.telemetry.PhoneState, sessionId: string, bundle: globalAndroid.os.Bundle);
						public getSessionId(): string;
						public hashCode(): number;
						public getMetadata(): com.google.gson.JsonObject;
						public toString(): string;
					}
					export namespace PerformanceEvent {
						export namespace PerformanceEvent {
							export namespace Companion {
							}
						}
						export class PerformanceAttribute<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.module.telemetry.PerformanceEvent.PerformanceAttribute<any>>;
							public hashCode(): number;
							public equals(this_: any): boolean;
							public constructor(name: string, value: T);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace module {
				export namespace telemetry {
					export class PhoneState extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.module.telemetry.PhoneState>;
						public setCarrier(carrier: string): void;
						public constructor();
						public getCreated(): string;
						public getCarrier(): string;
						public getBatteryLevel(): number;
						public setPluggedIn(pluggedIn: boolean): void;
						public isWifi(): boolean;
						public setOrientation(orient_c21: com.mapbox.maps.module.telemetry.PhoneState.Orientation): void;
						public setWifi(wifi: boolean): void;
						public setBatteryLevel(batter_58c: number): void;
						public getResolution(): number;
						public setCellularNetworkType(cellul_817: string): void;
						public setResolution(resolution: number): void;
						public getAccessibilityFontScale(): number;
						public isPluggedIn(): boolean;
						public getOrientation(): com.mapbox.maps.module.telemetry.PhoneState.Orientation;
						public getCellularNetworkType(): string;
						public setCreated(created: string): void;
						public setAccessibilityFontScale(access_ee4: number): void;
						public constructor(context: globalAndroid.content.Context);
					}
					export namespace PhoneState {
						export namespace PhoneState {
							export namespace Companion {
							}
						}
						export class Orientation {
							public static class: java.lang.Class<com.mapbox.maps.module.telemetry.PhoneState.Orientation>;
							public static ORIENTATION_PORTRAIT: com.mapbox.maps.module.telemetry.PhoneState.Orientation;
							public static ORIENTATION_LANDSCAPE: com.mapbox.maps.module.telemetry.PhoneState.Orientation;
							public static valueOf(value: string): com.mapbox.maps.module.telemetry.PhoneState.Orientation;
							public getOrientation(): string;
							public static values(): androidNative.Array<com.mapbox.maps.module.telemetry.PhoneState.Orientation>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
						export namespace Orientation {
							export namespace Orientation {
								export namespace Companion {
									function getOrientation(index: number): com.mapbox.maps.module.telemetry.PhoneState.Orientation;
									function getOrientation(index: number): com.mapbox.maps.module.telemetry.PhoneState.Orientation;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class ContextBinder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.plugin.ContextBinder>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.plugin.ContextBinder interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
					});
					public constructor();
					public bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class InvalidPluginConfigurationException extends java.lang.Exception {
					public static class: java.lang.Class<com.mapbox.maps.plugin.InvalidPluginConfigurationException>;
					public constructor(except_895: string);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class InvalidViewPluginHostException extends java.lang.Exception {
					public static class: java.lang.Class<com.mapbox.maps.plugin.InvalidViewPluginHostException>;
					public constructor(message: string);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable, enable_c91: boolean, writab_960: boolean);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class LifecyclePlugin extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.plugin.LifecyclePlugin>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.plugin.LifecyclePlugin interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onStart(): void;
						onStop(): void;
					});
					public constructor();
					public onStart(): void;
					public onStop(): void;
				}
				export namespace LifecyclePlugin {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.LifecyclePlugin.DefaultImpls>;
						public static onStart(this_: com.mapbox.maps.plugin.LifecyclePlugin): void;
						public static onStop(this_: com.mapbox.maps.plugin.LifecyclePlugin): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export abstract class LocationPuck extends java.lang.Object implements globalAndroid.os.Parcelable {
					public static class: java.lang.Class<com.mapbox.maps.plugin.LocationPuck>;
					public describeContents(): number;
					public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class LocationPuck2D extends com.mapbox.maps.plugin.LocationPuck {
					public static class: java.lang.Class<com.mapbox.maps.plugin.LocationPuck2D>;
					public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.LocationPuck2D>;
					public setBearingImage(bearin_8da: com.mapbox.maps.ImageHolder): void;
					public component2(): com.mapbox.maps.ImageHolder;
					public getShadowImage(): com.mapbox.maps.ImageHolder;
					public setOpacity(opacity: number): void;
					public toString(): string;
					public setTopImage(topImage: com.mapbox.maps.ImageHolder): void;
					public constructor();
					public getScaleExpression(): string;
					public setScaleExpression(scaleE_307: string): void;
					public component4(): string;
					public component3(): com.mapbox.maps.ImageHolder;
					public hashCode(): number;
					public copy(topImage: com.mapbox.maps.ImageHolder, bearin_8da: com.mapbox.maps.ImageHolder, shadow_196: com.mapbox.maps.ImageHolder, scaleE_307: string, opacity: number): com.mapbox.maps.plugin.LocationPuck2D;
					public constructor(topImage: com.mapbox.maps.ImageHolder, bearin_8da: com.mapbox.maps.ImageHolder);
					public getOpacity(): number;
					public constructor(topImage: com.mapbox.maps.ImageHolder, bearin_8da: com.mapbox.maps.ImageHolder, shadow_196: com.mapbox.maps.ImageHolder);
					public component5(): number;
					public constructor(topImage: com.mapbox.maps.ImageHolder);
					public getTopImage(): com.mapbox.maps.ImageHolder;
					public equals(other: any): boolean;
					public describeContents(): number;
					public setShadowImage(shadow_196: com.mapbox.maps.ImageHolder): void;
					public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
					public component1(): com.mapbox.maps.ImageHolder;
					public getBearingImage(): com.mapbox.maps.ImageHolder;
					public constructor(topImage: com.mapbox.maps.ImageHolder, bearin_8da: com.mapbox.maps.ImageHolder, shadow_196: com.mapbox.maps.ImageHolder, scaleE_307: string, opacity: number);
					public constructor(topImage: com.mapbox.maps.ImageHolder, bearin_8da: com.mapbox.maps.ImageHolder, shadow_196: com.mapbox.maps.ImageHolder, scaleE_307: string);
					public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
				}
				export namespace LocationPuck2D {
					export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.LocationPuck2D> {
						public static class: java.lang.Class<com.mapbox.maps.plugin.LocationPuck2D.Creator>;
						public createFromParcel(param0: globalAndroid.os.Parcel): any;
						public constructor();
						public newArray(param0: number): androidNative.Array<any>;
						public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.LocationPuck2D>;
						public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.LocationPuck2D;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class LocationPuck3D extends com.mapbox.maps.plugin.LocationPuck {
					public static class: java.lang.Class<com.mapbox.maps.plugin.LocationPuck3D>;
					public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.LocationPuck3D>;
					public getModelColor(): number;
					public component3(): number;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean);
					public copy(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number, modelC_29c: string, materi_f39: java.util.List<string>, nodeOv_9c2: java.util.List<string>, modelE_026: com.mapbox.maps.plugin.ModelElevationReference, modelC_c29: string, modelC_49f: string): com.mapbox.maps.plugin.LocationPuck3D;
					public component20(): java.util.List<string>;
					public getPosition(): java.util.List<java.lang.Float>;
					public getModelColorUseThemeExpression(): string;
					public component22(): string;
					public component12(): string;
					public getModelScaleExpression(): string;
					public setModelColorExpression(modelC_cb3: string): void;
					public getModelReceiveShadows(): boolean;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string);
					public setModelElevationReference(modelE_026: com.mapbox.maps.plugin.ModelElevationReference): void;
					public setModelColorMixIntensity(modelC_3fe: number): void;
					public equals(other: any): boolean;
					public setModelColor(modelColor: number): void;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string);
					public component2(): java.util.List<java.lang.Float>;
					public component1(): string;
					public component19(): java.util.List<string>;
					public getModelEmissiveStrengthExpression(): string;
					public component11(): number;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number, modelC_29c: string, materi_f39: java.util.List<string>, nodeOv_9c2: java.util.List<string>, modelE_026: com.mapbox.maps.plugin.ModelElevationReference, modelC_c29: string, modelC_49f: string);
					public component13(): string;
					public setModelColorUseThemeExpression(modelC_49f: string): void;
					public getMaterialOverrides(): java.util.List<string>;
					public component23(): string;
					public setModelReceiveShadows(modelR_a0c: boolean): void;
					public getModelScaleMode(): com.mapbox.maps.plugin.ModelScaleMode;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number);
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number);
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>);
					public component17(): number;
					public hashCode(): number;
					public getModelOpacityExpression(): string;
					public component4(): java.util.List<java.lang.Float>;
					public setModelUri(modelUri: string): void;
					public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
					public setModelColorUseTheme(modelC_c29: string): void;
					public component15(): number;
					public setModelOpacityExpression(modelO_bdd: string): void;
					public setModelCastShadows(modelC_e3a: boolean): void;
					public getModelElevationReference(): com.mapbox.maps.plugin.ModelElevationReference;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>);
					public getModelOpacity(): number;
					public getModelTranslation(): java.util.List<java.lang.Float>;
					public setModelScaleMode(modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode): void;
					public component5(): string;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string);
					public getModelRotationExpression(): string;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode);
					public component8(): boolean;
					public getModelUri(): string;
					public setModelScaleExpression(modelS_cf2: string): void;
					public component9(): boolean;
					public setModelScale(modelScale: java.util.List<java.lang.Float>): void;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>);
					public getModelCastShadows(): boolean;
					public getModelColorUseTheme(): string;
					public getModelScale(): java.util.List<java.lang.Float>;
					public component6(): java.util.List<java.lang.Float>;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number);
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number, modelC_29c: string, materi_f39: java.util.List<string>, nodeOv_9c2: java.util.List<string>);
					public setNodeOverrides(nodeOv_9c2: java.util.List<string>): void;
					public getModelColorExpression(): string;
					public setModelOpacity(modelO_f8b: number): void;
					public getModelEmissiveStrength(): number;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number, modelC_29c: string, materi_f39: java.util.List<string>, nodeOv_9c2: java.util.List<string>, modelE_026: com.mapbox.maps.plugin.ModelElevationReference, modelC_c29: string);
					public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
					public component14(): string;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean);
					public component16(): string;
					public setMaterialOverrides(materi_f39: java.util.List<string>): void;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number);
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number, modelC_29c: string);
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>);
					public setModelEmissiveStrength(modelE_c48: number): void;
					public toString(): string;
					public component21(): com.mapbox.maps.plugin.ModelElevationReference;
					public getModelRotation(): java.util.List<java.lang.Float>;
					public setModelColorMixIntensityExpression(modelC_29c: string): void;
					public describeContents(): number;
					public getNodeOverrides(): java.util.List<string>;
					public getModelColorMixIntensity(): number;
					public setPosition(position: java.util.List<java.lang.Float>): void;
					public component10(): com.mapbox.maps.plugin.ModelScaleMode;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string);
					public component7(): java.util.List<java.lang.Float>;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number, modelC_29c: string, materi_f39: java.util.List<string>);
					public constructor(modelUri: string);
					public setModelRotationExpression(modelR_66a: string): void;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string, modelO_bdd: string, modelR_66a: string, modelColor: number, modelC_cb3: string, modelC_3fe: number, modelC_29c: string, materi_f39: java.util.List<string>, nodeOv_9c2: java.util.List<string>, modelE_026: com.mapbox.maps.plugin.ModelElevationReference);
					public setModelEmissiveStrengthExpression(modelE_90a: string): void;
					public setModelRotation(modelR_fe8: java.util.List<java.lang.Float>): void;
					public getModelColorMixIntensityExpression(): string;
					public constructor(modelUri: string, position: java.util.List<java.lang.Float>, modelO_f8b: number, modelScale: java.util.List<java.lang.Float>, modelS_cf2: string, modelT_845: java.util.List<java.lang.Float>, modelR_fe8: java.util.List<java.lang.Float>, modelC_e3a: boolean, modelR_a0c: boolean, modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode, modelE_c48: number, modelE_90a: string);
					public setModelTranslation(modelT_845: java.util.List<java.lang.Float>): void;
					public component18(): string;
				}
				export namespace LocationPuck3D {
					export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.LocationPuck3D> {
						public static class: java.lang.Class<com.mapbox.maps.plugin.LocationPuck3D.Creator>;
						public createFromParcel(param0: globalAndroid.os.Parcel): any;
						public constructor();
						public newArray(param0: number): androidNative.Array<any>;
						public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.LocationPuck3D>;
						public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.LocationPuck3D;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class MapAttributionDelegateImpl extends java.lang.Object implements com.mapbox.maps.plugin.delegates.MapAttributionDelegate {
					public static class: java.lang.Class<com.mapbox.maps.plugin.MapAttributionDelegateImpl>;
					public buildMapBoxFeedbackUrl(it: globalAndroid.content.Context): string;
					public parseAttributions(param0: globalAndroid.content.Context, param1: com.mapbox.maps.plugin.attribution.AttributionParserConfig): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
					public parseAttributions(thisCo_9b8: globalAndroid.content.Context, this_t_b60: com.mapbox.maps.plugin.attribution.AttributionParserConfig): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
					public buildMapBoxFeedbackUrl(param0: globalAndroid.content.Context): string;
					public geofencingConsent(): com.mapbox.maps.geofencing.MapGeofencingConsent;
					public setExtraAttributions(extraA_0e3: java.util.List<com.mapbox.maps.plugin.attribution.Attribution>): void;
					public telemetry(): com.mapbox.maps.module.MapTelemetry;
					public getExtraAttributions(): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
					public constructor(mapboxMap: com.mapbox.maps.MapboxMap, mapTel_dec: com.mapbox.maps.module.MapTelemetry, mapGeo_7ca: com.mapbox.maps.geofencing.MapGeofencingConsent);
					public setExtraAttributions(param0: java.util.List<com.mapbox.maps.plugin.attribution.Attribution>): void;
				}
				export namespace MapAttributionDelegateImpl {
					export namespace MapAttributionDelegateImpl {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class MapCameraPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin {
					public static class: java.lang.Class<com.mapbox.maps.plugin.MapCameraPlugin>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.plugin.MapCameraPlugin interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onCameraMove(param0: com.mapbox.geojson.Point, param1: number, param2: number, param3: number, param4: com.mapbox.maps.EdgeInsets): void;
						initialize(): void;
						cleanup(): void;
						onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					});
					public constructor();
					public cleanup(): void;
					public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					public onCameraMove(param0: com.mapbox.geojson.Point, param1: number, param2: number, param3: number, param4: com.mapbox.maps.EdgeInsets): void;
					public initialize(): void;
				}
				export namespace MapCameraPlugin {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.MapCameraPlugin.DefaultImpls>;
						public static cleanup(this_: com.mapbox.maps.plugin.MapCameraPlugin): void;
						public static initialize(this_: com.mapbox.maps.plugin.MapCameraPlugin): void;
						public static onDelegateProvider(this_: com.mapbox.maps.plugin.MapCameraPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class MapDelegateProviderImpl extends java.lang.Object implements com.mapbox.maps.plugin.delegates.MapDelegateProvider {
					public static class: java.lang.Class<com.mapbox.maps.plugin.MapDelegateProviderImpl>;
					public getMapAttributionDelegate(): com.mapbox.maps.plugin.delegates.MapAttributionDelegate;
					public getMapFeatureQueryDelegate(): com.mapbox.maps.plugin.delegates.MapFeatureQueryDelegate;
					public getMapboxMap(): com.mapbox.maps.MapboxMap;
					public constructor(mapboxMap: com.mapbox.maps.MapboxMap, mapCon_875: com.mapbox.maps.MapController, telemetry: com.mapbox.maps.module.MapTelemetry, mapGeo_7ca: com.mapbox.maps.geofencing.MapGeofencingConsent);
					public getMapCameraManagerDelegate(): com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate;
					public getMapPluginProviderDelegate(): com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate;
					public getMapInteractionDelegate(): com.mapbox.maps.plugin.delegates.MapInteractionDelegate;
					public getMapListenerDelegate(): com.mapbox.maps.plugin.delegates.MapListenerDelegate;
					public getMapTransformDelegate(): com.mapbox.maps.plugin.delegates.MapTransformDelegate;
					public getMapFeatureStateDelegate(): com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate;
					public getStyle(param0: any): void;
					public getStyle(callback: any): void;
					public getMapStyleManagerDelegate(): com.mapbox.maps.MapboxStyleManager;
					public getMapProjectionDelegate(): com.mapbox.maps.plugin.delegates.MapProjectionDelegate;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class MapPlugin extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.plugin.MapPlugin>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.plugin.MapPlugin interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						initialize(): void;
						cleanup(): void;
						onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					});
					public constructor();
					public cleanup(): void;
					public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					public initialize(): void;
				}
				export namespace MapPlugin {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.MapPlugin.DefaultImpls>;
						public static initialize(this_: com.mapbox.maps.plugin.MapPlugin): void;
						public static onDelegateProvider(this_: com.mapbox.maps.plugin.MapPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public static cleanup(this_: com.mapbox.maps.plugin.MapPlugin): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class MapPluginRegistry extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.plugin.MapPluginRegistry>;
					public getPlugin(id: string): any;
					public constructor(mapDel_dcb: com.mapbox.maps.plugin.delegates.MapDelegateProvider);
					public onDestroy(): void;
					public onStyleChanged(it: com.mapbox.maps.Style): void;
					public onStart(): void;
					public onTouch(it: globalAndroid.view.MotionEvent): boolean;
					public onSizeChanged(this_: number, width: number): void;
					public removePlugin(this_: string): void;
					public createPlugin(i_a_le_18c: com.mapbox.maps.MapView, it: com.mapbox.maps.MapInitOptions, mapPlugin: com.mapbox.maps.plugin.Plugin): void;
					public onStop(): void;
					public onCameraMove(it: com.mapbox.maps.CameraState): void;
					public onGenericMotionEvent(it: globalAndroid.view.MotionEvent): boolean;
					public onAttachedToWindow(mapView: com.mapbox.maps.MapView): void;
				}
				export namespace MapPluginRegistry {
					export namespace MapPluginRegistry {
						export namespace Companion {
						}
					}
					export class State {
						public static class: java.lang.Class<com.mapbox.maps.plugin.MapPluginRegistry.State>;
						public static STARTED: com.mapbox.maps.plugin.MapPluginRegistry.State;
						public static STOPPED: com.mapbox.maps.plugin.MapPluginRegistry.State;
						public static valueOf(value: string): com.mapbox.maps.plugin.MapPluginRegistry.State;
						public static values(): androidNative.Array<com.mapbox.maps.plugin.MapPluginRegistry.State>;
						public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.MapPluginRegistry.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class MapSizePlugin extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.plugin.MapSizePlugin>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.plugin.MapSizePlugin interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onSizeChanged(param0: number, param1: number): void;
					});
					public constructor();
					public onSizeChanged(param0: number, param1: number): void;
				}
				export namespace MapSizePlugin {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.MapSizePlugin.DefaultImpls>;
						public static onSizeChanged(this_: com.mapbox.maps.plugin.MapSizePlugin, width: number, height: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class MapStyleObserverPlugin extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.plugin.MapStyleObserverPlugin>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.plugin.MapStyleObserverPlugin interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
					});
					public constructor();
					public onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class ModelElevationReference {
					public static class: java.lang.Class<com.mapbox.maps.plugin.ModelElevationReference>;
					public static SEA: com.mapbox.maps.plugin.ModelElevationReference;
					public static GROUND: com.mapbox.maps.plugin.ModelElevationReference;
					public static values(): androidNative.Array<com.mapbox.maps.plugin.ModelElevationReference>;
					public static valueOf(value: string): com.mapbox.maps.plugin.ModelElevationReference;
					public getValue(): string;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class ModelScaleMode {
					public static class: java.lang.Class<com.mapbox.maps.plugin.ModelScaleMode>;
					public static MAP: com.mapbox.maps.plugin.ModelScaleMode;
					public static VIEWPORT: com.mapbox.maps.plugin.ModelScaleMode;
					public static valueOf(value: string): com.mapbox.maps.plugin.ModelScaleMode;
					public getValue(): string;
					public static values(): androidNative.Array<com.mapbox.maps.plugin.ModelScaleMode>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export abstract class Plugin extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.plugin.Plugin>;
					public static MAPBOX_CAMERA_PLUGIN_ID: string; // "MAPBOX_CAMERA_PLUGIN_ID"
					public static MAPBOX_GESTURES_PLUGIN_ID: string; // "MAPBOX_GESTURES_PLUGIN_ID"
					public static MAPBOX_COMPASS_PLUGIN_ID: string; // "MAPBOX_COMPASS_PLUGIN_ID"
					public static MAPBOX_LOGO_PLUGIN_ID: string; // "MAPBOX_LOGO_PLUGIN_ID"
					public static MAPBOX_ATTRIBUTION_PLUGIN_ID: string; // "MAPBOX_ATTRIBUTION_PLUGIN_ID"
					public static MAPBOX_LOCATION_COMPONENT_PLUGIN_ID: string; // "MAPBOX_LOCATION_COMPONENT_PLUGIN_ID"
					public static MAPBOX_SCALEBAR_PLUGIN_ID: string; // "MAPBOX_SCALEBAR_PLUGIN_ID"
					public static MAPBOX_ANNOTATION_PLUGIN_ID: string; // "MAPBOX_ANNOTATION_PLUGIN_ID"
					public static MAPBOX_LIFECYCLE_PLUGIN_ID: string; // "MAPBOX_LIFECYCLE_PLUGIN_ID"
					public static MAPBOX_MAP_OVERLAY_PLUGIN_ID: string; // "MAPBOX_MAP_OVERLAY_PLUGIN_ID"
					public static MAPBOX_VIEWPORT_PLUGIN_ID: string; // "MAPBOX_VIEWPORT_PLUGIN_ID"
					public toString(): string;
					public getId(): string;
					public equals(this_: any): boolean;
					public getInstance(): com.mapbox.maps.plugin.MapPlugin;
					public hashCode(): number;
				}
				export namespace Plugin {
					export namespace Plugin {
						export namespace Companion {
						}
					}
					export class Custom extends com.mapbox.maps.plugin.Plugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.Plugin.Custom>;
						public constructor(id: string, instance: com.mapbox.maps.plugin.MapPlugin);
					}
					export class Mapbox extends com.mapbox.maps.plugin.Plugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.Plugin.Mapbox>;
						public constructor(id: string);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class PuckBearing {
					public static class: java.lang.Class<com.mapbox.maps.plugin.PuckBearing>;
					public static HEADING: com.mapbox.maps.plugin.PuckBearing;
					public static COURSE: com.mapbox.maps.plugin.PuckBearing;
					public getValue(): string;
					public static valueOf(value: string): com.mapbox.maps.plugin.PuckBearing;
					public static values(): androidNative.Array<com.mapbox.maps.plugin.PuckBearing>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class ScrollMode {
					public static class: java.lang.Class<com.mapbox.maps.plugin.ScrollMode>;
					public static HORIZONTAL: com.mapbox.maps.plugin.ScrollMode;
					public static VERTICAL: com.mapbox.maps.plugin.ScrollMode;
					public static HORIZONTAL_AND_VERTICAL: com.mapbox.maps.plugin.ScrollMode;
					public static values(): androidNative.Array<com.mapbox.maps.plugin.ScrollMode>;
					public getValue(): string;
					public static valueOf(value: string): com.mapbox.maps.plugin.ScrollMode;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export class ViewPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin {
					public static class: java.lang.Class<com.mapbox.maps.plugin.ViewPlugin>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.plugin.ViewPlugin interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						onPluginView(param0: globalAndroid.view.View): void;
						initialize(): void;
						cleanup(): void;
						onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					});
					public constructor();
					public cleanup(): void;
					public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
					public onPluginView(param0: globalAndroid.view.View): void;
					public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					public initialize(): void;
				}
				export namespace ViewPlugin {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.ViewPlugin.DefaultImpls>;
						public static onPluginView(this_: com.mapbox.maps.plugin.ViewPlugin, view: globalAndroid.view.View): void;
						public static initialize(this_: com.mapbox.maps.plugin.ViewPlugin): void;
						public static cleanup(this_: com.mapbox.maps.plugin.ViewPlugin): void;
						public static onDelegateProvider(this_: com.mapbox.maps.plugin.ViewPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
					export class Initializer extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.ViewPlugin.Initializer>;
						public getContext(): java.lang.ref.WeakReference<globalAndroid.content.Context>;
						public getPixelRatio(): number;
						public equals(other: any): boolean;
						public component2(): globalAndroid.content.res.TypedArray;
						public copy(context: java.lang.ref.WeakReference<globalAndroid.content.Context>, attributes: globalAndroid.content.res.TypedArray, pixelRatio: number): com.mapbox.maps.plugin.ViewPlugin.Initializer;
						public hashCode(): number;
						public constructor(context: java.lang.ref.WeakReference<globalAndroid.content.Context>, attributes: globalAndroid.content.res.TypedArray, pixelRatio: number);
						public getAttributes(): globalAndroid.content.res.TypedArray;
						public component3(): number;
						public toString(): string;
						public component1(): java.lang.ref.WeakReference<globalAndroid.content.Context>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimationsLifecycleListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onAnimatorStarting(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string): void;
							onAnimatorInterrupting(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string, param3: globalAndroid.animation.ValueAnimator, param4: string): void;
							onAnimatorEnding(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string): void;
							onAnimatorCancelling(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string): void;
						});
						public constructor();
						public onAnimatorCancelling(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string): void;
						public onAnimatorStarting(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string): void;
						public onAnimatorInterrupting(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string, param3: globalAndroid.animation.ValueAnimator, param4: string): void;
						public onAnimatorEnding(param0: com.mapbox.maps.plugin.animation.CameraAnimatorType, param1: globalAndroid.animation.ValueAnimator, param2: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimationsPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimationsPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.animation.CameraAnimationsPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getDebugMode(): boolean;
							setDebugMode(param0: boolean): void;
							getAnchor(): com.mapbox.maps.ScreenCoordinate;
							setAnchor(param0: com.mapbox.maps.ScreenCoordinate): void;
							easeTo(param0: com.mapbox.maps.CameraOptions, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
							scaleBy(param0: number, param1: com.mapbox.maps.ScreenCoordinate, param2: com.mapbox.maps.plugin.animation.MapAnimationOptions, param3: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
							moveBy(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
							rotateBy(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.ScreenCoordinate, param2: com.mapbox.maps.plugin.animation.MapAnimationOptions, param3: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
							pitchBy(param0: number, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
							flyTo(param0: com.mapbox.maps.CameraOptions, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
							createZoomAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: any): globalAndroid.animation.ValueAnimator;
							createAnchorAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.ScreenCoordinate>, param1: any): globalAndroid.animation.ValueAnimator;
							createBearingAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: boolean, param2: any): globalAndroid.animation.ValueAnimator;
							createPitchAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: any): globalAndroid.animation.ValueAnimator;
							createPaddingAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.EdgeInsets>, param1: any): globalAndroid.animation.ValueAnimator;
							createCenterAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, param1: any): globalAndroid.animation.ValueAnimator;
							createCenterAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, param1: boolean, param2: any): globalAndroid.animation.ValueAnimator;
							registerAnimators(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
							cancelAllAnimators(param0: java.util.List<string>): void;
							unregisterAnimators(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>, param1: boolean): void;
							calculateScaleBy(param0: number, param1: number): number;
							addCameraBearingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
							addCameraPitchChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
							addCameraZoomChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
							removeCameraZoomChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
							addCameraCenterChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
							removeCameraCenterChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
							addCameraPaddingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
							removeCameraPaddingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
							addCameraAnchorChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
							removeCameraAnchorChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
							removeCameraBearingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
							removeCameraPitchChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
							addCameraAnimationsLifecycleListener(param0: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
							removeCameraAnimationsLifecycleListener(param0: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
							playAnimatorsTogether(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
							playAnimatorsSequentially(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public registerAnimators(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public addCameraZoomChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public addCameraCenterChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
						public unregisterAnimators(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>, param1: boolean): void;
						public createBearingAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: boolean, param2: any): globalAndroid.animation.ValueAnimator;
						public calculateScaleBy(param0: number, param1: number): number;
						public removeCameraAnimationsLifecycleListener(param0: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
						public removeCameraBearingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public setAnchor(param0: com.mapbox.maps.ScreenCoordinate): void;
						public createCenterAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, param1: boolean, param2: any): globalAndroid.animation.ValueAnimator;
						public createZoomAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: any): globalAndroid.animation.ValueAnimator;
						public createPitchAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: any): globalAndroid.animation.ValueAnimator;
						public addCameraAnimationsLifecycleListener(param0: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
						public setDebugMode(param0: boolean): void;
						public flyTo(param0: com.mapbox.maps.CameraOptions, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public removeCameraPaddingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
						public cleanup(): void;
						public playAnimatorsSequentially(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public removeCameraZoomChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public cancelAllAnimators(param0: java.util.List<string>): void;
						public removeCameraAnchorChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
						public addCameraBearingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public getAnchor(): com.mapbox.maps.ScreenCoordinate;
						public removeCameraPitchChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public pitchBy(param0: number, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						/** @deprecated */
						public createCenterAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, param1: any): globalAndroid.animation.ValueAnimator;
						public createPaddingAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.EdgeInsets>, param1: any): globalAndroid.animation.ValueAnimator;
						public getDebugMode(): boolean;
						public easeTo(param0: com.mapbox.maps.CameraOptions, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public scaleBy(param0: number, param1: com.mapbox.maps.ScreenCoordinate, param2: com.mapbox.maps.plugin.animation.MapAnimationOptions, param3: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public addCameraPitchChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public playAnimatorsTogether(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public removeCameraCenterChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
						public createAnchorAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.ScreenCoordinate>, param1: any): globalAndroid.animation.ValueAnimator;
						public initialize(): void;
						public addCameraPaddingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
						public moveBy(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public addCameraAnchorChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
						public rotateBy(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.ScreenCoordinate, param2: com.mapbox.maps.plugin.animation.MapAnimationOptions, param3: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
					}
					export namespace CameraAnimationsPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimationsPlugin.DefaultImpls>;
							public static initialize(this_: com.mapbox.maps.plugin.animation.CameraAnimationsPlugin): void;
							/** @deprecated */
							public static createCenterAnimator(this_: com.mapbox.maps.plugin.animation.CameraAnimationsPlugin, options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, block: any): globalAndroid.animation.ValueAnimator;
							public static cleanup(this_: com.mapbox.maps.plugin.animation.CameraAnimationsPlugin): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.animation.CameraAnimationsPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimationsPluginImpl extends java.lang.Object implements com.mapbox.maps.plugin.animation.CameraAnimationsPlugin, com.mapbox.maps.plugin.MapCameraPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimationsPluginImpl>;
						public cameraAnimationsFactory: com.mapbox.maps.plugin.animation.CameraAnimatorsFactory;
						public static TAG: string; // "Mbgl-CameraManager"
						public createPaddingAnimator(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.EdgeInsets>, block: any): globalAndroid.animation.ValueAnimator;
						public registerAnimators(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public addCameraZoomChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public addCameraCenterChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
						public createBearingAnimator(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, useSho_f5d: boolean, block: any): globalAndroid.animation.ValueAnimator;
						public unregisterAnimators(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>, param1: boolean): void;
						public unregisterAllAnimators(): void;
						public createZoomAnimator(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, block: any): globalAndroid.animation.ValueAnimator;
						public createBearingAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: boolean, param2: any): globalAndroid.animation.ValueAnimator;
						public calculateScaleBy(param0: number, param1: number): number;
						public setAnchor(param0: com.mapbox.maps.ScreenCoordinate): void;
						public removeCameraCenterChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
						public flyTo(camera_b60: com.mapbox.maps.CameraOptions, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public createZoomAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: any): globalAndroid.animation.ValueAnimator;
						public removeCameraBearingChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public addCameraAnimationsLifecycleListener(param0: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
						public setDebugMode(param0: boolean): void;
						public flyTo(param0: com.mapbox.maps.CameraOptions, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public cleanup(): void;
						public playAnimatorsSequentially(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public cancelAllAnimators(param0: java.util.List<string>): void;
						public calculateScaleBy(amount: number, curren_aa1: number): number;
						public constructor();
						public createAnchorAnimator(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.ScreenCoordinate>, block: any): globalAndroid.animation.ValueAnimator;
						public scaleBy(amount: number, screen_b07: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public addCameraAnimationsLifecycleListener(listener: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
						public pitchBy(param0: number, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public createPaddingAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.EdgeInsets>, param1: any): globalAndroid.animation.ValueAnimator;
						public moveBy(screen_b07: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public getDebugMode(): boolean;
						public easeTo(param0: com.mapbox.maps.CameraOptions, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public scaleBy(param0: number, param1: com.mapbox.maps.ScreenCoordinate, param2: com.mapbox.maps.plugin.animation.MapAnimationOptions, param3: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public addCameraPitchChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public playAnimatorsTogether(param0: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public removeCameraCenterChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
						public removeCameraZoomChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public removeCameraAnchorChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
						public getAnimators$plugin_animation_release(): java.util.HashSet<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public initialize(): void;
						public addCameraPaddingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
						public rotateBy(first: com.mapbox.maps.ScreenCoordinate, second: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public rotateBy(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.ScreenCoordinate, param2: com.mapbox.maps.plugin.animation.MapAnimationOptions, param3: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public setCameraAnimationsFactory(camera_1f5: com.mapbox.maps.plugin.animation.CameraAnimatorsFactory): void;
						public addCameraBearingChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public addCameraCenterChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.geojson.Point>): void;
						public removeCameraAnimationsLifecycleListener(listener: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public registerAnimators(camera_b84: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public removeCameraAnimationsLifecycleListener(param0: com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener): void;
						public removeCameraBearingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public createCenterAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, param1: boolean, param2: any): globalAndroid.animation.ValueAnimator;
						public onCameraMove(center: com.mapbox.geojson.Point, zoom: number, pitch: number, bearing: number, padding: com.mapbox.maps.EdgeInsets): void;
						public addCameraPaddingChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
						public createPitchAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, param1: any): globalAndroid.animation.ValueAnimator;
						/** @deprecated */
						public createCenterAnimator(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, block: any): globalAndroid.animation.ValueAnimator;
						public removeCameraPaddingChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
						public removeCameraPitchChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public removeCameraPaddingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<com.mapbox.maps.EdgeInsets>): void;
						public removeCameraZoomChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public removeCameraAnchorChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
						public setDebugMode(debugMode: boolean): void;
						public addCameraPitchChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public addCameraBearingChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public getAnchor(): com.mapbox.maps.ScreenCoordinate;
						public pitchBy(pitch: number, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public playAnimatorsSequentially(i_f_to_5c8: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public removeCameraPitchChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public performMapJump$plugin_animation_release(this_: com.mapbox.maps.CameraOptions): void;
						public addCameraZoomChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<java.lang.Double>): void;
						public createCenterAnimator(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, useSho_f5d: boolean, block: any): globalAndroid.animation.ValueAnimator;
						/** @deprecated */
						public createCenterAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, param1: any): globalAndroid.animation.ValueAnimator;
						public getCameraAnimationsFactory(): com.mapbox.maps.plugin.animation.CameraAnimatorsFactory;
						public cancelAllAnimators(it: java.util.List<string>): void;
						public easeTo(camera_b60: com.mapbox.maps.CameraOptions, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public addCameraAnchorChangeListener(listener: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
						public playAnimatorsTogether(i_f_to_5c8: androidNative.Array<globalAndroid.animation.ValueAnimator>): void;
						public setAnchor(anchor: com.mapbox.maps.ScreenCoordinate): void;
						public unregisterAnimators(camera_b84: androidNative.Array<globalAndroid.animation.ValueAnimator>, cancel_1b7: boolean): void;
						public createAnchorAnimator(param0: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.ScreenCoordinate>, param1: any): globalAndroid.animation.ValueAnimator;
						public onCameraMove(param0: com.mapbox.geojson.Point, param1: number, param2: number, param3: number, param4: com.mapbox.maps.EdgeInsets): void;
						public moveBy(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.plugin.animation.MapAnimationOptions, param2: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public addCameraAnchorChangeListener(param0: com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<com.mapbox.maps.ScreenCoordinate>): void;
						public createPitchAnimator(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, block: any): globalAndroid.animation.ValueAnimator;
					}
					export namespace CameraAnimationsPluginImpl {
						export class AnimationFinishStatus {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimationsPluginImpl.AnimationFinishStatus>;
							public static CANCELED: com.mapbox.maps.plugin.animation.CameraAnimationsPluginImpl.AnimationFinishStatus;
							public static ENDED: com.mapbox.maps.plugin.animation.CameraAnimationsPluginImpl.AnimationFinishStatus;
							public static values(): androidNative.Array<com.mapbox.maps.plugin.animation.CameraAnimationsPluginImpl.AnimationFinishStatus>;
							public static valueOf(value: string): com.mapbox.maps.plugin.animation.CameraAnimationsPluginImpl.AnimationFinishStatus;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
						export namespace CameraAnimationsPluginImpl {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimationsUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimationsUtils>;
						public static pitchBy(this_p_3a8: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, pitch: number, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public static flyTo(this_flyTo: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, camera_b60: com.mapbox.maps.CameraOptions, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public static rotateBy(this_r_64b: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, first: com.mapbox.maps.ScreenCoordinate, second: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions): com.mapbox.common.Cancelable;
						public static easeTo(this_e_a02: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, camera_b60: com.mapbox.maps.CameraOptions): com.mapbox.common.Cancelable;
						public static easeTo(this_e_a02: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, camera_b60: com.mapbox.maps.CameraOptions, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions): com.mapbox.common.Cancelable;
						public static moveBy(this_m_489: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, screen_b07: com.mapbox.maps.ScreenCoordinate): com.mapbox.common.Cancelable;
						public static rotateBy(this_r_64b: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, first: com.mapbox.maps.ScreenCoordinate, second: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public static updateCameraValue(camera_89f: com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>, animat_515: any, camera_ab7: com.mapbox.maps.CameraOptions.Builder): void;
						public static easeTo(this_e_a02: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, camera_b60: com.mapbox.maps.CameraOptions, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public static pitchBy(this_p_3a8: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, pitch: number): com.mapbox.common.Cancelable;
						public static scaleBy(this_s_818: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, amount: number, screen_b07: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions): com.mapbox.common.Cancelable;
						public static moveBy(this_m_489: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, screen_b07: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public static getCamera(this_c_536: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.animation.CameraAnimationsPlugin;
						public static flyTo(this_flyTo: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, camera_b60: com.mapbox.maps.CameraOptions, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions): com.mapbox.common.Cancelable;
						public static moveBy(this_m_489: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, screen_b07: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions): com.mapbox.common.Cancelable;
						public static scaleBy(this_s_818: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, amount: number, screen_b07: com.mapbox.maps.ScreenCoordinate, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions, animat_f04: globalAndroid.animation.Animator.AnimatorListener): com.mapbox.common.Cancelable;
						public static scaleBy(this_s_818: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, amount: number, screen_b07: com.mapbox.maps.ScreenCoordinate): com.mapbox.common.Cancelable;
						public static rotateBy(this_r_64b: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, first: com.mapbox.maps.ScreenCoordinate, second: com.mapbox.maps.ScreenCoordinate): com.mapbox.common.Cancelable;
						public static flyTo(this_flyTo: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, camera_b60: com.mapbox.maps.CameraOptions): com.mapbox.common.Cancelable;
						public static pitchBy(this_p_3a8: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, pitch: number, animat_34d: com.mapbox.maps.plugin.animation.MapAnimationOptions): com.mapbox.common.Cancelable;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimatorChangeListener<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener<any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onChanged(param0: T): void;
						});
						public constructor();
						public onChanged(param0: T): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimatorNullableChangeListener<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener<any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onChanged(param0: T): void;
						});
						public constructor();
						public onChanged(param0: T): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimatorOptions<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>>;
						public getStartValue(): T;
						public equals(this_: any): boolean;
						public getOwner(): string;
						public getTargets(): androidNative.Array<T>;
						public hashCode(): number;
					}
					export namespace CameraAnimatorOptions {
						export class Builder<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimatorOptions.Builder<any>>;
							public owner(this_o_f36: string): com.mapbox.maps.plugin.animation.CameraAnimatorOptions.Builder<T>;
							public startValue(this_s_8a9: T): com.mapbox.maps.plugin.animation.CameraAnimatorOptions.Builder<T>;
							public build(): com.mapbox.maps.plugin.animation.CameraAnimatorOptions<T>;
							public constructor(targets: androidNative.Array<T>);
							public getTargets(): androidNative.Array<T>;
						}
						export namespace CameraAnimatorOptions {
							export namespace Companion {
								function cameraAnimatorOptions(this_: androidNative.Array<any>, targets: any): com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>;
								function cameraAnimatorOptions(this_: androidNative.Array<any>, targets: any): com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimatorType {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimatorType>;
						public static CENTER: com.mapbox.maps.plugin.animation.CameraAnimatorType;
						public static ZOOM: com.mapbox.maps.plugin.animation.CameraAnimatorType;
						public static BEARING: com.mapbox.maps.plugin.animation.CameraAnimatorType;
						public static PITCH: com.mapbox.maps.plugin.animation.CameraAnimatorType;
						public static ANCHOR: com.mapbox.maps.plugin.animation.CameraAnimatorType;
						public static PADDING: com.mapbox.maps.plugin.animation.CameraAnimatorType;
						public static values(): androidNative.Array<com.mapbox.maps.plugin.animation.CameraAnimatorType>;
						public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(value: string): com.mapbox.maps.plugin.animation.CameraAnimatorType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraAnimatorsFactory extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraAnimatorsFactory>;
						public static DEFAULT_ANIMATION_DURATION_MS: number; // 300
						public static CUBIC_BEZIER_INTERPOLATOR: globalAndroid.view.animation.Interpolator;
						public constructor(mapDel_dcb: com.mapbox.maps.plugin.delegates.MapDelegateProvider);
						public getRotateBy(first: com.mapbox.maps.ScreenCoordinate, second: com.mapbox.maps.ScreenCoordinate): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getEaseTo(this_g_2fd: com.mapbox.maps.CameraOptions, i_f_ca_e08: string): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getFlyTo(camera_b60: com.mapbox.maps.CameraOptions): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getPitchBy(this_g_8a4: number, i_f_ca_e08: string): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getPitchBy(pitch: number): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public static setDefaultAnimatorOptions(block: any): void;
						public getRotateBy(rotate_aa8: com.mapbox.maps.ScreenCoordinate, i_a_ca_1af: com.mapbox.maps.ScreenCoordinate, this_g_149: string): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public static setDefaultAnimatorOptions(type: com.mapbox.maps.plugin.animation.CameraAnimatorType, block: any): void;
						public getScaleBy(this_g_c98: number, i_f_ca_e08: com.mapbox.maps.ScreenCoordinate, this_iv: string): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getMoveBy(this_g_750: com.mapbox.maps.ScreenCoordinate, i_f_ca_e08: string): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getMoveBy(offset: com.mapbox.maps.ScreenCoordinate): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getFlyTo(this_g_efc: com.mapbox.maps.CameraOptions, i_f_ca_e08: string): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getScaleBy(amount: number, anchor: com.mapbox.maps.ScreenCoordinate): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getScaleBy(amount: number): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
						public getEaseTo(camera_b60: com.mapbox.maps.CameraOptions): androidNative.Array<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
					}
					export namespace CameraAnimatorsFactory {
						export namespace CameraAnimatorsFactory {
							export namespace Companion {
								function setDefaultAnimatorOptions(type: com.mapbox.maps.plugin.animation.CameraAnimatorType, block: any): void;
								function setDefaultAnimatorOptions(block: any): void;
								function setDefaultAnimatorOptions(type: com.mapbox.maps.plugin.animation.CameraAnimatorType, block: any): void;
								function setDefaultAnimatorOptions(block: any): void;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class CameraTransform extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.CameraTransform>;
						public static INSTANCE: com.mapbox.maps.plugin.animation.CameraTransform;
						public angleBetween(p1: com.mapbox.maps.ScreenCoordinate, p2: com.mapbox.maps.ScreenCoordinate): number;
						public calculateScaleBy(amount: number, curren_aa1: number): number;
						public scaleZoom(this_s_29e: number): number;
						public wrap$plugin_animation_release(wrapped: number, this_: number, value: number): number;
						public unwrapForShortestPath(lon: com.mapbox.geojson.Point, this_: com.mapbox.geojson.Point): com.mapbox.geojson.Point;
						public wrapCoordinate(this_: com.mapbox.geojson.Point): com.mapbox.geojson.Point;
						public rad2deg(this_r_3fa: number): number;
						public zoomScale(this_z_860: number): number;
						public calculateLatLngMoveBy(mapCenter: com.mapbox.maps.ScreenCoordinate, pointO_160: com.mapbox.maps.CameraState, pointO_2f3: com.mapbox.maps.plugin.delegates.MapTransformDelegate, pointO_578: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate): com.mapbox.geojson.Point;
						public offset(this_o_8f2: com.mapbox.maps.MercatorCoordinate, arg: com.mapbox.maps.MercatorCoordinate): com.mapbox.maps.ScreenCoordinate;
						public offset(this_o_8f2: com.mapbox.maps.ScreenCoordinate, arg: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.ScreenCoordinate;
						public deg2rad(this_d_0e2: number): number;
						public getMapCenter(centerY: com.mapbox.maps.EdgeInsets, this_: com.mapbox.maps.Size): com.mapbox.maps.ScreenCoordinate;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class HighLevelAnimatorSet extends java.lang.Object implements com.mapbox.common.Cancelable {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.HighLevelAnimatorSet>;
						public copy(owner: string, animat_afc: globalAndroid.animation.AnimatorSet): com.mapbox.maps.plugin.animation.HighLevelAnimatorSet;
						public equals(other: any): boolean;
						public constructor(owner: string, animat_afc: globalAndroid.animation.AnimatorSet);
						public component2(): globalAndroid.animation.AnimatorSet;
						public getOwner(): string;
						public cancel(): void;
						public component1(): string;
						public hashCode(): number;
						public toString(): string;
						public getAnimatorSet(): globalAndroid.animation.AnimatorSet;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class MapAnimationOptions extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.MapAnimationOptions>;
						public getInterpolator(): globalAndroid.animation.TimeInterpolator;
						public equals(other: any): boolean;
						public getOwner(): string;
						public getDuration(): java.lang.Long;
						public getStartDelay(): java.lang.Long;
						public hashCode(): number;
					}
					export namespace MapAnimationOptions {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.MapAnimationOptions.Builder>;
							public constructor();
							public startDelay(this_s_739: number): com.mapbox.maps.plugin.animation.MapAnimationOptions.Builder;
							public duration(this_d_15d: number): com.mapbox.maps.plugin.animation.MapAnimationOptions.Builder;
							public owner(this_o_0c9: string): com.mapbox.maps.plugin.animation.MapAnimationOptions.Builder;
							public interpolator(this_i_bd0: globalAndroid.animation.TimeInterpolator): com.mapbox.maps.plugin.animation.MapAnimationOptions.Builder;
							public build(): com.mapbox.maps.plugin.animation.MapAnimationOptions;
						}
						export namespace MapAnimationOptions {
							export namespace Companion {
								function mapAnimationOptions(this_: any): com.mapbox.maps.plugin.animation.MapAnimationOptions;
								function mapAnimationOptions(this_: any): com.mapbox.maps.plugin.animation.MapAnimationOptions;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export class MapAnimationOwnerRegistry extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.animation.MapAnimationOwnerRegistry>;
						public static INSTANCE: com.mapbox.maps.plugin.animation.MapAnimationOwnerRegistry;
						public static INTERNAL: string; // "Maps-CameraInternal"
						public static GESTURES: string; // "Maps-Gestures"
						public static COMPASS: string; // "Maps-Compass"
						public static LOCATION: string; // "Maps-Location"
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class CameraAnchorAnimator extends com.mapbox.maps.plugin.animation.animator.CameraAnimator<com.mapbox.maps.ScreenCoordinate> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraAnchorAnimator>;
							public constructor();
							public constructor(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.ScreenCoordinate>, block: any);
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<any>, camera_55b: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>);
							public getType(): com.mapbox.maps.plugin.animation.CameraAnimatorType;
						}
						export namespace CameraAnchorAnimator {
							export namespace CameraAnchorAnimator {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export abstract class CameraAnimator<T>  extends globalAndroid.animation.ValueAnimator {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraAnimator<any>>;
							public getTargets(): androidNative.Array<any>;
							public setOwner$plugin_animation_release(owner__33c: string): void;
							public getOwner(): string;
							public setSkipped$plugin_animation_release(skippe_b11: boolean): void;
							public addUpdateListener(listener: globalAndroid.animation.ValueAnimator.AnimatorUpdateListener): void;
							public removeListener(listener: globalAndroid.animation.Animator.AnimatorListener): void;
							public getAnimatedValue(): any;
							public getTargetValues$plugin_animation_release(): androidNative.Array<any>;
							public setEvaluator(value: globalAndroid.animation.TypeEvaluator<any>): void;
							public getStartValue(): any;
							public removeInternalListener$plugin_animation_release(): void;
							public start(): void;
							public getSkipped$plugin_animation_release(): boolean;
							public getCanceled$plugin_animation_release(): boolean;
							public setObjectValues(values: androidNative.Array<any>): void;
							public removeUpdateListener(listener: globalAndroid.animation.ValueAnimator.AnimatorUpdateListener): void;
							public constructor();
							public getAnimatedValueAt$plugin_animation_release(i_a_de_923: number, i_a_de_9_1: com.mapbox.maps.CameraState): any;
							public cancel(): void;
							public removeAllListeners(): void;
							public getHasUserListeners$plugin_animation_release(): boolean;
							public addInternalListener$plugin_animation_release(it: globalAndroid.animation.Animator.AnimatorListener): void;
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<any>, camera_55b: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>);
							public addInternalUpdateListener$plugin_animation_release(it: globalAndroid.animation.ValueAnimator.AnimatorUpdateListener): void;
							public isInternal$plugin_animation_release(): boolean;
							public resolveAnimationObjectValues(startValue: any): androidNative.Array<any>;
							public removeAllUpdateListeners(): void;
							public addListener(listener: globalAndroid.animation.Animator.AnimatorListener): void;
							public setCanceled$plugin_animation_release(cancel_c3a: boolean): void;
							public getType(): com.mapbox.maps.plugin.animation.CameraAnimatorType;
							public setInternal$plugin_animation_release(intern_3d0: boolean): void;
							public removeInternalUpdateListener$plugin_animation_release(): void;
							public updateObjectValues(this_d_697: any): void;
							public getAnimatedValue(proper_98b: string): any;
						}
						export namespace CameraAnimator {
							export namespace CameraAnimator {
								export namespace Companion {
								}
							}
							export class WhenMappings extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraAnimator.WhenMappings>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class CameraBearingAnimator extends com.mapbox.maps.plugin.animation.animator.CameraAnimator<java.lang.Double> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraBearingAnimator>;
							public constructor();
							public constructor(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, useSho_f5d: boolean, block: any);
							public resolveAnimationObjectValues(startValue: any): androidNative.Array<any>;
							public getUseShortestPath(): boolean;
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<any>, camera_55b: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>);
							public getType(): com.mapbox.maps.plugin.animation.CameraAnimatorType;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class CameraCenterAnimator extends com.mapbox.maps.plugin.animation.animator.CameraAnimator<com.mapbox.geojson.Point> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraCenterAnimator>;
							public constructor();
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<com.mapbox.geojson.Point>, options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.geojson.Point>, useSho_f5d: boolean, block: any);
							public getUseShortestPath(): boolean;
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<any>, camera_55b: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>);
							public getType(): com.mapbox.maps.plugin.animation.CameraAnimatorType;
							public resolveAnimationObjectValues(it: any): androidNative.Array<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class CameraPaddingAnimator extends com.mapbox.maps.plugin.animation.animator.CameraAnimator<com.mapbox.maps.EdgeInsets> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraPaddingAnimator>;
							public constructor();
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<any>, camera_55b: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>);
							public constructor(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<com.mapbox.maps.EdgeInsets>, block: any);
							public getType(): com.mapbox.maps.plugin.animation.CameraAnimatorType;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class CameraPitchAnimator extends com.mapbox.maps.plugin.animation.animator.CameraAnimator<java.lang.Double> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraPitchAnimator>;
							public constructor();
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<any>, camera_55b: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>);
							public getType(): com.mapbox.maps.plugin.animation.CameraAnimatorType;
							public constructor(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, block: any);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class CameraTypeEvaluator<T>  extends globalAndroid.animation.TypeEvaluator<any> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraTypeEvaluator<any>>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.animation.animator.CameraTypeEvaluator<any> interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								canSkip(param0: any, param1: any, param2: androidNative.Array<any>): boolean;
							});
							public constructor();
							public canSkip(param0: any, param1: any, param2: androidNative.Array<any>): boolean;
						}
						export namespace CameraTypeEvaluator {
							export class DefaultImpls extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraTypeEvaluator.DefaultImpls>;
								public static canSkip(i_a_al_366: com.mapbox.maps.plugin.animation.animator.CameraTypeEvaluator<any>, it: any, element_iv: any, i_f_all: androidNative.Array<any>): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class CameraZoomAnimator extends com.mapbox.maps.plugin.animation.animator.CameraAnimator<java.lang.Double> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.CameraZoomAnimator>;
							public constructor();
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<java.lang.Double>, options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, block: any);
							public constructor(evaluator: globalAndroid.animation.TypeEvaluator<any>, camera_55b: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<any>);
							public getType(): com.mapbox.maps.plugin.animation.CameraAnimatorType;
							public constructor(options: com.mapbox.maps.plugin.animation.CameraAnimatorOptions<java.lang.Double>, block: any);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace animation {
					export namespace animator {
						export class Evaluators extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.animation.animator.Evaluators>;
							public static INSTANCE: com.mapbox.maps.plugin.animation.animator.Evaluators;
							public getDOUBLE(): globalAndroid.animation.TypeEvaluator<java.lang.Double>;
							public getPOINT(): globalAndroid.animation.TypeEvaluator<com.mapbox.geojson.Point>;
							public getEDGE_INSET(): globalAndroid.animation.TypeEvaluator<com.mapbox.maps.EdgeInsets>;
							public getSCREEN_COORDINATE(): globalAndroid.animation.TypeEvaluator<com.mapbox.maps.ScreenCoordinate>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export abstract class Annotation<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.Annotation<any>>;
						public static ID_DATA: string; // "custom_data"
						public static MAX_MERCATOR_LATITUDE: number; // 85.05112877980659
						public static MIN_MERCATOR_LATITUDE: number; // -85.05112877980659
						public getGeometry(): T;
						public setSelected(selected: boolean): void;
						public getType(): com.mapbox.maps.plugin.annotation.AnnotationType;
						public isSelected(): boolean;
						public setData(jsonEl_fb5: com.google.gson.JsonElement): void;
						public getOffsetGeometry(param0: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, param1: com.mapbox.android.gestures.MoveDistancesObject): T;
						public constructor(id: string, jsonObject: com.google.gson.JsonObject, geometry: T);
						public setUsedDataDrivenProperties(): void;
						public getJsonObjectCopy(): com.google.gson.JsonObject;
						public getId(): string;
						public getJsonObject(): com.google.gson.JsonObject;
						public setGeometry(geometry: T): void;
						public getData(): com.google.gson.JsonElement;
						public isDraggable(): boolean;
						public setDraggable(draggable: boolean): void;
					}
					export namespace Annotation {
						export namespace Annotation {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationConfig>;
						public component3(): string;
						public equals(other: any): boolean;
						public constructor();
						public copy(belowL_a92: string, layerId: string, sourceId: string, annota_30d: com.mapbox.maps.plugin.annotation.AnnotationSourceOptions): com.mapbox.maps.plugin.annotation.AnnotationConfig;
						public component1(): string;
						public hashCode(): number;
						public constructor(belowL_a92: string, layerId: string, sourceId: string, annota_30d: com.mapbox.maps.plugin.annotation.AnnotationSourceOptions);
						public getAnnotationSourceOptions(): com.mapbox.maps.plugin.annotation.AnnotationSourceOptions;
						public getLayerId(): string;
						public getBelowLayerId(): string;
						public getSourceId(): string;
						public toString(): string;
						public constructor(belowL_a92: string, layerId: string);
						public constructor(belowL_a92: string);
						public component2(): string;
						public constructor(belowL_a92: string, layerId: string, sourceId: string);
						public component4(): com.mapbox.maps.plugin.annotation.AnnotationSourceOptions;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationManager<G, T, S, D, U, V, I>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							create(param0: S): T;
							create(param0: java.util.List<any>): java.util.List<T>;
							update(param0: T): void;
							update(param0: java.util.List<any>): void;
							delete(param0: T): void;
							delete(param0: java.util.List<any>): void;
							deleteAll(): void;
							onDestroy(): void;
							selectAnnotation(param0: T): void;
							onSizeChanged(param0: number, param1: number): void;
							getDelegateProvider(): com.mapbox.maps.plugin.delegates.MapDelegateProvider;
							getAnnotations(): java.util.List<T>;
							getDragListeners(): java.util.List<D>;
							getClickListeners(): java.util.List<U>;
							getLongClickListeners(): java.util.List<V>;
							getInteractionListener(): java.util.List<I>;
							addDragListener(param0: D): boolean;
							removeDragListener(param0: D): boolean;
							addClickListener(param0: U): boolean;
							removeClickListener(param0: U): boolean;
							addLongClickListener(param0: V): boolean;
							removeLongClickListener(param0: V): boolean;
							addInteractionListener(param0: I): boolean;
							removeInteractionListener(param0: I): boolean;
							enableDataDrivenProperty(param0: string): void;
						});
						public constructor();
						public update(param0: T): void;
						public addInteractionListener(param0: I): boolean;
						public removeLongClickListener(param0: V): boolean;
						public removeClickListener(param0: U): boolean;
						public getLongClickListeners(): java.util.List<V>;
						public enableDataDrivenProperty(param0: string): void;
						public delete(param0: T): void;
						public addLongClickListener(param0: V): boolean;
						public onDestroy(): void;
						public removeInteractionListener(param0: I): boolean;
						public create(param0: java.util.List<any>): java.util.List<T>;
						public getDelegateProvider(): com.mapbox.maps.plugin.delegates.MapDelegateProvider;
						public getClickListeners(): java.util.List<U>;
						public update(param0: java.util.List<any>): void;
						public create(param0: S): T;
						public getInteractionListener(): java.util.List<I>;
						public delete(param0: java.util.List<any>): void;
						public getAnnotations(): java.util.List<T>;
						public addDragListener(param0: D): boolean;
						public addClickListener(param0: U): boolean;
						public getDragListeners(): java.util.List<D>;
						public removeDragListener(param0: D): boolean;
						public onSizeChanged(param0: number, param1: number): void;
						public deleteAll(): void;
						public selectAnnotation(param0: T): void;
					}
					export namespace AnnotationManager {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationManager.DefaultImpls>;
							public static removeInteractionListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, i: com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<any>): boolean;
							public static addClickListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, u: com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<any>): boolean;
							public static addDragListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, d: com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<any>): boolean;
							public static addLongClickListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, v: com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<any>): boolean;
							public static removeLongClickListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, v: com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<any>): boolean;
							public static removeDragListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, d: com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<any>): boolean;
							public static addInteractionListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, i: com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<any>): boolean;
							public static removeClickListener(this_: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>, u: com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export abstract class AnnotationManagerImpl<G, T, S, D, U, V, I, L>  extends com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any> {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<any,any,any,any,any,any,any,any>>;
						public setLayerFilter(param0: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
						public getInteractionListener(): java.util.List<any>;
						public create(param0: java.util.List<any>): java.util.List<any>;
						public enableDataDrivenProperty(param0: string): void;
						public getDataDrivenPropertyDefaultValues$plugin_annotation_release(): com.google.gson.JsonObject;
						public removeLongClickListener(param0: any): boolean;
						public delete(it: java.util.List<any>): void;
						public removeInteractionListener(param0: any): boolean;
						public constructor(belowL_a92: com.mapbox.maps.plugin.delegates.MapDelegateProvider, layerAdded: com.mapbox.maps.plugin.annotation.AnnotationConfig, annota_30d: number, styleM_755: string, layerId: any);
						public getLayer$plugin_annotation_release(): any;
						public getClickListeners(): java.util.List<any>;
						public onDestroy(): void;
						public getSource$plugin_annotation_release(): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
						public create(it: java.util.List<any>): java.util.List<any>;
						public addInteractionListener(i: any): boolean;
						public removeDragListener(d: any): boolean;
						public setDataDrivenPropertyIsUsed(param0: string): void;
						public addLongClickListener(v: any): boolean;
						public getDelegateProvider(): com.mapbox.maps.plugin.delegates.MapDelegateProvider;
						public addLongClickListener(param0: any): boolean;
						public removeInteractionListener(i: any): boolean;
						public update(param0: java.util.List<any>): void;
						public create(param0: any): any;
						public getAssociatedLayers(): java.util.List<string>;
						public addDragListener(d: any): boolean;
						public getAnnotationIdKey(): string;
						public removeClickListener(param0: any): boolean;
						public removeClickListener(u: any): boolean;
						public queryMapForFeatures(this_: com.mapbox.geojson.Point): any;
						public getDragLayer$plugin_annotation_release(): any;
						public setLayerProperty(this_s_ca7: com.mapbox.bindgen.Value, e: string): void;
						public queryMapForFeatures(layerList: com.mapbox.maps.ScreenCoordinate): any;
						public addClickListener(u: any): boolean;
						public delete(annotation: any): void;
						public update(annotation: any): void;
						public getDragListeners(): java.util.List<any>;
						public getDataDrivenPropertyUsageMap(): java.util.Map<string,java.lang.Boolean>;
						public update(param0: any): void;
						public selectAnnotation(it: any): void;
						public delete(param0: any): void;
						public update(it: java.util.List<any>): void;
						public removeLongClickListener(v: any): boolean;
						public getLongClickListeners(): java.util.List<any>;
						public onSizeChanged(width: number, height: number): void;
						public addStyleImage$plugin_annotation_release(imageId: string, bitmap: globalAndroid.graphics.Bitmap): void;
						public selectAnnotation(param0: any): void;
						public getDragSource$plugin_annotation_release(): com.mapbox.maps.extension.style.sources.generated.GeoJsonSource;
						public create(it: any): any;
						public delete(param0: java.util.List<any>): void;
						public addClickListener(param0: any): boolean;
						public addInteractionListener(param0: any): boolean;
						public getAnnotations(): java.util.List<any>;
						public addDragListener(param0: any): boolean;
						public removeDragListener(param0: any): boolean;
						public onSizeChanged(param0: number, param1: number): void;
						public deleteAll(): void;
						public enableDataDrivenProperty(property: string): void;
						public getLayerFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
					}
					export namespace AnnotationManagerImpl {
						export namespace AnnotationManagerImpl {
							export namespace Companion {
							}
						}
						export class MapClick extends java.lang.Object implements com.mapbox.maps.plugin.gestures.OnMapClickListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationManagerImpl.MapClick>;
							public constructor(this_0: com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<any,any,any,any,any,any,any,any>);
							public onMapClick(param0: com.mapbox.geojson.Point): boolean;
							public onMapClick(point: com.mapbox.geojson.Point): boolean;
						}
						export class MapLongClick extends java.lang.Object implements com.mapbox.maps.plugin.gestures.OnMapLongClickListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationManagerImpl.MapLongClick>;
							public constructor(this_0: com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<any,any,any,any,any,any,any,any>);
							public onMapLongClick(param0: com.mapbox.geojson.Point): boolean;
							public onMapLongClick(point: com.mapbox.geojson.Point): boolean;
						}
						export class MapMove extends java.lang.Object implements com.mapbox.maps.plugin.gestures.OnMoveListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationManagerImpl.MapMove>;
							public constructor(this_0: com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<any,any,any,any,any,any,any,any>);
							public onMoveBegin(param0: com.mapbox.android.gestures.MoveGestureDetector): void;
							public onMoveBegin(detector: com.mapbox.android.gestures.MoveGestureDetector): void;
							public onMoveEnd(detector: com.mapbox.android.gestures.MoveGestureDetector): void;
							public onMove(detector: com.mapbox.android.gestures.MoveGestureDetector): boolean;
							public onMove(param0: com.mapbox.android.gestures.MoveGestureDetector): boolean;
							public onMoveEnd(param0: com.mapbox.android.gestures.MoveGestureDetector): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationOptions<G, T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationOptions<any,any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.AnnotationOptions<any,any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							build(param0: string, param1: com.mapbox.maps.plugin.annotation.AnnotationManager<G,T,any,any,any,any,any>): T;
						});
						public constructor();
						public build(param0: string, param1: com.mapbox.maps.plugin.annotation.AnnotationManager<G,T,any,any,any,any,any>): T;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin, com.mapbox.maps.plugin.MapSizePlugin, com.mapbox.maps.plugin.MapStyleObserverPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.AnnotationPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							createAnnotationManager(param0: com.mapbox.maps.plugin.annotation.AnnotationType, param1: com.mapbox.maps.plugin.annotation.AnnotationConfig): com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>;
							removeAnnotationManager(param0: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							onSizeChanged(param0: number, param1: number): void;
							onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
						});
						public constructor();
						public removeAnnotationManager(param0: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): void;
						public initialize(): void;
						public onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
						public createAnnotationManager(param0: com.mapbox.maps.plugin.annotation.AnnotationType, param1: com.mapbox.maps.plugin.annotation.AnnotationConfig): com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>;
						public cleanup(): void;
						public onSizeChanged(param0: number, param1: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
					export namespace AnnotationPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationPlugin.DefaultImpls>;
							public static initialize(this_: com.mapbox.maps.plugin.annotation.AnnotationPlugin): void;
							public static cleanup(this_: com.mapbox.maps.plugin.annotation.AnnotationPlugin): void;
							public static onSizeChanged(this_: com.mapbox.maps.plugin.annotation.AnnotationPlugin, width: number, height: number): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.annotation.AnnotationPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationPluginImpl extends java.lang.Object implements com.mapbox.maps.plugin.annotation.AnnotationPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationPluginImpl>;
						public constructor();
						public removeAnnotationManager(param0: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): void;
						public createAnnotationManager(this_: com.mapbox.maps.plugin.annotation.AnnotationType, type: com.mapbox.maps.plugin.annotation.AnnotationConfig): com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>;
						public createAnnotationManager(param0: com.mapbox.maps.plugin.annotation.AnnotationType, param1: com.mapbox.maps.plugin.annotation.AnnotationConfig): com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>;
						public removeAnnotationManager(it: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public onSizeChanged(it: number, element_iv: number): void;
						public getManagerList$plugin_annotation_release(): java.util.List<java.lang.ref.WeakReference<com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>>>;
						public onStyleChanged(style: com.mapbox.maps.MapboxStyleManager): void;
						public initialize(): void;
						public onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
						public cleanup(): void;
						public onSizeChanged(param0: number, param1: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
					export namespace AnnotationPluginImpl {
						export class WhenMappings extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationPluginImpl.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationSourceOptions extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationSourceOptions>;
						public constructor(maxZoom: java.lang.Long);
						public component5(): com.mapbox.maps.plugin.annotation.ClusterOptions;
						public getBuffer(): java.lang.Long;
						public equals(other: any): boolean;
						public constructor();
						public getTolerance(): java.lang.Double;
						public component1(): java.lang.Long;
						public hashCode(): number;
						public getLineMetrics(): java.lang.Boolean;
						public component3(): java.lang.Boolean;
						public component4(): java.lang.Double;
						public toString(): string;
						public constructor(maxZoom: java.lang.Long, buffer: java.lang.Long, lineMe_908: java.lang.Boolean, tolerance: java.lang.Double);
						public constructor(maxZoom: java.lang.Long, buffer: java.lang.Long, lineMe_908: java.lang.Boolean);
						public copy(maxZoom: java.lang.Long, buffer: java.lang.Long, lineMe_908: java.lang.Boolean, tolerance: java.lang.Double, cluste_5fd: com.mapbox.maps.plugin.annotation.ClusterOptions): com.mapbox.maps.plugin.annotation.AnnotationSourceOptions;
						public component2(): java.lang.Long;
						public getMaxZoom(): java.lang.Long;
						public getClusterOptions(): com.mapbox.maps.plugin.annotation.ClusterOptions;
						public constructor(maxZoom: java.lang.Long, buffer: java.lang.Long);
						public constructor(maxZoom: java.lang.Long, buffer: java.lang.Long, lineMe_908: java.lang.Boolean, tolerance: java.lang.Double, cluste_5fd: com.mapbox.maps.plugin.annotation.ClusterOptions);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationType {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationType>;
						public static PolygonAnnotation: com.mapbox.maps.plugin.annotation.AnnotationType;
						public static PolylineAnnotation: com.mapbox.maps.plugin.annotation.AnnotationType;
						public static PointAnnotation: com.mapbox.maps.plugin.annotation.AnnotationType;
						public static CircleAnnotation: com.mapbox.maps.plugin.annotation.AnnotationType;
						public static valueOf(value: string): com.mapbox.maps.plugin.annotation.AnnotationType;
						public setValue(value: number): void;
						public static values(): androidNative.Array<com.mapbox.maps.plugin.annotation.AnnotationType>;
						public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public getValue(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class AnnotationsUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.AnnotationsUtils>;
						public static getAnnotations(this_a_9a9: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.annotation.AnnotationPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.annotation"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class ClusterAnnotationManager extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.ClusterAnnotationManager>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.ClusterAnnotationManager interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getClusterClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterClickListener>;
							getClusterLongClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterLongClickListener>;
							addClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							removeClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							addClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							removeClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
						});
						public constructor();
						public addClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
						public addClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
						public getClusterClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterClickListener>;
						public getClusterLongClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterLongClickListener>;
						public removeClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
						public removeClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
					}
					export namespace ClusterAnnotationManager {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.ClusterAnnotationManager.DefaultImpls>;
							public static removeClusterLongClickListener(this_: com.mapbox.maps.plugin.annotation.ClusterAnnotationManager, onClus_104: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public static removeClusterClickListener(this_: com.mapbox.maps.plugin.annotation.ClusterAnnotationManager, cluste_257: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public static addClusterClickListener(this_: com.mapbox.maps.plugin.annotation.ClusterAnnotationManager, cluste_257: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public static addClusterLongClickListener(this_: com.mapbox.maps.plugin.annotation.ClusterAnnotationManager, onClus_104: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class ClusterFeature extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.ClusterFeature>;
						public constructor(featur_9df: com.mapbox.maps.interactions.FeaturesetFeature<com.mapbox.maps.interactions.FeatureState>);
						public getPointCount(): number;
						public equals(other: any): boolean;
						public getClusterId(): string;
						public getPointCountAbbreviated(): string;
						public getOriginalFeature(): com.mapbox.geojson.Feature;
						public hashCode(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class ClusterOptions extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.ClusterOptions>;
						public getCircleRadius(): number;
						public getClusterMaxZoom(): number;
						public component5(): com.mapbox.bindgen.Value;
						public constructor(cluster: boolean, cluste_a2b: number);
						public equals(other: any): boolean;
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value);
						public constructor(cluster: boolean);
						public hashCode(): number;
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value, textSize: number);
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number);
						public component6(): number;
						public component9(): com.mapbox.bindgen.Value;
						public component2(): number;
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value);
						public copy(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value, textSize: number, textField: com.mapbox.bindgen.Value, cluste_0a6: number, cluste_38c: number, colorL_2e7: java.util.List<any>, cluste_a04: java.util.HashMap<string,any>): com.mapbox.maps.plugin.annotation.ClusterOptions;
						public component10(): number;
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value, textSize: number, textField: com.mapbox.bindgen.Value, cluste_0a6: number, cluste_38c: number, colorL_2e7: java.util.List<any>);
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value);
						public getTextField(): com.mapbox.bindgen.Value;
						public component1(): boolean;
						public component12(): java.util.List<any>;
						public getClusterRadius(): number;
						public component8(): number;
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value, textSize: number, textField: com.mapbox.bindgen.Value, cluste_0a6: number, cluste_38c: number);
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value, textSize: number, textField: com.mapbox.bindgen.Value, cluste_0a6: number, cluste_38c: number, colorL_2e7: java.util.List<any>, cluste_a04: java.util.HashMap<string,any>);
						public constructor();
						public getTextColorExpression(): com.mapbox.bindgen.Value;
						public component3(): com.mapbox.bindgen.Value;
						public component7(): com.mapbox.bindgen.Value;
						public component11(): number;
						public getClusterMinPoints(): number;
						public getTextSizeExpression(): com.mapbox.bindgen.Value;
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value, textSize: number, textField: com.mapbox.bindgen.Value, cluste_0a6: number);
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number);
						public getTextColor(): number;
						public component4(): number;
						public toString(): string;
						public getColorLevels(): java.util.List<any>;
						public getTextSize(): number;
						public getClusterProperties(): java.util.HashMap<string,any>;
						public component13(): java.util.HashMap<string,any>;
						public getCircleRadiusExpression(): com.mapbox.bindgen.Value;
						public getCluster(): boolean;
						public constructor(cluster: boolean, cluste_a2b: number, circle_4b9: com.mapbox.bindgen.Value, circle_7f7: number, textCo_1b7: com.mapbox.bindgen.Value, textColor: number, textSi_721: com.mapbox.bindgen.Value, textSize: number, textField: com.mapbox.bindgen.Value);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class ConvertUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.ConvertUtils>;
						public static INSTANCE: com.mapbox.maps.plugin.annotation.ConvertUtils;
						public toStringArray(array: com.google.gson.JsonArray): java.util.List<string>;
						public toDoubleArray(array: com.google.gson.JsonArray): java.util.List<java.lang.Double>;
						public shiftPointWithMercatorCoordinate(shifte_865: com.mapbox.geojson.Point, this_: com.mapbox.maps.MercatorCoordinate, point: number): com.mapbox.geojson.Point;
						public calculateMercatorCoordinateShift(target_18b: com.mapbox.geojson.Point, this_: com.mapbox.geojson.Point, startPoint: number): com.mapbox.maps.MercatorCoordinate;
						public convertStringArray(jsonArray: java.util.List<any>): com.google.gson.JsonArray;
						public convertDoubleArray(jsonArray: java.util.List<any>): com.google.gson.JsonArray;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class OnAnnotationClickListener<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onAnnotationClick(param0: T): boolean;
						});
						public constructor();
						public onAnnotationClick(param0: T): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class OnAnnotationDragListener<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
						});
						public constructor();
						public onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
						public onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
						public onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class OnAnnotationInteractionListener<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onSelectAnnotation(param0: T): void;
							onDeselectAnnotation(param0: T): void;
						});
						public constructor();
						public onSelectAnnotation(param0: T): void;
						public onDeselectAnnotation(param0: T): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class OnAnnotationLongClickListener<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onAnnotationLongClick(param0: T): boolean;
						});
						public constructor();
						public onAnnotationLongClick(param0: T): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class OnClusterClickListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.OnClusterClickListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.OnClusterClickListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onClusterClick(param0: com.mapbox.maps.plugin.annotation.ClusterFeature): boolean;
						});
						public constructor();
						public onClusterClick(param0: com.mapbox.maps.plugin.annotation.ClusterFeature): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class OnClusterLongClickListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.OnClusterLongClickListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.OnClusterLongClickListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onClusterLongClick(param0: com.mapbox.maps.plugin.annotation.ClusterFeature): boolean;
						});
						public constructor();
						public onClusterLongClick(param0: com.mapbox.maps.plugin.annotation.ClusterFeature): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export class QueryAnnotationCallback<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.QueryAnnotationCallback<any>>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.QueryAnnotationCallback<any> interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onQueryAnnotation(param0: T): void;
						});
						public constructor();
						public onQueryAnnotation(param0: T): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class CircleAnnotation extends com.mapbox.maps.plugin.annotation.Annotation<com.mapbox.geojson.Point> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.CircleAnnotation>;
							public static ID_KEY: string; // "CircleAnnotation"
							public getCircleColorInt(): java.lang.Integer;
							public setCircleColorInt(value: java.lang.Integer): void;
							public getCircleOpacity(): java.lang.Double;
							public setUsedDataDrivenProperties(): void;
							public setPoint(value: com.mapbox.geojson.Point): void;
							public getCircleStrokeWidth(): java.lang.Double;
							public setCircleStrokeColorUseTheme(value: string): void;
							public getCircleStrokeColorUseTheme(): string;
							public getCircleSortKey(): java.lang.Double;
							public setCircleColorString(value: string): void;
							public setCircleColorUseTheme(value: string): void;
							public getCircleRadius(): java.lang.Double;
							public getCircleBlur(): java.lang.Double;
							public setCircleOpacity(value: java.lang.Double): void;
							public getCircleStrokeColorInt(): java.lang.Integer;
							public setCircleStrokeColorInt(value: java.lang.Integer): void;
							public getCircleStrokeOpacity(): java.lang.Double;
							public getType(): com.mapbox.maps.plugin.annotation.AnnotationType;
							public setCircleBlur(value: java.lang.Double): void;
							public getCircleColorString(): string;
							public getCircleStrokeColorString(): string;
							public setCircleStrokeOpacity(value: java.lang.Double): void;
							public constructor(id: string, jsonObject: com.google.gson.JsonObject, geometry: any);
							public setCircleRadius(value: java.lang.Double): void;
							public setCircleStrokeColorString(value: string): void;
							public getPoint(): com.mapbox.geojson.Point;
							public getOffsetGeometry(this_: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, mapCam_1fe: com.mapbox.android.gestures.MoveDistancesObject): com.mapbox.geojson.Point;
							public setCircleStrokeWidth(value: java.lang.Double): void;
							public setCircleSortKey(value: java.lang.Double): void;
							public getCircleColorUseTheme(): string;
							public getOffsetGeometry(param0: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, param1: com.mapbox.android.gestures.MoveDistancesObject): any;
							public constructor(id: string, annota_bb7: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,any,any,any,any,any>, jsonObject: com.google.gson.JsonObject, geometry: com.mapbox.geojson.Point);
						}
						export namespace CircleAnnotation {
							export namespace CircleAnnotation {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class CircleAnnotationManager extends com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions,com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationDragListener,com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationClickListener,com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationLongClickListener,com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationInteractionListener,com.mapbox.maps.extension.style.layers.generated.CircleLayer> implements com.mapbox.maps.plugin.annotation.ClusterAnnotationManager  {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.CircleAnnotationManager>;
							public getMaxZoom(): java.lang.Double;
							public getDelegateProvider(): com.mapbox.maps.plugin.delegates.MapDelegateProvider;
							public update(param0: any): void;
							public removeClusterClickListener(cluste_257: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public getLongClickListeners(): java.util.List<any>;
							public getCircleColorInt(): java.lang.Integer;
							public removeClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public create(json: string): java.util.List<com.mapbox.maps.plugin.annotation.generated.CircleAnnotation>;
							public addClusterLongClickListener(onClus_104: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public update(param0: java.util.List<any>): void;
							public getCircleOpacity(): java.lang.Double;
							public create(it: java.util.List<any>): java.util.List<any>;
							public selectAnnotation(param0: any): void;
							public setCircleStrokeColorUseTheme(value: string): void;
							public setSlot(this_: string): void;
							public getCircleSortKey(): java.lang.Double;
							public getCircleTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor;
							public getAnnotations(): java.util.List<any>;
							public addDragListener(param0: any): boolean;
							public addClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public update(it: java.util.List<any>): void;
							public addClickListener(param0: any): boolean;
							public setLayerFilter(it: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
							public setCircleColorUseTheme(value: string): void;
							public enableDataDrivenProperty(param0: string): void;
							public getCircleStrokeColorInt(): java.lang.Integer;
							public onSizeChanged(param0: number, param1: number): void;
							public setMinZoom(this_: java.lang.Double): void;
							public removeClusterLongClickListener(onClus_104: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public getClusterClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterClickListener>;
							public setCircleTranslateAnchor(this_: com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor): void;
							public getCircleStrokeOpacity(): java.lang.Double;
							public constructor(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider, annota_ec6: com.mapbox.maps.plugin.annotation.AnnotationConfig);
							public create(it: com.mapbox.geojson.FeatureCollection): java.util.List<com.mapbox.maps.plugin.annotation.generated.CircleAnnotation>;
							public setCircleBlur(value: java.lang.Double): void;
							public removeClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public removeLongClickListener(param0: any): boolean;
							public setDataDrivenPropertyIsUsed(property: string): void;
							public delete(param0: java.util.List<any>): void;
							public getInteractionListener(): java.util.List<any>;
							public getCirclePitchScale(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale;
							public delete(param0: any): void;
							public addInteractionListener(param0: any): boolean;
							public removeInteractionListener(param0: any): boolean;
							public setMaxZoom(this_: java.lang.Double): void;
							public getAnnotationIdKey(): string;
							public removeDragListener(param0: any): boolean;
							public setCirclePitchAlignment(this_: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment): void;
							public setCircleSortKey(value: java.lang.Double): void;
							public getCircleColorUseTheme(): string;
							public getCircleElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference;
							public getCirclePitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment;
							public removeClickListener(param0: any): boolean;
							public getClickListeners(): java.util.List<any>;
							public setCircleColorInt(value: java.lang.Integer): void;
							public create(param0: java.util.List<any>): java.util.List<any>;
							public onDestroy(): void;
							public getClusterLongClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterLongClickListener>;
							public getCircleEmissiveStrength(): java.lang.Double;
							public getCircleStrokeWidth(): java.lang.Double;
							public getCircleStrokeColorUseTheme(): string;
							public constructor(belowL_a92: com.mapbox.maps.plugin.delegates.MapDelegateProvider, layerAdded: com.mapbox.maps.plugin.annotation.AnnotationConfig, annota_30d: number, styleM_755: string, layerId: any);
							public setCircleColorString(value: string): void;
							public delete(it: java.util.List<any>): void;
							public setCircleTranslate(this_: java.util.List<java.lang.Double>): void;
							public getCircleRadius(): java.lang.Double;
							public getSlot(): string;
							public setCirclePitchScale(this_: com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale): void;
							public create(param0: any): any;
							public getCircleBlur(): java.lang.Double;
							public getMinZoom(): java.lang.Double;
							public setCircleOpacity(value: java.lang.Double): void;
							public getDragListeners(): java.util.List<any>;
							public setCircleStrokeColorInt(value: java.lang.Integer): void;
							public addClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public getCircleColorString(): string;
							public setCircleElevationReference(this_: com.mapbox.maps.extension.style.layers.properties.generated.CircleElevationReference): void;
							public getCircleStrokeColorString(): string;
							public setCircleStrokeOpacity(value: java.lang.Double): void;
							public getCircleTranslate(): java.util.List<java.lang.Double>;
							public addLongClickListener(param0: any): boolean;
							public setCircleRadius(value: java.lang.Double): void;
							public setCircleStrokeColorString(value: string): void;
							public addClusterClickListener(cluste_257: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public create(it: any): any;
							public setCircleEmissiveStrength(this_: java.lang.Double): void;
							public deleteAll(): void;
							public getLayerFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public setCircleStrokeWidth(value: java.lang.Double): void;
						}
						export namespace CircleAnnotationManager {
							export namespace CircleAnnotationManager {
								export namespace Companion {
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class CircleAnnotationOptions extends com.mapbox.maps.plugin.annotation.AnnotationOptions<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.CircleAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions>;
							public static PROPERTY_CIRCLE_SORT_KEY: string; // "circle-sort-key"
							public static PROPERTY_CIRCLE_BLUR: string; // "circle-blur"
							public static PROPERTY_CIRCLE_COLOR: string; // "circle-color"
							public static PROPERTY_CIRCLE_OPACITY: string; // "circle-opacity"
							public static PROPERTY_CIRCLE_RADIUS: string; // "circle-radius"
							public static PROPERTY_CIRCLE_STROKE_COLOR: string; // "circle-stroke-color"
							public static PROPERTY_CIRCLE_STROKE_OPACITY: string; // "circle-stroke-opacity"
							public static PROPERTY_CIRCLE_STROKE_WIDTH: string; // "circle-stroke-width"
							public static PROPERTY_CIRCLE_COLOR_USE_THEME: string; // "circle-color-use-theme"
							public static PROPERTY_CIRCLE_STROKE_COLOR_USE_THEME: string; // "circle-stroke-color-use-theme"
							public withCircleStrokeColorUseTheme(circle_cc0: string): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public withCircleStrokeColor(circle_444: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public setCircleStrokeWidth(circle_40b: java.lang.Double): void;
							public build(it: string, i_a_le_de1: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,any,any,any,any,any>): com.mapbox.maps.plugin.annotation.generated.CircleAnnotation;
							public getGeometry(): com.mapbox.geojson.Point;
							public getData(): com.google.gson.JsonElement;
							public withCircleBlur(circleBlur: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public withCircleColor(circle_b2c: string): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public getCircleOpacity(): java.lang.Double;
							public setCircleSortKey(circle_ecc: java.lang.Double): void;
							public withCircleRadius(circle_7f7: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public getCircleStrokeWidth(): java.lang.Double;
							public setCircleOpacity(circle_d82: java.lang.Double): void;
							public getCircleStrokeColorUseTheme(): string;
							public getCircleSortKey(): java.lang.Double;
							public build(param0: string, param1: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): any;
							public withCircleOpacity(circle_d82: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public withCircleStrokeColor(circle_444: string): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public withPoint(point: com.mapbox.geojson.Point): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public getCircleRadius(): java.lang.Double;
							public setCircleColorUseTheme(circle_0c8: string): void;
							public getCircleBlur(): java.lang.Double;
							public withCircleColorUseTheme(circle_0c8: string): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public constructor();
							public withCircleStrokeWidth(circle_40b: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public setCircleStrokeOpacity(circle_2fa: java.lang.Double): void;
							public setCircleStrokeColorUseTheme(circle_cc0: string): void;
							public setCircleBlur(circleBlur: java.lang.Double): void;
							public getCircleStrokeOpacity(): java.lang.Double;
							public getCircleColor(): string;
							public withGeometry(geometry: com.mapbox.geojson.Point): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public withDraggable(draggable: boolean): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public setCircleRadius(circle_7f7: java.lang.Double): void;
							public setCircleColor(circle_b2c: string): void;
							public setCircleStrokeColor(circle_444: string): void;
							public withCircleColor(circle_b2c: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public getPoint(): com.mapbox.geojson.Point;
							public getCircleStrokeColor(): string;
							public getDraggable(): boolean;
							public withData(jsonEl_fb5: com.google.gson.JsonElement): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public withCircleStrokeOpacity(circle_2fa: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
							public getCircleColorUseTheme(): string;
							public withCircleSortKey(circle_ecc: number): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
						}
						export namespace CircleAnnotationOptions {
							export namespace CircleAnnotationOptions {
								export namespace Companion {
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnCircleAnnotationClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<com.mapbox.maps.plugin.annotation.generated.CircleAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnCircleAnnotationDragListener extends com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<com.mapbox.maps.plugin.annotation.generated.CircleAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationDragListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationDragListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							});
							public constructor();
							public onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnCircleAnnotationInteractionListener extends com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<com.mapbox.maps.plugin.annotation.generated.CircleAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationInteractionListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationInteractionListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onSelectAnnotation(param0: any): void;
								onDeselectAnnotation(param0: any): void;
							});
							public constructor();
							public onDeselectAnnotation(param0: any): void;
							public onSelectAnnotation(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnCircleAnnotationLongClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<com.mapbox.maps.plugin.annotation.generated.CircleAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationLongClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnCircleAnnotationLongClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationLongClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationLongClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPointAnnotationClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<com.mapbox.maps.plugin.annotation.generated.PointAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPointAnnotationDragListener extends com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<com.mapbox.maps.plugin.annotation.generated.PointAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationDragListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationDragListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							});
							public constructor();
							public onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPointAnnotationInteractionListener extends com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<com.mapbox.maps.plugin.annotation.generated.PointAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationInteractionListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationInteractionListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onSelectAnnotation(param0: any): void;
								onDeselectAnnotation(param0: any): void;
							});
							public constructor();
							public onDeselectAnnotation(param0: any): void;
							public onSelectAnnotation(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPointAnnotationLongClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<com.mapbox.maps.plugin.annotation.generated.PointAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationLongClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationLongClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationLongClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationLongClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolygonAnnotationClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolygonAnnotationDragListener extends com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationDragListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationDragListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							});
							public constructor();
							public onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolygonAnnotationInteractionListener extends com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationInteractionListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationInteractionListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onSelectAnnotation(param0: any): void;
								onDeselectAnnotation(param0: any): void;
							});
							public constructor();
							public onDeselectAnnotation(param0: any): void;
							public onSelectAnnotation(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolygonAnnotationLongClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationLongClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationLongClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationLongClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationLongClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolylineAnnotationClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationClickListener<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolylineAnnotationDragListener extends com.mapbox.maps.plugin.annotation.OnAnnotationDragListener<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationDragListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationDragListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
								onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							});
							public constructor();
							public onAnnotationDragFinished(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDragStarted(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
							public onAnnotationDrag(param0: com.mapbox.maps.plugin.annotation.Annotation<any>): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolylineAnnotationInteractionListener extends com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationInteractionListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationInteractionListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onSelectAnnotation(param0: any): void;
								onDeselectAnnotation(param0: any): void;
							});
							public constructor();
							public onDeselectAnnotation(param0: any): void;
							public onSelectAnnotation(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class OnPolylineAnnotationLongClickListener extends com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationLongClickListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationLongClickListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onAnnotationLongClick(param0: any): boolean;
							});
							public constructor();
							public onAnnotationLongClick(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PointAnnotation extends com.mapbox.maps.plugin.annotation.Annotation<com.mapbox.geojson.Point> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PointAnnotation>;
							public static ID_KEY: string; // "PointAnnotation"
							public static ICON_DEFAULT_NAME_PREFIX: string; // "icon_default_name_"
							public getTextJustify(): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
							public getIconColorString(): string;
							public setTextHaloWidth(value: java.lang.Double): void;
							public getTextHaloColorInt(): java.lang.Integer;
							public setUsedDataDrivenProperties(): void;
							public setTextOcclusionOpacity(value: java.lang.Double): void;
							public setIconSize(value: java.lang.Double): void;
							public setIconColorString(value: string): void;
							/** @deprecated */
							public setIconImageCrossFade(value: java.lang.Double): void;
							public setTextHaloColorUseTheme(value: string): void;
							public getTextTransform(): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
							public setIconHaloBlur(value: java.lang.Double): void;
							public getIconHaloColorInt(): java.lang.Integer;
							public setIconHaloColorUseTheme(value: string): void;
							public setTextHaloColorString(value: string): void;
							public getIconOpacity(): java.lang.Double;
							public getIconTextFit(): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
							public getIconOcclusionOpacity(): java.lang.Double;
							public setSymbolZOffset(value: java.lang.Double): void;
							public setIconAnchor(value: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): void;
							public getIconHaloColorString(): string;
							public getTextEmissiveStrength(): java.lang.Double;
							public getSymbolSortKey(): java.lang.Double;
							public getType(): com.mapbox.maps.plugin.annotation.AnnotationType;
							public getTextHaloBlur(): java.lang.Double;
							public getTextOffset(): java.util.List<java.lang.Double>;
							public setTextOpacity(value: java.lang.Double): void;
							public setTextTransform(value: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): void;
							public setTextJustify(value: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): void;
							public getIconSize(): java.lang.Double;
							public setIconEmissiveStrength(value: java.lang.Double): void;
							public getPoint(): com.mapbox.geojson.Point;
							public getIconRotate(): java.lang.Double;
							public getTextAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
							public getIconColorInt(): java.lang.Integer;
							public setIconColorInt(value: java.lang.Integer): void;
							public setTextField(value: string): void;
							public getTextHaloColorString(): string;
							public getIconColorUseTheme(): string;
							public setTextLineHeight(value: java.lang.Double): void;
							public setIconImage(value: string): void;
							public getOffsetGeometry(param0: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, param1: com.mapbox.android.gestures.MoveDistancesObject): any;
							public getIconEmissiveStrength(): java.lang.Double;
							public setIconOcclusionOpacity(value: java.lang.Double): void;
							public setTextColorUseTheme(value: string): void;
							public setIconTextFit(value: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): void;
							public setIconOffset(it: java.util.List<java.lang.Double>): void;
							public getIconHaloWidth(): java.lang.Double;
							public setIconImageBitmap(value: globalAndroid.graphics.Bitmap): void;
							public setIconTextFitPadding(it: java.util.List<java.lang.Double>): void;
							public setIconHaloColorString(value: string): void;
							public getTextHaloWidth(): java.lang.Double;
							public getIconHaloBlur(): java.lang.Double;
							public getTextColorString(): string;
							public setTextAnchor(value: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): void;
							public setTextLetterSpacing(value: java.lang.Double): void;
							public getTextRadialOffset(): java.lang.Double;
							public getTextHaloColorUseTheme(): string;
							public getIconTextFitPadding(): java.util.List<java.lang.Double>;
							public getSymbolZOffset(): java.lang.Double;
							public setTextColorString(value: string): void;
							public getIconImage(): string;
							public getTextLineHeight(): java.lang.Double;
							public setSymbolSortKey(value: java.lang.Double): void;
							public setPoint(value: com.mapbox.geojson.Point): void;
							public getTextOpacity(): java.lang.Double;
							public getIconAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
							public getTextLetterSpacing(): java.lang.Double;
							public setIconRotate(value: java.lang.Double): void;
							public getIconImageBitmap(): globalAndroid.graphics.Bitmap;
							public setIconOpacity(value: java.lang.Double): void;
							public setTextHaloBlur(value: java.lang.Double): void;
							public getTextColorUseTheme(): string;
							public getIconOffset(): java.util.List<java.lang.Double>;
							public setTextMaxWidth(value: java.lang.Double): void;
							public setTextRadialOffset(value: java.lang.Double): void;
							public getTextColorInt(): java.lang.Integer;
							public setIconColorUseTheme(value: string): void;
							public setTextHaloColorInt(value: java.lang.Integer): void;
							public getTextSize(): java.lang.Double;
							public getTextField(): string;
							public getTextMaxWidth(): java.lang.Double;
							public getIconHaloColorUseTheme(): string;
							public getTextRotate(): java.lang.Double;
							public setIconHaloWidth(value: java.lang.Double): void;
							public setIconHaloColorInt(value: java.lang.Integer): void;
							public constructor(id: string, annota_bb7: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.PointAnnotation,any,any,any,any,any>, jsonObject: com.google.gson.JsonObject, geometry: com.mapbox.geojson.Point);
							public setTextRotate(value: java.lang.Double): void;
							public constructor(id: string, jsonObject: com.google.gson.JsonObject, geometry: any);
							public setTextOffset(it: java.util.List<java.lang.Double>): void;
							public getOffsetGeometry(this_: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, mapCam_1fe: com.mapbox.android.gestures.MoveDistancesObject): com.mapbox.geojson.Point;
							public setTextSize(value: java.lang.Double): void;
							/** @deprecated */
							public getIconImageCrossFade(): java.lang.Double;
							public setTextColorInt(value: java.lang.Integer): void;
							public setTextEmissiveStrength(value: java.lang.Double): void;
							public getTextOcclusionOpacity(): java.lang.Double;
						}
						export namespace PointAnnotation {
							export namespace PointAnnotation {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PointAnnotationManager extends com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.PointAnnotation,com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions,com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationDragListener,com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationClickListener,com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationLongClickListener,com.mapbox.maps.plugin.annotation.generated.OnPointAnnotationInteractionListener,com.mapbox.maps.extension.style.layers.generated.SymbolLayer> implements com.mapbox.maps.plugin.annotation.ClusterAnnotationManager  {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PointAnnotationManager>;
							public getSymbolElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference;
							public getTextJustify(): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
							public getMaxZoom(): java.lang.Double;
							public setTextHaloWidth(value: java.lang.Double): void;
							public getTextHaloColorInt(): java.lang.Integer;
							public setIconOptional(this_: java.lang.Boolean): void;
							public selectAnnotation(param0: any): void;
							public setIconColorString(value: string): void;
							public setTextHaloColorUseTheme(value: string): void;
							public create(it: com.mapbox.geojson.FeatureCollection): java.util.List<com.mapbox.maps.plugin.annotation.generated.PointAnnotation>;
							public setTextKeepUpright(this_: java.lang.Boolean): void;
							public setIconHaloBlur(value: java.lang.Double): void;
							public getTextWritingMode(): java.util.List<string>;
							public setIconHaloColorUseTheme(value: string): void;
							public setTextHaloColorString(value: string): void;
							public getIconOcclusionOpacity(): java.lang.Double;
							public enableDataDrivenProperty(param0: string): void;
							public getIconTranslate(): java.util.List<java.lang.Double>;
							public removeClusterLongClickListener(onClus_104: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public getSymbolSortKey(): java.lang.Double;
							public getSymbolAvoidEdges(): java.lang.Boolean;
							public removeClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public removeLongClickListener(param0: any): boolean;
							public setTextIgnorePlacement(this_: java.lang.Boolean): void;
							public setIconImageCrossFade(this_: java.lang.Double): void;
							public setIconEmissiveStrength(value: java.lang.Double): void;
							public getIconRotate(): java.lang.Double;
							public setIconColorInt(value: java.lang.Integer): void;
							public setIconSizeScaleRange(this_: java.util.List<java.lang.Double>): void;
							public setTextField(value: string): void;
							public getIconColorUseTheme(): string;
							public setTextPitchAlignment(this_: com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment): void;
							public setIconImage(value: string): void;
							public getIconEmissiveStrength(): java.lang.Double;
							public setIconTextFitPadding(it: java.util.List<java.lang.Double>): void;
							public setIconHaloColorString(value: string): void;
							public setIconTranslateAnchor(this_: com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor): void;
							public getTextColorString(): string;
							public onDestroy(): void;
							public setTextAllowOverlap(this_: java.lang.Boolean): void;
							public getTextLineHeight(): java.lang.Double;
							public getIconAllowOverlap(): java.lang.Boolean;
							public setSymbolAvoidEdges(this_: java.lang.Boolean): void;
							public setTextTranslate(this_: java.util.List<java.lang.Double>): void;
							public setTextHaloBlur(value: java.lang.Double): void;
							public getSlot(): string;
							public create(param0: any): any;
							public getDragListeners(): java.util.List<any>;
							public setTextHaloColorInt(value: java.lang.Integer): void;
							public getTextSize(): java.lang.Double;
							public getTextField(): string;
							public setTextRotate(value: java.lang.Double): void;
							public setTextWritingMode(this_: java.util.List<string>): void;
							public setIconPitchAlignment(this_: com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment): void;
							public addLongClickListener(param0: any): boolean;
							public create(it: any): any;
							public deleteAll(): void;
							public setIconRotationAlignment(this_: com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment): void;
							public getLayerFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public removeClusterClickListener(cluste_257: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public getTextTranslate(): java.util.List<java.lang.Double>;
							public addClusterLongClickListener(onClus_104: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public update(param0: java.util.List<any>): void;
							public setTextOcclusionOpacity(value: java.lang.Double): void;
							public setIconSize(value: java.lang.Double): void;
							public setSymbolPlacement(this_: com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement): void;
							public getIconHaloColorInt(): java.lang.Integer;
							public update(it: java.util.List<any>): void;
							public setLayerFilter(it: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
							public setIconPadding(this_: java.lang.Double): void;
							public setIconAnchor(value: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): void;
							public getTextEmissiveStrength(): java.lang.Double;
							public getClusterClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterClickListener>;
							public getTextOffset(): java.util.List<java.lang.Double>;
							public setIconTranslate(this_: java.util.List<java.lang.Double>): void;
							public getIconSize(): java.lang.Double;
							public getIconPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment;
							public addInteractionListener(param0: any): boolean;
							public getSymbolZElevate(): java.lang.Boolean;
							public setIconTextFit(value: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): void;
							public setIconOffset(it: java.util.List<java.lang.Double>): void;
							public getIconHaloWidth(): java.lang.Double;
							public removeClickListener(param0: any): boolean;
							public getClickListeners(): java.util.List<any>;
							public getIconTextFitPadding(): java.util.List<java.lang.Double>;
							public setTextColorString(value: string): void;
							public create(param0: java.util.List<any>): java.util.List<any>;
							public getIconAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
							public getTextRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment;
							public getTextPitchAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment;
							public delete(it: java.util.List<any>): void;
							public getIconImageBitmap(): globalAndroid.graphics.Bitmap;
							public setTextRadialOffset(value: java.lang.Double): void;
							public setIconColorUseTheme(value: string): void;
							public getIconColorSaturation(): java.lang.Double;
							public addClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public setSymbolZOrder(this_: com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder): void;
							public getIconHaloColorUseTheme(): string;
							public setTextOptional(this_: java.lang.Boolean): void;
							public addClusterClickListener(cluste_257: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public setTextOffset(it: java.util.List<java.lang.Double>): void;
							public setIconIgnorePlacement(this_: java.lang.Boolean): void;
							public getIconKeepUpright(): java.lang.Boolean;
							public setSymbolSpacing(this_: java.lang.Double): void;
							public setIconKeepUpright(this_: java.lang.Boolean): void;
							public update(param0: any): void;
							public setTextFont(this_: java.util.List<string>): void;
							public getIconSizeScaleRange(): java.util.List<java.lang.Double>;
							public getTextTransform(): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
							public getAnnotations(): java.util.List<any>;
							public addClickListener(param0: any): boolean;
							public setSymbolElevationReference(this_: com.mapbox.maps.extension.style.layers.properties.generated.SymbolElevationReference): void;
							public getSymbolPlacement(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement;
							public setMinZoom(this_: java.lang.Double): void;
							public getIconHaloColorString(): string;
							public constructor(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider, annota_ec6: com.mapbox.maps.plugin.annotation.AnnotationConfig);
							public getTextHaloBlur(): java.lang.Double;
							public setTextOpacity(value: java.lang.Double): void;
							public getTextAllowOverlap(): java.lang.Boolean;
							public delete(param0: java.util.List<any>): void;
							public getInteractionListener(): java.util.List<any>;
							public getTextOptional(): java.lang.Boolean;
							public getTextAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
							public getIconColorInt(): java.lang.Integer;
							public removeInteractionListener(param0: any): boolean;
							public setMaxZoom(this_: java.lang.Double): void;
							public getIconImageCrossFade(): java.lang.Double;
							public setSymbolZElevate(this_: java.lang.Boolean): void;
							public removeDragListener(param0: any): boolean;
							public getTextSizeScaleRange(): java.util.List<java.lang.Double>;
							public getTextPadding(): java.lang.Double;
							public getTextHaloWidth(): java.lang.Double;
							public setTextLetterSpacing(value: java.lang.Double): void;
							public getTextRadialOffset(): java.lang.Double;
							public getTextHaloColorUseTheme(): string;
							public setTextPadding(this_: java.lang.Double): void;
							public getIconImage(): string;
							public getTextOpacity(): java.lang.Double;
							public constructor(belowL_a92: com.mapbox.maps.plugin.delegates.MapDelegateProvider, layerAdded: com.mapbox.maps.plugin.annotation.AnnotationConfig, annota_30d: number, styleM_755: string, layerId: any);
							public getTextLetterSpacing(): java.lang.Double;
							public getIconTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor;
							public setIconOpacity(value: java.lang.Double): void;
							public getTextColorUseTheme(): string;
							public setTextMaxWidth(value: java.lang.Double): void;
							public getTextColorInt(): java.lang.Integer;
							public getMinZoom(): java.lang.Double;
							public getTextRotate(): java.lang.Double;
							public setIconHaloWidth(value: java.lang.Double): void;
							public setTextSize(value: java.lang.Double): void;
							public getIconColorString(): string;
							public getDelegateProvider(): com.mapbox.maps.plugin.delegates.MapDelegateProvider;
							public getLongClickListeners(): java.util.List<any>;
							public removeClusterLongClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterLongClickListener): boolean;
							public create(it: java.util.List<any>): java.util.List<any>;
							public getIconOptional(): java.lang.Boolean;
							public setSlot(this_: string): void;
							public addDragListener(param0: any): boolean;
							public addClusterClickListener(param0: com.mapbox.maps.plugin.annotation.OnClusterClickListener): boolean;
							public getTextFont(): java.util.List<string>;
							public getIconOpacity(): java.lang.Double;
							public getIconTextFit(): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
							public getTextVariableAnchor(): java.util.List<string>;
							public setSymbolZOffset(value: java.lang.Double): void;
							public getTextTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor;
							public onSizeChanged(param0: number, param1: number): void;
							public setTextTransform(value: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): void;
							public setDataDrivenPropertyIsUsed(property: string): void;
							public setTextJustify(value: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): void;
							public getSymbolSpacing(): java.lang.Double;
							public setIconColorSaturation(this_: java.lang.Double): void;
							public delete(param0: any): void;
							public getTextMaxAngle(): java.lang.Double;
							public getAnnotationIdKey(): string;
							public getTextHaloColorString(): string;
							public setTextMaxAngle(this_: java.lang.Double): void;
							public setTextLineHeight(value: java.lang.Double): void;
							public setTextSizeScaleRange(this_: java.util.List<java.lang.Double>): void;
							public setIconOcclusionOpacity(value: java.lang.Double): void;
							public setTextColorUseTheme(value: string): void;
							public create(json: string): java.util.List<com.mapbox.maps.plugin.annotation.generated.PointAnnotation>;
							public getSymbolZOrder(): com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder;
							public getIconHaloBlur(): java.lang.Double;
							public setTextRotationAlignment(this_: com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment): void;
							public setTextAnchor(value: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): void;
							public setTextTranslateAnchor(this_: com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor): void;
							public getSymbolZOffset(): java.lang.Double;
							public setSymbolSortKey(value: java.lang.Double): void;
							public getClusterLongClickListeners(): java.util.List<com.mapbox.maps.plugin.annotation.OnClusterLongClickListener>;
							public getIconRotationAlignment(): com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment;
							public getIconIgnorePlacement(): java.lang.Boolean;
							public setTextVariableAnchor(this_: java.util.List<string>): void;
							public setIconRotate(value: java.lang.Double): void;
							public getTextKeepUpright(): java.lang.Boolean;
							public getIconOffset(): java.util.List<java.lang.Double>;
							public getIconPadding(): java.lang.Double;
							public getTextIgnorePlacement(): java.lang.Boolean;
							public setIconImageBitmap(this_: globalAndroid.graphics.Bitmap): void;
							public getTextMaxWidth(): java.lang.Double;
							public setIconAllowOverlap(this_: java.lang.Boolean): void;
							public setIconHaloColorInt(value: java.lang.Integer): void;
							public setTextColorInt(value: java.lang.Integer): void;
							public setTextEmissiveStrength(value: java.lang.Double): void;
							public getTextOcclusionOpacity(): java.lang.Double;
						}
						export namespace PointAnnotationManager {
							export namespace PointAnnotationManager {
								export namespace Companion {
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PointAnnotationOptions extends com.mapbox.maps.plugin.annotation.AnnotationOptions<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.PointAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions>;
							public static PROPERTY_ICON_ANCHOR: string; // "icon-anchor"
							public static PROPERTY_ICON_IMAGE: string; // "icon-image"
							public static PROPERTY_ICON_OFFSET: string; // "icon-offset"
							public static PROPERTY_ICON_ROTATE: string; // "icon-rotate"
							public static PROPERTY_ICON_SIZE: string; // "icon-size"
							public static PROPERTY_ICON_TEXT_FIT: string; // "icon-text-fit"
							public static PROPERTY_ICON_TEXT_FIT_PADDING: string; // "icon-text-fit-padding"
							public static PROPERTY_SYMBOL_SORT_KEY: string; // "symbol-sort-key"
							public static PROPERTY_TEXT_ANCHOR: string; // "text-anchor"
							public static PROPERTY_TEXT_FIELD: string; // "text-field"
							public static PROPERTY_TEXT_JUSTIFY: string; // "text-justify"
							public static PROPERTY_TEXT_LETTER_SPACING: string; // "text-letter-spacing"
							public static PROPERTY_TEXT_LINE_HEIGHT: string; // "text-line-height"
							public static PROPERTY_TEXT_MAX_WIDTH: string; // "text-max-width"
							public static PROPERTY_TEXT_OFFSET: string; // "text-offset"
							public static PROPERTY_TEXT_RADIAL_OFFSET: string; // "text-radial-offset"
							public static PROPERTY_TEXT_ROTATE: string; // "text-rotate"
							public static PROPERTY_TEXT_SIZE: string; // "text-size"
							public static PROPERTY_TEXT_TRANSFORM: string; // "text-transform"
							public static PROPERTY_ICON_COLOR: string; // "icon-color"
							public static PROPERTY_ICON_EMISSIVE_STRENGTH: string; // "icon-emissive-strength"
							public static PROPERTY_ICON_HALO_BLUR: string; // "icon-halo-blur"
							public static PROPERTY_ICON_HALO_COLOR: string; // "icon-halo-color"
							public static PROPERTY_ICON_HALO_WIDTH: string; // "icon-halo-width"
							public static PROPERTY_ICON_OCCLUSION_OPACITY: string; // "icon-occlusion-opacity"
							public static PROPERTY_ICON_OPACITY: string; // "icon-opacity"
							public static PROPERTY_SYMBOL_Z_OFFSET: string; // "symbol-z-offset"
							public static PROPERTY_TEXT_COLOR: string; // "text-color"
							public static PROPERTY_TEXT_EMISSIVE_STRENGTH: string; // "text-emissive-strength"
							public static PROPERTY_TEXT_HALO_BLUR: string; // "text-halo-blur"
							public static PROPERTY_TEXT_HALO_COLOR: string; // "text-halo-color"
							public static PROPERTY_TEXT_HALO_WIDTH: string; // "text-halo-width"
							public static PROPERTY_TEXT_OCCLUSION_OPACITY: string; // "text-occlusion-opacity"
							public static PROPERTY_TEXT_OPACITY: string; // "text-opacity"
							public static PROPERTY_ICON_COLOR_USE_THEME: string; // "icon-color-use-theme"
							public static PROPERTY_ICON_HALO_COLOR_USE_THEME: string; // "icon-halo-color-use-theme"
							public static PROPERTY_TEXT_COLOR_USE_THEME: string; // "text-color-use-theme"
							public static PROPERTY_TEXT_HALO_COLOR_USE_THEME: string; // "text-halo-color-use-theme"
							public static PROPERTY_ICON_IMAGE_CROSS_FADE: string; // "icon-image-cross-fade"
							public setTextMaxWidth(textMa_84c: java.lang.Double): void;
							public getTextJustify(): com.mapbox.maps.extension.style.layers.properties.generated.TextJustify;
							public setIconColorUseTheme(iconCo_1d7: string): void;
							public withSymbolZOffset(symbol_70e: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconSize(iconSize: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconColorUseTheme(iconCo_1d7: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextAnchor(textAnchor: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): void;
							public getTextTransform(): com.mapbox.maps.extension.style.layers.properties.generated.TextTransform;
							public setIconTextFitPadding(iconTe_abf: java.util.List<java.lang.Double>): void;
							public build(it: string, i_a_le_aeb: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.Point,com.mapbox.maps.plugin.annotation.generated.PointAnnotation,any,any,any,any,any>): com.mapbox.maps.plugin.annotation.generated.PointAnnotation;
							public getIconOcclusionOpacity(): java.lang.Double;
							public withIconTextFit(iconTe_52e: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextSize(textSize: java.lang.Double): void;
							public getSymbolSortKey(): java.lang.Double;
							public getTextHaloBlur(): java.lang.Double;
							public withTextOcclusionOpacity(textOc_238: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextRotate(textRotate: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextColor(textColor: string): void;
							public getTextColor(): string;
							public setTextEmissiveStrength(textEm_9d4: java.lang.Double): void;
							public withIconImage(iconImage: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							/** @deprecated */
							public setIconImageCrossFade(iconIm_54d: java.lang.Double): void;
							public withTextOpacity(textOp_507: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setIconOffset(iconOffset: java.util.List<java.lang.Double>): void;
							public setTextTransform(textTr_e56: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): void;
							public getIconColor(): string;
							public getIconRotate(): java.lang.Double;
							public getTextAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor;
							public setTextOffset(textOffset: java.util.List<java.lang.Double>): void;
							public setIconImage(iconImage: string): void;
							public setTextHaloBlur(textHa_119: java.lang.Double): void;
							public getIconColorUseTheme(): string;
							public withIconHaloColor(iconHa_561: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getIconEmissiveStrength(): java.lang.Double;
							public withIconEmissiveStrength(iconEm_4ca: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextTransform(textTr_e56: com.mapbox.maps.extension.style.layers.properties.generated.TextTransform): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextHaloWidth(textHa_44c: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getTextHaloWidth(): java.lang.Double;
							public setIconHaloBlur(iconHa_64f: java.lang.Double): void;
							public getTextRadialOffset(): java.lang.Double;
							public getTextHaloColorUseTheme(): string;
							public getIconImage(): string;
							public getTextLineHeight(): java.lang.Double;
							public withIconColor(iconColor: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextHaloWidth(textHa_44c: java.lang.Double): void;
							public setIconRotate(iconRotate: java.lang.Double): void;
							public withTextHaloColor(textHa_d77: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getTextOpacity(): java.lang.Double;
							public setIconOcclusionOpacity(iconOc_312: java.lang.Double): void;
							public withIconHaloBlur(iconHa_64f: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getTextLetterSpacing(): java.lang.Double;
							public withIconHaloWidth(iconHa_f5a: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextRadialOffset(textRa_ffa: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getIconHaloColor(): string;
							public getTextColorUseTheme(): string;
							public constructor();
							public withTextOffset(textOffset: java.util.List<java.lang.Double>): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getTextSize(): java.lang.Double;
							public withDraggable(draggable: boolean): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getTextField(): string;
							public withIconOpacity(iconOp_ce5: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextColorUseTheme(textCo_6fd: string): void;
							public withData(jsonEl_fb5: com.google.gson.JsonElement): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getTextRotate(): java.lang.Double;
							public setIconColor(iconColor: string): void;
							public withIconOcclusionOpacity(iconOc_312: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withGeometry(geometry: com.mapbox.geojson.Point): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setSymbolSortKey(symbol_e54: java.lang.Double): void;
							public setIconHaloColor(iconHa_561: string): void;
							public withTextField(textField: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							/** @deprecated */
							public getIconImageCrossFade(): java.lang.Double;
							public withTextEmissiveStrength(textEm_9d4: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconHaloColorUseTheme(iconHa_75d: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconColor(iconColor: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextLineHeight(textLi_ee7: java.lang.Double): void;
							public getGeometry(): com.mapbox.geojson.Point;
							public withIconOffset(iconOffset: java.util.List<java.lang.Double>): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconTextFitPadding(iconTe_abf: java.util.List<java.lang.Double>): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconRotate(iconRotate: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setIconHaloColorUseTheme(iconHa_75d: string): void;
							public setIconHaloWidth(iconHa_f5a: java.lang.Double): void;
							public setTextHaloColorUseTheme(textHa_747: string): void;
							public withTextSize(textSize: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getIconOpacity(): java.lang.Double;
							public getIconTextFit(): com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit;
							public withTextLetterSpacing(textLe_53f: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextMaxWidth(textMa_84c: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextHaloColor(textHa_d77: string): void;
							public setTextRadialOffset(textRa_ffa: java.lang.Double): void;
							public setIconOpacity(iconOp_ce5: java.lang.Double): void;
							public getTextEmissiveStrength(): java.lang.Double;
							public setTextField(textField: string): void;
							public setTextJustify(textJu_efe: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): void;
							public withSymbolSortKey(symbol_e54: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getTextOffset(): java.util.List<java.lang.Double>;
							public getIconSize(): java.lang.Double;
							public withTextHaloColorUseTheme(textHa_747: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getPoint(): com.mapbox.geojson.Point;
							/** @deprecated */
							public withIconImageCrossFade(iconIm_54d: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setIconEmissiveStrength(iconEm_4ca: java.lang.Double): void;
							public withTextHaloColor(textHa_d77: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setIconAnchor(iconAnchor: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): void;
							public getIconHaloWidth(): java.lang.Double;
							public withTextLineHeight(textLi_ee7: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextOcclusionOpacity(textOc_238: java.lang.Double): void;
							public setIconSize(iconSize: java.lang.Double): void;
							public getIconHaloBlur(): java.lang.Double;
							public setTextRotate(textRotate: java.lang.Double): void;
							public getData(): com.google.gson.JsonElement;
							public withPoint(point: com.mapbox.geojson.Point): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getIconTextFitPadding(): java.util.List<java.lang.Double>;
							public getSymbolZOffset(): java.lang.Double;
							public getIconAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor;
							public getTextHaloColor(): string;
							public build(param0: string, param1: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): any;
							public withTextAnchor(textAnchor: com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextLetterSpacing(textLe_53f: java.lang.Double): void;
							public withTextColor(textColor: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconImage(iconIm_46e: globalAndroid.graphics.Bitmap): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setTextOpacity(textOp_507: java.lang.Double): void;
							public getIconOffset(): java.util.List<java.lang.Double>;
							public withTextColor(textColor: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public setIconTextFit(iconTe_52e: com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit): void;
							public getTextMaxWidth(): java.lang.Double;
							public getIconHaloColorUseTheme(): string;
							public withIconHaloColor(iconHa_561: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextColorUseTheme(textCo_6fd: string): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withIconAnchor(iconAnchor: com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextHaloBlur(textHa_119: number): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public withTextJustify(textJu_efe: com.mapbox.maps.extension.style.layers.properties.generated.TextJustify): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
							public getDraggable(): boolean;
							public setSymbolZOffset(symbol_70e: java.lang.Double): void;
							public getTextOcclusionOpacity(): java.lang.Double;
						}
						export namespace PointAnnotationOptions {
							export namespace PointAnnotationOptions {
								export namespace Companion {
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PolygonAnnotation extends com.mapbox.maps.plugin.annotation.Annotation<com.mapbox.geojson.Polygon> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation>;
							public static ID_KEY: string; // "PolygonAnnotation"
							public setFillColorUseTheme(value: string): void;
							public getFillOutlineColorString(): string;
							public setFillSortKey(value: java.lang.Double): void;
							public setPoints(value: java.util.List<any>): void;
							public getFillColorUseTheme(): string;
							public setFillBridgeGuardRailColorInt(value: java.lang.Integer): void;
							public setUsedDataDrivenProperties(): void;
							public getFillColorInt(): java.lang.Integer;
							public setFillOpacity(value: java.lang.Double): void;
							public getFillTunnelStructureColorInt(): java.lang.Integer;
							public getPoints(): java.util.List<java.util.List<com.mapbox.geojson.Point>>;
							public setFillOutlineColorInt(value: java.lang.Integer): void;
							public getFillZOffset(): java.lang.Double;
							public getFillOpacity(): java.lang.Double;
							public setFillTunnelStructureColorInt(value: java.lang.Integer): void;
							public setFillTunnelStructureColorString(value: string): void;
							public setFillColorInt(value: java.lang.Integer): void;
							public setFillOutlineColorString(value: string): void;
							public getOffsetGeometry(it: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, item_iv_iv: com.mapbox.android.gestures.MoveDistancesObject): com.mapbox.geojson.Polygon;
							public setFillBridgeGuardRailColorString(value: string): void;
							public setFillColorString(value: string): void;
							public constructor(id: string, annota_bb7: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.Polygon,com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,any,any,any,any,any>, jsonObject: com.google.gson.JsonObject, geometry: com.mapbox.geojson.Polygon);
							public setFillOutlineColorUseTheme(value: string): void;
							public getFillTunnelStructureColorString(): string;
							public getFillSortKey(): java.lang.Double;
							public getFillColorString(): string;
							public getType(): com.mapbox.maps.plugin.annotation.AnnotationType;
							public setFillConstructBridgeGuardRail(value: java.lang.Boolean): void;
							public getFillOutlineColorUseTheme(): string;
							public setFillBridgeGuardRailColorUseTheme(value: string): void;
							public getFillTunnelStructureColorUseTheme(): string;
							public getFillBridgeGuardRailColorInt(): java.lang.Integer;
							public getFillBridgeGuardRailColorString(): string;
							public constructor(id: string, jsonObject: com.google.gson.JsonObject, geometry: any);
							public getFillPattern(): string;
							public setFillTunnelStructureColorUseTheme(value: string): void;
							public getFillConstructBridgeGuardRail(): java.lang.Boolean;
							public setFillPattern(value: string): void;
							public getFillOutlineColorInt(): java.lang.Integer;
							public getFillBridgeGuardRailColorUseTheme(): string;
							public getOffsetGeometry(param0: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, param1: com.mapbox.android.gestures.MoveDistancesObject): any;
							public setFillZOffset(value: java.lang.Double): void;
						}
						export namespace PolygonAnnotation {
							export namespace PolygonAnnotation {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PolygonAnnotationManager extends com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<com.mapbox.geojson.Polygon,com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions,com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationDragListener,com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationClickListener,com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationLongClickListener,com.mapbox.maps.plugin.annotation.generated.OnPolygonAnnotationInteractionListener,com.mapbox.maps.extension.style.layers.generated.FillLayer> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationManager>;
							public setFillColorUseTheme(value: string): void;
							public getMaxZoom(): java.lang.Double;
							public getDelegateProvider(): com.mapbox.maps.plugin.delegates.MapDelegateProvider;
							public setFillSortKey(value: java.lang.Double): void;
							public update(param0: any): void;
							public getFillColorUseTheme(): string;
							public getLongClickListeners(): java.util.List<any>;
							public setFillBridgeGuardRailColorInt(value: java.lang.Integer): void;
							public update(param0: java.util.List<any>): void;
							public setFillTranslateAnchor(this_: com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor): void;
							public create(it: java.util.List<any>): java.util.List<any>;
							public selectAnnotation(param0: any): void;
							public getFillColorInt(): java.lang.Integer;
							public setFillOpacity(value: java.lang.Double): void;
							public setFillPatternCrossFade(this_: java.lang.Double): void;
							public getFillAntialias(): java.lang.Boolean;
							public getFillZOffset(): java.lang.Double;
							public setSlot(this_: string): void;
							public getAnnotations(): java.util.List<any>;
							public addDragListener(param0: any): boolean;
							public setFillTunnelStructureColorInt(value: java.lang.Integer): void;
							public update(it: java.util.List<any>): void;
							public addClickListener(param0: any): boolean;
							public setFillTunnelStructureColorString(value: string): void;
							public setLayerFilter(it: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
							public setFillColorInt(value: java.lang.Integer): void;
							public setFillEmissiveStrength(this_: java.lang.Double): void;
							public getFillPatternCrossFade(): java.lang.Double;
							public getFillEmissiveStrength(): java.lang.Double;
							public setFillBridgeGuardRailColorString(value: string): void;
							public enableDataDrivenProperty(param0: string): void;
							public setFillColorString(value: string): void;
							public onSizeChanged(param0: number, param1: number): void;
							public setMinZoom(this_: java.lang.Double): void;
							public setFillOutlineColorUseTheme(value: string): void;
							public getFillSortKey(): java.lang.Double;
							public constructor(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider, annota_ec6: com.mapbox.maps.plugin.annotation.AnnotationConfig);
							public getFillOutlineColorUseTheme(): string;
							public create(json: string): java.util.List<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation>;
							public getFillTunnelStructureColorUseTheme(): string;
							public removeLongClickListener(param0: any): boolean;
							public getFillBridgeGuardRailColorInt(): java.lang.Integer;
							public setDataDrivenPropertyIsUsed(property: string): void;
							public delete(param0: java.util.List<any>): void;
							public setFillTranslate(this_: java.util.List<java.lang.Double>): void;
							public getInteractionListener(): java.util.List<any>;
							public getFillConstructBridgeGuardRail(): java.lang.Boolean;
							public delete(param0: any): void;
							public addInteractionListener(param0: any): boolean;
							public removeInteractionListener(param0: any): boolean;
							public setMaxZoom(this_: java.lang.Double): void;
							public getFillTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor;
							public getAnnotationIdKey(): string;
							public removeDragListener(param0: any): boolean;
							public getFillBridgeGuardRailColorUseTheme(): string;
							public setFillZOffset(value: java.lang.Double): void;
							public getFillTranslate(): java.util.List<java.lang.Double>;
							public getFillOutlineColorString(): string;
							public removeClickListener(param0: any): boolean;
							public getClickListeners(): java.util.List<any>;
							public create(param0: java.util.List<any>): java.util.List<any>;
							public onDestroy(): void;
							public setFillElevationReference(this_: com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference): void;
							public getFillTunnelStructureColorInt(): java.lang.Integer;
							public setFillOutlineColorInt(value: java.lang.Integer): void;
							public create(it: com.mapbox.geojson.FeatureCollection): java.util.List<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation>;
							public getFillOpacity(): java.lang.Double;
							public constructor(belowL_a92: com.mapbox.maps.plugin.delegates.MapDelegateProvider, layerAdded: com.mapbox.maps.plugin.annotation.AnnotationConfig, annota_30d: number, styleM_755: string, layerId: any);
							public delete(it: java.util.List<any>): void;
							public setFillOutlineColorString(value: string): void;
							public getSlot(): string;
							public create(param0: any): any;
							public getMinZoom(): java.lang.Double;
							public getDragListeners(): java.util.List<any>;
							public getFillTunnelStructureColorString(): string;
							public getFillColorString(): string;
							public setFillConstructBridgeGuardRail(value: java.lang.Boolean): void;
							public setFillBridgeGuardRailColorUseTheme(value: string): void;
							public setFillAntialias(this_: java.lang.Boolean): void;
							public getFillBridgeGuardRailColorString(): string;
							public getFillPattern(): string;
							public setFillTunnelStructureColorUseTheme(value: string): void;
							public addLongClickListener(param0: any): boolean;
							public create(it: any): any;
							public deleteAll(): void;
							public setFillPattern(value: string): void;
							public getLayerFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public getFillElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.FillElevationReference;
							public getFillOutlineColorInt(): java.lang.Integer;
						}
						export namespace PolygonAnnotationManager {
							export namespace PolygonAnnotationManager {
								export namespace Companion {
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PolygonAnnotationOptions extends com.mapbox.maps.plugin.annotation.AnnotationOptions<com.mapbox.geojson.Polygon,com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions>;
							public static PROPERTY_FILL_CONSTRUCT_BRIDGE_GUARD_RAIL: string; // "fill-construct-bridge-guard-rail"
							public static PROPERTY_FILL_SORT_KEY: string; // "fill-sort-key"
							public static PROPERTY_FILL_BRIDGE_GUARD_RAIL_COLOR: string; // "fill-bridge-guard-rail-color"
							public static PROPERTY_FILL_COLOR: string; // "fill-color"
							public static PROPERTY_FILL_OPACITY: string; // "fill-opacity"
							public static PROPERTY_FILL_OUTLINE_COLOR: string; // "fill-outline-color"
							public static PROPERTY_FILL_PATTERN: string; // "fill-pattern"
							public static PROPERTY_FILL_TUNNEL_STRUCTURE_COLOR: string; // "fill-tunnel-structure-color"
							public static PROPERTY_FILL_Z_OFFSET: string; // "fill-z-offset"
							public static PROPERTY_FILL_BRIDGE_GUARD_RAIL_COLOR_USE_THEME: string; // "fill-bridge-guard-rail-color-use-theme"
							public static PROPERTY_FILL_COLOR_USE_THEME: string; // "fill-color-use-theme"
							public static PROPERTY_FILL_OUTLINE_COLOR_USE_THEME: string; // "fill-outline-color-use-theme"
							public static PROPERTY_FILL_TUNNEL_STRUCTURE_COLOR_USE_THEME: string; // "fill-tunnel-structure-color-use-theme"
							public setFillTunnelStructureColor(fillTu_4ba: string): void;
							public setFillBridgeGuardRailColorUseTheme(fillBr_cd1: string): void;
							public getFillColorUseTheme(): string;
							public setFillOpacity(fillOp_2dd: java.lang.Double): void;
							public getFillZOffset(): java.lang.Double;
							public withFillSortKey(fillSo_0b3: number): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillOutlineColor(fillOu_a31: number): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public setFillConstructBridgeGuardRail(fillCo_3b1: java.lang.Boolean): void;
							public setFillBridgeGuardRailColor(fillBr_a75: string): void;
							public withGeometry(geometry: com.mapbox.geojson.Polygon): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillBridgeGuardRailColor(fillBr_a75: number): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public setFillOutlineColor(fillOu_a31: string): void;
							public getFillTunnelStructureColor(): string;
							public getFillSortKey(): java.lang.Double;
							public withFillOutlineColorUseTheme(fillOu_f0d: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public build(it: string, i_a_le_e3b: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.Polygon,com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,any,any,any,any,any>): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation;
							public getFillOutlineColorUseTheme(): string;
							public getGeometry(): com.mapbox.geojson.Polygon;
							public getFillTunnelStructureColorUseTheme(): string;
							public withFillOpacity(fillOp_2dd: number): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillPattern(fillPa_4e2: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillZOffset(fillZO_111: number): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillOutlineColor(fillOu_a31: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillTunnelStructureColorUseTheme(fillTu_a9a: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withData(jsonEl_fb5: com.google.gson.JsonElement): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public getFillConstructBridgeGuardRail(): java.lang.Boolean;
							public setFillTunnelStructureColorUseTheme(fillTu_a9a: string): void;
							public getFillBridgeGuardRailColorUseTheme(): string;
							public withFillTunnelStructureColor(fillTu_4ba: number): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillColorUseTheme(fillCo_8ef: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillConstructBridgeGuardRail(fillCo_3b1: boolean): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public withFillTunnelStructureColor(fillTu_4ba: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public getFillBridgeGuardRailColor(): string;
							public withFillBridgeGuardRailColor(fillBr_a75: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public getData(): com.google.gson.JsonElement;
							public getFillColor(): string;
							public setFillColorUseTheme(fillCo_8ef: string): void;
							public setFillPattern(fillPa_4e2: string): void;
							public getFillOutlineColor(): string;
							public getPoints(): java.util.List<java.util.List<com.mapbox.geojson.Point>>;
							public getFillOpacity(): java.lang.Double;
							public build(param0: string, param1: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): any;
							public withFillColor(fillColor: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public setFillZOffset(fillZO_111: java.lang.Double): void;
							public withDraggable(draggable: boolean): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public constructor();
							public setFillColor(fillColor: string): void;
							public setFillOutlineColorUseTheme(fillOu_f0d: string): void;
							public setFillSortKey(fillSo_0b3: java.lang.Double): void;
							public withFillBridgeGuardRailColorUseTheme(fillBr_cd1: string): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public getFillPattern(): string;
							public withFillColor(fillColor: number): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
							public getDraggable(): boolean;
							public withPoints(points: java.util.List<any>): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
						}
						export namespace PolygonAnnotationOptions {
							export namespace PolygonAnnotationOptions {
								export namespace Companion {
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PolylineAnnotation extends com.mapbox.maps.plugin.annotation.Annotation<com.mapbox.geojson.LineString> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation>;
							public static ID_KEY: string; // "PolylineAnnotation"
							public getLineBorderColorInt(): java.lang.Integer;
							public setLineOffset(value: java.lang.Double): void;
							public setLineWidth(value: java.lang.Double): void;
							public getLineSortKey(): java.lang.Double;
							public getLineColorInt(): java.lang.Integer;
							public getLineBorderColorString(): string;
							public setLineZOffset(value: java.lang.Double): void;
							public getLineBorderColorUseTheme(): string;
							public setLineColorString(value: string): void;
							public setLineSortKey(value: java.lang.Double): void;
							public setUsedDataDrivenProperties(): void;
							public getLineWidth(): java.lang.Double;
							public getLineBlur(): java.lang.Double;
							public setLineJoin(value: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): void;
							public setLineBorderColorInt(value: java.lang.Integer): void;
							public setLinePattern(value: string): void;
							public getLineOffset(): java.lang.Double;
							public setLineBlur(value: java.lang.Double): void;
							public getLineZOffset(): java.lang.Double;
							public setLineColorUseTheme(value: string): void;
							public getPoints(): java.util.List<com.mapbox.geojson.Point>;
							public getLineJoin(): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
							public setLineBorderColorUseTheme(value: string): void;
							public constructor(id: string, annota_bb7: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.LineString,com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,any,any,any,any,any>, jsonObject: com.google.gson.JsonObject, geometry: com.mapbox.geojson.LineString);
							public getLinePattern(): string;
							public getType(): com.mapbox.maps.plugin.annotation.AnnotationType;
							public getLineOpacity(): java.lang.Double;
							public getLineColorUseTheme(): string;
							public setLineOpacity(value: java.lang.Double): void;
							public setPoints(value: java.util.List<com.mapbox.geojson.Point>): void;
							public constructor(id: string, jsonObject: com.google.gson.JsonObject, geometry: any);
							public getLineBorderWidth(): java.lang.Double;
							public setLineGapWidth(value: java.lang.Double): void;
							public getOffsetGeometry(it: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, item_iv_iv: com.mapbox.android.gestures.MoveDistancesObject): com.mapbox.geojson.LineString;
							public getLineColorString(): string;
							public getLineGapWidth(): java.lang.Double;
							public setLineBorderWidth(value: java.lang.Double): void;
							public setLineColorInt(value: java.lang.Integer): void;
							public setLineBorderColorString(value: string): void;
							public getOffsetGeometry(param0: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate, param1: com.mapbox.android.gestures.MoveDistancesObject): any;
						}
						export namespace PolylineAnnotation {
							export namespace PolylineAnnotation {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PolylineAnnotationManager extends com.mapbox.maps.plugin.annotation.AnnotationManagerImpl<com.mapbox.geojson.LineString,com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions,com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationDragListener,com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationClickListener,com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationLongClickListener,com.mapbox.maps.plugin.annotation.generated.OnPolylineAnnotationInteractionListener,com.mapbox.maps.extension.style.layers.generated.LineLayer> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationManager>;
							public setLineDasharray(this_: java.util.List<java.lang.Double>): void;
							public getMaxZoom(): java.lang.Double;
							public getLineTrimColorUseTheme(): string;
							public getLineColorInt(): java.lang.Integer;
							public update(param0: any): void;
							public setLineTrimColorUseTheme(this_: string): void;
							public setLineSortKey(value: java.lang.Double): void;
							public selectAnnotation(param0: any): void;
							public setLineCutoutOpacity(this_: java.lang.Double): void;
							public setLineJoin(value: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): void;
							public setLineBlur(value: java.lang.Double): void;
							public setLineTranslate(this_: java.util.List<java.lang.Double>): void;
							public getAnnotations(): java.util.List<any>;
							public addClickListener(param0: any): boolean;
							public setLineRoundLimit(this_: java.lang.Double): void;
							public setLineBorderColorUseTheme(value: string): void;
							public enableDataDrivenProperty(param0: string): void;
							public setLinePatternCrossFade(this_: java.lang.Double): void;
							public setMinZoom(this_: java.lang.Double): void;
							public constructor(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider, annota_ec6: com.mapbox.maps.plugin.annotation.AnnotationConfig);
							public getLineOpacity(): java.lang.Double;
							public setLineCrossSlope(this_: java.lang.Double): void;
							public setLineOpacity(value: java.lang.Double): void;
							public removeLongClickListener(param0: any): boolean;
							public getLineGradientUseTheme(): string;
							public getLineElevationReference(): com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference;
							public delete(param0: java.util.List<any>): void;
							public create(it: com.mapbox.geojson.FeatureCollection): java.util.List<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation>;
							public getInteractionListener(): java.util.List<any>;
							public create(json: string): java.util.List<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation>;
							public setLineColorInt(value: java.lang.Integer): void;
							public removeInteractionListener(param0: any): boolean;
							public setMaxZoom(this_: java.lang.Double): void;
							public setLineCutoutWidth(this_: java.lang.Double): void;
							public removeDragListener(param0: any): boolean;
							public getLineBorderColorInt(): java.lang.Integer;
							public setLineWidth(value: java.lang.Double): void;
							public setLineOcclusionOpacity(this_: java.lang.Double): void;
							public setLineZOffset(value: java.lang.Double): void;
							public getLineBorderColorUseTheme(): string;
							public getLineTranslate(): java.util.List<java.lang.Double>;
							public onDestroy(): void;
							public getLineTrimColorString(): string;
							public getLineWidth(): java.lang.Double;
							public getLineBlur(): java.lang.Double;
							public constructor(belowL_a92: com.mapbox.maps.plugin.delegates.MapDelegateProvider, layerAdded: com.mapbox.maps.plugin.annotation.AnnotationConfig, annota_30d: number, styleM_755: string, layerId: any);
							public setLineMiterLimit(this_: java.lang.Double): void;
							public getLineDepthOcclusionFactor(): java.lang.Double;
							public setLineTranslateAnchor(this_: com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor): void;
							public setLineColorUseTheme(value: string): void;
							public setLineCap(this_: com.mapbox.maps.extension.style.layers.properties.generated.LineCap): void;
							public getLineCutoutOpacity(): java.lang.Double;
							public getSlot(): string;
							public create(param0: any): any;
							public getMinZoom(): java.lang.Double;
							public getLineTrimFadeRange(): java.util.List<java.lang.Double>;
							public getDragListeners(): java.util.List<any>;
							public getLineColorUseTheme(): string;
							public setLineTrimFadeRange(this_: java.util.List<java.lang.Double>): void;
							public getLineTrimColorInt(): java.lang.Integer;
							public setLineElevationReference(this_: com.mapbox.maps.extension.style.layers.properties.generated.LineElevationReference): void;
							public getLineDasharray(): java.util.List<java.lang.Double>;
							public getLineBorderWidth(): java.lang.Double;
							public addLongClickListener(param0: any): boolean;
							public create(it: any): any;
							public getLineTranslateAnchor(): com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor;
							public deleteAll(): void;
							public getLayerFilter(): com.mapbox.maps.extension.style.expressions.generated.Expression;
							public setLineTrimColorString(this_: string): void;
							public getDelegateProvider(): com.mapbox.maps.plugin.delegates.MapDelegateProvider;
							public getLineBorderColorString(): string;
							public getLongClickListeners(): java.util.List<any>;
							/** @deprecated */
							public setLineTrimColor(value: string): void;
							public setLineColorString(value: string): void;
							public update(param0: java.util.List<any>): void;
							public create(it: java.util.List<any>): java.util.List<any>;
							public setLineBorderColorInt(value: java.lang.Integer): void;
							public getLineRoundLimit(): java.lang.Double;
							public getLineOffset(): java.lang.Double;
							public setSlot(this_: string): void;
							public addDragListener(param0: any): boolean;
							public getLineZOffset(): java.lang.Double;
							public update(it: java.util.List<any>): void;
							public setLayerFilter(it: com.mapbox.maps.extension.style.expressions.generated.Expression): void;
							public getLineCap(): com.mapbox.maps.extension.style.layers.properties.generated.LineCap;
							public onSizeChanged(param0: number, param1: number): void;
							public getLineEmissiveStrength(): java.lang.Double;
							public setDataDrivenPropertyIsUsed(property: string): void;
							public getLineCrossSlope(): java.lang.Double;
							public getLineCutoutWidth(): java.lang.Double;
							public getLineWidthUnit(): com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit;
							public delete(param0: any): void;
							public addInteractionListener(param0: any): boolean;
							public getAnnotationIdKey(): string;
							public setLineBorderColorString(value: string): void;
							public getLineTrimOffset(): java.util.List<java.lang.Double>;
							public setLineOffset(value: java.lang.Double): void;
							public getLineSortKey(): java.lang.Double;
							public setLineDepthOcclusionFactor(this_: java.lang.Double): void;
							public removeClickListener(param0: any): boolean;
							public getClickListeners(): java.util.List<any>;
							/** @deprecated */
							public getLineTrimColor(): string;
							public getLinePatternCrossFade(): java.lang.Double;
							public create(param0: java.util.List<any>): java.util.List<any>;
							public getLineOcclusionOpacity(): java.lang.Double;
							public setLinePattern(value: string): void;
							public delete(it: java.util.List<any>): void;
							public getLineJoin(): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
							public setLineGradientUseTheme(this_: string): void;
							public getLinePattern(): string;
							public setLineWidthUnit(this_: com.mapbox.maps.extension.style.layers.properties.generated.LineWidthUnit): void;
							public setLineTrimOffset(this_: java.util.List<java.lang.Double>): void;
							public setLineTrimColorInt(this_: java.lang.Integer): void;
							public setLineGapWidth(value: java.lang.Double): void;
							public getLineColorString(): string;
							public getLineGapWidth(): java.lang.Double;
							public setLineBorderWidth(value: java.lang.Double): void;
							public setLineEmissiveStrength(this_: java.lang.Double): void;
							public getLineMiterLimit(): java.lang.Double;
						}
						export namespace PolylineAnnotationManager {
							export namespace PolylineAnnotationManager {
								export namespace Companion {
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
									function getID_GENERATOR(): java.util.concurrent.atomic.AtomicLong;
									function setID_GENERATOR(iD_GEN_a9a: java.util.concurrent.atomic.AtomicLong): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace annotation {
					export namespace generated {
						export class PolylineAnnotationOptions extends com.mapbox.maps.plugin.annotation.AnnotationOptions<com.mapbox.geojson.LineString,com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions>;
							public static PROPERTY_LINE_JOIN: string; // "line-join"
							public static PROPERTY_LINE_SORT_KEY: string; // "line-sort-key"
							public static PROPERTY_LINE_Z_OFFSET: string; // "line-z-offset"
							public static PROPERTY_LINE_BLUR: string; // "line-blur"
							public static PROPERTY_LINE_BORDER_COLOR: string; // "line-border-color"
							public static PROPERTY_LINE_BORDER_WIDTH: string; // "line-border-width"
							public static PROPERTY_LINE_COLOR: string; // "line-color"
							public static PROPERTY_LINE_GAP_WIDTH: string; // "line-gap-width"
							public static PROPERTY_LINE_OFFSET: string; // "line-offset"
							public static PROPERTY_LINE_OPACITY: string; // "line-opacity"
							public static PROPERTY_LINE_PATTERN: string; // "line-pattern"
							public static PROPERTY_LINE_WIDTH: string; // "line-width"
							public static PROPERTY_LINE_BORDER_COLOR_USE_THEME: string; // "line-border-color-use-theme"
							public static PROPERTY_LINE_COLOR_USE_THEME: string; // "line-color-use-theme"
							public setLineBorderColor(lineBo_a94: string): void;
							public setLineWidth(lineWidth: java.lang.Double): void;
							public withLineZOffset(lineZO_43c: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public getLineOffset(): java.lang.Double;
							public getLineZOffset(): java.lang.Double;
							public setLineBlur(lineBlur: java.lang.Double): void;
							public build(it: string, i_a_le_795: com.mapbox.maps.plugin.annotation.AnnotationManager<com.mapbox.geojson.LineString,com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,any,any,any,any,any>): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation;
							public setLineBorderWidth(lineBo_7bb: java.lang.Double): void;
							public getGeometry(): com.mapbox.geojson.LineString;
							public withLineOpacity(lineOp_2f4: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public setLineGapWidth(lineGa_9f3: java.lang.Double): void;
							public withLinePattern(linePa_ce7: string): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withData(jsonEl_fb5: com.google.gson.JsonElement): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public getLineOpacity(): java.lang.Double;
							public withLineGapWidth(lineGa_9f3: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public setLineSortKey(lineSo_c76: java.lang.Double): void;
							public setLineColorUseTheme(lineCo_b76: string): void;
							public getLineBorderColor(): string;
							public withLineColorUseTheme(lineCo_b76: string): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withLineBorderWidth(lineBo_7bb: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withGeometry(geometry: com.mapbox.geojson.LineString): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withLineColor(lineColor: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public getLineSortKey(): java.lang.Double;
							public withLineBorderColorUseTheme(lineBo_7f0: string): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withLineColor(lineColor: string): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public getLineBorderColorUseTheme(): string;
							public getData(): com.google.gson.JsonElement;
							public setLineOffset(lineOffset: java.lang.Double): void;
							public getLineWidth(): java.lang.Double;
							public getLineBlur(): java.lang.Double;
							public build(param0: string, param1: com.mapbox.maps.plugin.annotation.AnnotationManager<any,any,any,any,any,any,any>): any;
							public withLineBlur(lineBlur: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withLineOffset(lineOffset: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public setLineOpacity(lineOp_2f4: java.lang.Double): void;
							public getLineJoin(): com.mapbox.maps.extension.style.layers.properties.generated.LineJoin;
							public getPoints(): java.util.List<com.mapbox.geojson.Point>;
							public setLinePattern(linePa_ce7: string): void;
							public constructor();
							public setLineJoin(lineJoin: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): void;
							public getLinePattern(): string;
							public setLineBorderColorUseTheme(lineBo_7f0: string): void;
							public getLineColorUseTheme(): string;
							public withLineSortKey(lineSo_c76: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withLineJoin(lineJoin: com.mapbox.maps.extension.style.layers.properties.generated.LineJoin): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withDraggable(draggable: boolean): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withLineBorderColor(lineBo_a94: string): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public getLineColor(): string;
							public getLineBorderWidth(): java.lang.Double;
							public withPoints(points: java.util.List<com.mapbox.geojson.Point>): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public withLineWidth(lineWidth: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public getLineGapWidth(): java.lang.Double;
							public getDraggable(): boolean;
							public withLineBorderColor(lineBo_a94: number): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
							public setLineColor(lineColor: string): void;
							public setLineZOffset(lineZO_43c: java.lang.Double): void;
						}
						export namespace PolylineAnnotationOptions {
							export namespace PolylineAnnotationOptions {
								export namespace Companion {
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
									function fromFeature(this_: com.mapbox.geojson.Feature): com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class Attribution extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.Attribution>;
						public static OSM: string; // "OpenStreetMap"
						public static OSM_ABBR: string; // "OSM"
						public static TELEMETRY_SETTINGS: string; // "Mapbox Telemetry"
						public static PRIVACY_POLICY: string; // "Mapbox Privacy Policy"
						public static GEOFENCING: string; // "Mapbox Geofencing"
						public static ABOUT_MAPS_URL: string; // "https://www.mapbox.com/about/maps/"
						public static ABOUT_TELEMETRY_URL: string; // "https://www.mapbox.com/telemetry/"
						public static PRIVACY_POLICY_URL: string; // "https://www.mapbox.com/legal/privacy#product-privacy-policy/"
						public static GEOFENCING_URL_MARKER: string; // "geofencing_url_marker"
						public getTitleAbbreviated(): string;
						public copy(title: string, url: string): com.mapbox.maps.plugin.attribution.Attribution;
						public equals(other: any): boolean;
						public component2(): string;
						public constructor(title: string, url: string);
						public component1(): string;
						public hashCode(): number;
						public getUrl(): string;
						public toString(): string;
						public getTitle(): string;
					}
					export namespace Attribution {
						export namespace Attribution {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionDialogManager extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionDialogManager>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.attribution.AttributionDialogManager interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							showAttribution(param0: com.mapbox.maps.plugin.delegates.MapAttributionDelegate): void;
							onStop(): void;
						});
						public constructor();
						public showAttribution(param0: com.mapbox.maps.plugin.delegates.MapAttributionDelegate): void;
						public onStop(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionDialogManagerImpl extends java.lang.Object implements com.mapbox.maps.plugin.attribution.AttributionDialogManager, globalAndroid.content.DialogInterface.OnClickListener {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionDialogManagerImpl>;
						public onClick(param0: globalAndroid.content.DialogInterface, param1: number): void;
						public setDialog$plugin_attribution_release(dialog_5ac: androidx.appcompat.app.AlertDialog): void;
						public onClick(this_: globalAndroid.content.DialogInterface, dialog: number): void;
						public getGeofencingDialog$plugin_attribution_release(): androidx.appcompat.app.AlertDialog;
						public showAttribution(param0: com.mapbox.maps.plugin.delegates.MapAttributionDelegate): void;
						public showAttribution(isActi_dad: com.mapbox.maps.plugin.delegates.MapAttributionDelegate): void;
						public getTelemetryDialog$plugin_attribution_release(): androidx.appcompat.app.AlertDialog;
						public setTelemetryDialog$plugin_attribution_release(teleme_38f: androidx.appcompat.app.AlertDialog): void;
						public setGeofencingDialog$plugin_attribution_release(geofen_c93: androidx.appcompat.app.AlertDialog): void;
						public getDialog$plugin_attribution_release(): androidx.appcompat.app.AlertDialog;
						public onStop(): void;
						public constructor(context: globalAndroid.content.Context);
					}
					export namespace AttributionDialogManagerImpl {
						export namespace AttributionDialogManagerImpl {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionParserConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionParserConfig>;
						public setWithTelemetryAttribution(withTe_249: boolean): void;
						public constructor(withIm_cb7: boolean, withCo_a7f: boolean, withTe_249: boolean, withMa_0cb: boolean, withMa_5ac: boolean);
						public getWithMapboxPrivacyPolicy(): boolean;
						public constructor();
						public getWithImproveMap(): boolean;
						public getWithTelemetryAttribution(): boolean;
						public setWithCopyrightSign(withCo_a7f: boolean): void;
						public setWithMapboxPrivacyPolicy(withMa_5ac: boolean): void;
						public constructor(withIm_cb7: boolean);
						public constructor(withIm_cb7: boolean, withCo_a7f: boolean, withTe_249: boolean, withMa_0cb: boolean, withMa_5ac: boolean, withMa_04f: boolean);
						public setWithMapboxGeofencingConsent(withMa_04f: boolean): void;
						public setWithMapboxAttribution(withMa_0cb: boolean): void;
						public constructor(withIm_cb7: boolean, withCo_a7f: boolean, withTe_249: boolean);
						public constructor(withIm_cb7: boolean, withCo_a7f: boolean, withTe_249: boolean, withMa_0cb: boolean);
						public getWithCopyrightSign(): boolean;
						public getWithMapboxGeofencingConsent(): boolean;
						public getWithMapboxAttribution(): boolean;
						public constructor(withIm_cb7: boolean, withCo_a7f: boolean);
						public setWithImproveMap(withIm_cb7: boolean): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionPlugin extends java.lang.Object implements com.mapbox.maps.plugin.ViewPlugin, com.mapbox.maps.plugin.LifecyclePlugin, com.mapbox.maps.plugin.attribution.generated.AttributionSettingsInterface {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.attribution.AttributionPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							setCustomAttributionDialogManager(param0: com.mapbox.maps.plugin.attribution.AttributionDialogManager): void;
							setContentDescription(param0: string): void;
							getMapAttributionDelegate(): com.mapbox.maps.plugin.delegates.MapAttributionDelegate;
							bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
							onPluginView(param0: globalAndroid.view.View): void;
							onStart(): void;
							onStop(): void;
							getSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
							updateSettings(param0: any): void;
							getEnabled(): boolean;
							setEnabled(param0: boolean): void;
							getIconColor(): number;
							setIconColor(param0: number): void;
							getPosition(): number;
							setPosition(param0: number): void;
							getMarginLeft(): number;
							setMarginLeft(param0: number): void;
							getMarginTop(): number;
							setMarginTop(param0: number): void;
							getMarginRight(): number;
							setMarginRight(param0: number): void;
							getMarginBottom(): number;
							setMarginBottom(param0: number): void;
							getClickable(): boolean;
							setClickable(param0: boolean): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public setIconColor(param0: number): void;
						public getMapAttributionDelegate(): com.mapbox.maps.plugin.delegates.MapAttributionDelegate;
						public updateSettings(param0: any): void;
						public getClickable(): boolean;
						public getMarginTop(): number;
						public cleanup(): void;
						public getSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public getMarginLeft(): number;
						public setMarginTop(param0: number): void;
						public setClickable(param0: boolean): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getPosition(): number;
						public getMarginBottom(): number;
						public setCustomAttributionDialogManager(param0: com.mapbox.maps.plugin.attribution.AttributionDialogManager): void;
						public onStop(): void;
						public setEnabled(param0: boolean): void;
						public getEnabled(): boolean;
						public setMarginLeft(param0: number): void;
						public setMarginBottom(param0: number): void;
						public initialize(): void;
						public setContentDescription(param0: string): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public getIconColor(): number;
						public setPosition(param0: number): void;
						public onStart(): void;
						public getMarginRight(): number;
					}
					export namespace AttributionPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionPlugin.DefaultImpls>;
							public static setContentDescription(this_: com.mapbox.maps.plugin.attribution.AttributionPlugin, conten_4b4: string): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.attribution.AttributionPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							public static initialize(this_: com.mapbox.maps.plugin.attribution.AttributionPlugin): void;
							public static onPluginView(this_: com.mapbox.maps.plugin.attribution.AttributionPlugin, view: globalAndroid.view.View): void;
							public static onStop(this_: com.mapbox.maps.plugin.attribution.AttributionPlugin): void;
							public static cleanup(this_: com.mapbox.maps.plugin.attribution.AttributionPlugin): void;
							public static onStart(this_: com.mapbox.maps.plugin.attribution.AttributionPlugin): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionPluginImpl extends com.mapbox.maps.plugin.attribution.generated.AttributionSettingsBase implements com.mapbox.maps.plugin.attribution.AttributionPlugin, globalAndroid.view.View.OnClickListener {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionPluginImpl>;
						public setIconColor(param0: number): void;
						public getMapAttributionDelegate(): com.mapbox.maps.plugin.delegates.MapAttributionDelegate;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public updateSettings(param0: any): void;
						public getClickable(): boolean;
						public constructor(viewIm_623: any);
						public getMarginTop(): number;
						public cleanup(): void;
						public getSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public getMarginLeft(): number;
						public constructor();
						public onPluginView(view: globalAndroid.view.View): void;
						public getInternalSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
						public setContentDescription(conten_4b4: string): void;
						public setMarginTop(param0: number): void;
						public onClick(v: globalAndroid.view.View): void;
						public setClickable(param0: boolean): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getPosition(): number;
						public getMarginBottom(): number;
						public setCustomAttributionDialogManager(dialog_218: com.mapbox.maps.plugin.attribution.AttributionDialogManager): void;
						public setCustomAttributionDialogManager(param0: com.mapbox.maps.plugin.attribution.AttributionDialogManager): void;
						public onStop(): void;
						public setEnabled(param0: boolean): void;
						public applySettings(): void;
						public getEnabled(): boolean;
						public setMarginLeft(param0: number): void;
						public setMarginBottom(param0: number): void;
						public bind(mapView: globalAndroid.widget.FrameLayout, attrs: globalAndroid.util.AttributeSet, pixelRatio: number): globalAndroid.view.View;
						public setInternalSettings(intern_bcd: com.mapbox.maps.plugin.attribution.generated.AttributionSettings): void;
						public initialize(): void;
						public setContentDescription(param0: string): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public getIconColor(): number;
						public setPosition(param0: number): void;
						public onStart(): void;
						public onClick(param0: globalAndroid.view.View): void;
						public getMarginRight(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionUtils>;
						public static getAttribution(this_a_cbe: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.attribution.AttributionPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionView extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionView>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.attribution.AttributionView interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							setEnable(param0: boolean): void;
							setGravity(param0: number): void;
							setIconColor(param0: number): void;
							setAttributionMargins(param0: number, param1: number, param2: number, param3: number): void;
							setViewOnClickListener(param0: globalAndroid.view.View.OnClickListener): void;
							setContentDescription(param0: string): void;
							requestLayout(): void;
						});
						public constructor();
						public setViewOnClickListener(param0: globalAndroid.view.View.OnClickListener): void;
						public setIconColor(param0: number): void;
						public setContentDescription(param0: string): void;
						public requestLayout(): void;
						public setAttributionMargins(param0: number, param1: number, param2: number, param3: number): void;
						public setEnable(param0: boolean): void;
						public setGravity(param0: number): void;
					}
					export namespace AttributionView {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionView.DefaultImpls>;
							public static setContentDescription(this_: com.mapbox.maps.plugin.attribution.AttributionView, conten_4b4: string): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class AttributionViewImpl implements com.mapbox.maps.plugin.attribution.AttributionView {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.AttributionViewImpl>;
						public setGravity(gravity: number): void;
						public setContentDescription(conten_4b4: string): void;
						public setAttributionMargins(this_s_ca7: number, this_: number, left: number, top: number): void;
						public setIconColor(param0: number): void;
						public setEnable(param0: boolean): void;
						public setViewOnClickListener(listener: globalAndroid.view.View.OnClickListener): void;
						public setIconColor(color: number): void;
						public constructor(it: globalAndroid.content.Context, this_: globalAndroid.util.AttributeSet, context: number);
						public setEnable(enabled: boolean): void;
						public setViewOnClickListener(param0: globalAndroid.view.View.OnClickListener): void;
						public setContentDescription(param0: string): void;
						public requestLayout(): void;
						public setAttributionMargins(param0: number, param1: number, param2: number, param3: number): void;
						public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet);
						public constructor(context: globalAndroid.content.Context);
						public setGravity(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.attribution"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export class OnAttributionClickListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.OnAttributionClickListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.attribution.OnAttributionClickListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onAttributionClick(): void;
						});
						public constructor();
						public onAttributionClick(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export namespace generated {
						export class AttributionAttributeParser extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionAttributeParser>;
							public static INSTANCE: com.mapbox.maps.plugin.attribution.generated.AttributionAttributeParser;
							public parseAttributionSettings(this_: globalAndroid.content.Context, context: globalAndroid.util.AttributeSet, attrs: number): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export namespace generated {
						export class AttributionSettings extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionSettings>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.attribution.generated.AttributionSettings>;
							public getPosition(): number;
							public hashCode(): number;
							public getMarginBottom(): number;
							public getIconColor(): number;
							public toString(): string;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public getMarginRight(): number;
							public toBuilder(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
							public getEnabled(): boolean;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public equals(other: any): boolean;
							public describeContents(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public getMarginLeft(): number;
						}
						export namespace AttributionSettings {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder>;
								public setEnabled(enabled: boolean): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public setMarginRight(margin_9af: number): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public setMarginTop(marginTop: number): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public getMarginRight(): number;
								public setIconColor(iconColor: number): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public getPosition(): number;
								public getIconColor(): number;
								public constructor();
								public getMarginTop(): number;
								public setMarginBottom(margin_7d4: number): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public getMarginLeft(): number;
								public setClickable(clickable: boolean): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public setMarginLeft(marginLeft: number): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public build(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
								public getMarginBottom(): number;
								public getEnabled(): boolean;
								public setPosition(position: number): com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Builder;
								public getClickable(): boolean;
							}
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.attribution.generated.AttributionSettings> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionSettings.Creator>;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.attribution.generated.AttributionSettings>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export namespace generated {
						export abstract class AttributionSettingsBase extends java.lang.Object implements com.mapbox.maps.plugin.attribution.generated.AttributionSettingsInterface {
							public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionSettingsBase>;
							public getPosition(): number;
							public setClickable(param0: boolean): void;
							public setClickable(value: boolean): void;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public getMarginRight(): number;
							public getEnabled(): boolean;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public setEnabled(value: boolean): void;
							public setMarginBottom(value: number): void;
							public setEnabled(param0: boolean): void;
							public getMarginLeft(): number;
							public constructor();
							public getSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
							public setMarginTop(value: number): void;
							public getMarginBottom(): number;
							public getIconColor(): number;
							public getInternalSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
							public setMarginRight(param0: number): void;
							public updateSettings(block: any): void;
							public setIconColor(param0: number): void;
							public setPosition(param0: number): void;
							public setMarginRight(value: number): void;
							public setInternalSettings(param0: com.mapbox.maps.plugin.attribution.generated.AttributionSettings): void;
							public setMarginLeft(param0: number): void;
							public setPosition(value: number): void;
							public applySettings(): void;
							public setMarginBottom(param0: number): void;
							public setIconColor(value: number): void;
							public setMarginLeft(value: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export namespace generated {
						export class AttributionSettingsData extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionSettingsData>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.attribution.generated.AttributionSettingsData>;
							public setMarginLeft(marginLeft: number): void;
							public getPosition(): number;
							public component1(): boolean;
							public hashCode(): number;
							public setEnabled(enabled: boolean): void;
							public component2(): number;
							public component5(): number;
							public toString(): string;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public component8(): boolean;
							public getMarginRight(): number;
							public getEnabled(): boolean;
							public setMarginRight(margin_9af: number): void;
							public equals(other: any): boolean;
							public describeContents(): number;
							public component6(): number;
							public component3(): number;
							public getMarginLeft(): number;
							public setClickable(clickable: boolean): void;
							public setPosition(position: number): void;
							public component7(): number;
							public getMarginBottom(): number;
							public getIconColor(): number;
							public setMarginTop(marginTop: number): void;
							public copy(enabled: boolean, iconColor: number, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number, clickable: boolean): com.mapbox.maps.plugin.attribution.generated.AttributionSettingsData;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public component4(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public setMarginBottom(margin_7d4: number): void;
							public setIconColor(iconColor: number): void;
							public constructor(enabled: boolean, iconColor: number, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number, clickable: boolean);
						}
						export namespace AttributionSettingsData {
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.attribution.generated.AttributionSettingsData> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionSettingsData.Creator>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.attribution.generated.AttributionSettingsData;
								public constructor();
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.attribution.generated.AttributionSettingsData>;
								public newArray(param0: number): androidNative.Array<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace attribution {
					export namespace generated {
						export class AttributionSettingsInterface extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.attribution.generated.AttributionSettingsInterface>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.attribution.generated.AttributionSettingsInterface interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
								updateSettings(param0: any): void;
								getEnabled(): boolean;
								setEnabled(param0: boolean): void;
								getIconColor(): number;
								setIconColor(param0: number): void;
								getPosition(): number;
								setPosition(param0: number): void;
								getMarginLeft(): number;
								setMarginLeft(param0: number): void;
								getMarginTop(): number;
								setMarginTop(param0: number): void;
								getMarginRight(): number;
								setMarginRight(param0: number): void;
								getMarginBottom(): number;
								setMarginBottom(param0: number): void;
								getClickable(): boolean;
								setClickable(param0: boolean): void;
							});
							public constructor();
							public getSettings(): com.mapbox.maps.plugin.attribution.generated.AttributionSettings;
							public getPosition(): number;
							public setClickable(param0: boolean): void;
							public getMarginBottom(): number;
							public getIconColor(): number;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public setMarginRight(param0: number): void;
							public setIconColor(param0: number): void;
							public getMarginRight(): number;
							public setPosition(param0: number): void;
							public getEnabled(): boolean;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public setMarginLeft(param0: number): void;
							public setEnabled(param0: boolean): void;
							public setMarginBottom(param0: number): void;
							public getMarginLeft(): number;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace camera {
					export namespace animation {
						export class BuildConfig extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.camera.animation.BuildConfig>;
							public static DEBUG: boolean; // 0
							public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.camera.animation"
							public static BUILD_TYPE: string; // "release"
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.compass.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.compass"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export class CompassPlugin extends java.lang.Object implements com.mapbox.maps.plugin.ViewPlugin, com.mapbox.maps.plugin.MapCameraPlugin, com.mapbox.maps.plugin.LifecyclePlugin, com.mapbox.maps.plugin.compass.generated.CompassSettingsInterface {
						public static class: java.lang.Class<com.mapbox.maps.plugin.compass.CompassPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.compass.CompassPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							addCompassClickListener(param0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
							removeCompassClickListener(param0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
							onCompassClicked(): void;
							bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
							onPluginView(param0: globalAndroid.view.View): void;
							onCameraMove(param0: com.mapbox.geojson.Point, param1: number, param2: number, param3: number, param4: com.mapbox.maps.EdgeInsets): void;
							onStart(): void;
							onStop(): void;
							getSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
							updateSettings(param0: any): void;
							getEnabled(): boolean;
							setEnabled(param0: boolean): void;
							getPosition(): number;
							setPosition(param0: number): void;
							getMarginLeft(): number;
							setMarginLeft(param0: number): void;
							getMarginTop(): number;
							setMarginTop(param0: number): void;
							getMarginRight(): number;
							setMarginRight(param0: number): void;
							getMarginBottom(): number;
							setMarginBottom(param0: number): void;
							getOpacity(): number;
							setOpacity(param0: number): void;
							getRotation(): number;
							setRotation(param0: number): void;
							getVisibility(): boolean;
							setVisibility(param0: boolean): void;
							getFadeWhenFacingNorth(): boolean;
							setFadeWhenFacingNorth(param0: boolean): void;
							getClickable(): boolean;
							setClickable(param0: boolean): void;
							getImage(): com.mapbox.maps.ImageHolder;
							setImage(param0: com.mapbox.maps.ImageHolder): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public getSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
						public removeCompassClickListener(param0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
						public onCompassClicked(): void;
						public setFadeWhenFacingNorth(param0: boolean): void;
						public updateSettings(param0: any): void;
						public getClickable(): boolean;
						public setVisibility(param0: boolean): void;
						public getFadeWhenFacingNorth(): boolean;
						public setRotation(param0: number): void;
						public getMarginTop(): number;
						public cleanup(): void;
						public getRotation(): number;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public getMarginLeft(): number;
						public setOpacity(param0: number): void;
						public getVisibility(): boolean;
						public setMarginTop(param0: number): void;
						public setClickable(param0: boolean): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getPosition(): number;
						public getMarginBottom(): number;
						public getOpacity(): number;
						public onStop(): void;
						public setEnabled(param0: boolean): void;
						public getImage(): com.mapbox.maps.ImageHolder;
						public setImage(param0: com.mapbox.maps.ImageHolder): void;
						public getEnabled(): boolean;
						public setMarginLeft(param0: number): void;
						public setMarginBottom(param0: number): void;
						public onCameraMove(param0: com.mapbox.geojson.Point, param1: number, param2: number, param3: number, param4: com.mapbox.maps.EdgeInsets): void;
						public initialize(): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public addCompassClickListener(param0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
						public setPosition(param0: number): void;
						public onStart(): void;
						public getMarginRight(): number;
					}
					export namespace CompassPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.compass.CompassPlugin.DefaultImpls>;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.compass.CompassPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							public static onStop(this_: com.mapbox.maps.plugin.compass.CompassPlugin): void;
							public static onStart(this_: com.mapbox.maps.plugin.compass.CompassPlugin): void;
							public static onPluginView(this_: com.mapbox.maps.plugin.compass.CompassPlugin, view: globalAndroid.view.View): void;
							public static initialize(this_: com.mapbox.maps.plugin.compass.CompassPlugin): void;
							public static cleanup(this_: com.mapbox.maps.plugin.compass.CompassPlugin): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export class CompassUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.compass.CompassUtils>;
						public static getCompass(this_c_b97: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.compass.CompassPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export class CompassView extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.compass.CompassView>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.compass.CompassView interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							isCompassVisible(): boolean;
							setCompassVisible(param0: boolean): void;
							isCompassEnabled(): boolean;
							setCompassEnabled(param0: boolean): void;
							getCompassImage(): globalAndroid.graphics.drawable.Drawable;
							setCompassImage(param0: globalAndroid.graphics.drawable.Drawable): void;
							getCompassGravity(): number;
							setCompassGravity(param0: number): void;
							getCompassRotation(): number;
							setCompassRotation(param0: number): void;
							setCompassAlpha(param0: number): void;
							setCompassMargins(param0: number, param1: number, param2: number, param3: number): void;
							requestLayout(): void;
						});
						public constructor();
						public getCompassGravity(): number;
						public setCompassGravity(param0: number): void;
						public getCompassRotation(): number;
						public setCompassAlpha(param0: number): void;
						public setCompassEnabled(param0: boolean): void;
						public isCompassEnabled(): boolean;
						public isCompassVisible(): boolean;
						public setCompassRotation(param0: number): void;
						public requestLayout(): void;
						public getCompassImage(): globalAndroid.graphics.drawable.Drawable;
						public setCompassVisible(param0: boolean): void;
						public setCompassMargins(param0: number, param1: number, param2: number, param3: number): void;
						public setCompassImage(param0: globalAndroid.graphics.drawable.Drawable): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export class CompassViewImpl implements com.mapbox.maps.plugin.compass.CompassView {
						public static class: java.lang.Class<com.mapbox.maps.plugin.compass.CompassViewImpl>;
						public getCompassGravity(): number;
						public setCompassGravity(param0: number): void;
						public constructor(it: globalAndroid.content.Context, compas_8a3: globalAndroid.util.AttributeSet, this_: number);
						public getCompassRotation(): number;
						public setCompassAlpha(float_: number): void;
						public setCompassAlpha(param0: number): void;
						public setCompassEnabled(value: boolean): void;
						public setCompassEnabled(param0: boolean): void;
						public setCompassVisible(value: boolean): void;
						public isCompassEnabled(): boolean;
						public setCompassRotation(value: number): void;
						public setCompassMargins(left: number, top: number, right: number, bottom: number): void;
						public injectPresenter$plugin_compass_release(presenter: com.mapbox.maps.plugin.compass.CompassPlugin): void;
						public isCompassVisible(): boolean;
						public setCompassRotation(param0: number): void;
						public setCompassGravity(value: number): void;
						public requestLayout(): void;
						public getCompassImage(): globalAndroid.graphics.drawable.Drawable;
						public setCompassImage(compass: globalAndroid.graphics.drawable.Drawable): void;
						public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet);
						public setCompassVisible(param0: boolean): void;
						public setCompassMargins(param0: number, param1: number, param2: number, param3: number): void;
						public constructor(context: globalAndroid.content.Context);
						public setCompassImage(param0: globalAndroid.graphics.drawable.Drawable): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export class CompassViewPlugin extends com.mapbox.maps.plugin.compass.generated.CompassSettingsBase implements com.mapbox.maps.plugin.compass.CompassPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.compass.CompassViewPlugin>;
						public onCompassClicked(): void;
						public setFadeWhenFacingNorth(param0: boolean): void;
						public getClickable(): boolean;
						public setVisibility(param0: boolean): void;
						public getFadeWhenFacingNorth(): boolean;
						public cleanup(): void;
						public getRotation(): number;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public setOpacity(param0: number): void;
						public getVisibility(): boolean;
						public constructor();
						public setMarginTop(param0: number): void;
						public setClickable(param0: boolean): void;
						public getPosition(): number;
						public getInternalSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
						public onStop(): void;
						public constructor(listen_eef: any, this_a_a2d: globalAndroid.animation.ValueAnimator);
						public setMarginLeft(param0: number): void;
						public initialize(): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public addCompassClickListener(param0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
						public setPosition(param0: number): void;
						public onStart(): void;
						public getSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
						public removeCompassClickListener(param0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
						public removeCompassClickListener(onClic_cf0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public updateSettings(param0: any): void;
						public setBearing$plugin_compass_release(bearin_f0d: number): void;
						public getBearing$plugin_compass_release(): number;
						public onCameraMove(center: com.mapbox.geojson.Point, zoom: number, pitch: number, bearing: number, padding: com.mapbox.maps.EdgeInsets): void;
						public setRotation(param0: number): void;
						public setInternalSettings(intern_bcd: com.mapbox.maps.plugin.compass.generated.CompassSettings): void;
						public getMarginTop(): number;
						public getMarginLeft(): number;
						public onPluginView(view: globalAndroid.view.View): void;
						public addCompassClickListener(onClic_cf0: com.mapbox.maps.plugin.compass.OnCompassClickListener): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getMarginBottom(): number;
						public getOpacity(): number;
						public bind(it: globalAndroid.widget.FrameLayout, this_: globalAndroid.util.AttributeSet, mapView: number): globalAndroid.view.View;
						public setEnabled(param0: boolean): void;
						public getImage(): com.mapbox.maps.ImageHolder;
						public applySettings(): void;
						public setImage(param0: com.mapbox.maps.ImageHolder): void;
						public getEnabled(): boolean;
						public setMarginBottom(param0: number): void;
						public onCameraMove(param0: com.mapbox.geojson.Point, param1: number, param2: number, param3: number, param4: com.mapbox.maps.EdgeInsets): void;
						public setEnabled(value: boolean): void;
						public getMarginRight(): number;
					}
					export namespace CompassViewPlugin {
						export namespace CompassViewPlugin {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export class OnCompassClickListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.compass.OnCompassClickListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.compass.OnCompassClickListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onCompassClick(): void;
						});
						public constructor();
						public onCompassClick(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export namespace generated {
						export class CompassAttributeParser extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassAttributeParser>;
							public static INSTANCE: com.mapbox.maps.plugin.compass.generated.CompassAttributeParser;
							public parseCompassSettings(this_: globalAndroid.content.Context, context: globalAndroid.util.AttributeSet, attrs: number): com.mapbox.maps.plugin.compass.generated.CompassSettings;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export namespace generated {
						export class CompassSettings extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassSettings>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.compass.generated.CompassSettings>;
							public getVisibility(): boolean;
							public getPosition(): number;
							public hashCode(): number;
							public getFadeWhenFacingNorth(): boolean;
							public getMarginBottom(): number;
							public toString(): string;
							public getRotation(): number;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public getMarginRight(): number;
							public getEnabled(): boolean;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public equals(other: any): boolean;
							public describeContents(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public getOpacity(): number;
							public getImage(): com.mapbox.maps.ImageHolder;
							public toBuilder(): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
							public getMarginLeft(): number;
						}
						export namespace CompassSettings {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder>;
								public getMarginRight(): number;
								public getFadeWhenFacingNorth(): boolean;
								public getMarginTop(): number;
								public setImage(image: com.mapbox.maps.ImageHolder): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public build(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
								public getMarginLeft(): number;
								public setFadeWhenFacingNorth(fadeWh_2a0: boolean): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public getMarginBottom(): number;
								public setOpacity(opacity: number): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public getRotation(): number;
								public setPosition(position: number): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public setRotation(rotation: number): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public setMarginRight(margin_9af: number): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public setClickable(clickable: boolean): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public getImage(): com.mapbox.maps.ImageHolder;
								public setMarginTop(marginTop: number): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public getPosition(): number;
								public setMarginLeft(marginLeft: number): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public constructor();
								public getVisibility(): boolean;
								public setEnabled(enabled: boolean): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public getOpacity(): number;
								public setMarginBottom(margin_7d4: number): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public setVisibility(visibility: boolean): com.mapbox.maps.plugin.compass.generated.CompassSettings.Builder;
								public getEnabled(): boolean;
								public getClickable(): boolean;
							}
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.compass.generated.CompassSettings> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassSettings.Creator>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public constructor();
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.compass.generated.CompassSettings>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.compass.generated.CompassSettings;
								public newArray(param0: number): androidNative.Array<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export namespace generated {
						export abstract class CompassSettingsBase extends java.lang.Object implements com.mapbox.maps.plugin.compass.generated.CompassSettingsInterface {
							public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassSettingsBase>;
							public setInternalSettings(param0: com.mapbox.maps.plugin.compass.generated.CompassSettings): void;
							public getPosition(): number;
							public getFadeWhenFacingNorth(): boolean;
							public setFadeWhenFacingNorth(value: boolean): void;
							public setClickable(param0: boolean): void;
							public setClickable(value: boolean): void;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public getMarginRight(): number;
							public getSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
							public getEnabled(): boolean;
							public setImage(param0: com.mapbox.maps.ImageHolder): void;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public setVisibility(param0: boolean): void;
							public getInternalSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
							public setEnabled(value: boolean): void;
							public setMarginBottom(value: number): void;
							public getImage(): com.mapbox.maps.ImageHolder;
							public setEnabled(param0: boolean): void;
							public setRotation(param0: number): void;
							public getMarginLeft(): number;
							public constructor();
							public getVisibility(): boolean;
							public setMarginTop(value: number): void;
							public setOpacity(value: number): void;
							public setOpacity(param0: number): void;
							public getMarginBottom(): number;
							public setImage(value: com.mapbox.maps.ImageHolder): void;
							public getRotation(): number;
							public setMarginRight(param0: number): void;
							public updateSettings(block: any): void;
							public setFadeWhenFacingNorth(param0: boolean): void;
							public setPosition(param0: number): void;
							public setMarginRight(value: number): void;
							public setRotation(value: number): void;
							public setMarginLeft(param0: number): void;
							public setVisibility(value: boolean): void;
							public setPosition(value: number): void;
							public getOpacity(): number;
							public applySettings(): void;
							public setMarginBottom(param0: number): void;
							public setMarginLeft(value: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export namespace generated {
						export class CompassSettingsData extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassSettingsData>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.compass.generated.CompassSettingsData>;
							public setMarginLeft(marginLeft: number): void;
							public getPosition(): number;
							public component1(): boolean;
							public hashCode(): number;
							public setEnabled(enabled: boolean): void;
							public component2(): number;
							public component10(): boolean;
							public getFadeWhenFacingNorth(): boolean;
							public component5(): number;
							public setFadeWhenFacingNorth(fadeWh_2a0: boolean): void;
							public setRotation(rotation: number): void;
							public toString(): string;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public getMarginRight(): number;
							public getEnabled(): boolean;
							public component9(): boolean;
							public setMarginRight(margin_9af: number): void;
							public equals(other: any): boolean;
							public describeContents(): number;
							public component6(): number;
							public component3(): number;
							public component11(): boolean;
							public setOpacity(opacity: number): void;
							public getImage(): com.mapbox.maps.ImageHolder;
							public getMarginLeft(): number;
							public setClickable(clickable: boolean): void;
							public constructor(enabled: boolean, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number, opacity: number, rotation: number, visibility: boolean, fadeWh_2a0: boolean, clickable: boolean, image: com.mapbox.maps.ImageHolder);
							public getVisibility(): boolean;
							public setVisibility(visibility: boolean): void;
							public setPosition(position: number): void;
							public component7(): number;
							public getMarginBottom(): number;
							public component12(): com.mapbox.maps.ImageHolder;
							public copy(enabled: boolean, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number, opacity: number, rotation: number, visibility: boolean, fadeWh_2a0: boolean, clickable: boolean, image: com.mapbox.maps.ImageHolder): com.mapbox.maps.plugin.compass.generated.CompassSettingsData;
							public setMarginTop(marginTop: number): void;
							public getRotation(): number;
							public setImage(image: com.mapbox.maps.ImageHolder): void;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public component8(): number;
							public component4(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public setMarginBottom(margin_7d4: number): void;
							public getOpacity(): number;
						}
						export namespace CompassSettingsData {
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.compass.generated.CompassSettingsData> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassSettingsData.Creator>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.compass.generated.CompassSettingsData;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.compass.generated.CompassSettingsData>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace compass {
					export namespace generated {
						export class CompassSettingsInterface extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.compass.generated.CompassSettingsInterface>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.compass.generated.CompassSettingsInterface interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
								updateSettings(param0: any): void;
								getEnabled(): boolean;
								setEnabled(param0: boolean): void;
								getPosition(): number;
								setPosition(param0: number): void;
								getMarginLeft(): number;
								setMarginLeft(param0: number): void;
								getMarginTop(): number;
								setMarginTop(param0: number): void;
								getMarginRight(): number;
								setMarginRight(param0: number): void;
								getMarginBottom(): number;
								setMarginBottom(param0: number): void;
								getOpacity(): number;
								setOpacity(param0: number): void;
								getRotation(): number;
								setRotation(param0: number): void;
								getVisibility(): boolean;
								setVisibility(param0: boolean): void;
								getFadeWhenFacingNorth(): boolean;
								setFadeWhenFacingNorth(param0: boolean): void;
								getClickable(): boolean;
								setClickable(param0: boolean): void;
								getImage(): com.mapbox.maps.ImageHolder;
								setImage(param0: com.mapbox.maps.ImageHolder): void;
							});
							public constructor();
							public getPosition(): number;
							public getFadeWhenFacingNorth(): boolean;
							public setClickable(param0: boolean): void;
							public getMarginTop(): number;
							public getClickable(): boolean;
							public getMarginRight(): number;
							public getSettings(): com.mapbox.maps.plugin.compass.generated.CompassSettings;
							public getEnabled(): boolean;
							public setImage(param0: com.mapbox.maps.ImageHolder): void;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public setVisibility(param0: boolean): void;
							public setEnabled(param0: boolean): void;
							public getImage(): com.mapbox.maps.ImageHolder;
							public setRotation(param0: number): void;
							public getMarginLeft(): number;
							public getVisibility(): boolean;
							public setOpacity(param0: number): void;
							public getMarginBottom(): number;
							public getRotation(): number;
							public setMarginRight(param0: number): void;
							public setFadeWhenFacingNorth(param0: boolean): void;
							public setPosition(param0: number): void;
							public setMarginLeft(param0: number): void;
							public getOpacity(): number;
							public setMarginBottom(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapAttributionDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapAttributionDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapAttributionDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							telemetry(): com.mapbox.maps.module.MapTelemetry;
							parseAttributions(param0: globalAndroid.content.Context, param1: com.mapbox.maps.plugin.attribution.AttributionParserConfig): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
							buildMapBoxFeedbackUrl(param0: globalAndroid.content.Context): string;
							geofencingConsent(): com.mapbox.maps.geofencing.MapGeofencingConsent;
							getExtraAttributions(): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
							setExtraAttributions(param0: java.util.List<com.mapbox.maps.plugin.attribution.Attribution>): void;
						});
						public constructor();
						public geofencingConsent(): com.mapbox.maps.geofencing.MapGeofencingConsent;
						public setExtraAttributions(param0: java.util.List<com.mapbox.maps.plugin.attribution.Attribution>): void;
						public parseAttributions(param0: globalAndroid.content.Context, param1: com.mapbox.maps.plugin.attribution.AttributionParserConfig): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
						public buildMapBoxFeedbackUrl(param0: globalAndroid.content.Context): string;
						public telemetry(): com.mapbox.maps.module.MapTelemetry;
						public getExtraAttributions(): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
					}
					export namespace MapAttributionDelegate {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapAttributionDelegate.DefaultImpls>;
							public static setExtraAttributions(this_: com.mapbox.maps.plugin.delegates.MapAttributionDelegate, param1: java.util.List<com.mapbox.maps.plugin.attribution.Attribution>): void;
							public static getExtraAttributions(this_: com.mapbox.maps.plugin.delegates.MapAttributionDelegate): java.util.List<com.mapbox.maps.plugin.attribution.Attribution>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapCameraManagerDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getCameraState(): com.mapbox.maps.CameraState;
							cameraForCoordinateBounds(param0: com.mapbox.maps.CoordinateBounds, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double, param4: java.lang.Double, param5: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
							cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
							cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.ScreenBox): com.mapbox.maps.CameraOptions;
							cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.EdgeInsets, param3: java.lang.Double, param4: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
							cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.EdgeInsets, param3: java.lang.Double, param4: com.mapbox.maps.ScreenCoordinate, param5: any): void;
							cameraForGeometry(param0: com.mapbox.geojson.Geometry, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
							coordinateBoundsForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
							coordinateBoundsForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
							coordinateBoundsZoomForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
							coordinateBoundsZoomForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
							pixelForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
							coordinateForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
							pixelsForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>): java.util.List<com.mapbox.maps.ScreenCoordinate>;
							coordinatesForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.geojson.Point>;
							coordinateBoundsForRect(param0: globalAndroid.graphics.RectF): com.mapbox.maps.CoordinateBounds;
							coordinateInfoForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CoordinateInfo;
							coordinatesInfoForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.maps.CoordinateInfo>;
							setCamera(param0: com.mapbox.maps.CameraOptions): void;
							setCamera(param0: com.mapbox.maps.FreeCameraOptions): void;
							getFreeCameraOptions(): com.mapbox.maps.FreeCameraOptions;
							setBounds(param0: com.mapbox.maps.CameraBoundsOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
							getBounds(): com.mapbox.maps.CameraBounds;
							setCenterAltitudeMode(param0: com.mapbox.maps.MapCenterAltitudeMode): void;
							getCenterAltitudeMode(): com.mapbox.maps.MapCenterAltitudeMode;
							cameraForDrag(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
						});
						public constructor();
						public coordinatesForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.geojson.Point>;
						/** @deprecated */
						public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.ScreenBox): com.mapbox.maps.CameraOptions;
						public coordinateForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.geojson.Point;
						public getCenterAltitudeMode(): com.mapbox.maps.MapCenterAltitudeMode;
						/** @deprecated */
						public cameraForCoordinateBounds(param0: com.mapbox.maps.CoordinateBounds, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double, param4: java.lang.Double, param5: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
						/** @deprecated */
						public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
						public cameraForDrag(param0: com.mapbox.maps.ScreenCoordinate, param1: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
						public getBounds(): com.mapbox.maps.CameraBounds;
						/** @deprecated */
						public cameraForGeometry(param0: com.mapbox.geojson.Geometry, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
						public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.EdgeInsets, param3: java.lang.Double, param4: com.mapbox.maps.ScreenCoordinate, param5: any): void;
						public getFreeCameraOptions(): com.mapbox.maps.FreeCameraOptions;
						public cameraForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>, param1: com.mapbox.maps.CameraOptions, param2: com.mapbox.maps.EdgeInsets, param3: java.lang.Double, param4: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CameraOptions;
						public coordinateInfoForPixel(param0: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.CoordinateInfo;
						public setCamera(param0: com.mapbox.maps.FreeCameraOptions): void;
						public coordinateBoundsForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
						public getCameraState(): com.mapbox.maps.CameraState;
						public pixelsForCoordinates(param0: java.util.List<com.mapbox.geojson.Point>): java.util.List<com.mapbox.maps.ScreenCoordinate>;
						public coordinateBoundsForRect(param0: globalAndroid.graphics.RectF): com.mapbox.maps.CoordinateBounds;
						public coordinateBoundsZoomForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
						public setCamera(param0: com.mapbox.maps.CameraOptions): void;
						public setBounds(param0: com.mapbox.maps.CameraBoundsOptions): com.mapbox.bindgen.Expected<string,com.mapbox.bindgen.None>;
						public coordinateBoundsZoomForCameraUnwrapped(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBoundsZoom;
						public setCenterAltitudeMode(param0: com.mapbox.maps.MapCenterAltitudeMode): void;
						public coordinatesInfoForPixels(param0: java.util.List<com.mapbox.maps.ScreenCoordinate>): java.util.List<com.mapbox.maps.CoordinateInfo>;
						public pixelForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ScreenCoordinate;
						public coordinateBoundsForCamera(param0: com.mapbox.maps.CameraOptions): com.mapbox.maps.CoordinateBounds;
					}
					export namespace MapCameraManagerDelegate {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate.DefaultImpls>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapDelegateProvider extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapDelegateProvider>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapDelegateProvider interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getMapCameraManagerDelegate(): com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate;
							getMapProjectionDelegate(): com.mapbox.maps.plugin.delegates.MapProjectionDelegate;
							getMapTransformDelegate(): com.mapbox.maps.plugin.delegates.MapTransformDelegate;
							getMapAttributionDelegate(): com.mapbox.maps.plugin.delegates.MapAttributionDelegate;
							getStyle(param0: any): void;
							getMapStyleManagerDelegate(): com.mapbox.maps.MapboxStyleManager;
							getMapPluginProviderDelegate(): com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate;
							getMapFeatureQueryDelegate(): com.mapbox.maps.plugin.delegates.MapFeatureQueryDelegate;
							getMapListenerDelegate(): com.mapbox.maps.plugin.delegates.MapListenerDelegate;
							getMapFeatureStateDelegate(): com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate;
							getMapInteractionDelegate(): com.mapbox.maps.plugin.delegates.MapInteractionDelegate;
						});
						public constructor();
						public getMapFeatureQueryDelegate(): com.mapbox.maps.plugin.delegates.MapFeatureQueryDelegate;
						public getMapTransformDelegate(): com.mapbox.maps.plugin.delegates.MapTransformDelegate;
						public getMapProjectionDelegate(): com.mapbox.maps.plugin.delegates.MapProjectionDelegate;
						public getMapStyleManagerDelegate(): com.mapbox.maps.MapboxStyleManager;
						public getMapCameraManagerDelegate(): com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate;
						public getMapAttributionDelegate(): com.mapbox.maps.plugin.delegates.MapAttributionDelegate;
						public getMapListenerDelegate(): com.mapbox.maps.plugin.delegates.MapListenerDelegate;
						public getMapFeatureStateDelegate(): com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate;
						public getMapPluginProviderDelegate(): com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate;
						public getMapInteractionDelegate(): com.mapbox.maps.plugin.delegates.MapInteractionDelegate;
						public getStyle(param0: any): void;
					}
					export namespace MapDelegateProvider {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapDelegateProvider.DefaultImpls>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapFeatureQueryDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapFeatureQueryDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapFeatureQueryDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							queryRenderedFeatures(param0: com.mapbox.maps.RenderedQueryGeometry, param1: com.mapbox.maps.RenderedQueryOptions, param2: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
							querySourceFeatures(param0: string, param1: com.mapbox.maps.SourceQueryOptions, param2: com.mapbox.maps.QuerySourceFeaturesCallback): com.mapbox.common.Cancelable;
							executeOnRenderThread(param0: java.lang.Runnable): void;
						});
						public constructor();
						public queryRenderedFeatures(param0: com.mapbox.maps.RenderedQueryGeometry, param1: com.mapbox.maps.RenderedQueryOptions, param2: com.mapbox.maps.QueryRenderedFeaturesCallback): com.mapbox.common.Cancelable;
						public querySourceFeatures(param0: string, param1: com.mapbox.maps.SourceQueryOptions, param2: com.mapbox.maps.QuerySourceFeaturesCallback): com.mapbox.common.Cancelable;
						public executeOnRenderThread(param0: java.lang.Runnable): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapFeatureStateDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							setFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.bindgen.Value, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
							getFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
							removeFeatureState(param0: string, param1: string, param2: string, param3: string, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
							resetFeatureStates(param0: string, param1: string, param2: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
						});
						public constructor();
						public resetFeatureStates(param0: string, param1: string, param2: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
						public setFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.bindgen.Value, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
						public getFeatureState(param0: string, param1: string, param2: string, param3: com.mapbox.maps.QueryFeatureStateCallback): com.mapbox.common.Cancelable;
						public removeFeatureState(param0: string, param1: string, param2: string, param3: string, param4: com.mapbox.maps.FeatureStateOperationCallback): com.mapbox.common.Cancelable;
					}
					export namespace MapFeatureStateDelegate {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate.DefaultImpls>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapInteractionDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapInteractionDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapInteractionDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							addInteraction(param0: com.mapbox.maps.MapInteraction): com.mapbox.common.Cancelable;
							dispatch(param0: com.mapbox.maps.PlatformEventInfo): void;
						});
						public constructor();
						public addInteraction(param0: com.mapbox.maps.MapInteraction): com.mapbox.common.Cancelable;
						public dispatch(param0: com.mapbox.maps.PlatformEventInfo): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapListenerDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapListenerDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapListenerDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							addOnCameraChangeListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
							removeOnCameraChangeListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
							addOnMapIdleListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
							removeOnMapIdleListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
							addOnMapLoadErrorListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
							removeOnMapLoadErrorListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
							addOnMapLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
							removeOnMapLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
							addOnRenderFrameStartedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
							removeOnRenderFrameStartedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
							addOnRenderFrameFinishedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
							removeOnRenderFrameFinishedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
							addOnSourceAddedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
							removeOnSourceAddedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
							addOnSourceDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
							removeOnSourceDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
							addOnSourceRemovedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
							removeOnSourceRemovedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
							addOnStyleDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
							removeOnStyleDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
							addOnStyleLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
							removeOnStyleLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
							addOnStyleImageMissingListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
							removeOnStyleImageMissingListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
							addOnStyleImageUnusedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
							removeOnStyleImageUnusedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
							subscribeCameraChanged(param0: com.mapbox.maps.CameraChangedCallback): com.mapbox.common.Cancelable;
							subscribeCameraChangedCoalesced(param0: com.mapbox.maps.CameraChangedCoalescedCallback): com.mapbox.common.Cancelable;
							subscribeMapLoaded(param0: com.mapbox.maps.MapLoadedCallback): com.mapbox.common.Cancelable;
							subscribeMapIdle(param0: com.mapbox.maps.MapIdleCallback): com.mapbox.common.Cancelable;
							subscribeMapLoadingError(param0: com.mapbox.maps.MapLoadingErrorCallback): com.mapbox.common.Cancelable;
							subscribeStyleLoaded(param0: com.mapbox.maps.StyleLoadedCallback): com.mapbox.common.Cancelable;
							subscribeStyleDataLoaded(param0: com.mapbox.maps.StyleDataLoadedCallback): com.mapbox.common.Cancelable;
							subscribeSourceDataLoaded(param0: com.mapbox.maps.SourceDataLoadedCallback): com.mapbox.common.Cancelable;
							subscribeSourceAdded(param0: com.mapbox.maps.SourceAddedCallback): com.mapbox.common.Cancelable;
							subscribeSourceRemoved(param0: com.mapbox.maps.SourceRemovedCallback): com.mapbox.common.Cancelable;
							subscribeStyleImageMissing(param0: com.mapbox.maps.StyleImageMissingCallback): com.mapbox.common.Cancelable;
							subscribeStyleImageRemoveUnused(param0: com.mapbox.maps.StyleImageRemoveUnusedCallback): com.mapbox.common.Cancelable;
							subscribeRenderFrameStarted(param0: com.mapbox.maps.RenderFrameStartedCallback): com.mapbox.common.Cancelable;
							subscribeRenderFrameFinished(param0: com.mapbox.maps.RenderFrameFinishedCallback): com.mapbox.common.Cancelable;
							subscribeResourceRequest(param0: com.mapbox.maps.ResourceRequestCallback): com.mapbox.common.Cancelable;
							subscribeGenericEvent(param0: string, param1: com.mapbox.maps.GenericEventCallback): com.mapbox.common.Cancelable;
						});
						public constructor();
						/** @deprecated */
						public removeOnSourceRemovedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
						/** @deprecated */
						public addOnStyleImageUnusedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
						/** @deprecated */
						public addOnStyleDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
						/** @deprecated */
						public addOnStyleLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
						public subscribeCameraChangedCoalesced(param0: com.mapbox.maps.CameraChangedCoalescedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public addOnSourceAddedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
						/** @deprecated */
						public addOnRenderFrameStartedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
						public subscribeCameraChanged(param0: com.mapbox.maps.CameraChangedCallback): com.mapbox.common.Cancelable;
						public subscribeStyleDataLoaded(param0: com.mapbox.maps.StyleDataLoadedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public addOnCameraChangeListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
						/** @deprecated */
						public addOnRenderFrameFinishedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
						public subscribeRenderFrameStarted(param0: com.mapbox.maps.RenderFrameStartedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public removeOnStyleDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener): void;
						public subscribeRenderFrameFinished(param0: com.mapbox.maps.RenderFrameFinishedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public addOnSourceRemovedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener): void;
						public subscribeMapIdle(param0: com.mapbox.maps.MapIdleCallback): com.mapbox.common.Cancelable;
						public subscribeSourceDataLoaded(param0: com.mapbox.maps.SourceDataLoadedCallback): com.mapbox.common.Cancelable;
						public subscribeSourceRemoved(param0: com.mapbox.maps.SourceRemovedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public removeOnStyleImageMissingListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
						public subscribeStyleLoaded(param0: com.mapbox.maps.StyleLoadedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public removeOnMapIdleListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
						/** @deprecated */
						public removeOnMapLoadErrorListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
						/** @deprecated */
						public removeOnRenderFrameStartedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener): void;
						/** @deprecated */
						public addOnMapLoadErrorListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener): void;
						/** @deprecated */
						public removeOnRenderFrameFinishedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener): void;
						/** @deprecated */
						public addOnSourceDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
						public subscribeStyleImageRemoveUnused(param0: com.mapbox.maps.StyleImageRemoveUnusedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public addOnStyleImageMissingListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener): void;
						public subscribeStyleImageMissing(param0: com.mapbox.maps.StyleImageMissingCallback): com.mapbox.common.Cancelable;
						public subscribeResourceRequest(param0: com.mapbox.maps.ResourceRequestCallback): com.mapbox.common.Cancelable;
						public subscribeGenericEvent(param0: string, param1: com.mapbox.maps.GenericEventCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public removeOnMapLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
						/** @deprecated */
						public addOnMapLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener): void;
						public subscribeMapLoadingError(param0: com.mapbox.maps.MapLoadingErrorCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public removeOnSourceDataLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener): void;
						/** @deprecated */
						public removeOnStyleImageUnusedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener): void;
						public subscribeSourceAdded(param0: com.mapbox.maps.SourceAddedCallback): com.mapbox.common.Cancelable;
						public subscribeMapLoaded(param0: com.mapbox.maps.MapLoadedCallback): com.mapbox.common.Cancelable;
						/** @deprecated */
						public removeOnSourceAddedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener): void;
						/** @deprecated */
						public addOnMapIdleListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener): void;
						/** @deprecated */
						public removeOnCameraChangeListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener): void;
						/** @deprecated */
						public removeOnStyleLoadedListener(param0: com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapPluginExtensionsDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							cameraAnimationsPlugin(param0: any): any;
							gesturesPlugin(param0: any): any;
						});
						public constructor();
						public cameraAnimationsPlugin(param0: any): any;
						public gesturesPlugin(param0: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapPluginProviderDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getPlugin(param0: string): com.mapbox.maps.plugin.MapPlugin;
						});
						public constructor();
						public getPlugin(param0: string): com.mapbox.maps.plugin.MapPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapProjectionDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapProjectionDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapProjectionDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getMetersPerPixelAtLatitude(param0: number, param1: number): number;
							getMetersPerPixelAtLatitude(param0: number): number;
							projectedMetersForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ProjectedMeters;
							coordinateForProjectedMeters(param0: com.mapbox.maps.ProjectedMeters): com.mapbox.geojson.Point;
							project(param0: com.mapbox.geojson.Point, param1: number): com.mapbox.maps.MercatorCoordinate;
							unproject(param0: com.mapbox.maps.MercatorCoordinate, param1: number): com.mapbox.geojson.Point;
						});
						public constructor();
						public projectedMetersForCoordinate(param0: com.mapbox.geojson.Point): com.mapbox.maps.ProjectedMeters;
						public project(param0: com.mapbox.geojson.Point, param1: number): com.mapbox.maps.MercatorCoordinate;
						public unproject(param0: com.mapbox.maps.MercatorCoordinate, param1: number): com.mapbox.geojson.Point;
						public getMetersPerPixelAtLatitude(param0: number, param1: number): number;
						public getMetersPerPixelAtLatitude(param0: number): number;
						public coordinateForProjectedMeters(param0: com.mapbox.maps.ProjectedMeters): com.mapbox.geojson.Point;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export class MapTransformDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.MapTransformDelegate>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.MapTransformDelegate interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							setGestureInProgress(param0: boolean): void;
							isGestureInProgress(): boolean;
							setNorthOrientation(param0: com.mapbox.maps.NorthOrientation): void;
							setConstrainMode(param0: com.mapbox.maps.ConstrainMode): void;
							setViewportMode(param0: com.mapbox.maps.ViewportMode): void;
							setUserAnimationInProgress(param0: boolean): void;
							setCameraAnimationHint(param0: com.mapbox.maps.CameraAnimationHint): void;
							isUserAnimationInProgress(): boolean;
							getMapOptions(): com.mapbox.maps.MapOptions;
							getSize(): com.mapbox.maps.Size;
						});
						public constructor();
						public setViewportMode(param0: com.mapbox.maps.ViewportMode): void;
						public isUserAnimationInProgress(): boolean;
						public setConstrainMode(param0: com.mapbox.maps.ConstrainMode): void;
						public setUserAnimationInProgress(param0: boolean): void;
						public getSize(): com.mapbox.maps.Size;
						public isGestureInProgress(): boolean;
						public setGestureInProgress(param0: boolean): void;
						public setCameraAnimationHint(param0: com.mapbox.maps.CameraAnimationHint): void;
						public setNorthOrientation(param0: com.mapbox.maps.NorthOrientation): void;
						public getMapOptions(): com.mapbox.maps.MapOptions;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnCameraChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onCameraChanged(param0: com.mapbox.maps.extension.observable.eventdata.CameraChangedEventData): void;
							});
							public constructor();
							public onCameraChanged(param0: com.mapbox.maps.extension.observable.eventdata.CameraChangedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnMapIdleListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onMapIdle(param0: com.mapbox.maps.extension.observable.eventdata.MapIdleEventData): void;
							});
							public constructor();
							public onMapIdle(param0: com.mapbox.maps.extension.observable.eventdata.MapIdleEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnMapLoadErrorListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onMapLoadError(param0: com.mapbox.maps.extension.observable.eventdata.MapLoadingErrorEventData): void;
							});
							public constructor();
							public onMapLoadError(param0: com.mapbox.maps.extension.observable.eventdata.MapLoadingErrorEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnMapLoadedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onMapLoaded(param0: com.mapbox.maps.extension.observable.eventdata.MapLoadedEventData): void;
							});
							public constructor();
							public onMapLoaded(param0: com.mapbox.maps.extension.observable.eventdata.MapLoadedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnRenderFrameFinishedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onRenderFrameFinished(param0: com.mapbox.maps.extension.observable.eventdata.RenderFrameFinishedEventData): void;
							});
							public constructor();
							public onRenderFrameFinished(param0: com.mapbox.maps.extension.observable.eventdata.RenderFrameFinishedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnRenderFrameStartedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onRenderFrameStarted(param0: com.mapbox.maps.extension.observable.eventdata.RenderFrameStartedEventData): void;
							});
							public constructor();
							public onRenderFrameStarted(param0: com.mapbox.maps.extension.observable.eventdata.RenderFrameStartedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnSourceAddedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onSourceAdded(param0: com.mapbox.maps.extension.observable.eventdata.SourceAddedEventData): void;
							});
							public constructor();
							public onSourceAdded(param0: com.mapbox.maps.extension.observable.eventdata.SourceAddedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnSourceDataLoadedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onSourceDataLoaded(param0: com.mapbox.maps.extension.observable.eventdata.SourceDataLoadedEventData): void;
							});
							public constructor();
							public onSourceDataLoaded(param0: com.mapbox.maps.extension.observable.eventdata.SourceDataLoadedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnSourceRemovedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onSourceRemoved(param0: com.mapbox.maps.extension.observable.eventdata.SourceRemovedEventData): void;
							});
							public constructor();
							public onSourceRemoved(param0: com.mapbox.maps.extension.observable.eventdata.SourceRemovedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnStyleDataLoadedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onStyleDataLoaded(param0: com.mapbox.maps.extension.observable.eventdata.StyleDataLoadedEventData): void;
							});
							public constructor();
							public onStyleDataLoaded(param0: com.mapbox.maps.extension.observable.eventdata.StyleDataLoadedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnStyleImageMissingListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onStyleImageMissing(param0: com.mapbox.maps.extension.observable.eventdata.StyleImageMissingEventData): void;
							});
							public constructor();
							public onStyleImageMissing(param0: com.mapbox.maps.extension.observable.eventdata.StyleImageMissingEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnStyleImageUnusedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onStyleImageUnused(param0: com.mapbox.maps.extension.observable.eventdata.StyleImageUnusedEventData): void;
							});
							public constructor();
							public onStyleImageUnused(param0: com.mapbox.maps.extension.observable.eventdata.StyleImageUnusedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace delegates {
					export namespace listeners {
						export class OnStyleLoadedListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onStyleLoaded(param0: com.mapbox.maps.extension.observable.eventdata.StyleLoadedEventData): void;
							});
							public constructor();
							public onStyleLoaded(param0: com.mapbox.maps.extension.observable.eventdata.StyleLoadedEventData): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.gestures"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class GestureState extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GestureState>;
						public restore(state: com.mapbox.maps.plugin.gestures.GestureState.Type): void;
						public constructor(gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager);
						public peek(gesture: com.mapbox.maps.plugin.gestures.GestureState.Type): java.lang.Boolean;
						public saveAndDisable(state: com.mapbox.maps.plugin.gestures.GestureState.Type): boolean;
					}
					export namespace GestureState {
						export class Type {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GestureState.Type>;
							public static DoubleTap: com.mapbox.maps.plugin.gestures.GestureState.Type;
							public static Scale: com.mapbox.maps.plugin.gestures.GestureState.Type;
							public static ScaleQuickZoom: com.mapbox.maps.plugin.gestures.GestureState.Type;
							public static Shove: com.mapbox.maps.plugin.gestures.GestureState.Type;
							public static valueOf(value: string): com.mapbox.maps.plugin.gestures.GestureState.Type;
							public static values(): androidNative.Array<com.mapbox.maps.plugin.gestures.GestureState.Type>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
						export class WhenMappings extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GestureState.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class GesturesPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin, com.mapbox.maps.plugin.ContextBinder, com.mapbox.maps.plugin.MapSizePlugin, com.mapbox.maps.plugin.gestures.generated.GesturesSettingsInterface {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.GesturesPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
							onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
							addOnMapClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
							removeOnMapClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
							addOnMapLongClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
							removeOnMapLongClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
							setGesturesManager(param0: com.mapbox.android.gestures.AndroidGesturesManager, param1: boolean, param2: boolean): void;
							getGesturesManager(): com.mapbox.android.gestures.AndroidGesturesManager;
							addOnRotateListener(param0: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
							removeOnRotateListener(param0: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
							addOnFlingListener(param0: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
							removeOnFlingListener(param0: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
							addOnMoveListener(param0: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
							removeOnMoveListener(param0: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
							addOnScaleListener(param0: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
							removeOnScaleListener(param0: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
							addOnShoveListener(param0: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
							removeOnShoveListener(param0: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
							addProtectedAnimationOwner(param0: string): void;
							removeProtectedAnimationOwner(param0: string): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
							onSizeChanged(param0: number, param1: number): void;
							getSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
							updateSettings(param0: any): void;
							getRotateEnabled(): boolean;
							setRotateEnabled(param0: boolean): void;
							getPinchToZoomEnabled(): boolean;
							setPinchToZoomEnabled(param0: boolean): void;
							getScrollEnabled(): boolean;
							setScrollEnabled(param0: boolean): void;
							getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
							setSimultaneousRotateAndPinchToZoomEnabled(param0: boolean): void;
							getPitchEnabled(): boolean;
							setPitchEnabled(param0: boolean): void;
							getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
							setScrollMode(param0: com.mapbox.maps.plugin.ScrollMode): void;
							getDoubleTapToZoomInEnabled(): boolean;
							setDoubleTapToZoomInEnabled(param0: boolean): void;
							getDoubleTouchToZoomOutEnabled(): boolean;
							setDoubleTouchToZoomOutEnabled(param0: boolean): void;
							getQuickZoomEnabled(): boolean;
							setQuickZoomEnabled(param0: boolean): void;
							getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
							setFocalPoint(param0: com.mapbox.maps.ScreenCoordinate): void;
							getPinchToZoomDecelerationEnabled(): boolean;
							setPinchToZoomDecelerationEnabled(param0: boolean): void;
							getRotateDecelerationEnabled(): boolean;
							setRotateDecelerationEnabled(param0: boolean): void;
							getScrollDecelerationEnabled(): boolean;
							setScrollDecelerationEnabled(param0: boolean): void;
							getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
							setIncreaseRotateThresholdWhenPinchingToZoom(param0: boolean): void;
							getIncreasePinchToZoomThresholdWhenRotating(): boolean;
							setIncreasePinchToZoomThresholdWhenRotating(param0: boolean): void;
							getZoomAnimationAmount(): number;
							setZoomAnimationAmount(param0: number): void;
							getPinchScrollEnabled(): boolean;
							setPinchScrollEnabled(param0: boolean): void;
						});
						public constructor();
						public getPinchToZoomDecelerationEnabled(): boolean;
						public getQuickZoomEnabled(): boolean;
						public getIncreasePinchToZoomThresholdWhenRotating(): boolean;
						public setPinchToZoomEnabled(param0: boolean): void;
						public setQuickZoomEnabled(param0: boolean): void;
						public getPinchToZoomEnabled(): boolean;
						public setZoomAnimationAmount(param0: number): void;
						public setDoubleTouchToZoomOutEnabled(param0: boolean): void;
						public addOnMapLongClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
						/** @deprecated */
						public setIncreaseRotateThresholdWhenPinchingToZoom(param0: boolean): void;
						public cleanup(): void;
						public setScrollDecelerationEnabled(param0: boolean): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
						public addProtectedAnimationOwner(param0: string): void;
						public getDoubleTapToZoomInEnabled(): boolean;
						public setRotateEnabled(param0: boolean): void;
						public setDoubleTapToZoomInEnabled(param0: boolean): void;
						public setGesturesManager(param0: com.mapbox.android.gestures.AndroidGesturesManager, param1: boolean, param2: boolean): void;
						public getGesturesManager(): com.mapbox.android.gestures.AndroidGesturesManager;
						public setScrollEnabled(param0: boolean): void;
						public setFocalPoint(param0: com.mapbox.maps.ScreenCoordinate): void;
						public setPitchEnabled(param0: boolean): void;
						public addOnMoveListener(param0: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public getScrollDecelerationEnabled(): boolean;
						public getRotateDecelerationEnabled(): boolean;
						public setIncreasePinchToZoomThresholdWhenRotating(param0: boolean): void;
						public removeOnScaleListener(param0: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						/** @deprecated */
						public getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
						public initialize(): void;
						public setScrollMode(param0: com.mapbox.maps.plugin.ScrollMode): void;
						public onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
						public removeOnMapLongClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public getScrollEnabled(): boolean;
						public getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
						public getPinchScrollEnabled(): boolean;
						public setPinchScrollEnabled(param0: boolean): void;
						public addOnShoveListener(param0: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
						public updateSettings(param0: any): void;
						public setPinchToZoomDecelerationEnabled(param0: boolean): void;
						public addOnMapClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public addOnFlingListener(param0: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public getZoomAnimationAmount(): number;
						public removeOnMoveListener(param0: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public getRotateEnabled(): boolean;
						public removeOnRotateListener(param0: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public setSimultaneousRotateAndPinchToZoomEnabled(param0: boolean): void;
						public addOnScaleListener(param0: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						public removeOnFlingListener(param0: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public removeOnShoveListener(param0: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
						public addOnRotateListener(param0: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
						public getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
						public removeProtectedAnimationOwner(param0: string): void;
						public removeOnMapClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public getDoubleTouchToZoomOutEnabled(): boolean;
						public onSizeChanged(param0: number, param1: number): void;
						public getPitchEnabled(): boolean;
						public getSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
						public setRotateDecelerationEnabled(param0: boolean): void;
					}
					export namespace GesturesPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPlugin.DefaultImpls>;
							public static cleanup(this_: com.mapbox.maps.plugin.gestures.GesturesPlugin): void;
							public static initialize(this_: com.mapbox.maps.plugin.gestures.GesturesPlugin): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.gestures.GesturesPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							public static onSizeChanged(this_: com.mapbox.maps.plugin.gestures.GesturesPlugin, width: number, height: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class GesturesPluginImpl extends com.mapbox.maps.plugin.gestures.generated.GesturesSettingsBase implements com.mapbox.maps.plugin.gestures.GesturesPlugin, com.mapbox.maps.plugin.MapStyleObserverPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPluginImpl>;
						public moveGestureListener: com.mapbox.maps.plugin.gestures.GesturesPluginImpl.MoveGestureListener;
						public mapInteractionDelegate: com.mapbox.maps.plugin.delegates.MapInteractionDelegate;
						public static ROTATION_ANGLE_THRESHOLD: number; // 3.0
						public static MAX_SHOVE_ANGLE: number; // 45.0
						public getDoubleTapRegistered$plugin_gestures_release(): boolean;
						public getQuickZoomEnabled(): boolean;
						public setPinchToZoomEnabled(param0: boolean): void;
						public setQuickZoomEnabled(param0: boolean): void;
						public addOnShoveListener(onShov_dcd: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
						/** @deprecated */
						public setIncreaseRotateThresholdWhenPinchingToZoom(param0: boolean): void;
						public cleanup(): void;
						public setScrollDecelerationEnabled(param0: boolean): void;
						public setDoubleTapRegistered$plugin_gestures_release(double_aeb: boolean): void;
						public addProtectedAnimationOwner(owner: string): void;
						public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
						public setGesturesManager(intern_817: com.mapbox.android.gestures.AndroidGesturesManager, attach_60a: boolean, setDef_73a: boolean): void;
						public addProtectedAnimationOwner(param0: string): void;
						public getDoubleTapToZoomInEnabled(): boolean;
						public constructor();
						public isPointAboveHorizon$plugin_gestures_release(curren_25f: com.mapbox.maps.ScreenCoordinate): boolean;
						public setGesturesManager(param0: com.mapbox.android.gestures.AndroidGesturesManager, param1: boolean, param2: boolean): void;
						public getGesturesManager(): com.mapbox.android.gestures.AndroidGesturesManager;
						public setFocalPoint(param0: com.mapbox.maps.ScreenCoordinate): void;
						public getMapInteractionDelegate$plugin_gestures_release(): com.mapbox.maps.plugin.delegates.MapInteractionDelegate;
						public setPitchEnabled(param0: boolean): void;
						public addOnMoveListener(param0: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public handleRotate$plugin_gestures_release(this_h_6f9: com.mapbox.android.gestures.RotateGestureDetector, i_f_ca_e08: number): boolean;
						public removeOnMoveListener(listener: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public removeOnMapLongClickListener(onMapL_150: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public setIncreasePinchToZoomThresholdWhenRotating(param0: boolean): void;
						public handleShove$plugin_gestures_release(optimi_2dc: com.mapbox.android.gestures.ShoveGestureDetector, this_: number): boolean;
						public removeOnScaleListener(param0: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						public animateZoomOut$plugin_gestures_release(zoomFo_69b: com.mapbox.maps.ScreenCoordinate, runImm_bd4: boolean): void;
						public addOnMapLongClickListener(onMapL_150: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public handleMoveStartEvent$plugin_gestures_release(): void;
						public onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
						public setScrollMode(param0: com.mapbox.maps.plugin.ScrollMode): void;
						public onGenericMotionEvent(param0: globalAndroid.view.MotionEvent): boolean;
						public setMapInteractionDelegate$plugin_gestures_release(mapInt_9c6: com.mapbox.maps.plugin.delegates.MapInteractionDelegate): void;
						public addOnRotateListener(onRota_a7f: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public removeOnMapLongClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public getPinchScrollEnabled(): boolean;
						public addOnShoveListener(param0: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
						public updateSettings(param0: any): void;
						public constructor(context: globalAndroid.content.Context, pixelRatio: number);
						public setPinchToZoomDecelerationEnabled(param0: boolean): void;
						public addOnMapClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public getZoomAnimationAmount(): number;
						public removeOnMoveListener(param0: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public addOnScaleListener(param0: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						public constructor(context: globalAndroid.content.Context, attrib_795: globalAndroid.util.AttributeSet, style: com.mapbox.maps.MapboxStyleManager);
						public removeOnScaleListener(listener: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						public getMoveGestureListener$plugin_gestures_release(): com.mapbox.maps.plugin.gestures.GesturesPluginImpl.MoveGestureListener;
						public addOnScaleListener(onScal_d7e: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						public getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
						public removeOnMapClickListener(onMapC_70a: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public setMoveGestureListener$plugin_gestures_release(moveGe_c31: com.mapbox.maps.plugin.gestures.GesturesPluginImpl.MoveGestureListener): void;
						public applySettings(): void;
						public onStyleChanged(style: com.mapbox.maps.MapboxStyleManager): void;
						public onSizeChanged(param0: number, param1: number): void;
						public handleRotateEnd$plugin_gestures_release(velocityXY: com.mapbox.android.gestures.RotateGestureDetector, delta: number, ratio: number, animat_05c: number): void;
						public getPitchEnabled(): boolean;
						public getSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
						public setRotateDecelerationEnabled(param0: boolean): void;
						public removeOnShoveListener(listener: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
						public getPinchToZoomDecelerationEnabled(): boolean;
						public addOnFlingListener(onFlin_d4a: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public getIncreasePinchToZoomThresholdWhenRotating(): boolean;
						public handleFlingEvent$plugin_gestures_release(b: globalAndroid.view.MotionEvent, i_a_ma_7f1: number, this_h_c74: number): boolean;
						public getPinchToZoomEnabled(): boolean;
						public setZoomAnimationAmount(param0: number): void;
						public handleClickEvent$plugin_gestures_release(clicke_720: com.mapbox.maps.ScreenCoordinate): boolean;
						public calculateZoomBy$plugin_gestures_release(standa_a67: com.mapbox.android.gestures.StandardScaleGestureDetector): number;
						public removeOnRotateListener(listener: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public handleMoveEnd$plugin_gestures_release(): void;
						public setDoubleTouchToZoomOutEnabled(param0: boolean): void;
						public addOnMapLongClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public removeProtectedAnimationOwner(owner: string): void;
						public setRotateEnabled(param0: boolean): void;
						public setDoubleTapToZoomInEnabled(param0: boolean): void;
						public setScrollEnabled(param0: boolean): void;
						public handleShoveEnd$plugin_gestures_release(detector: com.mapbox.android.gestures.ShoveGestureDetector): void;
						public removeOnFlingListener(onFlin_d4a: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public getScrollDecelerationEnabled(): boolean;
						public bind(this_: globalAndroid.content.Context, context: globalAndroid.util.AttributeSet, attrs: number): void;
						public handleScaleBegin$plugin_gestures_release(currSpan: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
						public getRotateDecelerationEnabled(): boolean;
						public bind$plugin_gestures_release(context: globalAndroid.content.Context, gestur_e8c: com.mapbox.android.gestures.AndroidGesturesManager, attrs: globalAndroid.util.AttributeSet, pixelRatio: number): void;
						/** @deprecated */
						public getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
						public initialize(): void;
						public addOnMoveListener(onMove_c59: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public constructor(context: globalAndroid.content.Context, attrib_795: globalAndroid.util.AttributeSet, pixelRatio: number, animat_58b: globalAndroid.os.Handler);
						public handleShoveBegin$plugin_gestures_release(detector: com.mapbox.android.gestures.ShoveGestureDetector): boolean;
						public handleZoomAnimation$plugin_gestures_release(it: boolean, element_iv: com.mapbox.maps.ScreenCoordinate, i_f_fo_4ca: boolean): void;
						public getScrollEnabled(): boolean;
						public getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
						public setPinchScrollEnabled(param0: boolean): void;
						public addOnMapClickListener(onMapC_70a: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public handleSingleTapUpEvent$plugin_gestures_release(): boolean;
						public getInternalSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
						public addOnFlingListener(param0: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public setInternalSettings(intern_bcd: com.mapbox.maps.plugin.gestures.generated.GesturesSettings): void;
						public onGenericMotionEvent(curren_aa1: globalAndroid.view.MotionEvent): boolean;
						public getRotateEnabled(): boolean;
						public removeOnRotateListener(param0: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public setSimultaneousRotateAndPinchToZoomEnabled(param0: boolean): void;
						public onSizeChanged(width: number, height: number): void;
						public handleScaleEnd$plugin_gestures_release(zoomAd_80a: com.mapbox.android.gestures.StandardScaleGestureDetector, curren_aa1: number, focalPoint: number): void;
						public removeOnFlingListener(param0: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public handleScale$plugin_gestures_release(zoomedOut: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
						public removeOnShoveListener(param0: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
						public addOnRotateListener(param0: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
						public removeProtectedAnimationOwner(param0: string): void;
						public removeOnMapClickListener(param0: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public handleLongPressEvent$plugin_gestures_release(clicke_720: com.mapbox.maps.ScreenCoordinate): void;
						public getDoubleTouchToZoomOutEnabled(): boolean;
						public handleMove$plugin_gestures_release(focalPoint: com.mapbox.maps.ScreenCoordinate): void;
						public handleRotateBegin$plugin_gestures_release(currTime: com.mapbox.android.gestures.RotateGestureDetector): boolean;
						public onTouchEvent(thisCo_9b8: globalAndroid.view.MotionEvent): boolean;
						public handleDoubleTapEvent$plugin_gestures_release(it: globalAndroid.view.MotionEvent, diffX: number): boolean;
						public constructor(context: globalAndroid.content.Context, attrib_795: globalAndroid.util.AttributeSet, pixelRatio: number);
					}
					export namespace GesturesPluginImpl {
						export namespace GesturesPluginImpl {
							export namespace Companion {
							}
						}
						export class MoveGestureListener extends com.mapbox.android.gestures.MoveGestureDetector.SimpleOnMoveGestureListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPluginImpl.MoveGestureListener>;
							public detector: com.mapbox.android.gestures.MoveGestureDetector;
							public constructor();
							public onMove(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): boolean;
							public onMoveEnd(param0: com.mapbox.android.gestures.MoveGestureDetector, param1: number, param2: number): void;
							public getDetector(): com.mapbox.android.gestures.MoveGestureDetector;
							public setDetector(detector: com.mapbox.android.gestures.MoveGestureDetector): void;
							public onMoveBegin(detector: com.mapbox.android.gestures.MoveGestureDetector): boolean;
							public onMoveBegin(param0: com.mapbox.android.gestures.MoveGestureDetector): boolean;
							public onMoveEnd(detector: com.mapbox.android.gestures.MoveGestureDetector, velocityX: number, velocityY: number): void;
							public constructor(this_0: com.mapbox.maps.plugin.gestures.GesturesPluginImpl);
							public onMove(fromY: com.mapbox.android.gestures.MoveGestureDetector, resolv_e6e: number, resolv_001: number): boolean;
						}
						export class RotateGestureListener extends com.mapbox.android.gestures.RotateGestureDetector.SimpleOnRotateGestureListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPluginImpl.RotateGestureListener>;
							public constructor();
							public onRotateBegin(detector: com.mapbox.android.gestures.RotateGestureDetector): boolean;
							public onRotate(detector: com.mapbox.android.gestures.RotateGestureDetector, rotati_17e: number, rotati_1a0: number): boolean;
							public onRotateEnd(detector: com.mapbox.android.gestures.RotateGestureDetector, velocityX: number, velocityY: number, angula_13e: number): void;
							public onRotateBegin(param0: com.mapbox.android.gestures.RotateGestureDetector): boolean;
							public onRotateEnd(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number, param3: number): void;
							public constructor(this_0: com.mapbox.maps.plugin.gestures.GesturesPluginImpl);
							public onRotate(param0: com.mapbox.android.gestures.RotateGestureDetector, param1: number, param2: number): boolean;
						}
						export class ScaleGestureListener extends com.mapbox.android.gestures.StandardScaleGestureDetector.SimpleStandardOnScaleGestureListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPluginImpl.ScaleGestureListener>;
							public constructor();
							public onScaleEnd(param0: com.mapbox.android.gestures.StandardScaleGestureDetector, param1: number, param2: number): void;
							public onScale(detector: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
							public onScaleBegin(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
							public constructor(this_0: com.mapbox.maps.plugin.gestures.GesturesPluginImpl);
							public onScaleEnd(detector: com.mapbox.android.gestures.StandardScaleGestureDetector, velocityX: number, velocityY: number): void;
							public onScale(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
							public onScaleBegin(detector: com.mapbox.android.gestures.StandardScaleGestureDetector): boolean;
						}
						export class ShoveGestureListener extends com.mapbox.android.gestures.ShoveGestureDetector.SimpleOnShoveGestureListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPluginImpl.ShoveGestureListener>;
							public constructor();
							public onShoveBegin(param0: com.mapbox.android.gestures.ShoveGestureDetector): boolean;
							public onShove(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): boolean;
							public onShove(detector: com.mapbox.android.gestures.ShoveGestureDetector, deltaP_a46: number, deltaP_e4a: number): boolean;
							public onShoveEnd(detector: com.mapbox.android.gestures.ShoveGestureDetector, velocityX: number, velocityY: number): void;
							public constructor(this_0: com.mapbox.maps.plugin.gestures.GesturesPluginImpl);
							public onShoveBegin(detector: com.mapbox.android.gestures.ShoveGestureDetector): boolean;
							public onShoveEnd(param0: com.mapbox.android.gestures.ShoveGestureDetector, param1: number, param2: number): void;
						}
						export class StandardGestureListener extends com.mapbox.maps.plugin.gestures.StandardGestureListenerShim {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPluginImpl.StandardGestureListener>;
							public constructor();
							public onDoubleTapEvent(motion_1e5: globalAndroid.view.MotionEvent): boolean;
							public onLongPress(motion_1e5: globalAndroid.view.MotionEvent): void;
							public constructor(this_0: number);
							public onSingleTapUp(motion_1e5: globalAndroid.view.MotionEvent): boolean;
							public onSingleTapConfirmed(motion_1e5: globalAndroid.view.MotionEvent): boolean;
							public onDown(motion_1e5: globalAndroid.view.MotionEvent): boolean;
							public onFling(e1: globalAndroid.view.MotionEvent, e2: globalAndroid.view.MotionEvent, velocityX: number, velocityY: number): boolean;
						}
						export class TapGestureListener extends java.lang.Object implements com.mapbox.android.gestures.MultiFingerTapGestureDetector.OnMultiFingerTapGestureListener {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesPluginImpl.TapGestureListener>;
							public onMultiFingerTap(param0: com.mapbox.android.gestures.MultiFingerTapGestureDetector, param1: number): boolean;
							public onMultiFingerTap(it: com.mapbox.android.gestures.MultiFingerTapGestureDetector, zoomFo_69b: number): boolean;
							public constructor(this_0: com.mapbox.maps.plugin.gestures.GesturesPluginImpl);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class GesturesUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.GesturesUtils>;
						public static getGesturesManager(this_g_9be: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate): com.mapbox.android.gestures.AndroidGesturesManager;
						public static addOnMapClickListener(this_a_123: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, onMapC_70a: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public static isScrollVerticallyLimited(this_i_0dd: com.mapbox.maps.plugin.gestures.generated.GesturesSettings): boolean;
						public static getGestures(this_g_e7d: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.gestures.GesturesPlugin;
						public static addOnMoveListener(this_a_6e4: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public static removeOnMoveListener(this_r_709: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnMoveListener): void;
						public static removeOnMapLongClickListener(this_r_280: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, onMapL_150: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public static addOnFlingListener(this_a_e4d: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, onFlin_d4a: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public static removeOnShoveListener(this_r_97d: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
						public static removeOnMapClickListener(this_r_c3a: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, onMapC_70a: com.mapbox.maps.plugin.gestures.OnMapClickListener): void;
						public static removeOnRotateListener(this_r_26f: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public static isScrollHorizontallyLimited(this_i_c37: com.mapbox.maps.plugin.gestures.generated.GesturesSettings): boolean;
						public static addOnScaleListener(this_a_fc5: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						public static addOnRotateListener(this_a_0c6: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnRotateListener): void;
						public static addOnMapLongClickListener(this_a_d15: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, onMapL_150: com.mapbox.maps.plugin.gestures.OnMapLongClickListener): void;
						public static removeOnScaleListener(this_r_1ce: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnScaleListener): void;
						public static setGesturesManager(this_s_e4a: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, androi_8c3: com.mapbox.android.gestures.AndroidGesturesManager, attach_60a: boolean, setDef_73a: boolean): void;
						public static removeOnFlingListener(this_r_83a: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, onFlin_d4a: com.mapbox.maps.plugin.gestures.OnFlingListener): void;
						public static addOnShoveListener(this_a_302: com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, listener: com.mapbox.maps.plugin.gestures.OnShoveListener): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class OnFlingListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.OnFlingListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.OnFlingListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onFling(): void;
						});
						public constructor();
						public onFling(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class OnMapClickListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.OnMapClickListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.OnMapClickListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onMapClick(param0: com.mapbox.geojson.Point): boolean;
						});
						public constructor();
						public onMapClick(param0: com.mapbox.geojson.Point): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class OnMapLongClickListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.OnMapLongClickListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.OnMapLongClickListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onMapLongClick(param0: com.mapbox.geojson.Point): boolean;
						});
						public constructor();
						public onMapLongClick(param0: com.mapbox.geojson.Point): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class OnMoveListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.OnMoveListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.OnMoveListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onMoveBegin(param0: com.mapbox.android.gestures.MoveGestureDetector): void;
							onMove(param0: com.mapbox.android.gestures.MoveGestureDetector): boolean;
							onMoveEnd(param0: com.mapbox.android.gestures.MoveGestureDetector): void;
						});
						public constructor();
						public onMove(param0: com.mapbox.android.gestures.MoveGestureDetector): boolean;
						public onMoveEnd(param0: com.mapbox.android.gestures.MoveGestureDetector): void;
						public onMoveBegin(param0: com.mapbox.android.gestures.MoveGestureDetector): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class OnRotateListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.OnRotateListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.OnRotateListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onRotateBegin(param0: com.mapbox.android.gestures.RotateGestureDetector): void;
							onRotate(param0: com.mapbox.android.gestures.RotateGestureDetector): void;
							onRotateEnd(param0: com.mapbox.android.gestures.RotateGestureDetector): void;
						});
						public constructor();
						public onRotateBegin(param0: com.mapbox.android.gestures.RotateGestureDetector): void;
						public onRotate(param0: com.mapbox.android.gestures.RotateGestureDetector): void;
						public onRotateEnd(param0: com.mapbox.android.gestures.RotateGestureDetector): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class OnScaleListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.OnScaleListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.OnScaleListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onScaleBegin(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): void;
							onScale(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): void;
							onScaleEnd(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): void;
						});
						public constructor();
						public onScale(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): void;
						public onScaleEnd(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): void;
						public onScaleBegin(param0: com.mapbox.android.gestures.StandardScaleGestureDetector): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class OnShoveListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.OnShoveListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.OnShoveListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onShoveBegin(param0: com.mapbox.android.gestures.ShoveGestureDetector): void;
							onShove(param0: com.mapbox.android.gestures.ShoveGestureDetector): void;
							onShoveEnd(param0: com.mapbox.android.gestures.ShoveGestureDetector): void;
						});
						public constructor();
						public onShove(param0: com.mapbox.android.gestures.ShoveGestureDetector): void;
						public onShoveBegin(param0: com.mapbox.android.gestures.ShoveGestureDetector): void;
						public onShoveEnd(param0: com.mapbox.android.gestures.ShoveGestureDetector): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export class StandardGestureListenerShim extends com.mapbox.android.gestures.StandardGestureDetector.SimpleStandardOnGestureListener {
						public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.StandardGestureListenerShim>;
						public onLongPress(e: globalAndroid.view.MotionEvent): void;
						public onDoubleTap(e: globalAndroid.view.MotionEvent): boolean;
						public onDoubleTapEvent(e: globalAndroid.view.MotionEvent): boolean;
						public onScroll(e1: globalAndroid.view.MotionEvent, e2: globalAndroid.view.MotionEvent, distanceX: number, distanceY: number): boolean;
						public onFling(e1: globalAndroid.view.MotionEvent, e2: globalAndroid.view.MotionEvent, velocityX: number, velocityY: number): boolean;
						public onSingleTapUp(e: globalAndroid.view.MotionEvent): boolean;
						public onDown(e: globalAndroid.view.MotionEvent): boolean;
						public onSingleTapConfirmed(e: globalAndroid.view.MotionEvent): boolean;
						public onShowPress(e: globalAndroid.view.MotionEvent): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export namespace generated {
						export class GesturesAttributeParser extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesAttributeParser>;
							public static INSTANCE: com.mapbox.maps.plugin.gestures.generated.GesturesAttributeParser;
							public parseGesturesSettings(this_: globalAndroid.content.Context, context: globalAndroid.util.AttributeSet): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export namespace generated {
						export class GesturesSettings extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettings>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.gestures.generated.GesturesSettings>;
							public getQuickZoomEnabled(): boolean;
							public getPinchToZoomDecelerationEnabled(): boolean;
							public hashCode(): number;
							public getDoubleTouchToZoomOutEnabled(): boolean;
							public getPinchScrollEnabled(): boolean;
							public getZoomAnimationAmount(): number;
							public toString(): string;
							public getPitchEnabled(): boolean;
							public toBuilder(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
							public getIncreasePinchToZoomThresholdWhenRotating(): boolean;
							public getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
							public getScrollDecelerationEnabled(): boolean;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public getRotateEnabled(): boolean;
							public getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
							public equals(other: any): boolean;
							public describeContents(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public getScrollEnabled(): boolean;
							public getDoubleTapToZoomInEnabled(): boolean;
							public getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
							public getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
							public getRotateDecelerationEnabled(): boolean;
							public getPinchToZoomEnabled(): boolean;
						}
						export namespace GesturesSettings {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder>;
								public getScrollEnabled(): boolean;
								public getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
								public getPinchScrollEnabled(): boolean;
								public setZoomAnimationAmount(zoomAn_b1c: number): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getQuickZoomEnabled(): boolean;
								public getDoubleTapToZoomInEnabled(): boolean;
								public getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
								public setScrollMode(scrollMode: com.mapbox.maps.plugin.ScrollMode): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public setDoubleTapToZoomInEnabled(double_4f5: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public setSimultaneousRotateAndPinchToZoomEnabled(simult_bf3: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getRotateEnabled(): boolean;
								public setRotateDecelerationEnabled(rotate_906: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public setPitchEnabled(pitchE_a5a: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getScrollDecelerationEnabled(): boolean;
								public getZoomAnimationAmount(): number;
								public setDoubleTouchToZoomOutEnabled(double_f60: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getIncreasePinchToZoomThresholdWhenRotating(): boolean;
								public setIncreasePinchToZoomThresholdWhenRotating(increa_0c4: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public setFocalPoint(focalPoint: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public constructor();
								public getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
								public setPinchToZoomDecelerationEnabled(pinchT_997: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getPitchEnabled(): boolean;
								public getPinchToZoomDecelerationEnabled(): boolean;
								public setPinchToZoomEnabled(pinchT_012: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getDoubleTouchToZoomOutEnabled(): boolean;
								public setScrollEnabled(scroll_c9d: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public setRotateEnabled(rotate_2a7: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public setPinchScrollEnabled(pinchS_ba3: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getPinchToZoomEnabled(): boolean;
								public setIncreaseRotateThresholdWhenPinchingToZoom(increa_1f7: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getRotateDecelerationEnabled(): boolean;
								public build(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
								public setQuickZoomEnabled(quickZ_2d4: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
								public getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
								public setScrollDecelerationEnabled(scroll_c7c: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Builder;
							}
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.gestures.generated.GesturesSettings> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettings.Creator>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public constructor();
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.gestures.generated.GesturesSettings>;
								public newArray(param0: number): androidNative.Array<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export namespace generated {
						export abstract class GesturesSettingsBase extends java.lang.Object implements com.mapbox.maps.plugin.gestures.generated.GesturesSettingsInterface {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsBase>;
							public setPinchToZoomEnabled(value: boolean): void;
							public setScrollDecelerationEnabled(param0: boolean): void;
							/** @deprecated */
							public setIncreaseRotateThresholdWhenPinchingToZoom(param0: boolean): void;
							public setDoubleTouchToZoomOutEnabled(value: boolean): void;
							public setRotateEnabled(param0: boolean): void;
							public setQuickZoomEnabled(value: boolean): void;
							public setPinchToZoomDecelerationEnabled(value: boolean): void;
							public getScrollDecelerationEnabled(): boolean;
							public setPinchToZoomDecelerationEnabled(param0: boolean): void;
							public updateSettings(param0: any): void;
							public setPitchEnabled(value: boolean): void;
							public setZoomAnimationAmount(value: number): void;
							public setIncreasePinchToZoomThresholdWhenRotating(param0: boolean): void;
							public setScrollEnabled(param0: boolean): void;
							public getDoubleTapToZoomInEnabled(): boolean;
							/** @deprecated */
							public setIncreaseRotateThresholdWhenPinchingToZoom(value: boolean): void;
							public getPinchToZoomDecelerationEnabled(): boolean;
							public setPinchScrollEnabled(param0: boolean): void;
							public setDoubleTapToZoomInEnabled(value: boolean): void;
							public getInternalSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
							public getZoomAnimationAmount(): number;
							public getPitchEnabled(): boolean;
							public updateSettings(block: any): void;
							public setScrollEnabled(value: boolean): void;
							public getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
							public getRotateEnabled(): boolean;
							public getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
							public setDoubleTouchToZoomOutEnabled(param0: boolean): void;
							public getScrollEnabled(): boolean;
							public setSimultaneousRotateAndPinchToZoomEnabled(param0: boolean): void;
							public setScrollDecelerationEnabled(value: boolean): void;
							public setRotateEnabled(value: boolean): void;
							public getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
							public getRotateDecelerationEnabled(): boolean;
							/** @deprecated */
							public getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
							public setRotateDecelerationEnabled(param0: boolean): void;
							public getDoubleTouchToZoomOutEnabled(): boolean;
							public setRotateDecelerationEnabled(value: boolean): void;
							public getPinchScrollEnabled(): boolean;
							public setIncreasePinchToZoomThresholdWhenRotating(value: boolean): void;
							public setInternalSettings(param0: com.mapbox.maps.plugin.gestures.generated.GesturesSettings): void;
							public setZoomAnimationAmount(param0: number): void;
							public constructor();
							public getQuickZoomEnabled(): boolean;
							public setQuickZoomEnabled(param0: boolean): void;
							public setPinchToZoomEnabled(param0: boolean): void;
							public setPitchEnabled(param0: boolean): void;
							public setScrollMode(param0: com.mapbox.maps.plugin.ScrollMode): void;
							public getIncreasePinchToZoomThresholdWhenRotating(): boolean;
							public setDoubleTapToZoomInEnabled(param0: boolean): void;
							public setSimultaneousRotateAndPinchToZoomEnabled(value: boolean): void;
							public getSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
							public setScrollMode(value: com.mapbox.maps.plugin.ScrollMode): void;
							public applySettings(): void;
							public setFocalPoint(value: com.mapbox.maps.ScreenCoordinate): void;
							public getPinchToZoomEnabled(): boolean;
							public setPinchScrollEnabled(value: boolean): void;
							public setFocalPoint(param0: com.mapbox.maps.ScreenCoordinate): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export namespace generated {
						export class GesturesSettingsData extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsData>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsData>;
							public copy(rotate_2a7: boolean, pinchT_012: boolean, scroll_c9d: boolean, simult_bf3: boolean, pitchE_a5a: boolean, scrollMode: com.mapbox.maps.plugin.ScrollMode, double_4f5: boolean, double_f60: boolean, quickZ_2d4: boolean, focalPoint: com.mapbox.maps.ScreenCoordinate, pinchT_997: boolean, rotate_906: boolean, scroll_c7c: boolean, increa_1f7: boolean, increa_0c4: boolean, zoomAn_b1c: number, pinchS_ba3: boolean): com.mapbox.maps.plugin.gestures.generated.GesturesSettingsData;
							public setZoomAnimationAmount(zoomAn_b1c: number): void;
							public setIncreasePinchToZoomThresholdWhenRotating(increa_0c4: boolean): void;
							public setFocalPoint(focalPoint: com.mapbox.maps.ScreenCoordinate): void;
							public component15(): boolean;
							public setScrollEnabled(scroll_c9d: boolean): void;
							public setPitchEnabled(pitchE_a5a: boolean): void;
							public getScrollDecelerationEnabled(): boolean;
							public component14(): boolean;
							public equals(other: any): boolean;
							public describeContents(): number;
							public component11(): boolean;
							public component12(): boolean;
							public getDoubleTapToZoomInEnabled(): boolean;
							public setSimultaneousRotateAndPinchToZoomEnabled(simult_bf3: boolean): void;
							public component13(): boolean;
							public getPinchToZoomDecelerationEnabled(): boolean;
							public getZoomAnimationAmount(): number;
							public getPitchEnabled(): boolean;
							public component17(): boolean;
							public getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
							public setScrollDecelerationEnabled(scroll_c7c: boolean): void;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public getRotateEnabled(): boolean;
							public getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public getScrollEnabled(): boolean;
							public getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
							public getRotateDecelerationEnabled(): boolean;
							public component3(): boolean;
							public component1(): boolean;
							public component5(): boolean;
							public hashCode(): number;
							public component2(): boolean;
							public getDoubleTouchToZoomOutEnabled(): boolean;
							public getPinchScrollEnabled(): boolean;
							public setPinchToZoomEnabled(pinchT_012: boolean): void;
							public component7(): boolean;
							public setQuickZoomEnabled(quickZ_2d4: boolean): void;
							public toString(): string;
							public component6(): com.mapbox.maps.plugin.ScrollMode;
							public setDoubleTapToZoomInEnabled(double_4f5: boolean): void;
							public component8(): boolean;
							public component9(): boolean;
							public constructor(rotate_2a7: boolean, pinchT_012: boolean, scroll_c9d: boolean, simult_bf3: boolean, pitchE_a5a: boolean, scrollMode: com.mapbox.maps.plugin.ScrollMode, double_4f5: boolean, double_f60: boolean, quickZ_2d4: boolean, focalPoint: com.mapbox.maps.ScreenCoordinate, pinchT_997: boolean, rotate_906: boolean, scroll_c7c: boolean, increa_1f7: boolean, increa_0c4: boolean, zoomAn_b1c: number, pinchS_ba3: boolean);
							public setRotateEnabled(rotate_2a7: boolean): void;
							public setDoubleTouchToZoomOutEnabled(double_f60: boolean): void;
							public setPinchScrollEnabled(pinchS_ba3: boolean): void;
							public getQuickZoomEnabled(): boolean;
							public component16(): number;
							public getIncreasePinchToZoomThresholdWhenRotating(): boolean;
							public component10(): com.mapbox.maps.ScreenCoordinate;
							public setScrollMode(scrollMode: com.mapbox.maps.plugin.ScrollMode): void;
							public setPinchToZoomDecelerationEnabled(pinchT_997: boolean): void;
							public getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
							public setRotateDecelerationEnabled(rotate_906: boolean): void;
							public getPinchToZoomEnabled(): boolean;
							public component4(): boolean;
							public setIncreaseRotateThresholdWhenPinchingToZoom(increa_1f7: boolean): void;
						}
						export namespace GesturesSettingsData {
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsData> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsData.Creator>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.gestures.generated.GesturesSettingsData;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsData>;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace gestures {
					export namespace generated {
						export class GesturesSettingsInterface extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsInterface>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.gestures.generated.GesturesSettingsInterface interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
								updateSettings(param0: any): void;
								getRotateEnabled(): boolean;
								setRotateEnabled(param0: boolean): void;
								getPinchToZoomEnabled(): boolean;
								setPinchToZoomEnabled(param0: boolean): void;
								getScrollEnabled(): boolean;
								setScrollEnabled(param0: boolean): void;
								getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
								setSimultaneousRotateAndPinchToZoomEnabled(param0: boolean): void;
								getPitchEnabled(): boolean;
								setPitchEnabled(param0: boolean): void;
								getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
								setScrollMode(param0: com.mapbox.maps.plugin.ScrollMode): void;
								getDoubleTapToZoomInEnabled(): boolean;
								setDoubleTapToZoomInEnabled(param0: boolean): void;
								getDoubleTouchToZoomOutEnabled(): boolean;
								setDoubleTouchToZoomOutEnabled(param0: boolean): void;
								getQuickZoomEnabled(): boolean;
								setQuickZoomEnabled(param0: boolean): void;
								getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
								setFocalPoint(param0: com.mapbox.maps.ScreenCoordinate): void;
								getPinchToZoomDecelerationEnabled(): boolean;
								setPinchToZoomDecelerationEnabled(param0: boolean): void;
								getRotateDecelerationEnabled(): boolean;
								setRotateDecelerationEnabled(param0: boolean): void;
								getScrollDecelerationEnabled(): boolean;
								setScrollDecelerationEnabled(param0: boolean): void;
								getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
								setIncreaseRotateThresholdWhenPinchingToZoom(param0: boolean): void;
								getIncreasePinchToZoomThresholdWhenRotating(): boolean;
								setIncreasePinchToZoomThresholdWhenRotating(param0: boolean): void;
								getZoomAnimationAmount(): number;
								setZoomAnimationAmount(param0: number): void;
								getPinchScrollEnabled(): boolean;
								setPinchScrollEnabled(param0: boolean): void;
							});
							public constructor();
							public setScrollDecelerationEnabled(param0: boolean): void;
							public setRotateDecelerationEnabled(param0: boolean): void;
							/** @deprecated */
							public setIncreaseRotateThresholdWhenPinchingToZoom(param0: boolean): void;
							public setRotateEnabled(param0: boolean): void;
							public getDoubleTouchToZoomOutEnabled(): boolean;
							public getPinchScrollEnabled(): boolean;
							public setPinchToZoomDecelerationEnabled(param0: boolean): void;
							public getScrollDecelerationEnabled(): boolean;
							public updateSettings(param0: any): void;
							public setIncreasePinchToZoomThresholdWhenRotating(param0: boolean): void;
							public setScrollEnabled(param0: boolean): void;
							public getDoubleTapToZoomInEnabled(): boolean;
							public setZoomAnimationAmount(param0: number): void;
							public getQuickZoomEnabled(): boolean;
							public getPinchToZoomDecelerationEnabled(): boolean;
							public setQuickZoomEnabled(param0: boolean): void;
							public setPinchToZoomEnabled(param0: boolean): void;
							public setPitchEnabled(param0: boolean): void;
							public setPinchScrollEnabled(param0: boolean): void;
							public setScrollMode(param0: com.mapbox.maps.plugin.ScrollMode): void;
							public getZoomAnimationAmount(): number;
							public getPitchEnabled(): boolean;
							public getIncreasePinchToZoomThresholdWhenRotating(): boolean;
							public getSimultaneousRotateAndPinchToZoomEnabled(): boolean;
							public setDoubleTapToZoomInEnabled(param0: boolean): void;
							public getRotateEnabled(): boolean;
							public getFocalPoint(): com.mapbox.maps.ScreenCoordinate;
							public getSettings(): com.mapbox.maps.plugin.gestures.generated.GesturesSettings;
							public setDoubleTouchToZoomOutEnabled(param0: boolean): void;
							public getScrollEnabled(): boolean;
							public setSimultaneousRotateAndPinchToZoomEnabled(param0: boolean): void;
							public getScrollMode(): com.mapbox.maps.plugin.ScrollMode;
							public getRotateDecelerationEnabled(): boolean;
							/** @deprecated */
							public getIncreaseRotateThresholdWhenPinchingToZoom(): boolean;
							public getPinchToZoomEnabled(): boolean;
							public setFocalPoint(param0: com.mapbox.maps.ScreenCoordinate): void;
						}
						export namespace GesturesSettingsInterface {
							export class DefaultImpls extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.gestures.generated.GesturesSettingsInterface.DefaultImpls>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace lifecycle {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.lifecycle.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.lifecycle"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace lifecycle {
					export class LifecycleUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.lifecycle.LifecycleUtils>;
						public static getLifecycle(this_l_c97: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace lifecycle {
					export class MapboxLifecyclePlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							registerLifecycleObserver(param0: globalAndroid.view.View, param1: com.mapbox.maps.MapboxLifecycleObserver): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public registerLifecycleObserver(param0: globalAndroid.view.View, param1: com.mapbox.maps.MapboxLifecycleObserver): void;
						public initialize(): void;
						public cleanup(): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
					export namespace MapboxLifecyclePlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin.DefaultImpls>;
							public static initialize(this_: com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin): void;
							public static cleanup(this_: com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace lifecycle {
					export class MapboxLifecyclePluginImpl extends java.lang.Object implements com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.lifecycle.MapboxLifecyclePluginImpl>;
						public registerLifecycleObserver(compon_8bb: globalAndroid.view.View, this_: com.mapbox.maps.MapboxLifecycleObserver): void;
						public registerLifecycleObserver(param0: globalAndroid.view.View, param1: com.mapbox.maps.MapboxLifecycleObserver): void;
						public constructor();
						public initialize(): void;
						public cleanup(): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
					export namespace MapboxLifecyclePluginImpl {
						export namespace MapboxLifecyclePluginImpl {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace lifecycle {
					export class ViewLifecycleOwner extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.lifecycle.ViewLifecycleOwner>;
						public cleanUp(): void;
						public constructor(view: globalAndroid.view.View);
						public getViewLifecycleRegistry$plugin_lifecycle_release(): androidx.lifecycle.LifecycleRegistry;
						public getLifecycle(): androidx.lifecycle.LifecycleRegistry;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.locationcomponent"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class DefaultLocationProvider extends java.lang.Object implements com.mapbox.maps.plugin.locationcomponent.LocationProvider {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.DefaultLocationProvider>;
						public static INIT_UPDATE_DELAY: number; // 500
						public static MAX_UPDATE_DELAY: number; // 5000
						public static LIVE_TRACKING_CLIENT_NOT_AVAILABLE: string; // "LiveTrackingClient not available"
						public unRegisterLocationConsumer(locati_8a6: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
						public updatePuckBearing(source: com.mapbox.maps.plugin.PuckBearing): void;
						public addOnCompassCalibrationListener(listener: com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener): void;
						public removeCompassCalibrationListener(listener: com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener): void;
						public locationAnimatorOptions(options: any): void;
						public constructor(locati_403: globalAndroid.content.Context, error: com.mapbox.maps.plugin.locationcomponent.LocationCompassEngine, request: com.mapbox.common.location.LocationService, result: anyx.coroutines.CoroutineDispatcher);
						public registerLocationConsumer(this_: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
						public unRegisterLocationConsumer(param0: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
						public registerLocationConsumer(param0: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
						public constructor(context: globalAndroid.content.Context);
					}
					export namespace DefaultLocationProvider {
						export namespace DefaultLocationProvider {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LayerSourceProvider extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LayerSourceProvider>;
						public static INSTANCE: com.mapbox.maps.plugin.locationcomponent.LayerSourceProvider;
						public getModelSource(it: com.mapbox.maps.plugin.LocationPuck3D): com.mapbox.maps.plugin.locationcomponent.ModelSourceWrapper;
						public getModelLayer(it: com.mapbox.maps.plugin.LocationPuck3D): com.mapbox.maps.plugin.locationcomponent.ModelLayerWrapper;
						public getLocationIndicatorLayerRenderer(puckOp_56a: com.mapbox.maps.plugin.LocationPuck2D, weakCo_230: java.lang.ref.WeakReference<globalAndroid.content.Context>): com.mapbox.maps.plugin.locationcomponent.LocationIndicatorLayerRenderer;
						public getModelLayerRenderer(locati_7e2: com.mapbox.maps.plugin.LocationPuck3D): com.mapbox.maps.plugin.locationcomponent.ModelLayerRenderer;
						public getLocationIndicatorLayer(): com.mapbox.maps.plugin.locationcomponent.LocationIndicatorLayerWrapper;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationCompassCalibrationListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onCompassCalibrationNeeded(): void;
						});
						public constructor();
						public onCompassCalibrationNeeded(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationCompassEngine extends java.lang.Object implements globalAndroid.hardware.SensorEventListener {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationCompassEngine>;
						public removeCompassListener$plugin_locationcomponent_release(compas_a7f: com.mapbox.maps.plugin.locationcomponent.LocationCompassEngine.CompassListener): void;
						public onSensorChanged(event: globalAndroid.hardware.SensorEvent): void;
						public onAccuracyChanged(param0: globalAndroid.hardware.Sensor, param1: number): void;
						public addCalibrationListener(compas_36d: com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener): void;
						public removeCalibrationListener(compas_36d: com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener): void;
						public onSensorChanged(param0: globalAndroid.hardware.SensorEvent): void;
						public constructor(context: globalAndroid.content.Context);
						public addCompassListener$plugin_locationcomponent_release(compas_a7f: com.mapbox.maps.plugin.locationcomponent.LocationCompassEngine.CompassListener): void;
						public onAccuracyChanged(this_: globalAndroid.hardware.Sensor, sensor: number): void;
					}
					export namespace LocationCompassEngine {
						export namespace LocationCompassEngine {
							export namespace Companion {
							}
						}
						export class CompassListener extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationCompassEngine.CompassListener>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.LocationCompassEngine$CompassListener interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onCompassChanged(param0: number): void;
							});
							public constructor();
							public onCompassChanged(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationComponentConstants extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationComponentConstants>;
						public static INSTANCE: com.mapbox.maps.plugin.locationcomponent.LocationComponentConstants;
						public static COMPASS_UPDATE_RATE_MS: number; // 500
						public static TRANSITION_ANIMATION_DURATION_MS: number; // 750
						public static MAX_ANIMATION_DURATION_MS: number; // 2000
						public static ACCURACY_RADIUS_ANIMATION_DURATION: number; // 250
						public static DEFAULT_TRACKING_ZOOM_ANIM_DURATION: number; // 750
						public static DEFAULT_TRACKING_PADDING_ANIM_DURATION: number; // 750
						public static DEFAULT_TRACKING_TILT_ANIM_DURATION: number; // 1250
						public static INSTANT_LOCATION_TRANSITION_THRESHOLD: number; // 50000.0
						public static DEFAULT_INTERVAL_MILLIS: number; // 1000
						public static DEFAULT_FASTEST_INTERVAL_MILLIS: number; // 1000
						public static DEFAULT_MINIMUM_DISPLACEMENT_METERS: number; // 0.1
						public static LOCATION_INDICATOR_LAYER: string; // "mapbox-location-indicator-layer"
						public static MODEL_SOURCE: string; // "mapbox-location-model-source"
						public static MODEL_LAYER: string; // "mapbox-location-model-layer"
						public static TOP_ICON: string; // "mapbox-location-top-icon"
						public static SHADOW_ICON: string; // "mapbox-location-shadow-icon"
						public static BEARING_ICON: string; // "mapbox-location-bearing-icon"
						public static PULSING_MAX_RADIUS_FOLLOW_ACCURACY: number; // -1.0
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationComponentPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin, com.mapbox.maps.plugin.MapStyleObserverPlugin, com.mapbox.maps.plugin.LifecyclePlugin, com.mapbox.maps.plugin.ContextBinder, com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsInterface {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							setLocationProvider(param0: com.mapbox.maps.plugin.locationcomponent.LocationProvider): void;
							getLocationProvider(): com.mapbox.maps.plugin.locationcomponent.LocationProvider;
							addOnIndicatorPositionChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
							removeOnIndicatorPositionChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
							addOnIndicatorBearingChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
							removeOnIndicatorBearingChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
							isLocatedAt(param0: com.mapbox.geojson.Point, param1: com.mapbox.maps.plugin.locationcomponent.PuckLocatedAtPointListener): void;
							addOnIndicatorAccuracyRadiusChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
							removeOnIndicatorAccuracyRadiusChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
							onStart(): void;
							onStop(): void;
							bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
							getSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
							updateSettings(param0: any): void;
							getEnabled(): boolean;
							setEnabled(param0: boolean): void;
							getPulsingEnabled(): boolean;
							setPulsingEnabled(param0: boolean): void;
							getPulsingColor(): number;
							setPulsingColor(param0: number): void;
							getPulsingMaxRadius(): number;
							setPulsingMaxRadius(param0: number): void;
							getShowAccuracyRing(): boolean;
							setShowAccuracyRing(param0: boolean): void;
							getAccuracyRingColor(): number;
							setAccuracyRingColor(param0: number): void;
							getAccuracyRingBorderColor(): number;
							setAccuracyRingBorderColor(param0: number): void;
							getLayerAbove(): string;
							setLayerAbove(param0: string): void;
							getLayerBelow(): string;
							setLayerBelow(param0: string): void;
							getPuckBearingEnabled(): boolean;
							setPuckBearingEnabled(param0: boolean): void;
							getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
							setPuckBearing(param0: com.mapbox.maps.plugin.PuckBearing): void;
							getSlot(): string;
							setSlot(param0: string): void;
							getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
							setLocationPuck(param0: com.mapbox.maps.plugin.LocationPuck): void;
						});
						public constructor();
						public isLocatedAt(param0: com.mapbox.geojson.Point, param1: com.mapbox.maps.plugin.locationcomponent.PuckLocatedAtPointListener): void;
						public getAccuracyRingBorderColor(): number;
						public setAccuracyRingBorderColor(param0: number): void;
						public setShowAccuracyRing(param0: boolean): void;
						public getAccuracyRingColor(): number;
						public setLocationProvider(param0: com.mapbox.maps.plugin.locationcomponent.LocationProvider): void;
						public updateSettings(param0: any): void;
						public getLayerAbove(): string;
						public getSlot(): string;
						public bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
						public setLayerBelow(param0: string): void;
						public setPulsingMaxRadius(param0: number): void;
						public setPuckBearingEnabled(param0: boolean): void;
						public cleanup(): void;
						public getShowAccuracyRing(): boolean;
						public getPuckBearingEnabled(): boolean;
						public addOnIndicatorPositionChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public removeOnIndicatorBearingChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
						public getSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
						public setAccuracyRingColor(param0: number): void;
						public setPulsingColor(param0: number): void;
						public getPulsingColor(): number;
						public getPulsingMaxRadius(): number;
						public setLocationPuck(param0: com.mapbox.maps.plugin.LocationPuck): void;
						public addOnIndicatorAccuracyRadiusChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
						public getLocationProvider(): com.mapbox.maps.plugin.locationcomponent.LocationProvider;
						public removeOnIndicatorPositionChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
						public onStop(): void;
						public setEnabled(param0: boolean): void;
						public getPulsingEnabled(): boolean;
						public setPulsingEnabled(param0: boolean): void;
						public getEnabled(): boolean;
						public setSlot(param0: string): void;
						public setLayerAbove(param0: string): void;
						public initialize(): void;
						public getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
						public onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
						public getLayerBelow(): string;
						public getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
						public setPuckBearing(param0: com.mapbox.maps.plugin.PuckBearing): void;
						public addOnIndicatorBearingChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
						public onStart(): void;
						public removeOnIndicatorAccuracyRadiusChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
					}
					export namespace LocationComponentPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin.DefaultImpls>;
							public static onStart(this_: com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin): void;
							public static onStop(this_: com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							public static cleanup(this_: com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin): void;
							public static initialize(this_: com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationComponentPluginImpl extends com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsBase implements com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin, com.mapbox.maps.plugin.locationcomponent.LocationConsumer {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationComponentPluginImpl>;
						public internalSettings: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
						public getIndicatorAccuracyRadiusChangedListener$plugin_locationcomponent_release(): com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener;
						public getInternalSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
						public setAccuracyRingBorderColor(param0: number): void;
						public setShowAccuracyRing(param0: boolean): void;
						public setLocationComponentActivated$plugin_locationcomponent_release(locati_3a8: boolean): void;
						public setLocationProvider(param0: com.mapbox.maps.plugin.locationcomponent.LocationProvider): void;
						public bind$plugin_locationcomponent_release(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet, pixelRatio: number, locati_403: com.mapbox.maps.plugin.locationcomponent.LocationProvider, locati_9aa: com.mapbox.maps.plugin.locationcomponent.LocationPuckManager): void;
						public onHorizontalAccuracyRadiusUpdated(radius: androidNative.Array<number>, options: any): void;
						public getIndicatorPositionChangedListener$plugin_locationcomponent_release(): com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener;
						public onError(error: com.mapbox.common.location.LocationError): void;
						public getLayerAbove(): string;
						public onHorizontalAccuracyRadiusUpdated(param0: androidNative.Array<number>, param1: any): void;
						public removeOnIndicatorPositionChangedListener(listener: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
						public bind(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number): void;
						public setLayerBelow(param0: string): void;
						public setPuckBearingEnabled(param0: boolean): void;
						public addOnIndicatorAccuracyRadiusChangedListener(it: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
						public cleanup(): void;
						public getPuckBearingEnabled(): boolean;
						public onPuckAccuracyRadiusAnimatorDefaultOptionsUpdated(param0: any): void;
						public setLocationProvider$plugin_locationcomponent_release(locati_685: com.mapbox.maps.plugin.locationcomponent.LocationProvider): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public removeOnIndicatorBearingChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
						public removeOnIndicatorAccuracyRadiusChangedListener(listener: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
						public getSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
						public setAccuracyRingColor(param0: number): void;
						public constructor();
						public getPulsingColor(): number;
						public addOnIndicatorBearingChangedListener(it: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
						public bindToAnimatableModel$plugin_locationcomponent_release(animat_1ba: com.mapbox.maps.plugin.locationcomponent.model.AnimatableModel): void;
						public getLocationProvider(): com.mapbox.maps.plugin.locationcomponent.LocationProvider;
						public onStop(): void;
						public removeOnIndicatorPositionChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
						public getPulsingEnabled(): boolean;
						public setLocationPuckManager$plugin_locationcomponent_release(locati_fb6: com.mapbox.maps.plugin.locationcomponent.LocationPuckManager): void;
						public setPulsingEnabled(param0: boolean): void;
						public setInternalSettings(intern_bcd: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings): void;
						public initialize(): void;
						public onStyleChanged(param0: com.mapbox.maps.MapboxStyleManager): void;
						public getLayerBelow(): string;
						public onError(param0: com.mapbox.common.location.LocationError): void;
						public getLocationProvider$plugin_locationcomponent_release(): com.mapbox.maps.plugin.locationcomponent.LocationProvider;
						public onStart(): void;
						public addOnIndicatorBearingChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
						public onLocationUpdated(location: androidNative.Array<com.mapbox.geojson.Point>, options: any): void;
						public onPuckAccuracyRadiusAnimatorDefaultOptionsUpdated(options: any): void;
						public isLocatedAt(param0: com.mapbox.geojson.Point, param1: com.mapbox.maps.plugin.locationcomponent.PuckLocatedAtPointListener): void;
						public getAccuracyRingBorderColor(): number;
						public addOnIndicatorPositionChangedListener(it: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
						public getIndicatorBearingChangedListener$plugin_locationcomponent_release(): com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener;
						public getLocationPuckManager$plugin_locationcomponent_release(): com.mapbox.maps.plugin.locationcomponent.LocationPuckManager;
						public getAccuracyRingColor(): number;
						public onBearingUpdated(bearing: androidNative.Array<number>, options: any): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public updateSettings(param0: any): void;
						public onBearingUpdated(param0: androidNative.Array<number>, param1: any): void;
						public onPuckBearingAnimatorDefaultOptionsUpdated(options: any): void;
						public onPuckLocationAnimatorDefaultOptionsUpdated(options: any): void;
						public getSlot(): string;
						public setPulsingMaxRadius(param0: number): void;
						public getShowAccuracyRing(): boolean;
						public bind(this_b_348: globalAndroid.content.Context, this_: globalAndroid.util.AttributeSet, context: number): void;
						public addOnIndicatorPositionChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener): void;
						public onLocationUpdated(param0: androidNative.Array<com.mapbox.geojson.Point>, param1: any): void;
						public removeOnIndicatorBearingChangedListener(listener: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener): void;
						public setPulsingColor(param0: number): void;
						public onPuckBearingAnimatorDefaultOptionsUpdated(param0: any): void;
						public getPulsingMaxRadius(): number;
						public setLocationPuck(param0: com.mapbox.maps.plugin.LocationPuck): void;
						public addOnIndicatorAccuracyRadiusChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
						public setEnabled(param0: boolean): void;
						public applySettings(): void;
						public setLocationProvider(locati_403: com.mapbox.maps.plugin.locationcomponent.LocationProvider): void;
						public onStyleChanged(style: com.mapbox.maps.MapboxStyleManager): void;
						public isLocationComponentActivated$plugin_locationcomponent_release(): boolean;
						public onPuckLocationAnimatorDefaultOptionsUpdated(param0: any): void;
						public getEnabled(): boolean;
						public setSlot(param0: string): void;
						public setLayerAbove(param0: string): void;
						public getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
						public getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
						public setPuckBearing(param0: com.mapbox.maps.plugin.PuckBearing): void;
						public isLocatedAt(point: com.mapbox.geojson.Point, listener: com.mapbox.maps.plugin.locationcomponent.PuckLocatedAtPointListener): void;
						public removeOnIndicatorAccuracyRadiusChangedListener(param0: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationComponentPositionManager extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager>;
						public constructor(style: com.mapbox.maps.MapboxStyleManager, layerAbove: string, layerBelow: string);
						public update(this_: string, layerAbove: string): boolean;
						public setLayerAbove$plugin_locationcomponent_release(layerA_de9: string): void;
						public addLayerToMap(layer: com.mapbox.maps.plugin.locationcomponent.LocationLayerWrapper): void;
						public updateStyle(style: com.mapbox.maps.MapboxStyleManager): void;
						public getLayerAbove$plugin_locationcomponent_release(): string;
						public getLayerBelow$plugin_locationcomponent_release(): string;
						public setLayerBelow$plugin_locationcomponent_release(layerB_26d: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationComponentUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationComponentUtils>;
						public static createDefault2DPuck(withBe_aa9: boolean): com.mapbox.maps.plugin.LocationPuck2D;
						public static getLocationComponent(this_l_02e: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin;
						public static createDefault2DPuck(): com.mapbox.maps.plugin.LocationPuck2D;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationConsumer extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationConsumer>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.LocationConsumer interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onLocationUpdated(param0: androidNative.Array<com.mapbox.geojson.Point>, param1: any): void;
							onBearingUpdated(param0: androidNative.Array<number>, param1: any): void;
							onPuckLocationAnimatorDefaultOptionsUpdated(param0: any): void;
							onPuckBearingAnimatorDefaultOptionsUpdated(param0: any): void;
							onHorizontalAccuracyRadiusUpdated(param0: androidNative.Array<number>, param1: any): void;
							onPuckAccuracyRadiusAnimatorDefaultOptionsUpdated(param0: any): void;
							onError(param0: com.mapbox.common.location.LocationError): void;
						});
						public constructor();
						public onLocationUpdated(param0: androidNative.Array<com.mapbox.geojson.Point>, param1: any): void;
						public onPuckLocationAnimatorDefaultOptionsUpdated(param0: any): void;
						public onHorizontalAccuracyRadiusUpdated(param0: androidNative.Array<number>, param1: any): void;
						public onPuckBearingAnimatorDefaultOptionsUpdated(param0: any): void;
						public onError(param0: com.mapbox.common.location.LocationError): void;
						public onBearingUpdated(param0: androidNative.Array<number>, param1: any): void;
						public onPuckAccuracyRadiusAnimatorDefaultOptionsUpdated(param0: any): void;
					}
					export namespace LocationConsumer {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationConsumer.DefaultImpls>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationIndicatorLayerRenderer extends java.lang.Object implements com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationIndicatorLayerRenderer>;
						public styleAccuracy(border_d4f: number, rgbaEx_749: number): void;
						public updateStyle(style: com.mapbox.maps.MapboxStyleManager): void;
						public setAccuracyRadius(param0: number): void;
						public isRendererInitialised(): boolean;
						public setAccuracyRadius(accuracy: number): void;
						public styleScaling(scaleE_307: com.mapbox.bindgen.Value): void;
						public clearBitmaps(): void;
						public styleAccuracy(param0: number, param1: number): void;
						public slot(param0: string): void;
						public updatePulsingUi(param0: number, param1: number, param2: java.lang.Float): void;
						public removeLayers(): void;
						public setBearing(param0: number): void;
						public slot(slot: string): void;
						public styleScaling(param0: com.mapbox.bindgen.Value): void;
						public addLayers(positi_6f1: com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager): void;
						public initializeComponents(style: com.mapbox.maps.MapboxStyleManager): void;
						public adjustPulsingCircleLayerVisibility(visible: boolean): void;
						public hide(): void;
						public constructor(puckOp_56a: com.mapbox.maps.plugin.LocationPuck2D, weakCo_230: java.lang.ref.WeakReference<globalAndroid.content.Context>, layer: com.mapbox.maps.plugin.locationcomponent.LocationIndicatorLayerWrapper);
						public setLatLng(latLng: com.mapbox.geojson.Point): void;
						public setBearing(bearing: number): void;
						public updatePulsingUi(this_: number, pulsin_9f5: number, radius: java.lang.Float): void;
						public initializeComponents(param0: com.mapbox.maps.MapboxStyleManager): void;
						public show(): void;
						public adjustPulsingCircleLayerVisibility(param0: boolean): void;
						public setLatLng(param0: com.mapbox.geojson.Point): void;
						public updateStyle(param0: com.mapbox.maps.MapboxStyleManager): void;
						public addLayers(param0: com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager): void;
					}
					export namespace LocationIndicatorLayerRenderer {
						export namespace LocationIndicatorLayerRenderer {
							export namespace Companion {
								function buildRGBAExpression(colorArray: androidNative.Array<number>): java.util.List<com.mapbox.bindgen.Value>;
								function colorIntToRgbaExpression(decima_15f: number): java.util.List<com.mapbox.bindgen.Value>;
								function colorToRgbaArray(color: number): androidNative.Array<number>;
								function buildRGBAExpression(colorArray: androidNative.Array<number>): java.util.List<com.mapbox.bindgen.Value>;
								function colorIntToRgbaExpression(decima_15f: number): java.util.List<com.mapbox.bindgen.Value>;
								function colorToRgbaArray(color: number): androidNative.Array<number>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationIndicatorLayerWrapper extends com.mapbox.maps.plugin.locationcomponent.LocationLayerWrapper {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationIndicatorLayerWrapper>;
						public bearing(bearing: number): void;
						public bearingImageSize(bearin_235: com.mapbox.bindgen.Value): void;
						public shadowImage(shadow_196: string): void;
						public emphasisCircleRadius(emphas_bbd: number): void;
						public accuracyRadiusBorderColor(expression: java.util.List<any>): void;
						public accuracyRadius(accura_b9a: number): void;
						public accuracyRadiusColor(expression: java.util.List<any>): void;
						public shadowImageSize(shadow_d79: com.mapbox.bindgen.Value): void;
						public location(p0: java.util.List<java.lang.Double>): void;
						public slot(slot: string): void;
						public constructor(layerId: string);
						public emphasisCircleColorTransition(this_: number, delay: number): void;
						public topImageSize(topIma_82a: com.mapbox.bindgen.Value): void;
						public opacity(opacity: number): void;
						public emphasisCircleColor(emphas_48c: java.util.List<any>): void;
						public bearingImage(bearin_8da: string): void;
						public topImage(topImage: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationLayerRenderer extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							initializeComponents(param0: com.mapbox.maps.MapboxStyleManager): void;
							isRendererInitialised(): boolean;
							addLayers(param0: com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager): void;
							removeLayers(): void;
							hide(): void;
							show(): void;
							styleAccuracy(param0: number, param1: number): void;
							setLatLng(param0: com.mapbox.geojson.Point): void;
							setBearing(param0: number): void;
							setAccuracyRadius(param0: number): void;
							styleScaling(param0: com.mapbox.bindgen.Value): void;
							adjustPulsingCircleLayerVisibility(param0: boolean): void;
							updatePulsingUi(param0: number, param1: number, param2: java.lang.Float): void;
							clearBitmaps(): void;
							updateStyle(param0: com.mapbox.maps.MapboxStyleManager): void;
							slot(param0: string): void;
						});
						public constructor();
						public setAccuracyRadius(param0: number): void;
						public isRendererInitialised(): boolean;
						public clearBitmaps(): void;
						public hide(): void;
						public styleAccuracy(param0: number, param1: number): void;
						public slot(param0: string): void;
						public updatePulsingUi(param0: number, param1: number, param2: java.lang.Float): void;
						public removeLayers(): void;
						public setBearing(param0: number): void;
						public styleScaling(param0: com.mapbox.bindgen.Value): void;
						public initializeComponents(param0: com.mapbox.maps.MapboxStyleManager): void;
						public show(): void;
						public adjustPulsingCircleLayerVisibility(param0: boolean): void;
						public setLatLng(param0: com.mapbox.geojson.Point): void;
						public updateStyle(param0: com.mapbox.maps.MapboxStyleManager): void;
						public addLayers(param0: com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationLayerWrapper extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationLayerWrapper>;
						public getLayerProperties(): java.util.HashMap<string,com.mapbox.bindgen.Value>;
						public setLayerProperties(layerP_8e3: java.util.HashMap<string,com.mapbox.bindgen.Value>): void;
						public constructor(layerId: string);
						public updateStyle(style: com.mapbox.maps.MapboxStyleManager): void;
						public visibility(visibility: boolean): void;
						public updateProperty(it: string, i_a_le_ae0: com.mapbox.bindgen.Value): void;
						public toValue(): com.mapbox.bindgen.Value;
						public getLayerId(): string;
						public bindTo(it: com.mapbox.maps.MapboxStyleManager, expected: com.mapbox.maps.LayerPosition): void;
					}
					export namespace LocationLayerWrapper {
						export namespace LocationLayerWrapper {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationProvider extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationProvider>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.LocationProvider interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							registerLocationConsumer(param0: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
							unRegisterLocationConsumer(param0: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
						});
						public constructor();
						public unRegisterLocationConsumer(param0: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
						public registerLocationConsumer(param0: com.mapbox.maps.plugin.locationcomponent.LocationConsumer): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class LocationPuckManager extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.LocationPuckManager>;
						public static BEARING_UPDATE_THRESHOLD: number; // 1.0
						public static TAG: string; // "LocationPuckManager"
						public cleanUp(): void;
						public updateStyle(style: com.mapbox.maps.MapboxStyleManager): void;
						public updateCurrentBearing(bearings: androidNative.Array<number>, options: any, forceU_d25: boolean): void;
						public getLastLocation$plugin_locationcomponent_release(): com.mapbox.geojson.Point;
						public setLastLocation$plugin_locationcomponent_release(lastLo_85e: com.mapbox.geojson.Point): void;
						public updateAccuracyRadiusAnimator(block: any): void;
						public show(forceU_d25: boolean): void;
						public setHidden$plugin_locationcomponent_release(hidden_d1b: boolean): void;
						public setLastBearing$plugin_locationcomponent_release(lastBe_7fb: number): void;
						public animateToBearing(this_: androidNative.Array<number>, bearings: any, options: boolean): void;
						public constructor(settings: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings, weakCo_230: java.lang.ref.WeakReference<globalAndroid.content.Context>, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider, positi_6f1: com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager, animat_0d4: com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimatorManager);
						public updateCurrentPosition(it: androidNative.Array<com.mapbox.geojson.Point>, targets: any): void;
						public getLocationLayerRenderer$plugin_locationcomponent_release(): com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer;
						public setLocationLayerRenderer$plugin_locationcomponent_release(locati_ca0: com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer): void;
						public updateBearingAnimator(block: any): void;
						public updateMaxPulsingRadiusToFollowAccuracyRing$plugin_locationcomponent_release(this_: number): void;
						public updateLocationAnimator(block: any): void;
						public isLayerInitialised(): boolean;
						public getSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
						public styleScaling$plugin_locationcomponent_release(i_a_le_04e: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings): void;
						public initialize(it: com.mapbox.maps.MapboxStyleManager): void;
						public onLocationError(error: com.mapbox.common.location.LocationError): void;
						public hide(): void;
						public isHidden$plugin_locationcomponent_release(): boolean;
						public onStop(): void;
						public updateSettings(settings: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings): void;
						public updateHorizontalAccuracyRadius(this_: androidNative.Array<number>, radius: any): void;
						public getLastBearing$plugin_locationcomponent_release(): number;
						public setSettings(settings: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings): void;
						public onStart(): void;
					}
					export namespace LocationPuckManager {
						export namespace LocationPuckManager {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class ModelLayerRenderer extends java.lang.Object implements com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.ModelLayerRenderer>;
						public updateStyle(style: com.mapbox.maps.MapboxStyleManager): void;
						public setAccuracyRadius(param0: number): void;
						public isRendererInitialised(): boolean;
						public setAccuracyRadius(accuracy: number): void;
						public getLastLocation$plugin_locationcomponent_release(): com.mapbox.geojson.Point;
						public setLastLocation$plugin_locationcomponent_release(lastLo_85e: com.mapbox.geojson.Point): void;
						public styleScaling(scaleE_307: com.mapbox.bindgen.Value): void;
						public clearBitmaps(): void;
						public styleAccuracy(param0: number, param1: number): void;
						public slot(param0: string): void;
						public updatePulsingUi(param0: number, param1: number, param2: java.lang.Float): void;
						public removeLayers(): void;
						public setBearing(param0: number): void;
						public slot(slot: string): void;
						public styleScaling(param0: com.mapbox.bindgen.Value): void;
						public addLayers(positi_6f1: com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager): void;
						public styleAccuracy(accura_feb: number, accura_75d: number): void;
						public initializeComponents(style: com.mapbox.maps.MapboxStyleManager): void;
						public adjustPulsingCircleLayerVisibility(visible: boolean): void;
						public hide(): void;
						public setLatLng(latLng: com.mapbox.geojson.Point): void;
						public setBearing(bearing: number): void;
						public updatePulsingUi(pulsin_9f5: number, radius: number, opacity: java.lang.Float): void;
						public initializeComponents(param0: com.mapbox.maps.MapboxStyleManager): void;
						public show(): void;
						public adjustPulsingCircleLayerVisibility(param0: boolean): void;
						public setLatLng(param0: com.mapbox.geojson.Point): void;
						public updateStyle(param0: com.mapbox.maps.MapboxStyleManager): void;
						public addLayers(param0: com.mapbox.maps.plugin.locationcomponent.LocationComponentPositionManager): void;
						public constructor(layerS_58a: com.mapbox.maps.plugin.locationcomponent.LayerSourceProvider, locati_7e2: com.mapbox.maps.plugin.LocationPuck3D);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class ModelLayerWrapper extends com.mapbox.maps.plugin.locationcomponent.LocationLayerWrapper {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.ModelLayerWrapper>;
						public slot(slot: string): void;
						public constructor(layerId: string);
						public modelElevationReference(modelE_026: com.mapbox.maps.plugin.ModelElevationReference): void;
						public modelScale(p0: java.util.List<java.lang.Double>): void;
						public modelScaleMode(modelS_4e3: com.mapbox.maps.plugin.ModelScaleMode): void;
						public modelTranslation(p0: java.util.List<java.lang.Double>): void;
						public modelOpacity(opacity: number): void;
						public modelScaleExpression(scaleE_307: com.mapbox.bindgen.Value): void;
						public constructor(p0: string, item_iv_iv: string, i_f_mapTo: java.util.List<java.lang.Double>, this_m_d96: java.util.List<java.lang.Double>, destin_69d: com.mapbox.bindgen.Value, i_f_map: java.util.List<java.lang.Double>, this_m_6c4: boolean, i_a_ma_096: boolean, p0_1: number, item_iv__1: com.mapbox.bindgen.Value, i_f_mapT_1: com.mapbox.maps.plugin.ModelScaleMode, this_m_d_1: number, destin_6_1: com.mapbox.bindgen.Value, i_f_map_1: number, this_m_6_1: com.mapbox.bindgen.Value, i_a_ma_229: number, p0_2: com.mapbox.bindgen.Value, item_iv__2: com.mapbox.maps.plugin.ModelElevationReference);
						public modelRotation(p0: java.util.List<java.lang.Double>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class ModelSourceWrapper extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.ModelSourceWrapper>;
						public static DEFAULT_MODEL_NAME: string; // "defaultModel"
						public static MODELS: string; // "models"
						public static TYPE: string; // "model"
						public static URL: string; // "uri"
						public static POSITION: string; // "position"
						public static ORIENTATION: string; // "orientation"
						public static MATERIAL_OVERRIDES: string; // "materialOverrides"
						public static NODE_OVERRIDES: string; // "nodeOverrides"
						public updateStyle(style: com.mapbox.maps.MapboxStyleManager): void;
						public constructor(p0: string, item_iv_iv: string, i_f_mapTo: java.util.List<java.lang.Double>, this_m_d96: java.util.List<string>, destin_69d: java.util.List<string>);
						public setPositionAndOrientation(p0: java.util.List<java.lang.Double>, item_iv_iv: java.util.List<java.lang.Double>): void;
						public toValue(): com.mapbox.bindgen.Value;
						public getSourceId(): string;
						public bindTo(it: com.mapbox.maps.MapboxStyleManager): void;
					}
					export namespace ModelSourceWrapper {
						export namespace ModelSourceWrapper {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class OnIndicatorAccuracyRadiusChangedListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onIndicatorAccuracyRadiusChanged(param0: number): void;
						});
						public constructor();
						public onIndicatorAccuracyRadiusChanged(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class OnIndicatorBearingChangedListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onIndicatorBearingChanged(param0: number): void;
						});
						public constructor();
						public onIndicatorBearingChanged(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class OnIndicatorPositionChangedListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onIndicatorPositionChanged(param0: com.mapbox.geojson.Point): void;
						});
						public constructor();
						public onIndicatorPositionChanged(param0: com.mapbox.geojson.Point): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export class PuckLocatedAtPointListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.PuckLocatedAtPointListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.PuckLocatedAtPointListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onResult(param0: boolean): void;
						});
						public constructor();
						public onResult(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace animators {
						export class Evaluators extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.animators.Evaluators>;
							public static INSTANCE: com.mapbox.maps.plugin.locationcomponent.animators.Evaluators;
							public getDOUBLE(): globalAndroid.animation.TypeEvaluator<java.lang.Double>;
							public getPOINT(): globalAndroid.animation.TypeEvaluator<com.mapbox.geojson.Point>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace animators {
						export class PuckAccuracyRadiusAnimator extends com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimator<java.lang.Double> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.animators.PuckAccuracyRadiusAnimator>;
							public constructor(this_: globalAndroid.animation.TypeEvaluator<any>);
							public constructor();
							public updateLayer(param0: number, param1: any): void;
							public getAccuracyCircleColor$plugin_locationcomponent_release(): number;
							public constructor(accura_aa2: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener);
							public setAccuracyCircleColor$plugin_locationcomponent_release(accura_e91: number): void;
							public getAccuracyCircleBorderColor$plugin_locationcomponent_release(): number;
							public setAccuracyCircleBorderColor$plugin_locationcomponent_release(accura_ecb: number): void;
							public updateLayer(this_: number, fraction: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace animators {
						export abstract class PuckAnimator<T>  extends globalAndroid.animation.ValueAnimator {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimator<any>>;
							public constructor();
							public constructor(this_: globalAndroid.animation.TypeEvaluator<any>);
							public getUserConfiguredAnimator$plugin_locationcomponent_release(): globalAndroid.animation.ValueAnimator;
							public updateLayer(param0: number, param1: any): void;
							public animate(targets: androidNative.Array<any>, options: any): void;
							public getLocationRenderer(): com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer;
							public setUpdateListener(update_d24: any): void;
							public updateOptions(block: any): void;
							public getUpdateListener$plugin_locationcomponent_release(): any;
							public setLocationRenderer(locati_cdd: com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer): void;
							public addUpdateListener(listener: globalAndroid.animation.ValueAnimator.AnimatorUpdateListener): void;
							public cancelRunning(): void;
							public setUserConfiguredAnimator$plugin_locationcomponent_release(userCo_51d: globalAndroid.animation.ValueAnimator): void;
							public setEvaluator(value: globalAndroid.animation.TypeEvaluator<any>): void;
							public clone(): any;
							public setUpdateListener$plugin_locationcomponent_release(update_090: any): void;
							public setLocationLayerRenderer(renderer: com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer): void;
							public setEnabled$plugin_locationcomponent_release(enable_eea: boolean): void;
							public clone(): globalAndroid.animation.Animator;
							public clone(): globalAndroid.animation.ValueAnimator;
							public setObjectValues(values: androidNative.Array<any>): void;
							public getEnabled$plugin_locationcomponent_release(): boolean;
						}
						export namespace PuckAnimator {
							export namespace PuckAnimator {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace animators {
						export class PuckAnimatorManager extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimatorManager>;
							public getPuckAnimationEnabled$plugin_locationcomponent_release(): boolean;
							public setUpdateListeners(onLoca_4e6: any, onBear_35d: any, onAccu_472: any): void;
							public updateAccuracyRadiusAnimator(block: any): void;
							public animatePosition(targets: androidNative.Array<com.mapbox.geojson.Point>, options: any): void;
							public onStop(): void;
							public animateBearing(targets: androidNative.Array<number>, options: any): void;
							public updatePulsingRadius(this_u_581: number, this_: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings): void;
							public updatePositionAnimator(block: any): void;
							public applySettings(this_a_808: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings): void;
							public updateBearingAnimator(block: any): void;
							public setLocationLayerRenderer(renderer: com.mapbox.maps.plugin.locationcomponent.LocationLayerRenderer): void;
							public constructor(indica_d87: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener, indica_500: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener, indica_e9f: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener, pixelRatio: number);
							public setPuckAnimationEnabled$plugin_locationcomponent_release(value: boolean): void;
							public constructor(indica_d87: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener, indica_500: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener, indica_e9f: com.mapbox.maps.plugin.locationcomponent.OnIndicatorAccuracyRadiusChangedListener, bearin_d74: com.mapbox.maps.plugin.locationcomponent.animators.PuckBearingAnimator, positi_73b: com.mapbox.maps.plugin.locationcomponent.animators.PuckPositionAnimator, pulsin_668: com.mapbox.maps.plugin.locationcomponent.animators.PuckPulsingAnimator, radius_3f6: com.mapbox.maps.plugin.locationcomponent.animators.PuckAccuracyRadiusAnimator, pixelRatio: number);
							public onStart(): void;
							public animateAccuracyRadius(targets: androidNative.Array<number>, options: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace animators {
						export class PuckBearingAnimator extends com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimator<java.lang.Double> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.animators.PuckBearingAnimator>;
							public constructor(this_: globalAndroid.animation.TypeEvaluator<any>);
							public constructor();
							public updateLayer(param0: number, param1: any): void;
							public constructor(indica_500: com.mapbox.maps.plugin.locationcomponent.OnIndicatorBearingChangedListener);
							public updateLayer(fraction: number, value: number): void;
							public setEnabled$plugin_locationcomponent_release(enable_eea: boolean): void;
							public getEnabled$plugin_locationcomponent_release(): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace animators {
						export class PuckPositionAnimator extends com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimator<com.mapbox.geojson.Point> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.animators.PuckPositionAnimator>;
							public constructor(this_: globalAndroid.animation.TypeEvaluator<any>);
							public constructor();
							public updateLayer(param0: number, param1: any): void;
							public updateLayer(fraction: number, value: com.mapbox.geojson.Point): void;
							public constructor(indica_d87: com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace animators {
						export class PuckPulsingAnimator extends com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimator<java.lang.Double> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.animators.PuckPulsingAnimator>;
							public static PULSING_DEFAULT_DURATION: number; // 3000
							public static DEFAULT_RADIUS_DP: number; // 10.0
							public constructor(this_: globalAndroid.animation.TypeEvaluator<any>);
							public constructor();
							public getPulsingColor(): number;
							public updateLayer(param0: number, param1: any): void;
							public animateInfinite(): void;
							public constructor(pixelRatio: number);
							public setPulsingColor(pulsin_3cc: number): void;
							public getMaxRadius(): number;
							public setMaxRadius(maxRadius: number): void;
							public updateLayer(this_: number, fraction: number): void;
						}
						export namespace PuckPulsingAnimator {
							export namespace PuckPulsingAnimator {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace generated {
						export class LocationComponentAttributeParser extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentAttributeParser>;
							public static INSTANCE: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentAttributeParser;
							public parseLocationComponentSettings(it: globalAndroid.content.Context, i_a_le_32d: globalAndroid.util.AttributeSet, it_1: number): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace generated {
						export class LocationComponentSettings extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings>;
							public getShowAccuracyRing(): boolean;
							public hashCode(): number;
							public getAccuracyRingColor(): number;
							public getAccuracyRingBorderColor(): number;
							public toString(): string;
							public getPuckBearingEnabled(): boolean;
							public getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
							public getPulsingColor(): number;
							public getEnabled(): boolean;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public getPulsingMaxRadius(): number;
							public equals(other: any): boolean;
							public describeContents(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public toBuilder(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
							public getPulsingEnabled(): boolean;
							public getSlot(): string;
							public getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
							public getLayerAbove(): string;
							public getLayerBelow(): string;
						}
						export namespace LocationComponentSettings {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder>;
								public setLayerBelow(layerBelow: string): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public getLayerAbove(): string;
								public getAccuracyRingColor(): number;
								public setSlot(slot: string): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public getLayerBelow(): string;
								public setAccuracyRingColor(accura_661: number): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public setAccuracyRingBorderColor(accura_a13: number): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public getPuckBearingEnabled(): boolean;
								public setShowAccuracyRing(showAc_77f: boolean): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public getPulsingColor(): number;
								public getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
								public getAccuracyRingBorderColor(): number;
								public setPulsingColor(pulsin_3cc: number): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public build(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
								public getShowAccuracyRing(): boolean;
								public setPulsingMaxRadius(pulsin_a5b: number): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public constructor(locati_98b: com.mapbox.maps.plugin.LocationPuck);
								public getPulsingEnabled(): boolean;
								public setPuckBearing(puckBe_d86: com.mapbox.maps.plugin.PuckBearing): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public setLayerAbove(layerAbove: string): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public setLocationPuck(locati_98b: com.mapbox.maps.plugin.LocationPuck): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public setPuckBearingEnabled(puckBe_4f3: boolean): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public getPulsingMaxRadius(): number;
								public setEnabled(enabled: boolean): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public setPulsingEnabled(pulsin_2a2: boolean): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Builder;
								public getEnabled(): boolean;
								public getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
								public getSlot(): string;
							}
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings.Creator>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings>;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace generated {
						export abstract class LocationComponentSettingsBase extends java.lang.Object implements com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsInterface {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsBase>;
							public setPuckBearing(value: com.mapbox.maps.plugin.PuckBearing): void;
							public getShowAccuracyRing(): boolean;
							public setPuckBearingEnabled(param0: boolean): void;
							public setPulsingMaxRadius(value: number): void;
							public setAccuracyRingBorderColor(param0: number): void;
							public setLayerAbove(value: string): void;
							public setPulsingEnabled(value: boolean): void;
							public setPuckBearingEnabled(value: boolean): void;
							public setLocationPuck(value: com.mapbox.maps.plugin.LocationPuck): void;
							public setInternalSettings(param0: com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings): void;
							public getEnabled(): boolean;
							public updateSettings(param0: any): void;
							public setEnabled(value: boolean): void;
							public getPulsingMaxRadius(): number;
							public setPulsingMaxRadius(param0: number): void;
							public setPulsingColor(value: number): void;
							public setAccuracyRingColor(param0: number): void;
							public setAccuracyRingBorderColor(value: number): void;
							public getSlot(): string;
							public getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
							public setEnabled(param0: boolean): void;
							public setSlot(param0: string): void;
							public setShowAccuracyRing(value: boolean): void;
							public getLayerAbove(): string;
							public constructor();
							public setSlot(value: string): void;
							public setPulsingEnabled(param0: boolean): void;
							public getInternalSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
							public getAccuracyRingColor(): number;
							public setAccuracyRingColor(value: number): void;
							public getAccuracyRingBorderColor(): number;
							public setLayerBelow(param0: string): void;
							public setPulsingColor(param0: number): void;
							public getSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
							public getPuckBearingEnabled(): boolean;
							public getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
							public updateSettings(block: any): void;
							public getPulsingColor(): number;
							public setPuckBearing(param0: com.mapbox.maps.plugin.PuckBearing): void;
							public setShowAccuracyRing(param0: boolean): void;
							public setLayerAbove(param0: string): void;
							public setLayerBelow(value: string): void;
							public getPulsingEnabled(): boolean;
							public applySettings(): void;
							public setLocationPuck(param0: com.mapbox.maps.plugin.LocationPuck): void;
							public getLayerBelow(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace generated {
						export class LocationComponentSettingsData extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsData>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsData>;
							public setLayerAbove(layerAbove: string): void;
							public getShowAccuracyRing(): boolean;
							public component1(): boolean;
							public component5(): boolean;
							public hashCode(): number;
							public setEnabled(enabled: boolean): void;
							public component10(): boolean;
							public setPuckBearingEnabled(puckBe_4f3: boolean): void;
							public component2(): boolean;
							public component11(): com.mapbox.maps.plugin.PuckBearing;
							public toString(): string;
							public setPuckBearing(puckBe_d86: com.mapbox.maps.plugin.PuckBearing): void;
							public constructor(enabled: boolean, pulsin_2a2: boolean, pulsin_3cc: number, pulsin_a5b: number, showAc_77f: boolean, accura_661: number, accura_a13: number, layerAbove: string, layerBelow: string, puckBe_4f3: boolean, puckBe_d86: com.mapbox.maps.plugin.PuckBearing, slot: string, locati_98b: com.mapbox.maps.plugin.LocationPuck);
							public getEnabled(): boolean;
							public component12(): string;
							public component13(): com.mapbox.maps.plugin.LocationPuck;
							public getPulsingMaxRadius(): number;
							public equals(other: any): boolean;
							public describeContents(): number;
							public component6(): number;
							public setLayerBelow(layerBelow: string): void;
							public component3(): number;
							public getSlot(): string;
							public getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
							public getLayerAbove(): string;
							public setShowAccuracyRing(showAc_77f: boolean): void;
							public setAccuracyRingColor(accura_661: number): void;
							public component9(): string;
							public getAccuracyRingColor(): number;
							public component7(): number;
							public getAccuracyRingBorderColor(): number;
							public setPulsingMaxRadius(pulsin_a5b: number): void;
							public getPuckBearingEnabled(): boolean;
							public getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
							public getPulsingColor(): number;
							public component8(): string;
							public setSlot(slot: string): void;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public copy(enabled: boolean, pulsin_2a2: boolean, pulsin_3cc: number, pulsin_a5b: number, showAc_77f: boolean, accura_661: number, accura_a13: number, layerAbove: string, layerBelow: string, puckBe_4f3: boolean, puckBe_d86: com.mapbox.maps.plugin.PuckBearing, slot: string, locati_98b: com.mapbox.maps.plugin.LocationPuck): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsData;
							public setLocationPuck(locati_98b: com.mapbox.maps.plugin.LocationPuck): void;
							public setPulsingColor(pulsin_3cc: number): void;
							public component4(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public getPulsingEnabled(): boolean;
							public setAccuracyRingBorderColor(accura_a13: number): void;
							public setPulsingEnabled(pulsin_2a2: boolean): void;
							public getLayerBelow(): string;
						}
						export namespace LocationComponentSettingsData {
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsData> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsData.Creator>;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsData>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsData;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace generated {
						export class LocationComponentSettingsInterface extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsInterface>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettingsInterface interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
								updateSettings(param0: any): void;
								getEnabled(): boolean;
								setEnabled(param0: boolean): void;
								getPulsingEnabled(): boolean;
								setPulsingEnabled(param0: boolean): void;
								getPulsingColor(): number;
								setPulsingColor(param0: number): void;
								getPulsingMaxRadius(): number;
								setPulsingMaxRadius(param0: number): void;
								getShowAccuracyRing(): boolean;
								setShowAccuracyRing(param0: boolean): void;
								getAccuracyRingColor(): number;
								setAccuracyRingColor(param0: number): void;
								getAccuracyRingBorderColor(): number;
								setAccuracyRingBorderColor(param0: number): void;
								getLayerAbove(): string;
								setLayerAbove(param0: string): void;
								getLayerBelow(): string;
								setLayerBelow(param0: string): void;
								getPuckBearingEnabled(): boolean;
								setPuckBearingEnabled(param0: boolean): void;
								getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
								setPuckBearing(param0: com.mapbox.maps.plugin.PuckBearing): void;
								getSlot(): string;
								setSlot(param0: string): void;
								getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
								setLocationPuck(param0: com.mapbox.maps.plugin.LocationPuck): void;
							});
							public constructor();
							public getShowAccuracyRing(): boolean;
							public setPuckBearingEnabled(param0: boolean): void;
							public setAccuracyRingBorderColor(param0: number): void;
							public getEnabled(): boolean;
							public updateSettings(param0: any): void;
							public getPulsingMaxRadius(): number;
							public setPulsingMaxRadius(param0: number): void;
							public setAccuracyRingColor(param0: number): void;
							public setEnabled(param0: boolean): void;
							public getSlot(): string;
							public getLocationPuck(): com.mapbox.maps.plugin.LocationPuck;
							public setSlot(param0: string): void;
							public getLayerAbove(): string;
							public setPulsingEnabled(param0: boolean): void;
							public getAccuracyRingColor(): number;
							public getAccuracyRingBorderColor(): number;
							public setLayerBelow(param0: string): void;
							public setPulsingColor(param0: number): void;
							public getSettings(): com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings;
							public getPuckBearingEnabled(): boolean;
							public getPuckBearing(): com.mapbox.maps.plugin.PuckBearing;
							public getPulsingColor(): number;
							public setPuckBearing(param0: com.mapbox.maps.plugin.PuckBearing): void;
							public setShowAccuracyRing(param0: boolean): void;
							public setLayerAbove(param0: string): void;
							public getPulsingEnabled(): boolean;
							public setLocationPuck(param0: com.mapbox.maps.plugin.LocationPuck): void;
							public getLayerBelow(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace model {
						export class AnimatableModel extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.model.AnimatableModel>;
							public static DEFAULT_COLOR: string; // "#ffffff"
							public static DEFAULT_COLOR_MIX_INTENSITY: number; // 0.0
							public static DEFAULT_EMISSIVE_STRENGTH: number; // 0.0
							public static DEFAULT_OPACITY: number; // 1.0
							public getRotation(): java.util.List<java.lang.Double>;
							public setOpacity(value: number): void;
							public getModelUri(): string;
							public getColorMixIntensity(): number;
							public setColor(value: string): void;
							public setRotation(value: java.util.List<java.lang.Double>): void;
							public setColorMixIntensity(value: number): void;
							public bindTo$plugin_locationcomponent_release(it: com.mapbox.maps.plugin.delegates.MapFeatureStateDelegate): void;
							public constructor(modelUri: string, modelParts: java.util.List<any>);
							public getColor(): string;
							public getLocationPuck3D(): com.mapbox.maps.plugin.LocationPuck3D;
							public getOpacity(): number;
							public getEmissiveStrength(): number;
							public setEmissiveStrength(value: number): void;
						}
						export namespace AnimatableModel {
							export namespace AnimatableModel {
								export namespace Companion {
									function getDEFAULT_ROTATION$plugin_locationcomponent_release(): java.util.List<java.lang.Double>;
									function getDEFAULT_ROTATION$plugin_locationcomponent_release(): java.util.List<java.lang.Double>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace model {
						export class ModelMaterialPart extends com.mapbox.maps.plugin.locationcomponent.model.ModelPart {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.model.ModelMaterialPart>;
							public setOpacity(value: number): void;
							public getMaterialOverrides(): java.util.List<string>;
							public updateColor(color: number, colorM_56f: number): void;
							public getColorMixIntensity(): number;
							public setColor(value: string): void;
							public resetColor(): void;
							public constructor(featur_c63: string, materi_f39: java.util.List<string>);
							public setColorMixIntensity(value: number): void;
							public constructor(featur_c63: string);
							public getColor(): string;
							public constructor(materi_bf0: string);
							public getEmissiveStrength(): number;
							public getOpacity(): number;
							public setEmissiveStrength(value: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace model {
						export class ModelNodePart extends com.mapbox.maps.plugin.locationcomponent.model.ModelPart {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.model.ModelNodePart>;
							public constructor(nodeOv_005: string);
							public getRotation(): java.util.List<java.lang.Double>;
							public constructor(featur_c63: string);
							public getNodeOverrides(): java.util.List<string>;
							public constructor(featur_c63: string, nodeOv_9c2: java.util.List<string>);
							public setRotation(p0: java.util.List<java.lang.Double>): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace model {
						export abstract class ModelPart extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.model.ModelPart>;
							public getUpdateFeatureState(): any;
							public constructor(featur_c63: string);
							public getFeatureStateId(): string;
							public setUpdateFeatureState(update_237: any): void;
							public bindTo$plugin_locationcomponent_release(mapFea_42d: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace locationcomponent {
					export namespace utils {
						export class BitmapUtils extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.locationcomponent.utils.BitmapUtils>;
							public static INSTANCE: com.mapbox.maps.plugin.locationcomponent.utils.BitmapUtils;
							public equals(buffer_687: globalAndroid.graphics.Bitmap, this_: globalAndroid.graphics.Bitmap): boolean;
							public equals(obj: any): boolean;
							public getBitmapFromDrawableRes(drawable: globalAndroid.content.Context, bitmap: number): globalAndroid.graphics.Bitmap;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.logo.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.logo"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export class LogoPlugin extends java.lang.Object implements com.mapbox.maps.plugin.ViewPlugin, com.mapbox.maps.plugin.logo.generated.LogoSettingsInterface {
						public static class: java.lang.Class<com.mapbox.maps.plugin.logo.LogoPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.logo.LogoPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
							onPluginView(param0: globalAndroid.view.View): void;
							getSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
							updateSettings(param0: any): void;
							getEnabled(): boolean;
							setEnabled(param0: boolean): void;
							getPosition(): number;
							setPosition(param0: number): void;
							getMarginLeft(): number;
							setMarginLeft(param0: number): void;
							getMarginTop(): number;
							setMarginTop(param0: number): void;
							getMarginRight(): number;
							setMarginRight(param0: number): void;
							getMarginBottom(): number;
							setMarginBottom(param0: number): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public setMarginTop(param0: number): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getPosition(): number;
						public getMarginBottom(): number;
						public updateSettings(param0: any): void;
						public setEnabled(param0: boolean): void;
						public getSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
						public getEnabled(): boolean;
						public setMarginLeft(param0: number): void;
						public setMarginBottom(param0: number): void;
						public initialize(): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public getMarginTop(): number;
						public setPosition(param0: number): void;
						public cleanup(): void;
						public getMarginRight(): number;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public getMarginLeft(): number;
					}
					export namespace LogoPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.logo.LogoPlugin.DefaultImpls>;
							public static initialize(this_: com.mapbox.maps.plugin.logo.LogoPlugin): void;
							public static cleanup(this_: com.mapbox.maps.plugin.logo.LogoPlugin): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.logo.LogoPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							public static onPluginView(this_: com.mapbox.maps.plugin.logo.LogoPlugin, view: globalAndroid.view.View): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export class LogoUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.logo.LogoUtils>;
						public static getLogo(this_logo: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.logo.LogoPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export class LogoView extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.logo.LogoView>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.logo.LogoView interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getLogoEnabled(): boolean;
							setLogoEnabled(param0: boolean): void;
							getLogoGravity(): number;
							setLogoGravity(param0: number): void;
							setLogoMargins(param0: number, param1: number, param2: number, param3: number): void;
							requestLayout(): void;
						});
						public constructor();
						public getLogoEnabled(): boolean;
						public setLogoGravity(param0: number): void;
						public requestLayout(): void;
						public setLogoEnabled(param0: boolean): void;
						public setLogoMargins(param0: number, param1: number, param2: number, param3: number): void;
						public getLogoGravity(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export class LogoViewImpl implements com.mapbox.maps.plugin.logo.LogoView {
						public static class: java.lang.Class<com.mapbox.maps.plugin.logo.LogoViewImpl>;
						public constructor(i_a_le_015: globalAndroid.content.Context);
						public constructor(i_a_le_015: globalAndroid.content.Context, i_a_le_0_1: globalAndroid.util.AttributeSet, it: number);
						public setLogoGravity(param0: number): void;
						public setLogoMargins(param0: number, param1: number, param2: number, param3: number): void;
						public setLogoMargins(this_s_443: number, this_: number, left: number, top: number): void;
						public getLogoGravity(): number;
						public getLogoEnabled(): boolean;
						public setLogoEnabled(value: boolean): void;
						public requestLayout(): void;
						public setLogoEnabled(param0: boolean): void;
						public setLogoGravity(value: number): void;
						public constructor(i_a_le_015: globalAndroid.content.Context, i_a_le_0_1: globalAndroid.util.AttributeSet);
						public injectPresenter$plugin_logo_release(presenter: com.mapbox.maps.plugin.logo.LogoPlugin): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export class LogoViewPlugin extends com.mapbox.maps.plugin.logo.generated.LogoSettingsBase implements com.mapbox.maps.plugin.logo.LogoPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.logo.LogoViewPlugin>;
						public setInternalSettings(intern_bcd: com.mapbox.maps.plugin.logo.generated.LogoSettings): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public updateSettings(param0: any): void;
						public getSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
						public constructor(viewIm_623: any);
						public getMarginTop(): number;
						public cleanup(): void;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public getMarginLeft(): number;
						public constructor();
						public onPluginView(view: globalAndroid.view.View): void;
						public setMarginTop(param0: number): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getPosition(): number;
						public getMarginBottom(): number;
						public bind(it: globalAndroid.widget.FrameLayout, this_: globalAndroid.util.AttributeSet, mapView: number): globalAndroid.view.View;
						public setEnabled(param0: boolean): void;
						public applySettings(): void;
						public getEnabled(): boolean;
						public setMarginLeft(param0: number): void;
						public setMarginBottom(param0: number): void;
						public initialize(): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public setPosition(param0: number): void;
						public getInternalSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
						public setEnabled(value: boolean): void;
						public getMarginRight(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export namespace generated {
						export class LogoAttributeParser extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoAttributeParser>;
							public static INSTANCE: com.mapbox.maps.plugin.logo.generated.LogoAttributeParser;
							public parseLogoSettings(this_: globalAndroid.content.Context, context: globalAndroid.util.AttributeSet, attrs: number): com.mapbox.maps.plugin.logo.generated.LogoSettings;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export namespace generated {
						export class LogoSettings extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoSettings>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.logo.generated.LogoSettings>;
							public toBuilder(): com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder;
							public getPosition(): number;
							public hashCode(): number;
							public getMarginBottom(): number;
							public toString(): string;
							public getMarginTop(): number;
							public getMarginRight(): number;
							public getEnabled(): boolean;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public equals(other: any): boolean;
							public describeContents(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public getMarginLeft(): number;
						}
						export namespace LogoSettings {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder>;
								public getMarginRight(): number;
								public setPosition(position: number): com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder;
								public getPosition(): number;
								public constructor();
								public getMarginTop(): number;
								public setMarginBottom(margin_7d4: number): com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder;
								public getMarginLeft(): number;
								public setMarginRight(margin_9af: number): com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder;
								public build(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
								public getMarginBottom(): number;
								public setMarginLeft(marginLeft: number): com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder;
								public setEnabled(enabled: boolean): com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder;
								public getEnabled(): boolean;
								public setMarginTop(marginTop: number): com.mapbox.maps.plugin.logo.generated.LogoSettings.Builder;
							}
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.logo.generated.LogoSettings> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoSettings.Creator>;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.logo.generated.LogoSettings>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.logo.generated.LogoSettings;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export namespace generated {
						export abstract class LogoSettingsBase extends java.lang.Object implements com.mapbox.maps.plugin.logo.generated.LogoSettingsInterface {
							public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoSettingsBase>;
							public getPosition(): number;
							public getMarginTop(): number;
							public getMarginRight(): number;
							public getEnabled(): boolean;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public setEnabled(value: boolean): void;
							public setMarginBottom(value: number): void;
							public setEnabled(param0: boolean): void;
							public getMarginLeft(): number;
							public constructor();
							public setMarginTop(value: number): void;
							public getMarginBottom(): number;
							public getInternalSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
							public setMarginRight(param0: number): void;
							public updateSettings(block: any): void;
							public setPosition(param0: number): void;
							public setMarginRight(value: number): void;
							public setInternalSettings(param0: com.mapbox.maps.plugin.logo.generated.LogoSettings): void;
							public getSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
							public setMarginLeft(param0: number): void;
							public setPosition(value: number): void;
							public applySettings(): void;
							public setMarginBottom(param0: number): void;
							public setMarginLeft(value: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export namespace generated {
						export class LogoSettingsData extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoSettingsData>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.logo.generated.LogoSettingsData>;
							public setMarginLeft(marginLeft: number): void;
							public getPosition(): number;
							public component1(): boolean;
							public hashCode(): number;
							public setEnabled(enabled: boolean): void;
							public component2(): number;
							public component5(): number;
							public toString(): string;
							public copy(enabled: boolean, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number): com.mapbox.maps.plugin.logo.generated.LogoSettingsData;
							public getMarginTop(): number;
							public getMarginRight(): number;
							public getEnabled(): boolean;
							public constructor(enabled: boolean, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number);
							public setMarginRight(margin_9af: number): void;
							public equals(other: any): boolean;
							public describeContents(): number;
							public component6(): number;
							public component3(): number;
							public getMarginLeft(): number;
							public setPosition(position: number): void;
							public getMarginBottom(): number;
							public setMarginTop(marginTop: number): void;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public component4(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public setMarginBottom(margin_7d4: number): void;
						}
						export namespace LogoSettingsData {
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.logo.generated.LogoSettingsData> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoSettingsData.Creator>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.logo.generated.LogoSettingsData>;
								public constructor();
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.logo.generated.LogoSettingsData;
								public newArray(param0: number): androidNative.Array<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace logo {
					export namespace generated {
						export class LogoSettingsInterface extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.logo.generated.LogoSettingsInterface>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.logo.generated.LogoSettingsInterface interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
								updateSettings(param0: any): void;
								getEnabled(): boolean;
								setEnabled(param0: boolean): void;
								getPosition(): number;
								setPosition(param0: number): void;
								getMarginLeft(): number;
								setMarginLeft(param0: number): void;
								getMarginTop(): number;
								setMarginTop(param0: number): void;
								getMarginRight(): number;
								setMarginRight(param0: number): void;
								getMarginBottom(): number;
								setMarginBottom(param0: number): void;
							});
							public constructor();
							public getPosition(): number;
							public getMarginBottom(): number;
							public getMarginTop(): number;
							public setMarginRight(param0: number): void;
							public getMarginRight(): number;
							public setPosition(param0: number): void;
							public getEnabled(): boolean;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public getSettings(): com.mapbox.maps.plugin.logo.generated.LogoSettings;
							public setMarginLeft(param0: number): void;
							public setEnabled(param0: boolean): void;
							public setMarginBottom(param0: number): void;
							public getMarginLeft(): number;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace overlay {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.overlay"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace overlay {
					export class MapOverlayCoordinatesProvider extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.MapOverlayCoordinatesProvider>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.overlay.MapOverlayCoordinatesProvider interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getShownCoordinates(): java.util.List<com.mapbox.geojson.Point>;
						});
						public constructor();
						public getShownCoordinates(): java.util.List<com.mapbox.geojson.Point>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace overlay {
					export class MapOverlayPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapSizePlugin, com.mapbox.maps.plugin.MapPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.MapOverlayPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.overlay.MapOverlayPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							registerMapOverlayCoordinatesProvider(param0: com.mapbox.maps.plugin.overlay.MapOverlayCoordinatesProvider): void;
							unregisterMapOverlayCoordinatesProvider(): void;
							registerOverlay(param0: globalAndroid.view.View): void;
							registerOverlays(param0: java.util.List<any>): void;
							unregisterOverlay(param0: globalAndroid.view.View): void;
							unregisterOverlays(param0: java.util.List<any>): void;
							setDisplayingAreaMargins(param0: number, param1: number, param2: number, param3: number): void;
							reframe(param0: com.mapbox.maps.plugin.overlay.OnReframeFinished): void;
							getEdgeInsets(): com.mapbox.maps.EdgeInsets;
							onSizeChanged(param0: number, param1: number): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public setDisplayingAreaMargins(param0: number, param1: number, param2: number, param3: number): void;
						public registerOverlays(param0: java.util.List<any>): void;
						public unregisterOverlays(param0: java.util.List<any>): void;
						public registerMapOverlayCoordinatesProvider(param0: com.mapbox.maps.plugin.overlay.MapOverlayCoordinatesProvider): void;
						public initialize(): void;
						public cleanup(): void;
						public onSizeChanged(param0: number, param1: number): void;
						public unregisterMapOverlayCoordinatesProvider(): void;
						public registerOverlay(param0: globalAndroid.view.View): void;
						public getEdgeInsets(): com.mapbox.maps.EdgeInsets;
						public unregisterOverlay(param0: globalAndroid.view.View): void;
						public reframe(param0: com.mapbox.maps.plugin.overlay.OnReframeFinished): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
					export namespace MapOverlayPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.MapOverlayPlugin.DefaultImpls>;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.overlay.MapOverlayPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							public static onSizeChanged(this_: com.mapbox.maps.plugin.overlay.MapOverlayPlugin, width: number, height: number): void;
							public static cleanup(this_: com.mapbox.maps.plugin.overlay.MapOverlayPlugin): void;
							public static initialize(this_: com.mapbox.maps.plugin.overlay.MapOverlayPlugin): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace overlay {
					export class MapOverlayPluginImpl extends java.lang.Object implements com.mapbox.maps.plugin.overlay.MapOverlayPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl>;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public reframe(onRefr_c5c: com.mapbox.maps.plugin.overlay.OnReframeFinished): void;
						public registerOverlay(overlay: globalAndroid.view.View): void;
						public getWidth$plugin_overlay_release(): number;
						public setDisplayingAreaMargins(marginTop: number, marginLeft: number, margin_7d4: number, margin_9af: number): void;
						public cleanup(): void;
						public registerOverlay(param0: globalAndroid.view.View): void;
						public registerOverlays(overlays: java.util.List<any>): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public onSizeChanged(width: number, height: number): void;
						public unregisterOverlays(it: java.util.List<any>): void;
						public constructor();
						public registerMapOverlayCoordinatesProvider(provider: com.mapbox.maps.plugin.overlay.MapOverlayCoordinatesProvider): void;
						public setDisplayingAreaMargins(param0: number, param1: number, param2: number, param3: number): void;
						public setWidth$plugin_overlay_release(width__c73: number): void;
						public registerOverlays(param0: java.util.List<any>): void;
						public unregisterOverlays(param0: java.util.List<any>): void;
						public getHeight$plugin_overlay_release(): number;
						public setHeight$plugin_overlay_release(height_080: number): void;
						public unregisterOverlay(overlay: globalAndroid.view.View): void;
						public registerMapOverlayCoordinatesProvider(param0: com.mapbox.maps.plugin.overlay.MapOverlayCoordinatesProvider): void;
						public initialize(): void;
						public onSizeChanged(param0: number, param1: number): void;
						public unregisterMapOverlayCoordinatesProvider(): void;
						public getEdgeInsets(): com.mapbox.maps.EdgeInsets;
						public unregisterOverlay(param0: globalAndroid.view.View): void;
						public reframe(param0: com.mapbox.maps.plugin.overlay.OnReframeFinished): void;
					}
					export namespace MapOverlayPluginImpl {
						export class MapOverLayRect extends java.lang.Comparable<com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect> {
							public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect>;
							public isOverLap(reactA_7b7: com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect): boolean;
							public compareTo(other: com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect): number;
							public updateTop(newTop: number): com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect;
							public getTop(): number;
							public setLeft(left: number): void;
							public getRight(): number;
							public setBottom(bottom: number): void;
							public setRight(right: number): void;
							public getBottom(): number;
							public updateRight(newRight: number): com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect;
							public constructor(left: number, top: number, right: number, bottom: number);
							public getLeft(): number;
							public updateLeft(newLeft: number): com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect;
							public updateBottom(newBottom: number): com.mapbox.maps.plugin.overlay.MapOverlayPluginImpl.MapOverLayRect;
							public setTop(top: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace overlay {
					export class MapOverlayUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.MapOverlayUtils>;
						public static getOverlay(this_m_36e: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.overlay.MapOverlayPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace overlay {
					export class OnReframeFinished extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.overlay.OnReframeFinished>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.overlay.OnReframeFinished interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onReframeFinished(param0: com.mapbox.maps.CameraOptions): void;
						});
						public constructor();
						public onReframeFinished(param0: com.mapbox.maps.CameraOptions): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.scalebar"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class LocaleUnitResolver extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.LocaleUnitResolver>;
						public static INSTANCE: com.mapbox.maps.plugin.scalebar.LocaleUnitResolver;
						public isMetricSystem(): boolean;
					}
					export namespace LocaleUnitResolver {
						export class ImperialCountryCode extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.LocaleUnitResolver.ImperialCountryCode>;
							public static INSTANCE: com.mapbox.maps.plugin.scalebar.LocaleUnitResolver.ImperialCountryCode;
							public static US: string; // "US"
							public static MYANMAR: string; // "MM"
							public static LIBERIA: string; // "LR"
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class ScaleBar extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBar>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.scalebar.ScaleBar interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getDistancePerPixel(): number;
							setDistancePerPixel(param0: number): void;
							getEnable(): boolean;
							setEnable(param0: boolean): void;
							getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
							setSettings(param0: com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings): void;
							getMapViewWidth(): number;
							setMapViewWidth(param0: number): void;
							getPixelRatio(): number;
							setPixelRatio(param0: number): void;
							getUseContinuousRendering(): boolean;
							setUseContinuousRendering(param0: boolean): void;
						});
						public constructor();
						public getDistancePerPixel(): number;
						public getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
						public setMapViewWidth(param0: number): void;
						public getPixelRatio(): number;
						public setUseContinuousRendering(param0: boolean): void;
						public setDistancePerPixel(param0: number): void;
						public setPixelRatio(param0: number): void;
						public getEnable(): boolean;
						public getMapViewWidth(): number;
						public setSettings(param0: com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings): void;
						public getUseContinuousRendering(): boolean;
						public setEnable(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class ScaleBarImpl extends globalAndroid.view.View implements com.mapbox.maps.plugin.scalebar.ScaleBar {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBarImpl>;
						public static MSG_RENDER_ON_DEMAND: number; // 0
						public static MSG_RENDER_CONTINUOUS: number; // 1
						public static DEFAULT_MAPVIEW_WIDTH: number; // 0.0
						public static DEFAULT_PIXEL_RATIO: number; // 1.0
						public static INTERNAL_PADDING_DP: number; // 10
						public setUseContinuousRendering(value: boolean): void;
						public onMeasure(this_c_1fe: number, i_f_co_183: number): void;
						public sendAccessibilityEvent(param0: number): void;
						public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
						public getTextPaint$plugin_scalebar_release(): globalAndroid.graphics.Paint;
						public constructor(i_a_ap_23b: globalAndroid.content.Context, i_a_ap_2_1: globalAndroid.util.AttributeSet);
						public setPixelRatio(param0: number): void;
						public setUnit$plugin_scalebar_release(unit_p_9b2: string): void;
						public getMapViewWidth(): number;
						public getScaleTable$plugin_scalebar_release(): java.util.List<globalAndroid.util.Pair<java.lang.Integer,java.lang.Integer>>;
						public getUseContinuousRendering(): boolean;
						public setEnable(value: boolean): void;
						public refreshHandlerHasMessages$plugin_scalebar_release(what: number): boolean;
						public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
						public getPixelRatio(): number;
						public setDistancePerPixel(newSeg_503: number): void;
						public setSettings(param0: com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings): void;
						public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet);
						public onDraw(rectIndex: globalAndroid.graphics.Canvas): void;
						public getStrokePaint$plugin_scalebar_release(): globalAndroid.graphics.Paint;
						public getDistanceText$plugin_scalebar_release(distance: number, unit: string): string;
						public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
						public getBarPaint$plugin_scalebar_release(): globalAndroid.graphics.Paint;
						public constructor(i_a_ap_23b: globalAndroid.content.Context, i_a_ap_2_1: globalAndroid.util.AttributeSet, this_i_2c1: number);
						public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
						public setSettings(this_s_640: com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings): void;
						public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public setMapViewWidth(value: number): void;
						public constructor(i_a_ap_23b: globalAndroid.content.Context);
						public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet, defSty_ebe: number, defSty_f75: number);
						public setUseContinuousRendering(param0: boolean): void;
						public setDistancePerPixel(param0: number): void;
						public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public calculateSegmentsConfiguration$plugin_scalebar_release(this_c_1fe: number, i_a_la_1bb: number, distance: java.util.List<any>, element_iv: globalAndroid.graphics.Paint, i_f_la_bd8: number, iterat_a1a: string, this_l_648: number): com.mapbox.maps.plugin.scalebar.SegmentsConfiguration;
						public setEnable(param0: boolean): void;
						public setPixelRatio(pixelRatio: number): void;
						public getDistancePerPixel(): number;
						public setMapViewWidth(param0: number): void;
						public unscheduleDrawable(who: globalAndroid.graphics.drawable.Drawable): void;
						public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public constructor(context: globalAndroid.content.Context, attrs: globalAndroid.util.AttributeSet, defSty_ebe: number);
						public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public setScaleTable$plugin_scalebar_release(scaleT_2fe: java.util.List<any>): void;
						public getEnable(): boolean;
						public getUnit$plugin_scalebar_release(): string;
						public calculateWidthAndHeight$plugin_scalebar_release(): globalAndroid.util.Pair<java.lang.Float,java.lang.Float>;
					}
					export namespace ScaleBarImpl {
						export namespace ScaleBarImpl {
							export namespace Companion {
							}
						}
						export class RefreshHandler extends globalAndroid.os.Handler {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBarImpl.RefreshHandler>;
							/** @deprecated */
							public constructor();
							/** @deprecated */
							public constructor(callback: globalAndroid.os.Handler.Callback);
							public constructor(scaleB_cec: com.mapbox.maps.plugin.scalebar.ScaleBarImpl);
							public constructor(looper: globalAndroid.os.Looper);
							public constructor(looper: globalAndroid.os.Looper, callback: globalAndroid.os.Handler.Callback);
							public handleMessage(it: globalAndroid.os.Message): void;
						}
						export class WhenMappings extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBarImpl.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class ScaleBarPlugin extends java.lang.Object implements com.mapbox.maps.plugin.ViewPlugin, com.mapbox.maps.plugin.MapSizePlugin, com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsInterface {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBarPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.scalebar.ScaleBarPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getDistancePerPixel(): number;
							setDistancePerPixel(param0: number): void;
							bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
							onPluginView(param0: globalAndroid.view.View): void;
							onSizeChanged(param0: number, param1: number): void;
							getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
							updateSettings(param0: any): void;
							getEnabled(): boolean;
							setEnabled(param0: boolean): void;
							getPosition(): number;
							setPosition(param0: number): void;
							getMarginLeft(): number;
							setMarginLeft(param0: number): void;
							getMarginTop(): number;
							setMarginTop(param0: number): void;
							getMarginRight(): number;
							setMarginRight(param0: number): void;
							getMarginBottom(): number;
							setMarginBottom(param0: number): void;
							getTextColor(): number;
							setTextColor(param0: number): void;
							getPrimaryColor(): number;
							setPrimaryColor(param0: number): void;
							getSecondaryColor(): number;
							setSecondaryColor(param0: number): void;
							getBorderWidth(): number;
							setBorderWidth(param0: number): void;
							getHeight(): number;
							setHeight(param0: number): void;
							getTextBarMargin(): number;
							setTextBarMargin(param0: number): void;
							getTextBorderWidth(): number;
							setTextBorderWidth(param0: number): void;
							getTextSize(): number;
							setTextSize(param0: number): void;
							isMetricUnits(): boolean;
							setMetricUnits(param0: boolean): void;
							getRefreshInterval(): number;
							setRefreshInterval(param0: number): void;
							getShowTextBorder(): boolean;
							setShowTextBorder(param0: boolean): void;
							getRatio(): number;
							setRatio(param0: number): void;
							getUseContinuousRendering(): boolean;
							setUseContinuousRendering(param0: boolean): void;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public getBorderWidth(): number;
						public getRatio(): number;
						public getUseContinuousRendering(): boolean;
						public updateSettings(param0: any): void;
						public setTextBorderWidth(param0: number): void;
						public getShowTextBorder(): boolean;
						public setRatio(param0: number): void;
						public setHeight(param0: number): void;
						public getMarginTop(): number;
						public cleanup(): void;
						public setSecondaryColor(param0: number): void;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public getMarginLeft(): number;
						public setMetricUnits(param0: boolean): void;
						public isMetricUnits(): boolean;
						public getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
						public getRefreshInterval(): number;
						public setMarginTop(param0: number): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getPosition(): number;
						public getMarginBottom(): number;
						public getSecondaryColor(): number;
						public setUseContinuousRendering(param0: boolean): void;
						public setDistancePerPixel(param0: number): void;
						public getTextColor(): number;
						public getHeight(): number;
						public getTextBarMargin(): number;
						public setEnabled(param0: boolean): void;
						public setBorderWidth(param0: number): void;
						public getDistancePerPixel(): number;
						public getTextSize(): number;
						public getTextBorderWidth(): number;
						public setRefreshInterval(param0: number): void;
						public getEnabled(): boolean;
						public setShowTextBorder(param0: boolean): void;
						public setMarginLeft(param0: number): void;
						public setMarginBottom(param0: number): void;
						public setTextColor(param0: number): void;
						public initialize(): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public setPrimaryColor(param0: number): void;
						public setTextBarMargin(param0: number): void;
						public setPosition(param0: number): void;
						public onSizeChanged(param0: number, param1: number): void;
						public getPrimaryColor(): number;
						public getMarginRight(): number;
						public setTextSize(param0: number): void;
					}
					export namespace ScaleBarPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBarPlugin.DefaultImpls>;
							public static onPluginView(this_: com.mapbox.maps.plugin.scalebar.ScaleBarPlugin, view: globalAndroid.view.View): void;
							public static cleanup(this_: com.mapbox.maps.plugin.scalebar.ScaleBarPlugin): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.scalebar.ScaleBarPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
							public static initialize(this_: com.mapbox.maps.plugin.scalebar.ScaleBarPlugin): void;
							public static onSizeChanged(this_: com.mapbox.maps.plugin.scalebar.ScaleBarPlugin, width: number, height: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class ScaleBarPluginImpl extends com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsBase implements com.mapbox.maps.plugin.scalebar.ScaleBarPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBarPluginImpl>;
						public getInternalSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
						public getRatio(): number;
						public getUseContinuousRendering(): boolean;
						public setRatio(param0: number): void;
						public setHeight(param0: number): void;
						public cleanup(): void;
						public setSecondaryColor(param0: number): void;
						public setMarginRight(param0: number): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public setMetricUnits(param0: boolean): void;
						public isMetricUnits(): boolean;
						public constructor();
						public getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
						public setMarginTop(param0: number): void;
						public getPosition(): number;
						public setShowTextBorder(param0: boolean): void;
						public setMarginLeft(param0: number): void;
						public setTextColor(param0: number): void;
						public initialize(): void;
						public onPluginView(param0: globalAndroid.view.View): void;
						public setTextBarMargin(param0: number): void;
						public setPosition(param0: number): void;
						public setUseContinuousRendering(value: boolean): void;
						public getBorderWidth(): number;
						public setInternalSettings(intern_bcd: com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public updateSettings(param0: any): void;
						public setTextBorderWidth(param0: number): void;
						public getShowTextBorder(): boolean;
						public constructor(viewIm_623: any);
						public bind(this_: globalAndroid.widget.FrameLayout, mapView: globalAndroid.util.AttributeSet, attrs: number): globalAndroid.view.View;
						public getMarginTop(): number;
						public getMarginLeft(): number;
						public onSizeChanged(width: number, height: number): void;
						public onPluginView(view: globalAndroid.view.View): void;
						public getRefreshInterval(): number;
						public setDistancePerPixel(value: number): void;
						public bind(param0: globalAndroid.widget.FrameLayout, param1: globalAndroid.util.AttributeSet, param2: number): globalAndroid.view.View;
						public getMarginBottom(): number;
						public getSecondaryColor(): number;
						public setUseContinuousRendering(param0: boolean): void;
						public setDistancePerPixel(param0: number): void;
						public getTextColor(): number;
						public getHeight(): number;
						public getTextBarMargin(): number;
						public setEnabled(param0: boolean): void;
						public applySettings(): void;
						public setBorderWidth(param0: number): void;
						public getDistancePerPixel(): number;
						public getTextSize(): number;
						public getTextBorderWidth(): number;
						public setRefreshInterval(param0: number): void;
						public getEnabled(): boolean;
						public setMarginBottom(param0: number): void;
						public setPrimaryColor(param0: number): void;
						public onSizeChanged(param0: number, param1: number): void;
						public getPrimaryColor(): number;
						public setEnabled(value: boolean): void;
						public getMarginRight(): number;
						public setTextSize(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class ScaleBarUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.ScaleBarUtils>;
						public static getScaleBar(this_s_e06: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.scalebar.ScaleBarPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export class SegmentsConfiguration extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.SegmentsConfiguration>;
						public setLabelTexts(labelTexts: java.util.List<string>): void;
						public setLabelMarginsAndAnchor(labelM_be8: java.util.List<any>): void;
						public equals(other: any): boolean;
						public getLabelMarginsAndAnchor(): java.util.List<any>;
						public hashCode(): number;
						public getUnitDistance(): number;
						public getUnitBarWidth(): number;
						public constructor(unitDi_4e0: number, unitBa_b14: number, rectCount: number, labelTexts: java.util.List<string>, labelM_be8: java.util.List<any>);
						public copy(unitDi_4e0: number, unitBa_b14: number, rectCount: number, labelTexts: java.util.List<string>, labelM_be8: java.util.List<any>): com.mapbox.maps.plugin.scalebar.SegmentsConfiguration;
						public toString(): string;
						public getRectCount(): number;
						public component2(): number;
						public component4(): java.util.List<string>;
						public getLabelTexts(): java.util.List<string>;
						public component5(): java.util.List<any>;
						public setUnitDistance(unitDi_4e0: number): void;
						public setRectCount(rectCount: number): void;
						public component1(): number;
						public component3(): number;
						public setUnitBarWidth(unitBa_b14: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export namespace generated {
						export class ScaleBarAttributeParser extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarAttributeParser>;
							public static INSTANCE: com.mapbox.maps.plugin.scalebar.generated.ScaleBarAttributeParser;
							public parseScaleBarSettings(this_: globalAndroid.content.Context, context: globalAndroid.util.AttributeSet, attrs: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export namespace generated {
						export class ScaleBarSettings extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings>;
							public getBorderWidth(): number;
							public getPosition(): number;
							public getTextBarMargin(): number;
							public hashCode(): number;
							public getRatio(): number;
							public toString(): string;
							public getMarginTop(): number;
							public getMarginRight(): number;
							public getHeight(): number;
							public getTextSize(): number;
							public getEnabled(): boolean;
							public equals(other: any): boolean;
							public describeContents(): number;
							public getTextBorderWidth(): number;
							public getMarginLeft(): number;
							public isMetricUnits(): boolean;
							public getRefreshInterval(): number;
							public getPrimaryColor(): number;
							public toBuilder(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
							public getMarginBottom(): number;
							public getUseContinuousRendering(): boolean;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public getShowTextBorder(): boolean;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public getTextColor(): number;
							public getSecondaryColor(): number;
						}
						export namespace ScaleBarSettings {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder>;
								public setSecondaryColor(second_114: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setUseContinuousRendering(useCon_605: boolean): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public getMarginRight(): number;
								public build(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
								public setShowTextBorder(showTe_f7d: boolean): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public getMarginTop(): number;
								public getPrimaryColor(): number;
								public setHeight(height: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public getHeight(): number;
								public setMarginBottom(margin_7d4: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public getMarginLeft(): number;
								public getShowTextBorder(): boolean;
								public getMarginBottom(): number;
								public getBorderWidth(): number;
								public getTextBarMargin(): number;
								public setTextSize(textSize: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setIsMetricUnits(isMetr_428: boolean): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setMarginRight(margin_9af: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setBorderWidth(border_219: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public getPosition(): number;
								public setTextBarMargin(textBa_641: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setMarginTop(marginTop: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setRatio(ratio: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public constructor();
								public getUseContinuousRendering(): boolean;
								public getSecondaryColor(): number;
								public setTextBorderWidth(textBo_dd8: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setEnabled(enabled: boolean): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setPrimaryColor(primar_03c: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public getRefreshInterval(): number;
								public getRatio(): number;
								public getTextSize(): number;
								public isMetricUnits(): boolean;
								public getTextBorderWidth(): number;
								public getTextColor(): number;
								public setTextColor(textColor: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setRefreshInterval(refres_c95: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public getEnabled(): boolean;
								public setMarginLeft(marginLeft: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
								public setPosition(position: number): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Builder;
							}
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings.Creator>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export namespace generated {
						export abstract class ScaleBarSettingsBase extends java.lang.Object implements com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsInterface {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsBase>;
							public setTextBarMargin(value: number): void;
							public getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
							public setPrimaryColor(param0: number): void;
							public setShowTextBorder(param0: boolean): void;
							public setSecondaryColor(value: number): void;
							public getBorderWidth(): number;
							public getPosition(): number;
							public getRatio(): number;
							public setTextBorderWidth(param0: number): void;
							public getMarginRight(): number;
							public getHeight(): number;
							public getTextSize(): number;
							public getEnabled(): boolean;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public setTextBorderWidth(value: number): void;
							public setTextSize(value: number): void;
							public setMarginBottom(value: number): void;
							public setTextColor(param0: number): void;
							public setEnabled(param0: boolean): void;
							public getTextBorderWidth(): number;
							public setBorderWidth(param0: number): void;
							public getMarginLeft(): number;
							public isMetricUnits(): boolean;
							public setMarginTop(value: number): void;
							public setUseContinuousRendering(value: boolean): void;
							public setRefreshInterval(value: number): void;
							public updateSettings(block: any): void;
							public setPrimaryColor(value: number): void;
							public getUseContinuousRendering(): boolean;
							public setRatio(param0: number): void;
							public setPosition(param0: number): void;
							public setHeight(value: number): void;
							public getShowTextBorder(): boolean;
							public setMarginLeft(param0: number): void;
							public setRatio(value: number): void;
							public getSecondaryColor(): number;
							public setInternalSettings(param0: com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings): void;
							public setRefreshInterval(param0: number): void;
							public getTextBarMargin(): number;
							public setShowTextBorder(value: boolean): void;
							public getMarginTop(): number;
							public setSecondaryColor(param0: number): void;
							public setTextBarMargin(param0: number): void;
							public setEnabled(value: boolean): void;
							public setTextColor(value: number): void;
							public setUseContinuousRendering(param0: boolean): void;
							public getInternalSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
							public setHeight(param0: number): void;
							public constructor();
							public setMetricUnits(param0: boolean): void;
							public getRefreshInterval(): number;
							public getPrimaryColor(): number;
							public getMarginBottom(): number;
							public setBorderWidth(value: number): void;
							public setMarginRight(param0: number): void;
							public setMarginRight(value: number): void;
							public setTextSize(param0: number): void;
							public setMetricUnits(value: boolean): void;
							public getTextColor(): number;
							public setPosition(value: number): void;
							public applySettings(): void;
							public setMarginBottom(param0: number): void;
							public setMarginLeft(value: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export namespace generated {
						export class ScaleBarSettingsData extends java.lang.Object implements globalAndroid.os.Parcelable {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsData>;
							public static CREATOR: globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsData>;
							public setMarginLeft(marginLeft: number): void;
							public getBorderWidth(): number;
							public setUseContinuousRendering(useCon_605: boolean): void;
							public getPosition(): number;
							public setEnabled(enabled: boolean): void;
							public component2(): number;
							public getRatio(): number;
							public component5(): number;
							public component11(): number;
							public copy(enabled: boolean, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number, textColor: number, primar_03c: number, second_114: number, border_219: number, height: number, textBa_641: number, textBo_dd8: number, textSize: number, isMetr_428: boolean, refres_c95: number, showTe_f7d: boolean, ratio: number, useCon_605: boolean): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsData;
							public component14(): number;
							public setTextSize(textSize: number): void;
							public getMarginRight(): number;
							public getHeight(): number;
							public getTextSize(): number;
							public component15(): boolean;
							public setTextColor(textColor: number): void;
							public getEnabled(): boolean;
							public setMarginRight(margin_9af: number): void;
							public setMetricUnits(metric_f78: boolean): void;
							public equals(other: any): boolean;
							public describeContents(): number;
							public getTextBorderWidth(): number;
							public getMarginLeft(): number;
							public isMetricUnits(): boolean;
							public component13(): number;
							public setPosition(position: number): void;
							public component17(): boolean;
							public setPrimaryColor(primar_03c: number): void;
							public getUseContinuousRendering(): boolean;
							public writeToParcel(param0: globalAndroid.os.Parcel, param1: number): void;
							public getShowTextBorder(): boolean;
							public component4(): number;
							public writeToParcel(out: globalAndroid.os.Parcel, flags: number): void;
							public setTextBarMargin(textBa_641: number): void;
							public component12(): number;
							public component19(): boolean;
							public constructor(enabled: boolean, position: number, marginLeft: number, marginTop: number, margin_9af: number, margin_7d4: number, textColor: number, primar_03c: number, second_114: number, border_219: number, height: number, textBa_641: number, textBo_dd8: number, textSize: number, isMetr_428: boolean, refres_c95: number, showTe_f7d: boolean, ratio: number, useCon_605: boolean);
							public getSecondaryColor(): number;
							public setBorderWidth(border_219: number): void;
							public component18(): number;
							public getTextBarMargin(): number;
							public component1(): boolean;
							public hashCode(): number;
							public component9(): number;
							public toString(): string;
							public getMarginTop(): number;
							public component10(): number;
							public setSecondaryColor(second_114: number): void;
							public setRatio(ratio: number): void;
							public component6(): number;
							public setTextBorderWidth(textBo_dd8: number): void;
							public component3(): number;
							public component16(): number;
							public getRefreshInterval(): number;
							public component7(): number;
							public getPrimaryColor(): number;
							public getMarginBottom(): number;
							public setMarginTop(marginTop: number): void;
							public setShowTextBorder(showTe_f7d: boolean): void;
							public setHeight(height: number): void;
							public component8(): number;
							public setMarginBottom(margin_7d4: number): void;
							public getTextColor(): number;
							public setRefreshInterval(refres_c95: number): void;
						}
						export namespace ScaleBarSettingsData {
							export class Creator extends globalAndroid.os.Parcelable.Creator<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsData> {
								public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsData.Creator>;
								public createFromParcel(param0: globalAndroid.os.Parcel): any;
								public newArray(size: number): androidNative.Array<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsData>;
								public constructor();
								public newArray(param0: number): androidNative.Array<any>;
								public createFromParcel(parcel: globalAndroid.os.Parcel): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsData;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace scalebar {
					export namespace generated {
						export class ScaleBarSettingsInterface extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsInterface>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettingsInterface interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
								updateSettings(param0: any): void;
								getEnabled(): boolean;
								setEnabled(param0: boolean): void;
								getPosition(): number;
								setPosition(param0: number): void;
								getMarginLeft(): number;
								setMarginLeft(param0: number): void;
								getMarginTop(): number;
								setMarginTop(param0: number): void;
								getMarginRight(): number;
								setMarginRight(param0: number): void;
								getMarginBottom(): number;
								setMarginBottom(param0: number): void;
								getTextColor(): number;
								setTextColor(param0: number): void;
								getPrimaryColor(): number;
								setPrimaryColor(param0: number): void;
								getSecondaryColor(): number;
								setSecondaryColor(param0: number): void;
								getBorderWidth(): number;
								setBorderWidth(param0: number): void;
								getHeight(): number;
								setHeight(param0: number): void;
								getTextBarMargin(): number;
								setTextBarMargin(param0: number): void;
								getTextBorderWidth(): number;
								setTextBorderWidth(param0: number): void;
								getTextSize(): number;
								setTextSize(param0: number): void;
								isMetricUnits(): boolean;
								setMetricUnits(param0: boolean): void;
								getRefreshInterval(): number;
								setRefreshInterval(param0: number): void;
								getShowTextBorder(): boolean;
								setShowTextBorder(param0: boolean): void;
								getRatio(): number;
								setRatio(param0: number): void;
								getUseContinuousRendering(): boolean;
								setUseContinuousRendering(param0: boolean): void;
							});
							public constructor();
							public getSettings(): com.mapbox.maps.plugin.scalebar.generated.ScaleBarSettings;
							public setPrimaryColor(param0: number): void;
							public setShowTextBorder(param0: boolean): void;
							public getBorderWidth(): number;
							public setRefreshInterval(param0: number): void;
							public getPosition(): number;
							public getTextBarMargin(): number;
							public getRatio(): number;
							public getMarginTop(): number;
							public setTextBorderWidth(param0: number): void;
							public getMarginRight(): number;
							public getHeight(): number;
							public getTextSize(): number;
							public getEnabled(): boolean;
							public setSecondaryColor(param0: number): void;
							public setTextBarMargin(param0: number): void;
							public updateSettings(param0: any): void;
							public setMarginTop(param0: number): void;
							public setTextColor(param0: number): void;
							public setEnabled(param0: boolean): void;
							public setUseContinuousRendering(param0: boolean): void;
							public setHeight(param0: number): void;
							public setBorderWidth(param0: number): void;
							public getTextBorderWidth(): number;
							public getMarginLeft(): number;
							public isMetricUnits(): boolean;
							public setMetricUnits(param0: boolean): void;
							public getRefreshInterval(): number;
							public getPrimaryColor(): number;
							public getMarginBottom(): number;
							public setMarginRight(param0: number): void;
							public setRatio(param0: number): void;
							public getUseContinuousRendering(): boolean;
							public setPosition(param0: number): void;
							public getShowTextBorder(): boolean;
							public setTextSize(param0: number): void;
							public setMarginLeft(param0: number): void;
							public getTextColor(): number;
							public setMarginBottom(param0: number): void;
							public getSecondaryColor(): number;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export class BuildConfig extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.BuildConfig>;
						public static DEBUG: boolean; // 0
						public static LIBRARY_PACKAGE_NAME: string; // "com.mapbox.maps.plugin.viewport"
						public static BUILD_TYPE: string; // "release"
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export class CompletionListener extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.CompletionListener>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.CompletionListener interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onComplete(param0: boolean): void;
						});
						public constructor();
						public onComplete(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export class ViewportPlugin extends java.lang.Object implements com.mapbox.maps.plugin.MapPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportPlugin>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.ViewportPlugin interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getStatus(): com.mapbox.maps.plugin.viewport.ViewportStatus;
							transitionTo(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.transition.ViewportTransition, param2: com.mapbox.maps.plugin.viewport.CompletionListener): void;
							idle(): void;
							getOptions(): com.mapbox.maps.plugin.viewport.data.ViewportOptions;
							setOptions(param0: com.mapbox.maps.plugin.viewport.data.ViewportOptions): void;
							getDefaultTransition(): com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
							setDefaultTransition(param0: com.mapbox.maps.plugin.viewport.transition.ViewportTransition): void;
							addStatusObserver(param0: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
							removeStatusObserver(param0: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
							makeFollowPuckViewportState(param0: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): com.mapbox.maps.plugin.viewport.state.FollowPuckViewportState;
							makeOverviewViewportState(param0: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): com.mapbox.maps.plugin.viewport.state.OverviewViewportState;
							makeDefaultViewportTransition(param0: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransition;
							makeImmediateViewportTransition(): com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
							initialize(): void;
							cleanup(): void;
							onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						});
						public constructor();
						public makeFollowPuckViewportState(param0: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): com.mapbox.maps.plugin.viewport.state.FollowPuckViewportState;
						public makeOverviewViewportState(param0: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): com.mapbox.maps.plugin.viewport.state.OverviewViewportState;
						public getStatus(): com.mapbox.maps.plugin.viewport.ViewportStatus;
						public idle(): void;
						public addStatusObserver(param0: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
						public transitionTo(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.transition.ViewportTransition, param2: com.mapbox.maps.plugin.viewport.CompletionListener): void;
						public setDefaultTransition(param0: com.mapbox.maps.plugin.viewport.transition.ViewportTransition): void;
						public getDefaultTransition(): com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
						public removeStatusObserver(param0: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
						public getOptions(): com.mapbox.maps.plugin.viewport.data.ViewportOptions;
						public setOptions(param0: com.mapbox.maps.plugin.viewport.data.ViewportOptions): void;
						public makeImmediateViewportTransition(): com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
						public initialize(): void;
						public cleanup(): void;
						public makeDefaultViewportTransition(param0: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransition;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
					}
					export namespace ViewportPlugin {
						export class DefaultImpls extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportPlugin.DefaultImpls>;
							public static initialize(this_: com.mapbox.maps.plugin.viewport.ViewportPlugin): void;
							public static cleanup(this_: com.mapbox.maps.plugin.viewport.ViewportPlugin): void;
							public static onDelegateProvider(this_: com.mapbox.maps.plugin.viewport.ViewportPlugin, delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export class ViewportPluginImpl extends java.lang.Object implements com.mapbox.maps.plugin.viewport.ViewportPlugin {
						public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportPluginImpl>;
						public defaultTransition: com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
						public static VIEWPORT_CAMERA_OWNER: string; // "VIEWPORT_CAMERA_OWNER"
						public addStatusObserver(param0: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
						public transitionTo(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.transition.ViewportTransition, param2: com.mapbox.maps.plugin.viewport.CompletionListener): void;
						public transitionTo(this_t_53c: com.mapbox.maps.plugin.viewport.state.ViewportState, viewpo_9ac: com.mapbox.maps.plugin.viewport.transition.ViewportTransition, comple_194: com.mapbox.maps.plugin.viewport.CompletionListener): void;
						public onDelegateProvider(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public setDefaultTransition(param0: com.mapbox.maps.plugin.viewport.transition.ViewportTransition): void;
						public removeStatusObserver(param0: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
						public getOptions(): com.mapbox.maps.plugin.viewport.data.ViewportOptions;
						public makeFollowPuckViewportState(options: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): com.mapbox.maps.plugin.viewport.state.FollowPuckViewportState;
						public constructor(handler: globalAndroid.os.Handler);
						public cleanup(): void;
						public onDelegateProvider(param0: com.mapbox.maps.plugin.delegates.MapDelegateProvider): void;
						public setDefaultTransition(defaul_645: com.mapbox.maps.plugin.viewport.transition.ViewportTransition): void;
						public constructor();
						public makeFollowPuckViewportState(param0: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): com.mapbox.maps.plugin.viewport.state.FollowPuckViewportState;
						public makeOverviewViewportState(param0: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): com.mapbox.maps.plugin.viewport.state.OverviewViewportState;
						public getStatus(): com.mapbox.maps.plugin.viewport.ViewportStatus;
						public idle(): void;
						public makeOverviewViewportState(options: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): com.mapbox.maps.plugin.viewport.state.OverviewViewportState;
						public removeStatusObserver(viewpo_e87: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
						public getDefaultTransition(): com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
						public setOptions(param0: com.mapbox.maps.plugin.viewport.data.ViewportOptions): void;
						public makeImmediateViewportTransition(): com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
						public initialize(): void;
						public makeDefaultViewportTransition(options: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransition;
						public setOptions(options: com.mapbox.maps.plugin.viewport.data.ViewportOptions): void;
						public makeDefaultViewportTransition(param0: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransition;
						public addStatusObserver(viewpo_e87: com.mapbox.maps.plugin.viewport.ViewportStatusObserver): void;
					}
					export namespace ViewportPluginImpl {
						export namespace ViewportPluginImpl {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export abstract class ViewportStatus extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportStatus>;
					}
					export namespace ViewportStatus {
						export class Idle extends com.mapbox.maps.plugin.viewport.ViewportStatus {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportStatus.Idle>;
							public static INSTANCE: com.mapbox.maps.plugin.viewport.ViewportStatus.Idle;
							public toString(): string;
						}
						export class State extends com.mapbox.maps.plugin.viewport.ViewportStatus {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportStatus.State>;
							public hashCode(): number;
							public equals(other: any): boolean;
							public constructor(state: com.mapbox.maps.plugin.viewport.state.ViewportState);
							public toString(): string;
							public getState(): com.mapbox.maps.plugin.viewport.state.ViewportState;
						}
						export class Transition extends com.mapbox.maps.plugin.viewport.ViewportStatus {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportStatus.Transition>;
							public hashCode(): number;
							public getToState(): com.mapbox.maps.plugin.viewport.state.ViewportState;
							public equals(other: any): boolean;
							public toString(): string;
							public getTransition(): com.mapbox.maps.plugin.viewport.transition.ViewportTransition;
							public constructor(transition: com.mapbox.maps.plugin.viewport.transition.ViewportTransition, toState: com.mapbox.maps.plugin.viewport.state.ViewportState);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export class ViewportStatusObserver extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportStatusObserver>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.ViewportStatusObserver interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							onViewportStatusChanged(param0: com.mapbox.maps.plugin.viewport.ViewportStatus, param1: com.mapbox.maps.plugin.viewport.ViewportStatus, param2: com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason): void;
						});
						public constructor();
						public onViewportStatusChanged(param0: com.mapbox.maps.plugin.viewport.ViewportStatus, param1: com.mapbox.maps.plugin.viewport.ViewportStatus, param2: com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export class ViewportUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.ViewportUtils>;
						public static getViewport(this_v_d7b: com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate): com.mapbox.maps.plugin.viewport.ViewportPlugin;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace data {
						export class DefaultViewportTransitionOptions extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions>;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toBuilder(): com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions.Builder;
							public toString(): string;
							public getMaxDurationMs(): number;
						}
						export namespace DefaultViewportTransitionOptions {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions.Builder>;
								public maxDurationMs(this_m_6da: number): com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions.Builder;
								public constructor();
								public build(): com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace data {
						export abstract class FollowPuckViewportStateBearing extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing>;
						}
						export namespace FollowPuckViewportStateBearing {
							export class Constant extends com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing {
								public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing.Constant>;
								public toString(): string;
								public constructor(bearing: number);
								public hashCode(): number;
								public equals(other: any): boolean;
								public getBearing(): number;
							}
							export class SyncWithLocationPuck extends com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing {
								public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing.SyncWithLocationPuck>;
								public static INSTANCE: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing.SyncWithLocationPuck;
								public toString(): string;
								public hashCode(): number;
								public equals(other: any): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace data {
						export class FollowPuckViewportStateOptions extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions>;
							public getPitch(): java.lang.Double;
							public hashCode(): number;
							public getPadding(): com.mapbox.maps.EdgeInsets;
							public equals(other: any): boolean;
							public toString(): string;
							public getZoom(): java.lang.Double;
							public getBearing(): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing;
							public toBuilder(): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions.Builder;
						}
						export namespace FollowPuckViewportStateOptions {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions.Builder>;
								public zoom(this_z_344: java.lang.Double): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions.Builder;
								public padding(this_p_92b: com.mapbox.maps.EdgeInsets): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions.Builder;
								public bearing(this_b_3ec: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateBearing): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions.Builder;
								public pitch(this_p_fbb: java.lang.Double): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions.Builder;
								public constructor();
								public build(): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace data {
						export class OverviewViewportStateOptions extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions>;
							public getGeometryPadding(): com.mapbox.maps.EdgeInsets;
							public getPitch(): java.lang.Double;
							public getMaxZoom(): java.lang.Double;
							public getOffset(): com.mapbox.maps.ScreenCoordinate;
							public getBearing(): java.lang.Double;
							public hashCode(): number;
							public getPadding(): com.mapbox.maps.EdgeInsets;
							public equals(other: any): boolean;
							public toBuilder(): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
							public getAnimationDurationMs(): number;
							public toString(): string;
							public getGeometry(): com.mapbox.geojson.Geometry;
						}
						export namespace OverviewViewportStateOptions {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder>;
								public geometry(this_g_66e: com.mapbox.geojson.Geometry): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
								public bearing(this_b_57f: java.lang.Double): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
								public pitch(this_p_79a: java.lang.Double): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
								public offset(this_o_d09: com.mapbox.maps.ScreenCoordinate): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
								public maxZoom(this_m_7ec: java.lang.Double): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
								public constructor();
								public animationDurationMs(this_a_bf7: number): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
								public build(): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions;
								public padding(this_p_798: com.mapbox.maps.EdgeInsets): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
								public geometryPadding(this_g_d15: com.mapbox.maps.EdgeInsets): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace data {
						export class ViewportOptions extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.ViewportOptions>;
							public hashCode(): number;
							public equals(other: any): boolean;
							public getTransitionsToIdleUponUserInteraction(): boolean;
							public toBuilder(): com.mapbox.maps.plugin.viewport.data.ViewportOptions.Builder;
							public toString(): string;
						}
						export namespace ViewportOptions {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.ViewportOptions.Builder>;
								public build(): com.mapbox.maps.plugin.viewport.data.ViewportOptions;
								public constructor();
								public transitionsToIdleUponUserInteraction(this_t_f16: boolean): com.mapbox.maps.plugin.viewport.data.ViewportOptions.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace data {
						export class ViewportStatusChangeReason extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason>;
							public static IDLE_REQUESTED: com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason;
							public static TRANSITION_STARTED: com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason;
							public static TRANSITION_SUCCEEDED: com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason;
							public static TRANSITION_FAILED: com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason;
							public static USER_INTERACTION: com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason;
							public hashCode(): number;
							public equals(other: any): boolean;
							public toString(): string;
						}
						export namespace ViewportStatusChangeReason {
							export namespace ViewportStatusChangeReason {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace state {
						export class FollowPuckViewportState extends java.lang.Object implements com.mapbox.maps.plugin.viewport.state.ViewportState {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.state.FollowPuckViewportState>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.state.FollowPuckViewportState interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getOptions(): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions;
								setOptions(param0: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): void;
								observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
								startUpdatingCamera(): void;
								stopUpdatingCamera(): void;
							});
							public constructor();
							public getOptions(): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions;
							public startUpdatingCamera(): void;
							public setOptions(param0: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): void;
							public stopUpdatingCamera(): void;
							public observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace state {
						export class FollowPuckViewportStateImpl extends java.lang.Object implements com.mapbox.maps.plugin.viewport.state.FollowPuckViewportState {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.state.FollowPuckViewportStateImpl>;
							public static TAG: string; // "FollowPuckViewportStateImpl"
							public getOptions(): com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions;
							public constructor(mapDel_dcb: com.mapbox.maps.plugin.delegates.MapDelegateProvider, initia_697: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions, transi_354: com.mapbox.maps.plugin.viewport.transition.MapboxViewportTransitionFactory);
							public setFollowingStateRunning$plugin_viewport_release(follow_d60: boolean): void;
							public startUpdatingCamera(): void;
							public setOptions(value: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): void;
							public stopUpdatingCamera(): void;
							public setOptions(param0: com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions): void;
							public observeDataSource(viewpo_9f6: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
							public observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
							public isFollowingStateRunning$plugin_viewport_release(): boolean;
						}
						export namespace FollowPuckViewportStateImpl {
							export namespace FollowPuckViewportStateImpl {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace state {
						export class OverviewViewportState extends java.lang.Object implements com.mapbox.maps.plugin.viewport.state.ViewportState {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.state.OverviewViewportState>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.state.OverviewViewportState interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getOptions(): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions;
								setOptions(param0: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): void;
								observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
								startUpdatingCamera(): void;
								stopUpdatingCamera(): void;
							});
							public constructor();
							public startUpdatingCamera(): void;
							public getOptions(): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions;
							public stopUpdatingCamera(): void;
							public observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
							public setOptions(param0: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace state {
						export class OverviewViewportStateImpl extends java.lang.Object implements com.mapbox.maps.plugin.viewport.state.OverviewViewportState {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.state.OverviewViewportStateImpl>;
							public isOverviewStateRunning$plugin_viewport_release(): boolean;
							public startUpdatingCamera(): void;
							public getOptions(): com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions;
							public getDataSourceUpdateObservers$plugin_viewport_release(): java.util.concurrent.CopyOnWriteArraySet<com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver>;
							public setOverviewStateRunning$plugin_viewport_release(overvi_192: boolean): void;
							public setOptions(value: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): void;
							public observeDataSource(it: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
							public stopUpdatingCamera(): void;
							public constructor(mapDel_dcb: com.mapbox.maps.plugin.delegates.MapDelegateProvider, initia_697: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions, transi_354: com.mapbox.maps.plugin.viewport.transition.MapboxViewportTransitionFactory);
							public observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
							public setOptions(param0: com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace state {
						export class ViewportState extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.state.ViewportState>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.state.ViewportState interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
								startUpdatingCamera(): void;
								stopUpdatingCamera(): void;
							});
							public constructor();
							public startUpdatingCamera(): void;
							public stopUpdatingCamera(): void;
							public observeDataSource(param0: com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver): com.mapbox.common.Cancelable;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace state {
						export class ViewportStateDataObserver extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.state.ViewportStateDataObserver interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								onNewData(param0: com.mapbox.maps.CameraOptions): boolean;
							});
							public constructor();
							public onNewData(param0: com.mapbox.maps.CameraOptions): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace transition {
						export class DefaultViewportTransition extends java.lang.Object implements com.mapbox.maps.plugin.viewport.transition.ViewportTransition {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransition>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransition interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								getOptions(): com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions;
								setOptions(param0: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): void;
								run(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
							});
							public constructor();
							public run(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
							public getOptions(): com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions;
							public setOptions(param0: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace transition {
						export class DefaultViewportTransitionImpl extends java.lang.Object implements com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransition {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransitionImpl>;
							public run(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
							public getOptions(): com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions;
							public setOptions(options: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): void;
							public setOptions(param0: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions): void;
							public constructor(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider, options: com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions, transi_354: com.mapbox.maps.plugin.viewport.transition.MapboxViewportTransitionFactory);
							public run(animat_afc: com.mapbox.maps.plugin.viewport.state.ViewportState, startC_9d0: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
						}
						export namespace DefaultViewportTransitionImpl {
							export class WhenMappings extends java.lang.Object {
								public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.transition.DefaultViewportTransitionImpl.WhenMappings>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace transition {
						export class ImmediateViewportTransition extends java.lang.Object implements com.mapbox.maps.plugin.viewport.transition.ViewportTransition {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.transition.ImmediateViewportTransition>;
							public run(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
							public run(to: com.mapbox.maps.plugin.viewport.state.ViewportState, comple_0e7: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
							public constructor(delega_887: com.mapbox.maps.plugin.delegates.MapDelegateProvider);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace transition {
						export class MapboxViewportTransitionFactory extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.transition.MapboxViewportTransitionFactory>;
							public constructor(mapDel_dcb: com.mapbox.maps.plugin.delegates.MapDelegateProvider);
							public transitionFromLowZoomToHighZoom(screen_72b: com.mapbox.maps.CameraOptions, center_800: number): globalAndroid.animation.AnimatorSet;
							public transitionFromHighZoomToLowZoom(center: com.mapbox.maps.CameraOptions, i_a_le_ad6: number): globalAndroid.animation.AnimatorSet;
							public transitionLinear(center: com.mapbox.maps.CameraOptions, i_a_le_7ce: number): globalAndroid.animation.AnimatorSet;
						}
						export namespace MapboxViewportTransitionFactory {
							export namespace MapboxViewportTransitionFactory {
								export namespace Companion {
								}
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace transition {
						export class ViewportTransition extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.transition.ViewportTransition>;
							/**
							 * Constructs a new instance of the com.mapbox.maps.plugin.viewport.transition.ViewportTransition interface with the provided implementation.
							 * An empty constructor exists calling super().
							 */
							public constructor(implementation: {
								run(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
							});
							public constructor();
							public run(param0: com.mapbox.maps.plugin.viewport.state.ViewportState, param1: com.mapbox.maps.plugin.viewport.CompletionListener): com.mapbox.common.Cancelable;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace plugin {
				export namespace viewport {
					export namespace util {
						export class ViewportTelemetryEvents extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.plugin.viewport.util.ViewportTelemetryEvents>;
							public static INSTANCE: com.mapbox.maps.plugin.viewport.util.ViewportTelemetryEvents;
							public getStateOverview(): com.mapbox.maps.module.TelemetryEvent;
							public getStateFollowPuck(): com.mapbox.maps.module.TelemetryEvent;
							public getStateTransition(): com.mapbox.maps.module.TelemetryEvent;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class FpsManager extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.FpsManager>;
					public static VSYNC_COUNT_TILL_IDLE: number; // 3
					public setScreenRefreshRate(screen_322: number): void;
					public setUserRefreshRate(refres_386: number): void;
					public setFpsChangedListener$maps_sdk_release(fpsCha_2fa: com.mapbox.maps.renderer.OnFpsChangedListener): void;
					public destroy(): void;
					public constructor(handler: globalAndroid.os.Handler, mapName: string);
					public getFpsChangedListener$maps_sdk_release(): com.mapbox.maps.renderer.OnFpsChangedListener;
					public preRender(it: number, this_: boolean): boolean;
					public onSurfaceDestroyed(): void;
					public getSkippedNow(): number;
					public postRender(): void;
				}
				export namespace FpsManager {
					export namespace FpsManager {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class MapboxRenderThread extends java.lang.Object implements globalAndroid.view.Choreographer.FrameCallback {
					public static class: java.lang.Class<com.mapbox.maps.renderer.MapboxRenderThread>;
					public static RETRY_DELAY_MS: number; // 50
					public static RESET_THREAD_SERVICE_TYPE_DELAY_MS: number; // 300
					public getRenderEventQueue$maps_sdk_release(): java.util.concurrent.ConcurrentLinkedQueue<com.mapbox.maps.renderer.RenderEvent>;
					public getViewAnnotationMode$maps_sdk_release(): com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode;
					public constructor(this_iv: com.mapbox.maps.renderer.MapboxRenderer, initia_d8b: com.mapbox.maps.renderer.MapboxWidgetRenderer, handler: boolean, this_: number, mapbox_5e5: com.mapbox.maps.ContextMode, mapbox_371: string);
					public getRenderHandlerThread$maps_sdk_release(): com.mapbox.maps.renderer.RenderHandlerThread;
					public onSurfaceSizeChanged(width: number, height: number): void;
					public doFrame(param0: number): void;
					public scheduleThreadServiceTypeReset(): void;
					public getFpsChangedListener$maps_sdk_release(): com.mapbox.maps.renderer.OnFpsChangedListener;
					public onSurfaceDestroyed(): void;
					public getSurface$maps_sdk_release(): globalAndroid.view.Surface;
					public constructor(this_iv: com.mapbox.maps.renderer.MapboxRenderer, initia_d8b: com.mapbox.maps.renderer.MapboxWidgetRenderer, this_: com.mapbox.maps.renderer.RenderHandlerThread, mapbox_5e5: com.mapbox.maps.renderer.egl.EGLCore, mapbox_371: com.mapbox.maps.renderer.FpsManager, handle_a5b: com.mapbox.maps.renderer.gl.TextureRenderer, eglCore: java.util.concurrent.locks.ReentrantLock, fpsManager: java.util.concurrent.locks.Condition, widget_903: java.util.concurrent.locks.Condition);
					public getNonRenderEventQueue$maps_sdk_release(): java.util.concurrent.ConcurrentLinkedQueue<com.mapbox.maps.renderer.RenderEvent>;
					public setNeedViewAnnotationSync$maps_sdk_release(needVi_348: boolean): void;
					public queueRenderEvent(it: com.mapbox.maps.renderer.RenderEvent): void;
					public setEglSurface$maps_sdk_release(eglSur_ca4: globalAndroid.opengl.EGLSurface): void;
					public doFrame(startTime: number): void;
					public setSurface$maps_sdk_release(surfac_a0a: globalAndroid.view.Surface): void;
					public pause(): void;
					public setUserRefreshRate(fps: number): void;
					public getAwaitingNextVsync$maps_sdk_release(): boolean;
					public getEglSurface$maps_sdk_release(): globalAndroid.opengl.EGLSurface;
					public setRenderThreadStatsRecorder$maps_sdk_release(render_0ac: com.mapbox.maps.renderer.RenderThreadStatsRecorder): void;
					public setScreenRefreshRate(refres_386: number): void;
					public getEglContextMadeCurrent$maps_sdk_release(): boolean;
					public removeWidget(widget: com.mapbox.maps.renderer.widget.Widget): boolean;
					public setAwaitingNextVsync$maps_sdk_release(awaiti_bf3: boolean): void;
					public setPaused$maps_sdk_release(paused_307: boolean): void;
					public processAndroidSurface$maps_sdk_release(surface: globalAndroid.view.Surface, width: number, height: number): void;
					public getPaused$maps_sdk_release(): boolean;
					public getNeedViewAnnotationSync$maps_sdk_release(): boolean;
					public setFpsChangedListener$maps_sdk_release(fpsCha_2fa: com.mapbox.maps.renderer.OnFpsChangedListener): void;
					public setEglContextMadeCurrent$maps_sdk_release(this_: boolean): void;
					public setViewAnnotationMode$maps_sdk_release(viewAn_ce8: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode): void;
					public onSurfaceCreated(i_a_tr_a6c: globalAndroid.view.Surface, i_a_wi_415: number, i_a_tr_a_1: number): void;
					public getEglCore$maps_sdk_release(): com.mapbox.maps.renderer.egl.EGLCore;
					public resume(): void;
					public getRenderThreadStatsRecorder$maps_sdk_release(): com.mapbox.maps.renderer.RenderThreadStatsRecorder;
					public addWidget(widget: com.mapbox.maps.renderer.widget.Widget): void;
					public destroy$maps_sdk_release(): void;
				}
				export namespace MapboxRenderThread {
					export namespace MapboxRenderThread {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export abstract class MapboxRenderer extends java.lang.Object implements com.mapbox.maps.DelegatingMapClient {
					public static class: java.lang.Class<com.mapbox.maps.renderer.MapboxRenderer>;
					public renderThread: com.mapbox.maps.renderer.MapboxRenderThread;
					public setMap(map: com.mapbox.maps.NativeMapImpl): void;
					public getSnapshotLegacyModeEnabled$maps_sdk_release(): boolean;
					public queueNonRenderEvent(runnable: java.lang.Runnable): void;
					public getRenderThread$maps_sdk_release(): com.mapbox.maps.renderer.MapboxRenderThread;
					public setReadyForSnapshot$maps_sdk_release(readyF_917: java.util.concurrent.atomic.AtomicBoolean): void;
					public queueRenderEvent(runnable: java.lang.Runnable): void;
					public createRenderer(): void;
					public onDestroy(): void;
					public onStart(): void;
					public snapshot(this_: com.mapbox.maps.MapView.OnSnapshotReady): void;
					public render(): void;
					public constructor(mapName: string);
					public setMaximumFps(fps: number): void;
					public setOnFpsChangedListener(listener: com.mapbox.maps.renderer.OnFpsChangedListener): void;
					public snapshot(): globalAndroid.graphics.Bitmap;
					public getPixelReader$maps_sdk_release(): com.mapbox.maps.renderer.gl.PixelReader;
					public getReadyForSnapshot$maps_sdk_release(): java.util.concurrent.atomic.AtomicBoolean;
					public getWidgetRenderer$maps_sdk_release(): com.mapbox.maps.renderer.MapboxWidgetRenderer;
					public setPixelReader$maps_sdk_release(pixelR_596: com.mapbox.maps.renderer.gl.PixelReader): void;
					public onSurfaceChanged(width: number, height: number): void;
					public setRenderThread$maps_sdk_release(render_38d: com.mapbox.maps.renderer.MapboxRenderThread): void;
					public onResume(): void;
					public setMap$maps_sdk_release(map_ma_7b5: com.mapbox.maps.NativeMapImpl): void;
					public destroyRenderer(): void;
					public getMap$maps_sdk_release(): com.mapbox.maps.NativeMapImpl;
					public setSnapshotLegacyModeEnabled$maps_sdk_release(snapsh_894: boolean): void;
					public onStop(): void;
					public scheduleRepaint(): void;
					public resetThreadServiceType(): void;
				}
				export namespace MapboxRenderer {
					export namespace MapboxRenderer {
						export namespace Companion {
							function getRepaintRenderEvent$maps_sdk_release(): com.mapbox.maps.renderer.RenderEvent;
							function getRepaintRenderEvent$maps_sdk_release(): com.mapbox.maps.renderer.RenderEvent;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class MapboxSurfaceHolderRenderer extends com.mapbox.maps.renderer.MapboxSurfaceRenderer implements globalAndroid.view.SurfaceHolder.Callback {
					public static class: java.lang.Class<com.mapbox.maps.renderer.MapboxSurfaceHolderRenderer>;
					public surfaceCreated(holder: globalAndroid.view.SurfaceHolder): void;
					public surfaceChanged(surface: globalAndroid.view.Surface, width: number, height: number): void;
					public surfaceCreated(param0: globalAndroid.view.SurfaceHolder): void;
					public constructor(render_609: com.mapbox.maps.renderer.MapboxRenderThread);
					public surfaceDestroyed(): void;
					public constructor(surfac_97a: globalAndroid.view.SurfaceHolder, antial_992: number, contex_23f: com.mapbox.maps.ContextMode, mapName: string);
					public surfaceChanged(holder: globalAndroid.view.SurfaceHolder, format: number, width: number, height: number): void;
					public surfaceChanged(param0: globalAndroid.view.SurfaceHolder, param1: number, param2: number, param3: number): void;
					public constructor(antial_992: number, contex_23f: com.mapbox.maps.ContextMode, mapName: string);
					public constructor(mapName: string);
					public surfaceCreated(): void;
					public surfaceDestroyed(holder: globalAndroid.view.SurfaceHolder): void;
					public surfaceDestroyed(param0: globalAndroid.view.SurfaceHolder): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class MapboxSurfaceRenderer extends com.mapbox.maps.renderer.MapboxRenderer {
					public static class: java.lang.Class<com.mapbox.maps.renderer.MapboxSurfaceRenderer>;
					public constructor(antial_992: number, contex_23f: com.mapbox.maps.ContextMode, mapName: string);
					public getWidgetRenderer$maps_sdk_release(): com.mapbox.maps.renderer.MapboxWidgetRenderer;
					public constructor(mapName: string);
					public surfaceCreated(): void;
					public surfaceChanged(surface: globalAndroid.view.Surface, width: number, height: number): void;
					public constructor(render_609: com.mapbox.maps.renderer.MapboxRenderThread);
					public surfaceDestroyed(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class MapboxTextureViewRenderer extends com.mapbox.maps.renderer.MapboxRenderer implements globalAndroid.view.TextureView.SurfaceTextureListener {
					public static class: java.lang.Class<com.mapbox.maps.renderer.MapboxTextureViewRenderer>;
					public onSurfaceTextureAvailable(param0: globalAndroid.graphics.SurfaceTexture, param1: number, param2: number): void;
					public getWidgetRenderer$maps_sdk_release(): com.mapbox.maps.renderer.MapboxWidgetRenderer;
					public constructor(mapName: string);
					public onSurfaceTextureAvailable(surfac_9f7: globalAndroid.graphics.SurfaceTexture, width: number, height: number): void;
					public onSurfaceTextureDestroyed(param0: globalAndroid.graphics.SurfaceTexture): boolean;
					public onSurfaceTextureUpdated(param0: globalAndroid.graphics.SurfaceTexture): void;
					public onSurfaceTextureSizeChanged(surface: globalAndroid.graphics.SurfaceTexture, width: number, height: number): void;
					public constructor(it: globalAndroid.view.TextureView, widget_05e: number, this_: com.mapbox.maps.ContextMode, textur_eed: string);
					public constructor(this_: com.mapbox.maps.renderer.MapboxRenderThread);
					public onSurfaceTextureDestroyed(surface: globalAndroid.graphics.SurfaceTexture): boolean;
					public onSurfaceTextureSizeChanged(param0: globalAndroid.graphics.SurfaceTexture, param1: number, param2: number): void;
					public onSurfaceTextureUpdated(surface: globalAndroid.graphics.SurfaceTexture): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class MapboxWidgetRenderer extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.MapboxWidgetRenderer>;
					public hasWidgets(): boolean;
					public onSurfaceChanged(it: number, element_iv: number): void;
					public getTexture(): number;
					public renderToFrameBuffer(): void;
					public setSharedContext(shared_7f7: globalAndroid.opengl.EGLContext): void;
					public addWidget(widget: com.mapbox.maps.renderer.widget.Widget): void;
					public getNeedRender(): boolean;
					public release(): void;
					public cleanUpAllWidgets(): void;
					public hasTexture(): boolean;
					public removeWidget(this_: com.mapbox.maps.renderer.widget.Widget): boolean;
					public constructor(antial_992: number, mapName: string);
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class OnFpsChangedListener extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.OnFpsChangedListener>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.renderer.OnFpsChangedListener interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onFpsChanged(param0: number): void;
					});
					public constructor();
					public onFpsChanged(param0: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class RenderEvent extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.RenderEvent>;
					public toString(): string;
					public component1(): java.lang.Runnable;
					public constructor(runnable: java.lang.Runnable, needRender: boolean);
					public equals(other: any): boolean;
					public copy(runnable: java.lang.Runnable, needRender: boolean): com.mapbox.maps.renderer.RenderEvent;
					public getRunnable(): java.lang.Runnable;
					public getNeedRender(): boolean;
					public hashCode(): number;
					public component2(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class RenderHandlerThread extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.RenderHandlerThread>;
					public getHandlerThread$maps_sdk_release(): globalAndroid.os.HandlerThread;
					public start(): globalAndroid.os.Handler;
					public constructor(mapName: string);
					public clearRenderEventQueue(): void;
					public stop(): void;
					public getHandler$maps_sdk_release(): globalAndroid.os.Handler;
					public post(task: java.lang.Runnable): void;
					public isRunning$maps_sdk_release(): boolean;
					public setHandler$maps_sdk_release(handle_92f: globalAndroid.os.Handler): void;
					public postDelayed(message: java.lang.Runnable, it: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class RenderThread extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.mapbox.maps.renderer.RenderThread>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.renderer.RenderThread interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						annotationType(): java.lang.Class<any>;
						equals(param0: any): boolean;
						hashCode(): number;
						toString(): string;
					});
					public constructor();
					public equals(param0: any): boolean;
					public toString(): string;
					public annotationType(): java.lang.Class<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class RenderThreadStats extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.RenderThreadStats>;
					public getTotalDroppedFrames(): number;
					public getTotalFrames(): number;
					public toString(): string;
					public getPercentile99(): java.lang.Double;
					public getFrameTimeList(): java.util.List<java.lang.Double>;
					public equals(other: any): boolean;
					public getPercentile90(): java.lang.Double;
					public getPercentile95(): java.lang.Double;
					public getPercentile50(): java.lang.Double;
					public getTotalTime(): number;
					public hashCode(): number;
				}
				export namespace RenderThreadStats {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.RenderThreadStats.Builder>;
						public setTotalDroppedFrames(this_s_5fc: number): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public constructor();
						public setTotalFrames(this_s_a91: number): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public setFrameTimeList(this_s_3f7: java.util.List<java.lang.Double>): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public setPercentile90(this_s_5dd: java.lang.Double): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public setPercentile95(this_s_399: java.lang.Double): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public setPercentile99(this_s_4da: java.lang.Double): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public setPercentile50(this_s_25e: java.lang.Double): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public setTotalTime(this_s_c4f: number): com.mapbox.maps.renderer.RenderThreadStats.Builder;
						public build(): com.mapbox.maps.renderer.RenderThreadStats;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class RenderThreadStatsRecorder extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.RenderThreadStatsRecorder>;
					public addFrameStats$maps_sdk_release(frameTime: number, droppe_38f: number): void;
					public end(): com.mapbox.maps.renderer.RenderThreadStats;
					public constructor();
					public start(): void;
					public isRecording(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class RendererError extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.RendererError>;
					public static NO_VALID_EGL_CONFIG_FOUND: com.mapbox.maps.renderer.RendererError;
					public static OUT_OF_MEMORY: com.mapbox.maps.renderer.RendererError;
					public constructor(eglErr_f0a: number);
					public toString(): string;
					public equals(other: any): boolean;
					public getEglErrorCode(): number;
					public hashCode(): number;
				}
				export namespace RendererError {
					export namespace RendererError {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export class RendererSetupErrorListener extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.renderer.RendererSetupErrorListener>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.renderer.RendererSetupErrorListener interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onError(param0: com.mapbox.maps.renderer.RendererError): void;
					});
					public constructor();
					public onError(param0: com.mapbox.maps.renderer.RendererError): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace egl {
					export class EGLConfigChooser extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.egl.EGLConfigChooser>;
						public chooseConfig(config: globalAndroid.opengl.EGLDisplay): globalAndroid.opengl.EGLConfig;
						public constructor(transl_a77: boolean, antial_992: number, mapName: string);
					}
					export namespace EGLConfigChooser {
						export class BufferFormat {
							public static class: java.lang.Class<com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat>;
							public static Format32BitAlpha: com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat;
							public static Format32BitNoAlpha: com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat;
							public static Format24Bit: com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat;
							public static Format16Bit: com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat;
							public static Unknown: com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat;
							public static values(): androidNative.Array<com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat>;
							public static valueOf(value: string): com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat;
							public setValue(value: number): void;
							public getValue(): number;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
						export namespace EGLConfigChooser {
							export namespace Companion {
								function getSTENCIL_SIZE$maps_sdk_release(): number;
								function setSTENCIL_SIZE$maps_sdk_release(sTENCI_f71: number): void;
								function inEmulator$maps_sdk_release(): boolean;
								function getSTENCIL_SIZE$maps_sdk_release(): number;
								function setSTENCIL_SIZE$maps_sdk_release(sTENCI_f71: number): void;
								function inEmulator$maps_sdk_release(): boolean;
							}
						}
						export class DepthStencilFormat {
							public static class: java.lang.Class<com.mapbox.maps.renderer.egl.EGLConfigChooser.DepthStencilFormat>;
							public static Format24Depth8Stencil: com.mapbox.maps.renderer.egl.EGLConfigChooser.DepthStencilFormat;
							public static Format16Depth8Stencil: com.mapbox.maps.renderer.egl.EGLConfigChooser.DepthStencilFormat;
							public static values(): androidNative.Array<com.mapbox.maps.renderer.egl.EGLConfigChooser.DepthStencilFormat>;
							public setValue(value: number): void;
							public getValue(): number;
							public static valueOf(value: string): com.mapbox.maps.renderer.egl.EGLConfigChooser.DepthStencilFormat;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
						export namespace chooseBestMatchConfig {
							export class Config extends java.lang.Comparable<com.mapbox.maps.renderer.egl.EGLConfigChooser.chooseBestMatchConfig.Config> {
								public static class: java.lang.Class<com.mapbox.maps.renderer.egl.EGLConfigChooser.chooseBestMatchConfig.Config>;
								public getDepthStencilFormat(): com.mapbox.maps.renderer.egl.EGLConfigChooser.DepthStencilFormat;
								public constructor(buffer_484: com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat, depthS_a65: com.mapbox.maps.renderer.egl.EGLConfigChooser.DepthStencilFormat, isNotC_fc9: boolean, isCaveat: boolean, index: number, config: globalAndroid.opengl.EGLConfig, samples: number);
								public isCaveat(): boolean;
								public compareTo(this_: com.mapbox.maps.renderer.egl.EGLConfigChooser.chooseBestMatchConfig.Config): number;
								public isNotConformant(): boolean;
								public getBufferFormat(): com.mapbox.maps.renderer.egl.EGLConfigChooser.BufferFormat;
								public getConfig(): globalAndroid.opengl.EGLConfig;
								public getSamples(): number;
								public getIndex(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace egl {
					export class EGLCore extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.egl.EGLCore>;
						public getEglNoSurface$maps_sdk_release(): globalAndroid.opengl.EGLSurface;
						public makeCurrent(eglSurface: globalAndroid.opengl.EGLSurface): boolean;
						public constructor(transl_a77: boolean, antial_992: number, shared_7f7: globalAndroid.opengl.EGLContext, mapName: string);
						public getEglContext$maps_sdk_release(): globalAndroid.opengl.EGLContext;
						public createWindowSurface(eglSurface: globalAndroid.view.Surface): globalAndroid.opengl.EGLSurface;
						public makeNothingCurrent(): boolean;
						public prepareEgl(): boolean;
						public removeRendererStateListener$maps_sdk_release(listener: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
						public release(): void;
						public createOffscreenSurface(eglSurface: number, eglCre_2d4: number): globalAndroid.opengl.EGLSurface;
						public queryContextVersion(): number;
						public releaseSurface(eglSurface: globalAndroid.opengl.EGLSurface): void;
						public clearRendererStateListeners$maps_sdk_release(): void;
						public addRendererStateListener$maps_sdk_release(this_: com.mapbox.maps.renderer.RendererSetupErrorListener): void;
						public swapBuffers(this_: globalAndroid.opengl.EGLSurface): number;
						public setEglContext$maps_sdk_release(eglCon_640: globalAndroid.opengl.EGLContext): void;
					}
					export namespace EGLCore {
						export namespace EGLCore {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace gl {
					export class GlUtils extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.gl.GlUtils>;
						public static INSTANCE: com.mapbox.maps.renderer.gl.GlUtils;
						public loadShader(shader: number, this_: string): number;
						public toFloatBuffer(it: androidNative.Array<number>): java.nio.FloatBuffer;
						public put(value: java.nio.FloatBuffer, element_iv: androidNative.Array<number>): void;
						public checkError(this_: string): void;
						public put(index: androidNative.Array<number>, value: androidNative.Array<number>): void;
						public getIdentityMatrix(): androidNative.Array<number>;
						public checkCompileStatus(shader: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace gl {
					export class PixelReader extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.gl.PixelReader>;
						public getWidth(): number;
						public getLegacyMode(): boolean;
						public constructor(width: number, height: number, legacyMode: boolean);
						public readPixels(): java.nio.ByteBuffer;
						public getHeight(): number;
						public release(): void;
					}
					export namespace PixelReader {
						export namespace PixelReader {
							export namespace Companion {
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace gl {
					export class TextureRenderer extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.gl.TextureRenderer>;
						public static COORDS_PER_VERTEX: number; // 3
						public static COORDS_PER_TEX: number; // 2
						public static BYTES_PER_FLOAT: number; // 4
						public static VERTEX_STRIDE: number; // 12
						public static TEX_STRIDE: number; // 8
						public static VERTEX_COUNT: number; // 4
						public constructor();
						public render(textureID: number): void;
						public release(): void;
						public constructor(depth: number);
					}
					export namespace TextureRenderer {
						export namespace TextureRenderer {
							export namespace Companion {
								function getVERTEX_SHADER_CODE(): string;
								function getFRAGMENT_SHADER_CODE(): string;
								function getVERTEX_SHADER_CODE(): string;
								function getFRAGMENT_SHADER_CODE(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace widget {
					export class BitmapWidget extends com.mapbox.maps.renderer.widget.Widget {
						public static class: java.lang.Class<com.mapbox.maps.renderer.widget.BitmapWidget>;
						public constructor();
						public updateBitmap(bitmap: globalAndroid.graphics.Bitmap): void;
						public setPosition(widget_86a: com.mapbox.maps.renderer.widget.WidgetPosition): void;
						public setRotation(angleD_e31: number): void;
						/** @deprecated */
						public constructor(bitmap: globalAndroid.graphics.Bitmap, position: com.mapbox.maps.renderer.widget.WidgetPosition, marginX: number, marginY: number);
						public getRenderer$maps_sdk_release(): com.mapbox.maps.renderer.widget.BitmapWidgetRenderer;
						public getRenderer$maps_sdk_release(): com.mapbox.maps.renderer.widget.WidgetRenderer;
						public getPosition(): com.mapbox.maps.renderer.widget.WidgetPosition;
						public getRotation(): number;
						public constructor(bitmap: globalAndroid.graphics.Bitmap, origin_62d: com.mapbox.maps.renderer.widget.WidgetPosition);
						/** @deprecated */
						public constructor(bitmap: globalAndroid.graphics.Bitmap, position: com.mapbox.maps.renderer.widget.WidgetPosition, marginX: number);
						public constructor(bitmap: globalAndroid.graphics.Bitmap);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace widget {
					export class BitmapWidgetRenderer extends java.lang.Object implements com.mapbox.maps.renderer.widget.WidgetRenderer {
						public static class: java.lang.Class<com.mapbox.maps.renderer.widget.BitmapWidgetRenderer>;
						public static COORDS_PER_VERTEX: number; // 2
						public static BYTES_PER_FLOAT: number; // 4
						public static VERTEX_STRIDE: number; // 8
						public static VERTEX_COUNT: number; // 4
						public onSurfaceChanged(param0: number, param1: number): void;
						public constructor(bitmap: globalAndroid.graphics.Bitmap, position: com.mapbox.maps.renderer.widget.WidgetPosition);
						public setNeedRender(needRender: boolean): void;
						public getNeedRender(): boolean;
						public release(): void;
						public setPosition(this_: com.mapbox.maps.renderer.widget.WidgetPosition): void;
						public updateBitmap(this_: globalAndroid.graphics.Bitmap): void;
						public setRotation(this_: number): void;
						public setRotation(param0: number): void;
						public render(): void;
						public setPosition(param0: com.mapbox.maps.renderer.widget.WidgetPosition): void;
						public prepare(): void;
						public getRotation(): number;
						public getPosition(): com.mapbox.maps.renderer.widget.WidgetPosition;
						public onSurfaceChanged(this_: number, width: number): void;
					}
					export namespace BitmapWidgetRenderer {
						export namespace BitmapWidgetRenderer {
							export namespace Companion {
								function getVERTEX_SHADER_CODE(): string;
								function getFRAGMENT_SHADER_CODE(): string;
								function getVERTEX_SHADER_CODE(): string;
								function getFRAGMENT_SHADER_CODE(): string;
							}
						}
						export class WhenMappings extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.renderer.widget.BitmapWidgetRenderer.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace widget {
					export abstract class Widget extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.widget.Widget>;
						public constructor();
						public setRotation(param0: number): void;
						public setPosition(param0: com.mapbox.maps.renderer.widget.WidgetPosition): void;
						public getRenderer$maps_sdk_release(): com.mapbox.maps.renderer.widget.WidgetRenderer;
						public getPosition(): com.mapbox.maps.renderer.widget.WidgetPosition;
						public getRotation(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace widget {
					export class WidgetPosition extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.widget.WidgetPosition>;
						public getOffsetX(): number;
						public getOffsetY(): number;
						public equals(other: any): boolean;
						public getHorizontalAlignment(): com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal;
						public getVerticalAlignment(): com.mapbox.maps.renderer.widget.WidgetPosition.Vertical;
						public toBuilder(): com.mapbox.maps.renderer.widget.WidgetPosition.Builder;
						public hashCode(): number;
						/** @deprecated */
						public constructor(horizontal: com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal, vertical: com.mapbox.maps.renderer.widget.WidgetPosition.Vertical);
						/** @deprecated */
						public getHorizontal(): com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal;
						public toString(): string;
						/** @deprecated */
						public getVertical(): com.mapbox.maps.renderer.widget.WidgetPosition.Vertical;
					}
					export namespace WidgetPosition {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.mapbox.maps.renderer.widget.WidgetPosition.Builder>;
							public constructor();
							public getHorizontalAlignment(): com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal;
							public setVerticalAlignment(this_s_df0: com.mapbox.maps.renderer.widget.WidgetPosition.Vertical): com.mapbox.maps.renderer.widget.WidgetPosition.Builder;
							public setOffsetY(this_s_ba9: number): com.mapbox.maps.renderer.widget.WidgetPosition.Builder;
							public getOffsetY(): number;
							public setOffsetX(this_s_767: number): com.mapbox.maps.renderer.widget.WidgetPosition.Builder;
							public build(): com.mapbox.maps.renderer.widget.WidgetPosition;
							public getOffsetX(): number;
							public setHorizontalAlignment(this_s_c69: com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal): com.mapbox.maps.renderer.widget.WidgetPosition.Builder;
							public getVerticalAlignment(): com.mapbox.maps.renderer.widget.WidgetPosition.Vertical;
						}
						export class Horizontal {
							public static class: java.lang.Class<com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal>;
							public static LEFT: com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal;
							public static CENTER: com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal;
							public static RIGHT: com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal;
							public static values(): androidNative.Array<com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(value: string): com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal;
						}
						export class Vertical {
							public static class: java.lang.Class<com.mapbox.maps.renderer.widget.WidgetPosition.Vertical>;
							public static TOP: com.mapbox.maps.renderer.widget.WidgetPosition.Vertical;
							public static CENTER: com.mapbox.maps.renderer.widget.WidgetPosition.Vertical;
							public static BOTTOM: com.mapbox.maps.renderer.widget.WidgetPosition.Vertical;
							public static valueOf(value: string): com.mapbox.maps.renderer.widget.WidgetPosition.Vertical;
							public static values(): androidNative.Array<com.mapbox.maps.renderer.widget.WidgetPosition.Vertical>;
							public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace renderer {
				export namespace widget {
					export class WidgetRenderer extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.renderer.widget.WidgetRenderer>;
						/**
						 * Constructs a new instance of the com.mapbox.maps.renderer.widget.WidgetRenderer interface with the provided implementation.
						 * An empty constructor exists calling super().
						 */
						public constructor(implementation: {
							getNeedRender(): boolean;
							onSurfaceChanged(param0: number, param1: number): void;
							prepare(): void;
							render(): void;
							release(): void;
							setRotation(param0: number): void;
							getRotation(): number;
							setPosition(param0: com.mapbox.maps.renderer.widget.WidgetPosition): void;
							getPosition(): com.mapbox.maps.renderer.widget.WidgetPosition;
						});
						public constructor();
						public onSurfaceChanged(param0: number, param1: number): void;
						public setRotation(param0: number): void;
						public render(): void;
						public setPosition(param0: com.mapbox.maps.renderer.widget.WidgetPosition): void;
						public getNeedRender(): boolean;
						public prepare(): void;
						public release(): void;
						public getRotation(): number;
						public getPosition(): com.mapbox.maps.renderer.widget.WidgetPosition;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace text {
				export class LocalGlyphRasterizer extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.text.LocalGlyphRasterizer>;
					public getGlyphMetrics(y: string, this_: boolean, fontFamily: string): com.mapbox.maps.text.LocalGlyphRasterizer.GlyphMetrics;
					public getFontMetrics(fontFamily: string, bold: boolean): com.mapbox.maps.text.LocalGlyphRasterizer.FontMetrics;
				}
				export namespace LocalGlyphRasterizer {
					export class FontMetrics extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.text.LocalGlyphRasterizer.FontMetrics>;
					}
					export class GlyphMetrics extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.text.LocalGlyphRasterizer.GlyphMetrics>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace text {
				export class StringUtils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.text.StringUtils>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace threading {
				export class AnimationThreadController extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.threading.AnimationThreadController>;
					public static INSTANCE: com.mapbox.maps.threading.AnimationThreadController;
					public postOnMainThread(function_: any): void;
					public useBackgroundThread(): void;
					public postOnAnimatorThread(backgr_90b: any): void;
					public useMainThread(): void;
					public getUsingBackgroundThread(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace util {
				export class CameraOptionsUtils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.util.CameraOptionsUtils>;
					public static isEmpty(this_i_376: com.mapbox.maps.CameraOptions): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace util {
				export class CoreGesturesHandler extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.util.CoreGesturesHandler>;
					public getCoreGestureAnimatorHandler(): globalAndroid.animation.AnimatorListenerAdapter;
					public constructor(mapTra_380: com.mapbox.maps.plugin.delegates.MapTransformDelegate, mapCam_1fe: com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate);
					public notifyCoreGestureStarted(): void;
					public notifyCoreTouchEnded(): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace util {
				export class MathUtils extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.util.MathUtils>;
					public static INSTANCE: com.mapbox.maps.util.MathUtils;
					public shortestRotation$sdk_base_release(this_: number, target_dc6: number): number;
					public prepareOptimalBearingPath(i_a_ap_bb7: androidNative.Array<number>): androidNative.Array<number>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace viewannotation {
				export class OnViewAnnotationUpdatedListener extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						onViewAnnotationPositionUpdated(param0: globalAndroid.view.View, param1: com.mapbox.maps.ScreenCoordinate, param2: number, param3: number): void;
						onViewAnnotationVisibilityUpdated(param0: globalAndroid.view.View, param1: boolean): void;
						onViewAnnotationAnchorCoordinateUpdated(param0: globalAndroid.view.View, param1: com.mapbox.geojson.Point): void;
						onViewAnnotationAnchorUpdated(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationAnchorConfig): void;
					});
					public constructor();
					public onViewAnnotationVisibilityUpdated(param0: globalAndroid.view.View, param1: boolean): void;
					public onViewAnnotationPositionUpdated(param0: globalAndroid.view.View, param1: com.mapbox.maps.ScreenCoordinate, param2: number, param3: number): void;
					public onViewAnnotationAnchorUpdated(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationAnchorConfig): void;
					public onViewAnnotationAnchorCoordinateUpdated(param0: globalAndroid.view.View, param1: com.mapbox.geojson.Point): void;
				}
				export namespace OnViewAnnotationUpdatedListener {
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener.DefaultImpls>;
						public static onViewAnnotationPositionUpdated(this_: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener, view: globalAndroid.view.View, leftTo_a8d: com.mapbox.maps.ScreenCoordinate, width: number, height: number): void;
						public static onViewAnnotationAnchorCoordinateUpdated(this_: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener, view: globalAndroid.view.View, anchor_5ea: com.mapbox.geojson.Point): void;
						public static onViewAnnotationAnchorUpdated(this_: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener, view: globalAndroid.view.View, anchor: com.mapbox.maps.ViewAnnotationAnchorConfig): void;
						public static onViewAnnotationVisibilityUpdated(this_: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener, view: globalAndroid.view.View, visible: boolean): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace viewannotation {
				export class ViewAnnotationManager extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.viewannotation.ViewAnnotationManager>;
					/**
					 * Constructs a new instance of the com.mapbox.maps.viewannotation.ViewAnnotationManager interface with the provided implementation.
					 * An empty constructor exists calling super().
					 */
					public constructor(implementation: {
						getViewAnnotationAvoidLayers(): java.util.HashSet<string>;
						setViewAnnotationAvoidLayers(param0: java.util.HashSet<string>): void;
						addViewAnnotation(param0: number, param1: com.mapbox.maps.ViewAnnotationOptions): globalAndroid.view.View;
						addViewAnnotation(param0: number, param1: com.mapbox.maps.ViewAnnotationOptions, param2: androidx.asynclayoutinflater.view.AsyncLayoutInflater, param3: any): void;
						addViewAnnotation(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationOptions): void;
						removeViewAnnotation(param0: globalAndroid.view.View): boolean;
						removeAllViewAnnotations(): void;
						updateViewAnnotation(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationOptions): boolean;
						getViewAnnotation(param0: com.mapbox.maps.AnnotatedLayerFeature): globalAndroid.view.View;
						getViewAnnotationOptions(param0: com.mapbox.maps.AnnotatedLayerFeature): com.mapbox.maps.ViewAnnotationOptions;
						getViewAnnotationOptions(param0: globalAndroid.view.View): com.mapbox.maps.ViewAnnotationOptions;
						addOnViewAnnotationUpdatedListener(param0: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
						removeOnViewAnnotationUpdatedListener(param0: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
						setViewAnnotationUpdateMode(param0: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode): void;
						getViewAnnotationUpdateMode(): com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode;
						getAnnotations(): java.util.Map<globalAndroid.view.View,com.mapbox.maps.ViewAnnotationOptions>;
						cameraForAnnotations(param0: java.util.List<any>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
						cameraForAnnotations(param0: java.util.List<any>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double, param4: any): void;
						"<clinit>"(): void;
					});
					public constructor();
					public static DEFAULT_UPDATE_MODE: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode;
					public addOnViewAnnotationUpdatedListener(param0: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
					public getViewAnnotationUpdateMode(): com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode;
					public getAnnotations(): java.util.Map<globalAndroid.view.View,com.mapbox.maps.ViewAnnotationOptions>;
					public getViewAnnotationOptions(param0: globalAndroid.view.View): com.mapbox.maps.ViewAnnotationOptions;
					public removeOnViewAnnotationUpdatedListener(param0: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
					public cameraForAnnotations(param0: java.util.List<any>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
					public removeViewAnnotation(param0: globalAndroid.view.View): boolean;
					public addViewAnnotation(param0: number, param1: com.mapbox.maps.ViewAnnotationOptions, param2: androidx.asynclayoutinflater.view.AsyncLayoutInflater, param3: any): void;
					public setViewAnnotationAvoidLayers(param0: java.util.HashSet<string>): void;
					public updateViewAnnotation(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationOptions): boolean;
					public addViewAnnotation(param0: number, param1: com.mapbox.maps.ViewAnnotationOptions): globalAndroid.view.View;
					public addViewAnnotation(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationOptions): void;
					public cameraForAnnotations(param0: java.util.List<any>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double, param4: any): void;
					public removeAllViewAnnotations(): void;
					public setViewAnnotationUpdateMode(param0: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode): void;
					public getViewAnnotation(param0: com.mapbox.maps.AnnotatedLayerFeature): globalAndroid.view.View;
					public getViewAnnotationOptions(param0: com.mapbox.maps.AnnotatedLayerFeature): com.mapbox.maps.ViewAnnotationOptions;
					public getViewAnnotationAvoidLayers(): java.util.HashSet<string>;
				}
				export namespace ViewAnnotationManager {
					export namespace ViewAnnotationManager {
						export namespace Companion {
						}
					}
					export class DefaultImpls extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.viewannotation.ViewAnnotationManager.DefaultImpls>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace viewannotation {
				export class ViewAnnotationManagerImpl extends com.mapbox.maps.DelegatingViewAnnotationPositionsUpdateListener implements com.mapbox.maps.viewannotation.ViewAnnotationManager {
					public static class: java.lang.Class<com.mapbox.maps.viewannotation.ViewAnnotationManagerImpl>;
					public addOnViewAnnotationUpdatedListener(param0: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
					public addViewAnnotation(this_: number, resId: com.mapbox.maps.ViewAnnotationOptions): globalAndroid.view.View;
					public getViewAnnotationUpdateMode(): com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode;
					public getAnnotations(): java.util.Map<globalAndroid.view.View,com.mapbox.maps.ViewAnnotationOptions>;
					public getViewAnnotationOptions(param0: globalAndroid.view.View): com.mapbox.maps.ViewAnnotationOptions;
					public removeOnViewAnnotationUpdatedListener(param0: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
					public cameraForAnnotations(param0: java.util.List<any>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double): com.mapbox.maps.CameraOptions;
					public constructor(mapView: com.mapbox.maps.MapView, viewAn_c24: globalAndroid.widget.FrameLayout);
					public getViewAnnotationOptions(annota_c46: com.mapbox.maps.AnnotatedLayerFeature): com.mapbox.maps.ViewAnnotationOptions;
					public addViewAnnotation(param0: number, param1: com.mapbox.maps.ViewAnnotationOptions, param2: androidx.asynclayoutinflater.view.AsyncLayoutInflater, param3: any): void;
					public setViewAnnotationAvoidLayers(param0: java.util.HashSet<string>): void;
					public destroy(): void;
					public addViewAnnotation(param0: number, param1: com.mapbox.maps.ViewAnnotationOptions): globalAndroid.view.View;
					public constructor();
					public setViewAnnotationUpdateMode(param0: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode): void;
					public setViewAnnotationAvoidLayers(value: java.util.HashSet<string>): void;
					public getViewAnnotationAvoidLayers(): java.util.HashSet<string>;
					public removeViewAnnotation(viewAn_3ad: globalAndroid.view.View): boolean;
					public getViewAnnotation(annota_c46: com.mapbox.maps.AnnotatedLayerFeature): globalAndroid.view.View;
					public getViewAnnotationOptions(it: globalAndroid.view.View): com.mapbox.maps.ViewAnnotationOptions;
					public addViewAnnotation(it: globalAndroid.view.View, element_iv: com.mapbox.maps.ViewAnnotationOptions): void;
					public cameraForAnnotations(annota_e81: java.util.List<any>, edgeInsets: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double): com.mapbox.maps.CameraOptions;
					public cameraForAnnotations(annota_e81: java.util.List<any>, edgeInsets: com.mapbox.maps.EdgeInsets, bearing: java.lang.Double, pitch: java.lang.Double, result: any): void;
					public removeViewAnnotation(param0: globalAndroid.view.View): boolean;
					public onViewAnnotationPositionsUpdate(param0: java.util.List<com.mapbox.maps.ViewAnnotationPositionDescriptor>): void;
					public getViewUpdatedListenerSet$maps_sdk_release(): java.util.concurrent.CopyOnWriteArraySet<com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener>;
					public setViewAnnotationUpdateMode(mode: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode): void;
					public updateViewAnnotation(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationOptions): boolean;
					public addOnViewAnnotationUpdatedListener(listener: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
					public addViewAnnotation(param0: globalAndroid.view.View, param1: com.mapbox.maps.ViewAnnotationOptions): void;
					public cameraForAnnotations(param0: java.util.List<any>, param1: com.mapbox.maps.EdgeInsets, param2: java.lang.Double, param3: java.lang.Double, param4: any): void;
					public removeAllViewAnnotations(): void;
					public updateViewAnnotation(it: globalAndroid.view.View, i_f_ge_9f1: com.mapbox.maps.ViewAnnotationOptions): boolean;
					public getViewAnnotation(param0: com.mapbox.maps.AnnotatedLayerFeature): globalAndroid.view.View;
					public getViewAnnotationOptions(param0: com.mapbox.maps.AnnotatedLayerFeature): com.mapbox.maps.ViewAnnotationOptions;
					public removeOnViewAnnotationUpdatedListener(listener: com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener): void;
					public onDelegatingViewAnnotationPositionsUpdate(this_: java.util.List<com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor>): void;
					public addViewAnnotation(resId: number, options: com.mapbox.maps.ViewAnnotationOptions, asyncI_b88: androidx.asynclayoutinflater.view.AsyncLayoutInflater, asyncI_74d: any): void;
				}
				export namespace ViewAnnotationManagerImpl {
					export namespace ViewAnnotationManagerImpl {
						export namespace Companion {
							function needToReorderZ$maps_sdk_release(update_34c: java.util.List<com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor>, remove_d2b: java.util.List<com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor>): boolean;
							function needToReorderZ$maps_sdk_release(update_34c: java.util.List<com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor>, remove_d2b: java.util.List<com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor>): boolean;
						}
					}
					export class ViewAnnotation extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.viewannotation.ViewAnnotationManagerImpl.ViewAnnotation>;
						public equals(other: any): boolean;
						public component1(): globalAndroid.view.View;
						public component2(): globalAndroid.view.ViewGroup.LayoutParams;
						public setHandleVisibilityAutomatically(handle_630: boolean): void;
						public getMeasuredWidth(): number;
						public getAttachStateListener(): globalAndroid.view.View.OnAttachStateChangeListener;
						public hashCode(): number;
						public component6(): number;
						public setPositionDescriptor(positi_e6f: com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor): void;
						public setAttachStateListener(attach_f7d: globalAndroid.view.View.OnAttachStateChangeListener): void;
						public component8(): com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor;
						public isVisible(): boolean;
						public getViewLayoutParams(): globalAndroid.view.ViewGroup.LayoutParams;
						public setMeasuredWidth(measur_b6b: number): void;
						public component3(): globalAndroid.view.View.OnAttachStateChangeListener;
						public getVisibility(): com.mapbox.maps.viewannotation.ViewAnnotationVisibility;
						public getId(): string;
						public component10(): string;
						public constructor(view: globalAndroid.view.View, viewLa_394: globalAndroid.view.ViewGroup.LayoutParams, attach_f7d: globalAndroid.view.View.OnAttachStateChangeListener, handle_630: boolean, visibility: com.mapbox.maps.viewannotation.ViewAnnotationVisibility, measur_b6b: number, measur_7c6: number, positi_e6f: com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor, isPosi_9ab: boolean, id: string);
						public setViewLayoutParams(viewLa_394: globalAndroid.view.ViewGroup.LayoutParams): void;
						public component4(): boolean;
						public component5(): com.mapbox.maps.viewannotation.ViewAnnotationVisibility;
						public setMeasuredHeight(measur_7c6: number): void;
						public setVisibility(visibility: com.mapbox.maps.viewannotation.ViewAnnotationVisibility): void;
						public getMeasuredHeight(): number;
						public getHandleVisibilityAutomatically(): boolean;
						public toString(): string;
						public getPositionDescriptor(): com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor;
						public copy(view: globalAndroid.view.View, viewLa_394: globalAndroid.view.ViewGroup.LayoutParams, attach_f7d: globalAndroid.view.View.OnAttachStateChangeListener, handle_630: boolean, visibility: com.mapbox.maps.viewannotation.ViewAnnotationVisibility, measur_b6b: number, measur_7c6: number, positi_e6f: com.mapbox.maps.DelegatingViewAnnotationPositionDescriptor, isPosi_9ab: boolean, id: string): com.mapbox.maps.viewannotation.ViewAnnotationManagerImpl.ViewAnnotation;
						public getView(): globalAndroid.view.View;
						public component9(): boolean;
						public setPositioned(positioned: boolean): void;
						public isPositioned(): boolean;
						public component7(): number;
					}
					export class WhenMappings extends java.lang.Object {
						public static class: java.lang.Class<com.mapbox.maps.viewannotation.ViewAnnotationManagerImpl.WhenMappings>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace viewannotation {
				export class ViewAnnotationUpdateMode extends java.lang.Object {
					public static class: java.lang.Class<com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode>;
					public static MAP_FIXED_DELAY: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode;
					public static MAP_SYNCHRONIZED: com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode;
					public toString(): string;
					public equals(other: any): boolean;
					public hashCode(): number;
				}
				export namespace ViewAnnotationUpdateMode {
					export namespace ViewAnnotationUpdateMode {
						export namespace Companion {
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace maps {
			export namespace viewannotation {
				export class ViewAnnotationVisibility {
					public static class: java.lang.Class<com.mapbox.maps.viewannotation.ViewAnnotationVisibility>;
					public static INITIAL: com.mapbox.maps.viewannotation.ViewAnnotationVisibility;
					public static VISIBLE_AND_NOT_POSITIONED: com.mapbox.maps.viewannotation.ViewAnnotationVisibility;
					public static VISIBLE_AND_POSITIONED: com.mapbox.maps.viewannotation.ViewAnnotationVisibility;
					public static INVISIBLE: com.mapbox.maps.viewannotation.ViewAnnotationVisibility;
					public static valueOf(value: string): com.mapbox.maps.viewannotation.ViewAnnotationVisibility;
					public static values(): androidNative.Array<com.mapbox.maps.viewannotation.ViewAnnotationVisibility>;
					public static valueOf(enumClass: java.lang.Class<any>, name: string): java.lang.Enum<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace module {
			export class Mapbox_LibraryLoaderModuleConfiguration extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.module.Mapbox_LibraryLoaderModuleConfiguration>;
				public static INSTANCE: com.mapbox.module.Mapbox_LibraryLoaderModuleConfiguration;
				public static getEnableConfiguration(): boolean;
				public static getImplClass(): java.lang.Class<com.mapbox.common.loader.MapboxLibraryLoader>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace module {
			export class Mapbox_LoggerModuleConfiguration extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.module.Mapbox_LoggerModuleConfiguration>;
				public static INSTANCE: com.mapbox.module.Mapbox_LoggerModuleConfiguration;
				public static getEnableConfiguration(): boolean;
				public static getImplClass(): java.lang.Class<com.mapbox.common.logger.MapboxLogger>;
			}
		}
	}
}

declare namespace com {
	export namespace mapbox {
		export namespace module {
			export class Mapbox_MapTelemetryModuleConfiguration extends java.lang.Object {
				public static class: java.lang.Class<com.mapbox.module.Mapbox_MapTelemetryModuleConfiguration>;
				public static INSTANCE: com.mapbox.module.Mapbox_MapTelemetryModuleConfiguration;
				public static getEnableConfiguration(): boolean;
				public static getImplClass(): java.lang.Class<com.mapbox.maps.module.telemetry.MapTelemetryImpl>;
			}
		}
	}
}

//Generics information:
//com.mapbox.android.gestures.BaseGesture:1
//com.mapbox.android.gestures.MultiFingerGesture:1
//com.mapbox.android.gestures.ProgressiveGesture:1
//com.mapbox.bindgen.Expected:2
//com.mapbox.bindgen.Expected.Action:1
//com.mapbox.bindgen.Expected.Transformer:2
//com.mapbox.common.BaseMapboxInitializer:1
//com.mapbox.common.location.FailedTask:1
//com.mapbox.common.location.LocationUpdatesReceiver.CircularArray:1
//com.mapbox.geojson.BaseCoordinatesTypeAdapter:1
//com.mapbox.geojson.BaseGeometryTypeAdapter:2
//com.mapbox.geojson.CoordinateContainer:1
//com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory:1
//com.mapbox.maps.ClickInteraction:1
//com.mapbox.maps.DragInteraction:1
//com.mapbox.maps.LongClickInteraction:1
//com.mapbox.maps.extension.style.layers.properties.PropertyValue:1
//com.mapbox.maps.interactions.FeatureStateCallback:1
//com.mapbox.maps.interactions.FeatureStateKey:1
//com.mapbox.maps.interactions.FeaturesetFeature:1
//com.mapbox.maps.interactions.QueryRenderedFeaturesetFeaturesCallback:1
//com.mapbox.maps.interactions.TypedFeaturesetDescriptor:2
//com.mapbox.maps.module.telemetry.PerformanceEvent.PerformanceAttribute:1
//com.mapbox.maps.plugin.animation.CameraAnimatorChangeListener:1
//com.mapbox.maps.plugin.animation.CameraAnimatorNullableChangeListener:1
//com.mapbox.maps.plugin.animation.CameraAnimatorOptions:1
//com.mapbox.maps.plugin.animation.CameraAnimatorOptions.Builder:1
//com.mapbox.maps.plugin.animation.animator.CameraAnimator:1
//com.mapbox.maps.plugin.animation.animator.CameraTypeEvaluator:1
//com.mapbox.maps.plugin.annotation.Annotation:1
//com.mapbox.maps.plugin.annotation.AnnotationManager:7
//com.mapbox.maps.plugin.annotation.AnnotationManagerImpl:8
//com.mapbox.maps.plugin.annotation.AnnotationOptions:2
//com.mapbox.maps.plugin.annotation.OnAnnotationClickListener:1
//com.mapbox.maps.plugin.annotation.OnAnnotationDragListener:1
//com.mapbox.maps.plugin.annotation.OnAnnotationInteractionListener:1
//com.mapbox.maps.plugin.annotation.OnAnnotationLongClickListener:1
//com.mapbox.maps.plugin.annotation.QueryAnnotationCallback:1
//com.mapbox.maps.plugin.locationcomponent.animators.PuckAnimator:1

